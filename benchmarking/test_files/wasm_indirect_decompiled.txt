export memory memory(initial: 17, max: 0);

global stack_pointer:int = 1048576;
global GOT_data_internal_memory_base:int = 0;

table T_a:funcref(min: 283, max: 0);

data rodata(offset: 1048576) =
  "-+   0X0x\00-0X+0X 0X-0x+0x 0x\00cannot parse partitions\00cannot pars"
  "e segment header\00cannot parse filter header\00cannot parse picture h"
  "eader\00nan\00bad partition length\00inf\00Bad code word\00Frame setup"
  " failed\00VP8X\00NAN\00OK\00INF\00RIFF\00Incorrect keyframe parameters"
  ".\00Truncated header.\00no memory during frame initialization.\00Not a"
  " key frame.\00Frame not displayable.\00Alpha decoder initialization fa"
  "iled.\00thread initialization failed.\00Could not decode alpha data.\00"
  "(null)\00null VP8Io passed to VP8GetHeaders()\00P7\0aWIDTH %u\0aHEIGHT"
  " %u\0aDEPTH 4\0aMAXVAL 255\0aTUPLTYPE RGB_ALPHA\0aENDHDR\0a\00P6\0a%u "
  "%u\0a255\0a\00Support for formatting long double values is currently d"
  "isabled.\0aTo enable it, add -lc-printscan-long-double to the link com"
  "mand.\0a\00\03\04\03\04\04\02\02\04\04\04\02\01\01\08\07\06\04\04\02\02"
  "\02\01\01\01\01\00\02\08\00\00\00\00\00\00\00\00\00\00\04\00\08\00\0c\00"
  "\80\00\84\00\88\00\8c\00\00\01\04\01\08\01\0c\01\80\01\84\01\88\01\8c\01"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\b0\f6\ff\ff\ff\ff\ff\ff\ff\ff\ff\df\f1\fc\ff"
  "\ff\ff\ff\ff\ff\ff\ff\f9\fd\fd\ff\ff\ff\ff\ff\ff\ff\ff\ff\f4\fc\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ea\fe\fe\ff\ff\ff\ff\ff\ff\ff\ff\fd\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\f6\fe\ff\ff\ff\ff\ff\ff\ff\ff\ef\fd\fe\ff\ff\ff\ff\ff\ff\ff"
  "\ff\fe\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\f8\fe\ff\ff\ff\ff\ff\ff\ff\ff\fb"
  "\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\fd\fe"
  "\ff\ff\ff\ff\ff\ff\ff\ff\fb\fe\fe\ff\ff\ff\ff\ff\ff\ff\ff\fe\ff\fe\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\fe\fd\ff\fe\ff\ff\ff\ff\ff\ff\fa\ff\fe\ff\fe\ff\ff"
  "\ff\ff\ff\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\d9\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\e1\fc\f1\fd\ff\ff\fe\ff\ff\ff\ff\ea\fa"
  "\f1\fa\fd\ff\fd\fe\ff\ff\ff\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\df\fe\fe\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ee\fd\fe\fe\ff\ff\ff\ff\ff\ff\ff\ff\f8\fe\ff\ff\ff"
  "\ff\ff\ff\ff\ff\f9\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\fd\ff\ff\ff\ff\ff\ff\ff\ff\ff\f7\fe\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\fd\fe\ff\ff\ff\ff\ff\ff\ff\ff\fc"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\fe\fe"
  "\ff\ff\ff\ff\ff\ff\ff\ff\fd\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\fe\fd\ff\ff\ff\ff\ff\ff\ff\ff\fa\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ba\fb\fa\ff\ff\ff\ff\ff\ff\ff\ff\ea\fb\f4\fe\ff\ff\ff\ff\ff\ff\ff\fb\fb"
  "\f3\fd\fe\ff\fe\ff\ff\ff\ff\ff\fd\fe\ff\ff\ff\ff\ff\ff\ff\ff\ec\fd\fe\ff"
  "\ff\ff\ff\ff\ff\ff\ff\fb\fd\fd\fe\fe\ff\ff\ff\ff\ff\ff\ff\fe\fe\ff\ff\ff"
  "\ff\ff\ff\ff\ff\fe\fe\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\fe\fe\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\fe"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\f8\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\fa\fe\fc\fe\ff\ff\ff\ff\ff\ff\ff\f8\fe"
  "\f9\fd\ff\ff\ff\ff\ff\ff\ff\ff\fd\fd\ff\ff\ff\ff\ff\ff\ff\ff\f6\fd\fd\ff"
  "\ff\ff\ff\ff\ff\ff\ff\fc\fe\fb\fe\fe\ff\ff\ff\ff\ff\ff\ff\fe\fc\ff\ff\ff"
  "\ff\ff\ff\ff\ff\f8\fe\fd\ff\ff\ff\ff\ff\ff\ff\ff\fd\ff\fe\fe\ff\ff\ff\ff"
  "\ff\ff\ff\ff\fb\fe\ff\ff\ff\ff\ff\ff\ff\ff\f5\fb\fe\ff\ff\ff\ff\ff\ff\ff"
  "\ff\fd\fd\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\fb\fd\ff\ff\ff\ff\ff\ff\ff\ff\fc"
  "\fd\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\fc\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\f9\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\fe\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\fd\ff\ff\ff\ff\ff\ff\ff\ff\fa\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\fe\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\fd\88\fe\ff\e4\db\80\80\80\80\80\bd\81\f2\ff"
  "\e3\d5\ff\db\80\80\80j~\e3\fc\d6\d1\ff\ff\80\80\80\01b\f8\ff\ec\e2\ff\ff"
  "\80\80\80\b5\85\ee\fe\dd\ea\ff\9a\80\80\80N\86\ca\f7\c6\b4\ff\db\80\80"
  "\80\01\b9\f9\ff\f3\ff\80\80\80\80\80\b8\96\f7\ff\ec\e0\80\80\80\80\80M"
  "n\d8\ff\ec\e6\80\80\80\80\80\01e\fb\ff\f1\ff\80\80\80\80\80\aa\8b\f1\fc"
  "\ec\d1\ff\ff\80\80\80%t\c4\f3\e4\ff\ff\ff\80\80\80\01\cc\fe\ff\f5\ff\80"
  "\80\80\80\80\cf\a0\fa\ff\ee\80\80\80\80\80\80fg\e7\ff\d3\ab\80\80\80\80"
  "\80\01\98\fc\ff\f0\ff\80\80\80\80\80\b1\87\f3\ff\ea\e1\80\80\80\80\80P"
  "\81\d3\ff\c2\e0\80\80\80\80\80\01\01\ff\80\80\80\80\80\80\80\80\f6\01\ff"
  "\80\80\80\80\80\80\80\80\ff\80\80\80\80\80\80\80\80\80\80\c6#\ed\df\c1"
  "\bb\a2\a0\91\9b>\83-\c6\dd\ac\b0\dc\9d\fc\dd\01D/\92\d0\95\a7\dd\a2\ff"
  "\df\80\01\95\f1\ff\dd\e0\ff\ff\80\80\80\b8\8d\ea\fd\de\dc\ff\c7\80\80\80"
  "Qc\b5\f2\b0\be\f9\ca\ff\ff\80\01\81\e8\fd\d6\c5\f2\c4\ff\ff\80cy\d2\fa"
  "\c9\c6\ff\ca\80\80\80\17[\a3\f2\aa\bb\f7\d2\ff\ff\80\01\c8\f6\ff\ea\ff"
  "\80\80\80\80\80m\b2\f1\ff\e7\f5\ff\ff\80\80\80,\82\c9\fd\cd\c0\ff\ff\80"
  "\80\80\01\84\ef\fb\db\d1\ff\a5\80\80\80^\88\e1\fb\da\be\ff\ff\80\80\80"
  "\16d\ae\f5\ba\a1\ff\c7\80\80\80\01\b6\f9\ff\e8\eb\80\80\80\80\80|\8f\f1"
  "\ff\e3\ea\80\80\80\80\80#M\b5\fb\c1\d3\ff\cd\80\80\80\01\9d\f7\ff\ec\e7"
  "\ff\ff\80\80\80y\8d\eb\ff\e1\e3\ff\ff\80\80\80-c\bc\fb\c3\d9\ff\e0\80\80"
  "\80\01\01\fb\ff\d5\ff\80\80\80\80\80\cb\01\f8\ff\ff\80\80\80\80\80\80\89"
  "\01\b1\ff\e0\ff\80\80\80\80\80\fd\09\f8\fb\cf\d0\ff\c0\80\80\80\af\0d\e0"
  "\f3\c1\b9\f9\c6\ff\ff\80I\11\ab\dd\a1\b3\ec\a7\ff\ea\80\01_\f7\fd\d4\b7"
  "\ff\ff\80\80\80\efZ\f4\fa\d3\d1\ff\ff\80\80\80\9bM\c3\f8\bc\c3\ff\ff\80"
  "\80\80\01\18\ef\fb\da\db\ff\cd\80\80\80\c93\db\ff\c4\ba\80\80\80\80\80"
  "E.\be\ef\c9\da\ff\e4\80\80\80\01\bf\fb\ff\ff\80\80\80\80\80\80\df\a5\f9"
  "\ff\d5\ff\80\80\80\80\80\8d|\f8\ff\ff\80\80\80\80\80\80\01\10\f8\ff\ff"
  "\80\80\80\80\80\80\be$\e6\ff\ec\ff\80\80\80\80\80\95\01\ff\80\80\80\80"
  "\80\80\80\80\01\e2\ff\80\80\80\80\80\80\80\80\f7\c0\ff\80\80\80\80\80\80"
  "\80\80\f0\80\ff\80\80\80\80\80\80\80\80\01\86\fc\ff\ff\80\80\80\80\80\80"
  "\d5>\fa\ff\ff\80\80\80\80\80\807]\ff\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\ca\18\d5\eb\ba\bf\dc\a0\f0\af\ff~&\b6\e8\a9\b8\e4\ae\ff"
  "\bb\80=.\8a\db\97\b2\f0\aa\ff\d8\80\01p\e6\fa\c7\bf\f7\9f\ff\ff\80\a6m"
  "\e4\fc\d3\d7\ff\ae\80\80\80'M\a2\e8\ac\b4\f5\b2\ff\ff\80\014\dc\f6\c6\c7"
  "\f9\dc\ff\ff\80|J\bf\f3\b7\c1\fa\dd\ff\ff\80\18G\82\db\9a\aa\f3\b6\ff\ff"
  "\80\01\b6\e1\f9\db\f0\ff\e0\80\80\80\95\96\e2\fc\d8\cd\ff\ab\80\80\80\1c"
  "l\aa\f2\b7\c2\fe\df\ff\ff\80\01Q\e6\fc\cc\cb\ff\c0\80\80\80{f\d1\f7\bc"
  "\c4\ff\e9\80\80\80\14_\99\f3\a4\ad\ff\cb\80\80\80\01\de\f8\ff\d8\d5\80"
  "\80\80\80\80\a8\af\f6\fc\eb\cd\ff\ff\80\80\80/t\d7\ff\d3\d4\ff\ff\80\80"
  "\80\01y\ec\fd\d4\d6\ff\ff\80\80\80\8dT\d5\fc\c9\ca\ff\db\80\80\80*P\a0"
  "\f0\a2\b9\ff\cd\80\80\80\01\01\ff\80\80\80\80\80\80\80\80\f4\01\ff\80\80"
  "\80\80\80\80\80\80\ee\01\ff\80\80\80\80\80\80\80\80\e7x0Ysqx\98p\98\b3"
  "@~\aav.F_\afE\8fPURH\9bg8:\0a\ab\da\bd\11\0d\98r\1a\11\a3,\c3\15\0a\ad"
  "y\18P\c3\1a>,@U\90G\0a&\ab\d5\90"\1a\aa.7\13\88\a0!\ceG?\14\08rr\d0\0c"
  "\09\e2Q(\0b`\b6T\1d\10$\86\b7Y\89bej\a5\94H\bbd\82\9do KPBf\a7cJ>(\ea\80"
  ")5\09\b2\f1\8d\1a\08kJ+\1a\92I\a61\17\9dA&i\a034\1fs\80hO\0c\1b\d9\ffW"
  "\11\07WDG,r3\0f\ba\17/)\0en\b6\b7\15\11\c2B-\19f\c5\bd\17\12\16XX\93\96"
  "*.-\c4\cd+a\b7uU&#\b3='5\c8W\1a\15+\e8\ab8"3hrf\1d]M'\1cU\ab:\a5Zb@"\16"
  "t\ce\17"+\a6Ik6 \1a3\01Q+\1fD\19j\16@\ab$\e1r"\13\15f\84\bc\10L|>\12N_"
  "U9203\c1e#\9f\d7oY.o<\94\1f\ac\db\e4\15\12opqMU\b3\ff&xr(*\01\c4\f5\d1"
  "\0a\19mX+\1d\8c\a6\d5%+\9a=?\1e\9bC-D\01\d1dP\08+\9a\013\1aG\8eNN\10\ff"
  "\80"\c5\ab)(\05f\d3\b7\04\01\dd32\11\a8\d1\c0\17\19R\8a\1f$\ab\1b\a6&,"
  "\e5CW:\a9Rs\1a;\b3?;Z\b4;\a6]I\9a((\15t\8f\d1"'\af/\0f\10\b7"\df1-\b7."
  "\11!\b7\06b\0f \b79.\16\18\80\016\11%A Is\1c\80\17\80\cd(\03\09s3\c0\12"
  "\06\dfW%\09s;M@\15/h7,\da\0965\82\e2@ZF\cd()\17\1a969p\b8\05)&\a6\d5\1e"
  ""\1a\85\98t\0a \86'\135\dd\1ar I\ff\1f\09A\ea\02\0f\01vIK \0c3\c0\ff\a0"
  "+3X\1f#CfU7\baU8\15\17o;\cd-%\c07&F|If\01"b}b*XhUu\afR_T5Y\80dqe-KO{/3"
  "\80Q\ab\019\11\05Gf95)1&!\0dy9I\1a\01U)\0aC\8aMnZ/rs\15\02\0af\ff\a6\17"
  "\06e\1d\10\0aU\80e\c4\1a9\12\0aff\d5"\14+u\14\0f$\a3\80D\01\1af=G%"5\1f"
  "\f3\c0E<G&Iw\1c\de%D-\80"\01/\0b\f5\ab>\11\13F\92U7>F%+%\9ad\a3U\a0\01"
  "?\09\\88\1c@ \c9UK\0f\09\09@\ff\b8w\10V\06\1c\05@\ff\19\f8\018\08\11\84"
  "\89\ff7t\80:\0f\14R\879\1ay(\a42\1f\89\9a\85\19#\da3g,\83\83{\1f\06\9e"
  "V(@\87\94\e0-\b7\80\16\1a\11\83\f0\9a\0e\01\d1-\10\15[@\de\07\01\c58\15"
  "'\9b<\8a\17f\d5S\0c\0d6\c0\ffD/\1cU\1aUU\80\80 \92\ab\12\0b\07?\90\ab\04"
  "\04\f6#\1b\0a\92\ae\ab\0c\1a\80\beP#c\b4P~6-U~/W\b03)\14 eK\80\8bv\92t"
  "\80U8)\0f\b0\ecU%\09>G\1e\11wv\ff\11\12\8ae&<\8a7F+\1a\8e\92$\13\1e\ab"
  "\ffa\1b\14\8a-=>\db\01Q\bc@ )\14u\97\8e\14\15\a3p\13\0c=\c3\800\04\18\00"
  "\00\00\00\00\00\00\00\00\00\00\00\04\05\06\07\08\09\0a\0a\0b\0c\0d\0e\0f"
  "\10\11\11\12\13\14\14\15\15\16\16\17\17\18\19\19\1a\1b\1c\1d\1e\1f !"#"
  "$%%&'()*+,-../0123456789:;<=>?@ABCDEFGHIJKLLMNOPQRSTUVWXY[]_`bdefhjlnp"
  "rtvz|~\80\82\84\86\88\8a\8c\8f\91\94\97\9a\9d\04\00\05\00\06\00\07\00\08"
  "\00\09\00\0a\00\0b\00\0c\00\0d\00\0e\00\0f\00\10\00\11\00\12\00\13\00\14"
  "\00\15\00\16\00\17\00\18\00\19\00\1a\00\1b\00\1c\00\1d\00\1e\00\1f\00 "
  "\00!\00"\00#\00$\00%\00&\00'\00(\00)\00*\00+\00,\00-\00.\00/\000\001\00"
  "2\003\004\005\006\007\008\009\00:\00<\00>\00@\00B\00D\00F\00H\00J\00L\00"
  "N\00P\00R\00T\00V\00X\00Z\00\\00^\00`\00b\00d\00f\00h\00j\00l\00n\00p\00"
  "r\00t\00w\00z\00}\00\80\00\83\00\86\00\89\00\8c\00\8f\00\92\00\95\00\98"
  "\00\9b\00\9e\00\a1\00\a4\00\a7\00\aa\00\ad\00\b1\00\b5\00\b9\00\bd\00\c1"
  "\00\c5\00\c9\00\cd\00\d1\00\d5\00\d9\00\dd\00\e1\00\e5\00\ea\00\ef\00\f5"
  "\00\f9\00\fe\00\03\01\08\01\0d\01\12\01\17\01\1c\01\00\01\04\08\05\02\03"
  "\06\09\0c\0d\0a\07\0b\0e\0fp\10\10\00t\10\10\00y\10\10\00\7f\10\10\00\ad"
  "\94\8c\00\b0\9b\8c\87\00\b4\9d\8d\86\82\00\fe\fe\f3\e6\c4\b1\99\8c\85\82"
  "\81\00\00\18\01\00\01\00\01\00\01(\00\00\00\00\00\00\00\00\00\00\00\8a"
  "\0b\8c\0b\8e\0b\92\0b\9a\0b\aa\0b\ca\0b\0a\0c\8c\0c\8c\0d\8c\0f\8c\13\00"
  "\00\00\00\00\00\00\00\11\12\00\01\02\03\04\05\10\06\07\08\09\0a\0b\0c\0d"
  "\0e\0f\02\03\07\03\03\0b\00\00\00\00\00\00\00\18\07\17\19(\06')\16\1a&"
  "*8\0579\15\1b6:%+H\04GI\14\1c5;FJ$,XEK4<\03WY\13\1dVZ#-DLU[3=h\02gi\12"
  "\1efj".T\CMek2>x\01wyS]\11\1fdlBNvz!/u{1?cmR^\00t|AO\10 bn0s}Q_@r~aoPq"
  "\7f`p\00\00\00\00\00\00\00\00\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\81\82\83\84\85\86\87\88\89"
  "\8a\8b\8c\8d\8e\8f\90\91\92\93\94\95\96\97\98\99\9a\9b\9c\9d\9e\9f\a0\a1"
  "\a2\a3\a4\a5\a6\a7\a8\a9\aa\ab\ac\ad\ae\af\b0\b1\b2\b3\b4\b5\b6\b7\b8\b9"
  "\ba\bb\bc\bd\be\bf\c0\c1\c2\c3\c4\c5\c6\c7\c8\c9\ca\cb\cc\cd\ce\cf\d0\d1"
  "\d2\d3\d4\d5\d6\d7\d8\d9\da\db\dc\dd\de\df\e0\e1\e2\e3\e4\e5\e6\e7\e8\e9"
  "\ea\eb\ec\ed\ee\ef\f0\f1\f2\f3\f4\f5\f6\f7\f8\f9\fa\fb\fc\fd\fe\ff\00\01"
  "\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19"
  "\1a\1b\1c\1d\1e\1f !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRS"
  "TUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f"
  "\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\7f\00\00\00\00"
  "\\15\10\00\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f0\f1\f2\f3\f4\f5\f6\f7\f8\f9\fa\fb\fc\fd\fe\ff\00\01\02\03"
  "\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f"
  "\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f"
  "\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f"
  "\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f"
  "\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\0f\00\00\00\00\d0\19\10\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\02\03\04"
  "\05\06\07\08\09\0a\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c"
  "\1d\1e\1f !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\"
  "]^_`abcdefghijklmnopqrstuvwxyz{|}~\7f\80\81\82\83\84\85\86\87\88\89\8a"
  "\8b\8c\8d\8e\8f\90\91\92\93\94\95\96\97\98\99\9a\9b\9c\9d\9e\9f\a0\a1\a2"
  "\a3\a4\a5\a6\a7\a8\a9\aa\ab\ac\ad\ae\af\b0\b1\b2\b3\b4\b5\b6\b7\b8\b9\ba"
  "\bb\bc\bd\be\bf\c0\c1\c2\c3\c4\c5\c6\c7\c8\c9\ca\cb\cc\cd\ce\cf\d0\d1\d2"
  "\d3\d4\d5\d6\d7\d8\d9\da\db\dc\dd\de\df\e0\e1\e2\e3\e4\e5\e6\e7\e8\e9\ea"
  "\eb\ec\ed\ee\ef\f0\f1\f2\f3\f4\f5\f6\f7\f8\f9\fa\fb\fc\fd\fe\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\00O\1b\10\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\ff\fe\fd\fc\fb\fa\f9\f8\f7\f6\f5\f4\f3\f2\f1\f0\ef\ee"
  "\ed\ec\eb\ea\e9\e8\e7\e6\e5\e4\e3\e2\e1\e0\df\de\dd\dc\db\da\d9\d8\d7\d6"
  "\d5\d4\d3\d2\d1\d0\cf\ce\cd\cc\cb\ca\c9\c8\c7\c6\c5\c4\c3\c2\c1\c0\bf\be"
  "\bd\bc\bb\ba\b9\b8\b7\b6\b5\b4\b3\b2\b1\b0\af\ae\ad\ac\ab\aa\a9\a8\a7\a6"
  "\a5\a4\a3\a2\a1\a0\9f\9e\9d\9c\9b\9a\99\98\97\96\95\94\93\92\91\90\8f\8e"
  "\8d\8c\8b\8a\89\88\87\86\85\84\83\82\81\80\7f~}|{zyxwvutsrqponmlkjihgf"
  "edcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$#"! "
  "\1f\1e\1d\1c\1b\1a\19\18\17\16\15\14\13\12\11\10\0f\0e\0d\0c\0b\0a\09\08"
  "\07\06\05\04\03\02\01\00\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f\10"
  "\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !"#$%&'()*+,-./012345678"
  "9:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  "\7f\80\81\82\83\84\85\86\87\88\89\8a\8b\8c\8d\8e\8f\90\91\92\93\94\95\96"
  "\97\98\99\9a\9b\9c\9d\9e\9f\a0\a1\a2\a3\a4\a5\a6\a7\a8\a9\aa\ab\ac\ad\ae"
  "\af\b0\b1\b2\b3\b4\b5\b6\b7\b8\b9\ba\bb\bc\bd\be\bf\c0\c1\c2\c3\c4\c5\c6"
  "\c7\c8\c9\ca\cb\cc\cd\ce\cf\d0\d1\d2\d3\d4\d5\d6\d7\d8\d9\da\db\dc\dd\de"
  "\df\e0\e1\e2\e3\e4\e5\e6\e7\e8\e9\ea\eb\ec\ed\ee\ef\f0\f1\f2\f3\f4\f5\f6"
  "\f7\f8\f9\fa\fb\fc\fd\fe\ff\00_\1e\10\00\90,\10\00\94,\10\00\98,\10\00"
  "\9c,\10\00\a0,\10\00\a4,\10\00\a8,\10\00\ac,\10\00\b0,\10\00\b4,\10\00"
  "\b8,\10\00\bc,\10\00\c0,\10\00\c4,\10\00\90,\10\00\90,\10\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\07\06\06\05\05\05\05\04\04\04\04\04\04\04\04\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\02\02\02\02\02"
  "\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\01"
  "\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01"
  "\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01"
  "\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\7f\7f\bf\7f\9f\bf\df\7f"
  "\8f\9f\af\bf\cf\df\ef\7f\87\8f\97\9f\a7\af\b7\bf\c7\cf\d7\df\e7\ef\f7\7f"
  "\83\87\8b\8f\93\97\9b\9f\a3\a7\ab\af\b3\b7\bb\bf\c3\c7\cb\cf\d3\d7\db\df"
  "\e3\e7\eb\ef\f3\f7\fb\7f\81\83\85\87\89\8b\8d\8f\91\93\95\97\99\9b\9d\9f"
  "\a1\a3\a5\a7\a9\ab\ad\af\b1\b3\b5\b7\b9\bb\bd\bf\c1\c3\c5\c7\c9\cb\cd\cf"
  "\d1\d3\d5\d7\d9\db\dd\df\e1\e3\e5\e7\e9\eb\ed\ef\f1\f3\f5\f7\f9\fb\fd\7f"
  "\00\00\00\00\01\00\00\00\03\00\00\00\07\00\00\00\0f\00\00\00\1f\00\00\00"
  "?\00\00\00\7f\00\00\00\ff\00\00\00\ff\01\00\00\ff\03\00\00\ff\07\00\00"
  "\ff\0f\00\00\ff\1f\00\00\ff?\00\00\ff\7f\00\00\ff\ff\00\00\ff\ff\01\00"
  "\ff\ff\03\00\ff\ff\07\00\ff\ff\0f\00\ff\ff\1f\00\ff\ff?\00\ff\ff\7f\00"
  "\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\000R\e1\0d\86\18\b3\03\cb"
  "\ac_wjb\88\1cU\8h(\b8\b3\14\f8\fe\85JK\b8\ddI\97\f3\fcd\89\02U\\00\00)"
  "J\da\c1~\0d\ab\b7@Y}W\92Tr\ca\19Ni\8c\d38e\ee\01\0c_u\a12R\f67T2,\bbZ\b1"
  "W\aa\0f\e73\f5s\da\ee_h\e2\cccu\83\0e\99n\ed\a70G\c6\d9\c0O<\15kI\fa\03"
  "\14O\0c\fb\1aT2\0b\99s\1c\cb\d7&\067\cco\d8w\bb,*/vu\dd\cc%daT\b3$\15\87"
  "}\0a\a8\14\04"g\bf\1e\14\83\15\b4V\e3\02\e5so\b1\caDBM&(\fb\ae\bas\ed\eb"
  "P\0a\fb\b6j\1d\0b\d4:\0dh;\db5\83\1e\08+\95k\cew\f0\e5\81Q\bc;\85x\94\94"
  "\9f\00<\ed\e5'Success\00Illegal byte sequence\00Domain error\00Result "
  "not representable\00Not a tty\00Permission denied\00Operation not perm"
  "itted\00No such file or directory\00No such process\00File exists\00Va"
  "lue too large for data type\00No space left on device\00Out of memory\00"
  "Resource busy\00Interrupted system call\00Resource temporarily unavail"
  "able\00Invalid seek\00Cross-device link\00Read-only file system\00Dire"
  "ctory not empty\00Connection reset by peer\00Operation timed out\00Con"
  "nection refused\00Host is unreachable\00Address in use\00Broken pipe\00"
  "I/O error\00No such device or address\00No such device\00Not a directo"
  "ry\00Is a directory\00Text file busy\00Exec format error\00Invalid arg"
  "ument\00Argument list too long\00Symbolic link loop\00Filename too lon"
  "g\00Too many open files in system\00No file descriptors available\00Ba"
  "d file descriptor\00No child process\00Bad address\00File too large\00"
  "Too many links\00No locks available\00Resource deadlock would occur\00"
  "State not recoverable\00Previous owner died\00Operation canceled\00Fun"
  "ction not implemented\00No message of desired type\00Identifier remove"
  "d\00Link has been severed\00Protocol error\00Bad message\00Not a socke"
  "t\00Destination address required\00Message too large\00Protocol wrong "
  "type for socket\00Protocol not available\00Protocol not supported\00No"
  "t supported\00Address family not supported by protocol\00Address not a"
  "vailable\00Network is down\00Network unreachable\00Connection reset by"
  " network\00Connection aborted\00No buffer space available\00Socket is "
  "connected\00Socket not connected\00Operation already in progress\00Ope"
  "ration in progress\00Stale file handle\00Quota exceeded\00Multihop att"
  "empted\00Capabilities insufficient\00\00\00\00\00\00\00u\02N\00\d6\01\e2"
  "\04\b9\04\18\01\8e\05\ed\02\16\04\f2\00\97\03\01\038\05\af\01\82\01O\03"
  "/\04\1e\00\d4\05\a2\00\12\03\1e\03\c2\01\de\03\08\00\ac\05\00\01d\02\f1"
  "\01e\054\02\8c\02\cf\02-\03L\04\e3\05\9f\02\f8\04\1c\05\08\05\b1\02K\05"
  "\15\02x\00R\02<\03\f1\03\e4\00\c3\03}\04\cc\00\aa\03y\05$\02n\01m\03"\04"
  "\ab\04D\00\fb\01\ae\00\83\03`\00\e5\01\07\04\94\04^\04+\00X\019\01\92\00"
  "\c2\05\9b\01C\02F\01\f6\05\00\00\00\00\00\00\19\00\0a\00\19\19\19\00\00"
  "\00\00\05\00\00\00\00\00\00\09\00\00\00\00\0b\00\00\00\00\00\00\00\00\19"
  "\00\11\0a\19\19\19\03\0a\07\00\01\1b\09\0b\18\00\00\09\06\0b\00\00\0b\00"
  "\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\0e\00\00\00\00\00\00\00\00\19\00\0a\0d\19\19\19\00\0d\00\00\02\00\09\0e"
  "\00\00\00\09\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00"
  "\00\00\00\13\00\00\00\00\09\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00"
  "\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\09\10\00\00\00\00"
  "\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11"
  "\00\00\00\00\09\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\09\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00"
  "\09\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00"
  "\15\00\00\00\00\15\00\00\00\00\09\16\00\00\00\00\00\16\00\00\16\00\000"
  "123456789ABCDEF";
data data(offset: 1059472) =
  "\90*\10\00\94*\10\00!\00\00\00\9c*\10\00\a0*\10\00\a4*\10\00\a8*\10\00"
  "\ac*\10\00\b0*\10\00\b4*\10\00\b8*\10\00\11\01\00\00\12\01\00\00\13\01"
  "\00\00\14\01\00\00\15\01\00\00\16\01\00\00\00\00\00\00\05\00\00\00\00\00"
  "\00\00\00\00\00\00\17\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\18\01\00\00\19\01\00\00P0\10\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\02\00\00\00\00\00\00\00\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00";

import function imported_wasi_snapshot_preview1_fd_close(a:int):int;

import function imported_wasi_snapshot_preview1_fd_seek(a:int, b:long, c:int, d:int):int;

import function imported_wasi_snapshot_preview1_fd_write(a:int, b:int, c:int, d:int):int;

function wasm_call_ctors() {
}

export function initialize() {
  if (eqz((GOT_data_internal_memory_base + 1059664)[0]:int)) goto B_a;
  unreachable;
  unreachable;
  label B_a:
  (GOT_data_internal_memory_base + 1059664)[0]:int = 1;
  wasm_call_ctors();
}

function WebPWritePPMPAM(a:int, b:int, c:int, d:int):int {
  var e:int = stack_pointer;
  var f:int = 80;
  var g:int_ptr = e - f;
  stack_pointer = g;
  g[18] = a;
  g[17] = b;
  g[16] = c;
  g[15] = d;
  var h:int = g[18];
  var i:int = 40;
  var j:int = h + i;
  g[14] = j;
  var k:int_ptr = g[14];
  var l:int = k[1];
  g[13] = l;
  var m:int_ptr = g[14];
  var n:int = m[2];
  g[12] = n;
  var o:int_ptr = g[14];
  var p:int = o[4];
  g[11] = p;
  var q:int_ptr = g[14];
  var r:int = q[5];
  g[10] = r;
  var s:int = g[15];
  var t:int = 4;
  var u:int = 3;
  var v:int = select_if(t, u, s);
  g[9] = v;
  var w:int = 128;
  var x:int = malloc(w);
  g[7] = x;
  var y:int = g[7];
  var z:int = 0;
  var aa:int = y;
  var ba:int = z;
  var ca:int = aa == ba;
  var da:int = 1;
  var ea:int = ca & da;
  if (eqz(ea)) goto B_b;
  var fa:int = 0;
  g[19] = fa;
  goto B_a;
  label B_b:
  var ga:int = g[7];
  var ha:int = 128;
  var ia:int = 0;
  memset(ga, ia, ha);
  var ja:int = g[15];
  if (eqz(ja)) goto B_d;
  var ka:int = g[7];
  var la:int = g[13];
  var ma:int = g[12];
  g[1] = ma;
  g[0] = la;
  var na:int = 1049063;
  var oa:int = 128;
  snprintf(ka, oa, na, g);
  goto B_c;
  label B_d:
  var pa:int = g[7];
  var qa:int = g[13];
  var ra:int = g[12];
  g[5] = ra;
  g[4] = qa;
  var sa:int = 1049131;
  var ta:int = 30;
  var ua:int = 16;
  var va:int = g + ua;
  snprintf(pa, ta, sa, va);
  label B_c:
  var wa:int = g[7];
  var xa:int = strlen(wa);
  g[6] = xa;
  var ya:int = g[12];
  var za:int = g[13];
  var ab:int = ya * za;
  var bb:int = g[9];
  var cb:int = ab * bb;
  var db:int = g[6];
  var eb:int = cb + db;
  var fb:int_ptr = g[16];
  fb[0] = eb;
  var gb:int_ptr = g[16];
  var hb:int = gb[0];
  var ib:int = malloc(hb);
  var jb:int_ptr = g[17];
  jb[0] = ib;
  var kb:int = g[11];
  var lb:int = 0;
  var mb:int = kb;
  var nb:int = lb;
  var ob:int = mb == nb;
  var pb:int = 1;
  var qb:int = ob & pb;
  if (eqz(qb)) goto B_e;
  var rb:int = 0;
  g[19] = rb;
  goto B_a;
  label B_e:
  var sb:int_ptr = g[17];
  var tb:int = sb[0];
  var ub:int = 0;
  var vb:int = tb;
  var wb:int = ub;
  var xb:int = vb == wb;
  var yb:int = 1;
  var zb:int = xb & yb;
  if (eqz(zb)) goto B_f;
  var ac:int = 0;
  g[19] = ac;
  goto B_a;
  label B_f:
  var bc:int_ptr = g[17];
  var cc:int = bc[0];
  var dc:int = g[7];
  var ec:int = g[6];
  memcpy(cc, dc, ec);
  var fc:int = 0;
  g[8] = fc;
  loop L_h {
    var gc:int = g[8];
    var hc:int = g[12];
    var ic:int = gc;
    var jc:int = hc;
    var kc:int = ic < jc;
    var lc:int = 1;
    var mc:int = kc & lc;
    if (eqz(mc)) goto B_g;
    var nc:int_ptr = g[17];
    var oc:int = nc[0];
    var pc:int = g[6];
    var qc:int = g[8];
    var rc:int = g[10];
    var sc:int = qc * rc;
    var tc:int = pc + sc;
    var uc:int = oc + tc;
    var vc:int = g[11];
    var wc:int = g[10];
    memcpy(uc, vc, wc);
    var xc:int = g[10];
    var yc:int = g[11];
    var zc:int = yc + xc;
    g[11] = zc;
    var ad:int = g[8];
    var bd:int = 1;
    var cd:int = ad + bd;
    g[8] = cd;
    continue L_h;
  }
  label B_g:
  var dd:int = g[7];
  free(dd);
  var ed:int = 1;
  g[19] = ed;
  label B_a:
  var fd:int = g[19];
  var gd:int = 80;
  var hd:int = g + gd;
  stack_pointer = hd;
  return fd;
}

export function DecodeWebpImage(a:int, b:int, c:int, d:int, e:int):int {
  var f:int = stack_pointer;
  var g:int = 256;
  var h:int_ptr = f - g;
  stack_pointer = h;
  h[62] = a;
  h[61] = b;
  h[60] = c;
  h[59] = d;
  h[58] = e;
  var i:int = 0;
  h[57] = i;
  var j:int = 24;
  var k:int = h + j;
  var l:int = k;
  var m:int = 40;
  var n:int = l + m;
  h[5] = n;
  var o:int = 24;
  var p:int = h + o;
  var q:int = p;
  h[4] = q;
  var r:int = 24;
  var s:int = h + r;
  var t:int = s;
  var u:int = WebPInitDecoderConfig(t);
  if (u) goto B_b;
  var v:int = -1;
  h[63] = v;
  goto B_a;
  label B_b:
  var w:int_ptr = h[5];
  var x:int = 1;
  w[0] = x;
  var y:int = 0;
  h[3] = y;
  loop L_d {
    var z:int = h[3];
    var aa:int = h[60];
    var ba:int = z;
    var ca:int = aa;
    var da:int = ba < ca;
    var ea:int = 1;
    var fa:int = da & ea;
    if (eqz(fa)) goto B_c;
    var ga:int = h[62];
    var ha:int = h[61];
    var ia:int = 24;
    var ja:int = h + ia;
    var ka:int = ja;
    var la:int = WebPIDecode(ga, ha, ka);
    h[2] = la;
    var ma:int = h[2];
    var na:int = 0;
    var oa:int = ma;
    var pa:int = na;
    var qa:int = oa == pa;
    var ra:int = 1;
    var sa:int = qa & ra;
    if (eqz(sa)) goto B_e;
    var ta:int = -1;
    h[63] = ta;
    goto B_a;
    label B_e:
    var ua:int = h[2];
    var va:int = h[62];
    var wa:int = h[61];
    var xa:int = WebPIUpdate(ua, va, wa);
    h[56] = xa;
    var ya:int = h[2];
    WebPIDelete(ya);
    var za:int = h[3];
    var ab:int = 1;
    var bb:int = za + ab;
    h[3] = bb;
    continue L_d;
  }
  label B_c:
  var cb:int = h[56];
  if (cb) goto B_f;
  var db:int = 1;
  h[57] = db;
  label B_f:
  var eb:int = h[59];
  var fb:int = h[58];
  var gb:int = 24;
  var hb:int = h + gb;
  var ib:int = hb;
  var jb:int = 1;
  var kb:int = WebPWritePPMPAM(ib, eb, fb, jb);
  h[57] = kb;
  var lb:int = h[5];
  WebPFreeDecBuffer(lb);
  var mb:int = h[57];
  var nb:int = 0;
  var ob:int = -1;
  var pb:int = select_if(nb, ob, mb);
  h[63] = pb;
  label B_a:
  var qb:int = h[63];
  var rb:int = 256;
  var sb:int = h + rb;
  stack_pointer = sb;
  return qb;
}

function WebPInitDecoderConfig(a:int):int {
  var b:int = stack_pointer;
  var c:int = 16;
  var d:int_ptr = b - c;
  stack_pointer = d;
  d[3] = a;
  var e:int = d[3];
  var f:int = 521;
  var g:int = WebPInitDecoderConfigInternal(e, f);
  var h:int = 16;
  var i:int = d + h;
  stack_pointer = i;
  return g;
}

function WebPFlipBuffer(a:int_ptr):int {
  var d:int_ptr;
  var h:long;
  var i:int;
  var e:int;
  if (a) goto B_a;
  return 2;
  label B_a:
  var b:int_ptr = a[4];
  var c:int_ptr = a[2];
  if (a[0] > 10) goto B_d;
  a[4] = b + (c + -1) * (d = (c = a + 20)[0]);
  goto B_c;
  label B_d:
  e = 0;
  d = a + 32;
  d[0] = 0 - (d = d[0]);
  var f:int_ptr = a + 36;
  f[0] = 0 - (f = f[0]);
  var g:int_ptr = a + 40;
  g[0] = 0 - (g = g[0]);
  a[4] = b + d * (i = i32_wrap_i64(h = i64_extend_i32_s(c) + -1L));
  b = a + 20;
  b[0] = b[0] + f * (b = i32_wrap_i64(h >> 1L));
  c = a + 24;
  c[0] = c[0] + g * b;
  b = (a + 28)[0]:int;
  if (eqz(b)) goto B_b;
  a[7] = b + (d = (c = a + 44)[0]) * i;
  label B_c:
  e = 0;
  c[0] = 0 - d;
  label B_b:
  return e;
}

function WebPAllocateDecBuffer(a:int_ptr, b:int_ptr, c:int_ptr, d:int_ptr):int {
  var g:int_ptr;
  var h:int_ptr;
  var i:long;
  var j:long;
  var m:int;
  var n:long;
  var l:int;
  var k:long;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  var f:int = 2;
  if (b < 1) goto B_a;
  if (a < 1) goto B_a;
  if (eqz(d)) goto B_a;
  if (eqz(c)) goto B_b;
  if (c[2]) goto B_d;
  g = b;
  h = a;
  goto B_c;
  label B_d:
  if (
    eqz(
      WebPCheckCropDimensions(a, b, c[3] & -2, c[4] & -2, h = c[5], g = c[6]))) goto B_a;
  label B_c:
  if (c[7]) goto B_e;
  b = g;
  a = h;
  goto B_b;
  label B_e:
  e[3] = c[8];
  e[2] = c[9];
  if (
    eqz(WebPRescalerGetScaledDimensions(h, g, e + 12, e + 8))) goto B_a;
  b = e[2];
  a = e[3];
  label B_b:
  d[2] = b;
  d[1] = a;
  if (a < 1) goto B_a;
  if (b < 1) goto B_a;
  g = d[0];
  if (g > 12) goto B_a;
  if (d[3] > 0) goto B_f;
  if (d[20]) goto B_f;
  h = (g + 1049276)[0]:ubyte;
  if (
    i64_extend_i32_u(h) * (i = i64_extend_i32_u(a)) > 2147483647L) goto B_a;
  h = a * h;
  k = i64_extend_i32_s(h) * (j = i64_extend_i32_u(b));
  if (g >= 11) goto B_h;
  l = 0;
  i = 0L;
  j = 0L;
  m = 0;
  goto B_g;
  label B_h:
  i = select_if(i * j, 0L, f = g == 12);
  m = a + 1 >> 1;
  j = i64_extend_i32_u(m) * i64_extend_i32_u(b + 1 >> 1);
  l = select_if(a, 0, f);
  label B_g:
  f = 1;
  b = WebPSafeMalloc(i + k + (n = j << 1L), 1);
  if (eqz(b)) goto B_a;
  d[4] = b;
  d[20] = b;
  a = i32_wrap_i64(k);
  if (g < 11) goto B_i;
  (d + 48)[0]:int = a;
  (d + 32)[0]:int = h;
  (d + 52)[0]:int = (f = i32_wrap_i64(j));
  (d + 36)[0]:int = m;
  (d + 20)[0]:int = (b = b + a);
  (d + 56)[0]:int = f;
  (d + 40)[0]:int = m;
  (d + 24)[0]:int = b + f;
  if (g != 12) goto B_j;
  (d + 28)[0]:int = b + i32_wrap_i64(n);
  label B_j:
  (d + 44)[0]:int = l;
  (d + 60)[0]:int = i;
  goto B_f;
  label B_i:
  (d + 24)[0]:int = a;
  (d + 20)[0]:int = h;
  label B_f:
  f = CheckDecBuffer(d);
  if (eqz(c)) goto B_a;
  if (f) goto B_a;
  if (c[12]) goto B_k;
  f = 0;
  goto B_a;
  label B_k:
  c = d[4];
  b = d[2];
  if (d[0] > 10) goto B_m;
  d[4] = c + (g = (a = d + 20)[0]) * (b + -1);
  goto B_l;
  label B_m:
  f = 0;
  a = d + 32;
  a[0] = 0 - (a = a[0]);
  g = d + 36;
  g[0] = 0 - (g = g[0]);
  h = d + 40;
  h[0] = 0 - (h = h[0]);
  d[4] = c + a * (m = i32_wrap_i64(k = i64_extend_i32_s(b) + -1L));
  c = d + 20;
  c[0] = c[0] + g * (c = i32_wrap_i64(k >> 1L));
  b = d + 24;
  b[0] = b[0] + h * c;
  c = (d + 28)[0]:int;
  if (eqz(c)) goto B_a;
  d[7] = c + (g = (a = d + 44)[0]) * m;
  label B_l:
  f = 0;
  a[0] = 0 - g;
  label B_a:
  stack_pointer = e + 16;
  return f;
}

function CheckDecBuffer(a:int_ptr):int {
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  var j:long;
  var k:long;
  var l:long;
  var m:long;
  var b:int = 2;
  var c:int = a[0];
  if (c > 12) goto B_a;
  var d:int = a[2];
  var e:int = a[1];
  if (c < 11) goto B_d;
  b = 2;
  d = 
    (a + 24)[0]:int != 0 &
    ((a + 20)[0]:int != 0 &
     (a[4] != 0 &
      ((g = ((f = (a + 40)[0]:int) ^ (f = f >> 31)) - f) >=
       (f = (e + 1) / 2) &
       ((h = ((h = (a + 36)[0]:int) ^ (h = h >> 31)) - h) >= f &
        ((i = ((i = (a + 32)[0]:int) ^ (i = i >> 31)) - i) >= e &
         ((i64_extend_i32_u(i) * (j = i64_extend_i32_s(d + -1)) +
           (k = i64_extend_i32_s(e)) <=
           (a + 48)[0]:uint &
           i64_extend_i32_u(h) * (l = i64_extend_i32_s((d + 1) / 2 + -1)) +
           (m = i64_extend_i32_s(f)) <=
           (a + 52)[0]:uint) &
          i64_extend_i32_u(g) * l + m <= (a + 56)[0]:uint))))));
  if (c != 12) goto B_c;
  if (
    (d &
     ((a + 28)[0]:int != 0 &
      ((c = ((c = (a + 44)[0]:int) ^ (c = c >> 31)) - c) >= e &
       i64_extend_i32_u(c) * j + k <= (a + 60)[0]:uint))) &
    1) goto B_b;
  goto B_a;
  label B_d:
  if (a[4] != 0 &
      ((f = ((f = (a + 20)[0]:int) ^ (f = f >> 31)) - f) >=
       e * (c = (c + 1049276)[0]:ubyte) &
       i64_extend_i32_u(f) * i64_extend_i32_s(d + -1) +
       i64_extend_i32_u(c) * i64_extend_i32_s(e) <=
       (a + 24)[0]:uint)) goto B_b;
  goto B_a;
  label B_c:
  if (eqz(d & 1)) goto B_a;
  label B_b:
  b = 0;
  label B_a:
  return b;
}

function WebPInitDecBufferInternal(a:int, b:int):int {
  var c:int = 0;
  if (eqz(a)) goto B_a;
  if ((b & -256) != 512) goto B_a;
  memset(a, 0, 84);
  c = 1;
  label B_a:
  return c;
}

function WebPFreeDecBuffer(a:int_ptr) {
  if (eqz(a)) goto B_a;
  if (a[3] > 0) goto B_b;
  WebPSafeFree(a[20]);
  label B_b:
  a[20] = 0;
  label B_a:
}

function WebPCopyDecBufferPixels(a:int, b:int):int {
  b[1]:long@4 = a[1]:long@4;
  var c:int = 2;
  if (CheckDecBuffer(b)) goto B_a;
  c = a[1]:int;
  var d:int = b[4]:int;
  var e:int = a[4]:int;
  var f:int = a[0]:int;
  if (f > 10) goto B_c;
  WebPCopyPlane(e,
                (a + 20)[0]:int,
                d,
                (b + 20)[0]:int,
                c * (f + 1049276)[0]:ubyte,
                a[2]:int);
  goto B_b;
  label B_c:
  WebPCopyPlane(e, (a + 32)[0]:int, d, (b + 32)[0]:int, c, a[2]:int);
  WebPCopyPlane((a + 20)[0]:int,
                (a + 36)[0]:int,
                (b + 20)[0]:int,
                (b + 36)[0]:int,
                (a[1]:int + 1) / 2,
                (a[2]:int + 1) / 2);
  WebPCopyPlane((a + 24)[0]:int,
                (a + 40)[0]:int,
                (b + 24)[0]:int,
                (b + 40)[0]:int,
                (a[1]:int + 1) / 2,
                (a[2]:int + 1) / 2);
  d = a[0]:int;
  if (d > 12) goto B_e;
  if (1 << d & 4154) goto B_d;
  label B_e:
  c = 0;
  if (d + -11 < -4) goto B_a;
  label B_d:
  WebPCopyPlane((a + 28)[0]:int,
                (a + 44)[0]:int,
                (b + 28)[0]:int,
                (b + 44)[0]:int,
                a[1]:int,
                a[2]:int);
  label B_b:
  c = 0;
  label B_a:
  return c;
}

function WebPAvoidSlowMemory(a:int_ptr, b:int_ptr):int {
  var c:int = 0;
  if (a[3] < 2) goto B_a;
  if (eqz(b)) goto B_a;
  if (a[0] + -7 > 3) goto B_a;
  c = b[2] != 0;
  label B_a:
  return c;
}

function WebPDeallocateAlphaMemory(a:int) {
  WebPSafeFree(a[601]:int);
  a[601]:long@4 = 0L;
  var b:int_ptr = a[597]:int;
  if (eqz(b)) goto B_a;
  VP8LDelete(b[5]);
  b[5] = 0;
  WebPSafeFree(b);
  label B_a:
  a[597]:int = 0;
}

function VP8DecompressAlphaRows(a:int, b:int, c:int_ptr, d:int_ptr):int {
  var f:int;
  var k:int;
  var l:int;
  var h:int_ptr;
  var i:ubyte_ptr;
  var j:int;
  var e:int = 0;
  if (c < 0) goto B_b;
  if (d < 1) goto B_b;
  if (d + c > (f = b[22]:int)) goto B_b;
  var g:int = b[0]:int;
  if (a[600]:int) goto B_c;
  h = a[597]:int;
  if (h) goto B_d;
  a[597]:int = (e = WebPSafeCalloc(1L, 144));
  if (e) goto B_e;
  VP8SetError(a, 1, 1048923);
  return 0;
  label B_e:
  a[601]:int = (h = WebPSafeMalloc(b[22]:int * b[0]:int, 1));
  if (eqz(h)) goto B_g;
  a[603]:int = 0;
  a[602]:int = h;
  goto B_f;
  label B_g:
  if (eqz(VP8SetError(a, 1, 1048923))) goto B_a;
  h = a[602]:int;
  label B_f:
  i = a[598]:int;
  j = a[599]:int;
  e = a[597]:int;
  VP8FiltersInit();
  e[34]:int = h;
  e[0]:long@4 = b[0]:long@4;
  h = 1;
  if (j < 2) goto B_i;
  e[2]:int = (k = i[0] & 3);
  e[3]:int = i[0] >> 2 & 3;
  e[4]:int = (l = i[0] >> 4 & 3);
  if (k > 1) goto B_i;
  if (l > 1) goto B_i;
  if ((i[0] & 255) > 63) goto B_i;
  k = e + 24;
  if (eqz(VP8InitIoInternal(k, 521))) goto B_i;
  j = j + -1;
  WebPInitCustomIo(0, k);
  e[6]:long@4 = b[0]:long@4;
  (e + 96)[0]:simd@4 = b[18]:simd@4;
  (e + 64)[0]:int = e;
  (e + 112)[0]:int = b[22]:int;
  if (e[2]:int) goto B_k;
  e = j >= e[1]:int * e[0]:int;
  goto B_j;
  label B_k:
  e = VP8LDecodeAlphaHeader(e, i + 1, j);
  label B_j:
  if (e) goto B_h;
  label B_i:
  c = (a[597]:int)[5]:int;
  if (eqz(c)) goto B_l;
  h = c[0];
  label B_l:
  VP8SetError(a, h, 1048923);
  goto B_a;
  label B_h:
  h = a[597]:int;
  if (h[4] == 1) goto B_m;
  a[604]:int = 0;
  goto B_d;
  label B_m:
  d = f - c;
  label B_d:
  var m:int = (h + 112)[0]:int;
  if (h[2]) goto B_o;
  f = a[603]:int;
  if (d < 1) goto B_p;
  var n:int = d & 1;
  var o:int = a[602]:int;
  l = o + (e = (i = h[0]) * c);
  k = a[598]:int;
  var p:int = k + e + 1;
  if (d == 1) goto B_q;
  var q:int = i << 1;
  j = d & -2;
  var r:int = o + (e = i * (c + 1));
  var s:int = e + k + 1;
  e = 0;
  loop L_r {
    call_indirect(f, p + e, k = l + e, i, 1059936[h[3]]:int);
    call_indirect(k, s + e, f = r + e, i, 1059936[h[3]]:int);
    e = e + q;
    j = j + -2;
    if (j) continue L_r;
  }
  p = p + e;
  l = l + e;
  f = o + i * (c + -1) + e;
  label B_q:
  if (eqz(n)) goto B_p;
  call_indirect(f, p, l, i, 1059936[h[3]]:int);
  f = l;
  label B_p:
  a[603]:int = f;
  d = d + c;
  goto B_n;
  label B_o:
  if (eqz(VP8LDecodeAlphaImageStream(h, d = d + c))) goto B_a;
  label B_n:
  if (d < m) goto B_t;
  a[600]:int = 1;
  goto B_s;
  label B_t:
  if (eqz(a[600]:int)) goto B_c;
  label B_s:
  d = a[597]:int;
  if (eqz(d)) goto B_u;
  VP8LDelete(d[5]);
  d[5] = 0;
  WebPSafeFree(d);
  label B_u:
  a[597]:int = 0;
  d = a[604]:int;
  if (d < 1) goto B_c;
  if (
    eqz(WebPDequantizeLevels(
          a[602]:int + (e = b[21]:int) * g + (h = b[19]:int),
          b[20]:int - h,
          b[22]:int - e,
          g,
          d))) goto B_a;
  label B_c:
  e = a[602]:int + g * c;
  label B_b:
  return e;
  label B_a:
  WebPSafeFree(a[601]:int);
  a[601]:long@4 = 0L;
  c = a[597]:int;
  if (eqz(c)) goto B_v;
  VP8LDelete(c[5]);
  c[5] = 0;
  WebPSafeFree(c);
  label B_v:
  a[597]:int = 0;
  return 0;
}

function VP8InitDithering(a:int_ptr, b:int_ptr) {
  var e:int;
  var c:int;
  if (eqz(a)) goto B_a;
  c = a[11];
  if (c < 0) goto B_b;
  var d:int = 255;
  if (c > 100) goto B_c;
  d = (c * 255 & 65535) / 100;
  if (eqz(c & 65535)) goto B_b;
  label B_c:
  c = (b + 844)[0]:int;
  if (c < 12) goto B_e;
  e = (b + 848)[0]:int;
  goto B_d;
  label B_e:
  (b + 848)[0]:int =
    (e = d * (select_if(c, 0, c > 0) + 1049289)[0]:ubyte >> 3);
  label B_d:
  c = (b + 876)[0]:int;
  if (c < 12) goto B_g;
  c = (b + 880)[0]:int;
  goto B_f;
  label B_g:
  (b + 880)[0]:int =
    (c = d * (select_if(c, 0, c > 0) + 1049289)[0]:ubyte >> 3);
  label B_f:
  c = c | e;
  e = (b + 908)[0]:int;
  if (e < 12) goto B_i;
  e = (b + 912)[0]:int;
  goto B_h;
  label B_i:
  (b + 912)[0]:int =
    (e = d * (select_if(e, 0, e > 0) + 1049289)[0]:ubyte >> 3);
  label B_h:
  c = e | c;
  e = (b + 940)[0]:int;
  if (e < 12) goto B_k;
  d = (b + 944)[0]:int;
  goto B_j;
  label B_k:
  (b + 944)[0]:int =
    (d = d * (select_if(e, 0, e > 0) + 1049289)[0]:ubyte >> 3);
  label B_j:
  if (eqz(d | c)) goto B_b;
  VP8InitRandom(b + 588, 1.0f);
  b[146] = 1;
  label B_b:
  b[604] = (a = a[13]);
  c = 100;
  if (a > 100) goto B_l;
  if (a > -1) goto B_a;
  c = 0;
  label B_l:
  b[604] = c;
  label B_a:
}

function VP8ProcessRow(a:int_ptr, b:int_ptr):int {
  var d:int_ptr;
  var c:int = 0;
  if (a[588] < 1) goto B_a;
  d = a[586];
  if (d < a[78]) goto B_a;
  c = d <= a[80];
  label B_a:
  var e:int = a + 172;
  if (a[40]) goto B_b;
  (a + 180)[0]:int = c;
  (a + 176)[0]:int = a[586];
  ReconstructRow(a, e);
  return FinishRow(a, b);
  label B_b:
  d = 0;
  var f:int = a + 136;
  if (
    eqz(call_indirect(f, WebPGetWorkerInterface()[2]:int) & 1)) goto B_c;
  memcpy(a + 192, b, 108);
  (a + 180)[0]:int = c;
  a[43] = a[41];
  (a + 176)[0]:int = a[586];
  if (a[40] != 2) goto B_e;
  b = a[587];
  a[587] = (d = a + 188)[0];
  d[0] = b;
  goto B_d;
  label B_e:
  ReconstructRow(a, e);
  label B_d:
  if (eqz(c)) goto B_f;
  c = a[576];
  a[576] = (b = a + 184)[0];
  b[0] = c;
  label B_f:
  call_indirect(f, WebPGetWorkerInterface()[3]:int);
  d = 1;
  a[41] = select_if(0, c = a[41] + 1, c == a[42]);
  label B_c:
  return d;
}

function ReconstructRow(a:int_ptr, b:int_ptr) {
  var f:int;
  var y:int;
  var z:int;
  var c:long_ptr@1 = b[0];
  var d:int = b[1];
  var e:int = a[577];
  e[823]:byte = 129;
  e[807]:byte = 129;
  e[791]:byte = 129;
  e[775]:byte = 129;
  e[759]:byte = 129;
  e[743]:byte = 129;
  e[727]:byte = 129;
  e[711]:byte = 129;
  e[695]:byte = 129;
  e[679]:byte = 129;
  e[663]:byte = 129;
  e[647]:byte = 129;
  e[631]:byte = 129;
  e[615]:byte = 129;
  e[599]:byte = 129;
  e[583]:byte = 129;
  e[519]:byte = 129;
  e[487]:byte = 129;
  e[455]:byte = 129;
  e[423]:byte = 129;
  e[391]:byte = 129;
  e[359]:byte = 129;
  e[327]:byte = 129;
  e[295]:byte = 129;
  e[263]:byte = 129;
  e[231]:byte = 129;
  e[199]:byte = 129;
  e[167]:byte = 129;
  e[135]:byte = 129;
  e[103]:byte = 129;
  e[71]:byte = 129;
  e[39]:byte = 129;
  if (d < 1) goto B_b;
  e[551]:byte = 129;
  e[567]:byte = 129;
  e[7]:byte = 129;
  goto B_a;
  label B_b:
  e[7]:long@1 = 9187201950435737471L;
  f = e + 551;
  f[0]:long@1 = 9187201950435737471L;
  e[567]:long@1 = 9187201950435737471L;
  (e + 20)[0]:long@1 = 9187201950435737471L;
  (e + 15)[0]:long@1 = 9187201950435737471L;
  (f + 8)[0]:byte = 127;
  (e + 575)[0]:byte = 127;
  label B_a:
  if (a[75] < 1) goto B_c;
  var g:int = e + 600;
  var h:int = e + 584;
  var i:int = e + 40;
  var j:int = select_if(5, 6, d);
  var k:int = e + 72;
  var l:int = c << 3;
  var m:int = c << 4;
  var n:simd_ptr@1 = e + 520;
  var o:simd_ptr@1 = e + 8;
  var p:int_ptr = e + 24;
  var q:int = eqz(d) << 2;
  var r:int = 769;
  var s:int = d < 1;
  var t:int = 0;
  var u:int = 0;
  loop L_d {
    var v:int = b[4];
    var w:int = v + u * 800;
    if (eqz(u)) goto B_e;
    e[4]:int@1 = e[20]:int@1;
    e[36]:int@1 = e[52]:int@1;
    e[68]:int@1 = e[84]:int@1;
    e[100]:int@1 = e[116]:int@1;
    e[132]:int@1 = e[148]:int@1;
    e[164]:int@1 = e[180]:int@1;
    e[196]:int@1 = e[212]:int@1;
    e[228]:int@1 = e[244]:int@1;
    e[260]:int@1 = e[276]:int@1;
    e[292]:int@1 = e[308]:int@1;
    e[324]:int@1 = e[340]:int@1;
    e[356]:int@1 = e[372]:int@1;
    e[388]:int@1 = e[404]:int@1;
    e[420]:int@1 = e[436]:int@1;
    e[452]:int@1 = e[468]:int@1;
    e[484]:int@1 = e[500]:int@1;
    e[516]:int@1 = e[532]:int@1;
    e[548]:int@1 = e[556]:int@1;
    e[564]:int@1 = e[572]:int@1;
    e[580]:int@1 = e[588]:int@1;
    e[596]:int@1 = e[604]:int@1;
    e[612]:int@1 = e[620]:int@1;
    e[628]:int@1 = e[636]:int@1;
    e[644]:int@1 = e[652]:int@1;
    e[660]:int@1 = e[668]:int@1;
    e[676]:int@1 = e[684]:int@1;
    e[692]:int@1 = e[700]:int@1;
    e[708]:int@1 = e[716]:int@1;
    e[724]:int@1 = e[732]:int@1;
    e[740]:int@1 = e[748]:int@1;
    e[756]:int@1 = e[764]:int@1;
    e[772]:int@1 = e[780]:int@1;
    e[788]:int@1 = e[796]:int@1;
    e[804]:int@1 = e[812]:int@1;
    e[820]:int@1 = e[828]:int@1;
    label B_e:
    var x:int = a[574] + (u << 5);
    c = w[197]:int;
    if (s) goto B_j;
    o[0] = x[0]:simd@1;
    e[552]:long@1 = x[16]:long@1;
    e[568]:long@1 = x[24]:long@1;
    if (w[768]:ubyte) goto B_i;
    goto B_g;
    label B_j:
    if (eqz(w[768]:ubyte)) goto B_g;
    f = p[0];
    goto B_h;
    label B_i:
    if (u < a[75] + -1) goto B_k;
    p[0] = (f = x[15]:ubyte) * 16843009;
    f = f | f << 8;
    f = f | f << 16;
    goto B_h;
    label B_k:
    p[0] = (f = x[32]:int@1);
    label B_h:
    e[70]:int = f;
    e[102]:int = f;
    e[38]:int = f;
    y = v + t;
    f = v + r;
    v = -32;
    loop L_l {
      z = i + (v + 1049344)[0]:ushort;
      call_indirect(z, 1059760[f[0]:ubyte]:int);
      br_table[B_n, B_o, B_p, ..B_m]((c >> 30) + -1)
      label B_p:
      call_indirect(y, z, 0, 0[264959]:int);
      goto B_m;
      label B_o:
      call_indirect(y, z, 0[264960]:int);
      goto B_m;
      label B_n:
      call_indirect(y, z, 0[264962]:int);
      label B_m:
      y = y + 32;
      f = f + 1;
      c = c << 2;
      v = v + 2;
      if (v) continue L_l;
    }
    z = select_if(q, j, u);
    goto B_f;
    label B_g:
    call_indirect(
      i,
      1059728[select_if(f = w[769]:ubyte, z = select_if(q, j, u), f)]:int);
    if (eqz(c)) goto B_f;
    v = v + t;
    f = -32;
    loop L_q {
      y = i + (f + 1049344)[0]:ushort;
      br_table[B_s, B_t, B_u, ..B_r]((c >> 30) + -1)
      label B_u:
      call_indirect(v, y, 0, 0[264959]:int);
      goto B_r;
      label B_t:
      call_indirect(v, y, 0[264960]:int);
      goto B_r;
      label B_s:
      call_indirect(v, y, 0[264962]:int);
      label B_r:
      v = v + 32;
      c = c << 2;
      f = f + 2;
      if (f) continue L_q;
    }
    label B_f:
    c = w[198]:int;
    call_indirect(
      h,
      (f = 1059808 + (select_if(f = w[785]:ubyte, z, f) << 2))[0]:int);
    call_indirect(g, f[0]:int);
    if (eqz(c & 255)) goto B_v;
    call_indirect(w + 512, h, select_if(1059844, 1059852, c & 170)[0]:int);
    label B_v:
    if (eqz(c & 65280)) goto B_w;
    call_indirect(w + 640, g, select_if(1059844, 1059852, c & 43520)[0]:int);
    label B_w:
    if (d >= a[76] + -1) goto B_x;
    x[0]:simd@1 = n[0];
    x[16]:long@1 = e[808]:long@1;
    x[24]:long@1 = e[824]:long@1;
    label B_x:
    v = a[578] + (u << 4) + m * a[581];
    y = a[580] + (c = u << 3);
    z = a[579] + c;
    w = a[582];
    c = 0;
    f = k;
    loop L_y {
      (v + a[581] * c)[0]:simd@1 = (f + -32)[0]:simd@1;
      (v + a[581] * (c + 1))[0]:simd@1 = f[0]:simd@1;
      f = f + 64;
      c = c + 2;
      if (c != 16) continue L_y;
    }
    c = z + (f = w * l);
    c[0] = e[584]:long@1;
    f = y + f;
    f[0]:long@1 = e[600]:long@1;
    (c + a[582])[0]:long@1 = e[616]:long@1;
    (f + a[582])[0]:long@1 = e[632]:long@1;
    (c + (a[582] << 1))[0]:long@1 = e[648]:long@1;
    (f + (a[582] << 1))[0]:long@1 = e[664]:long@1;
    (c + a[582] * 3)[0]:long@1 = e[680]:long@1;
    (f + a[582] * 3)[0]:long@1 = e[696]:long@1;
    (c + (a[582] << 2))[0]:long@1 = e[712]:long@1;
    (f + (a[582] << 2))[0]:long@1 = e[728]:long@1;
    (c + a[582] * 5)[0]:long@1 = e[744]:long@1;
    (f + a[582] * 5)[0]:long@1 = e[760]:long@1;
    (c + a[582] * 6)[0]:long@1 = e[776]:long@1;
    (f + a[582] * 6)[0]:long@1 = e[792]:long@1;
    (c + a[582] * 7)[0]:long@1 = e[808]:long@1;
    (f + a[582] * 7)[0]:long@1 = e[824]:long@1;
    t = t + 800;
    r = r + 800;
    u = u + 1;
    if (u < a[75]) continue L_d;
  }
  label B_c:
}

function FinishRow(a:int_ptr, b:int_ptr):int {
  var v:int;
  var w:int;
  var z:int;
  var ca:int;
  var u:ubyte_ptr;
  var s:int;
  var r:int_ptr;
  var x:int;
  var y:ubyte_ptr;
  var t:int;
  var ba:int;
  var aa:int;
  var c:int = stack_pointer - 64;
  stack_pointer = c;
  var d:int = a[581];
  var e:int = a[43];
  var f:int = a[578];
  var g:int = a[582];
  var h:int = (a[588] + 1049301)[0]:ubyte;
  var i:ubyte_ptr = h >> 1;
  var j:int = a[580];
  var k:int = a[579];
  var l:int = a[80];
  var m:int = (a + 176)[0]:int;
  if (a[40] != 2) goto B_a;
  ReconstructRow(a, a + 172);
  label B_a:
  var n:int = e * d;
  var o:int = d * h;
  var p:int = e * g;
  var q:int = i * g;
  if (eqz((a + 180)[0]:int)) goto B_b;
  i = a[77];
  if (i >= a[79]) goto B_b;
  r = i << 4;
  s = i << 3;
  d = i << 2;
  t = a[44];
  loop L_c {
    u = a[46] + d;
    g = u[0];
    if (eqz(g)) goto B_d;
    x = a[578] + ((v = a[43]) * (w = a[581]) << 4) + r;
    if (a[588] != 1) goto B_e;
    if (i < 1) goto B_f;
    call_indirect(x, w, g + 4, 0[264973]:int);
    label B_f:
    u = u + 2;
    if (eqz(u[0])) goto B_g;
    call_indirect(x, w, g, 0[264975]:int);
    label B_g:
    if (t < 1) goto B_h;
    call_indirect(x, w, g + 4, 0[264972]:int);
    label B_h:
    if (eqz(u[0])) goto B_d;
    call_indirect(x, w, g, 0[264974]:int);
    goto B_d;
    label B_e:
    y = (u + 1)[0]:ubyte;
    aa = a[580] + (v = v * (z = a[582]) << 3) + s;
    ba = a[579] + v + s;
    v = (u + 3)[0]:ubyte;
    if (i < 1) goto B_i;
    call_indirect(x, w, ca = g + 4, y, v, 0[264965]:int);
    call_indirect(ba, aa, z, ca, y, v, 0[264967]:int);
    label B_i:
    u = u + 2;
    if (eqz(u[0])) goto B_j;
    call_indirect(x, w, g, y, v, 0[264969]:int);
    call_indirect(ba, aa, z, g, y, v, 0[264971]:int);
    label B_j:
    if (t < 1) goto B_k;
    call_indirect(x, w, ca = g + 4, y, v, 0[264964]:int);
    call_indirect(ba, aa, z, ca, y, v, 0[264966]:int);
    label B_k:
    if (eqz(u[0])) goto B_d;
    call_indirect(x, w, g, y, v, 0[264968]:int);
    call_indirect(ba, aa, z, g, y, v, 0[264970]:int);
    label B_d:
    r = r + 16;
    s = s + 8;
    d = d + 4;
    i = i + 1;
    if (i < a[79]) continue L_c;
  }
  label B_b:
  ba = n << 4;
  t = f - o;
  aa = p << 3;
  ca = j - q;
  f = k - q;
  if (eqz(a[146])) goto B_l;
  u = a[77];
  if (u >= (g = a[79])) goto B_l;
  d = a + 596;
  loop L_m {
    i = a[47] + u * 800;
    s = i[796];
    if (s < 4) goto B_n;
    y = i + 796;
    x = a[43] * (w = a[582]) << 3;
    v = a[580];
    z = a[579];
    i = a[148];
    r = a[147];
    g = 0;
    loop L_o {
      r = d + (r << 2);
      r[0] = (i = r[0] - d[i]:int) & 2147483647;
      (c + g)[0]:byte = ((i << 1) >> 24) * s >> 8 ^ 128;
      a[147] = (r = select_if(0, i = a[147] + 1, i == 55));
      a[148] = (i = select_if(0, i = a[148] + 1, i == 55));
      g = g + 1;
      if (g != 64) continue L_o;
    }
    g = 0;
    call_indirect(c, z + x + (z = u << 3), w, 0[264976]:int);
    s = y[0];
    i = a[148];
    r = a[147];
    loop L_p {
      r = d + (r << 2);
      r[0] = (i = r[0] - d[i]:int) & 2147483647;
      (c + g)[0]:byte = ((i << 1) >> 24) * s >> 8 ^ 128;
      a[147] = (r = select_if(0, i = a[147] + 1, i == 55));
      a[148] = (i = select_if(0, i = a[148] + 1, i == 55));
      g = g + 1;
      if (g != 64) continue L_p;
    }
    call_indirect(c, v + x + z, w, 0[264976]:int);
    g = a[79];
    label B_n:
    u = u + 1;
    if (u < g) continue L_m;
  }
  label B_l:
  u = t + ba;
  w = ca + aa;
  x = f + aa;
  r = l + -1;
  g = 1;
  if (eqz(b[11])) goto B_s;
  d = m << 4;
  g = d + 16;
  if (eqz(m)) goto B_u;
  d = d - h;
  i = u;
  s = x;
  y = w;
  goto B_t;
  label B_u:
  y = a[580] + aa;
  s = a[579] + aa;
  i = a[578] + ba;
  d = 0;
  label B_t:
  b[7] = y;
  b[6] = s;
  b[5] = i;
  i = 0;
  b[26] = 0;
  g = g - select_if(0, h, m >= r);
  s = select_if(g, s = b[22], g < s);
  if (eqz(a[598])) goto B_v;
  if (s <= d) goto B_v;
  b[26] = (i = VP8DecompressAlphaRows(a, b, d, s - d));
  if (eqz(i)) goto B_r;
  label B_v:
  y = b[21];
  if (y <= d) goto B_w;
  b[5] = b[5] + a[581] * (d = y - d);
  b[6] = b[6] + (g = a[582] * (d >> 1));
  b[7] = b[7] + g;
  if (i) goto B_y;
  i = 0;
  goto B_x;
  label B_y:
  b[26] = (i = i + b[0] * d);
  label B_x:
  d = y;
  label B_w:
  g = 1;
  if (s <= d) goto B_s;
  b[5] = b[5] + (g = b[19]);
  b[6] = b[6] + (v = g >> 1);
  b[7] = b[7] + v;
  if (eqz(i)) goto B_z;
  b[26] = i + g;
  label B_z:
  b[2] = d - y;
  b[4] = s - d;
  b[3] = b[20] - g;
  g = call_indirect(b, b[11]);
  label B_s:
  if (e + 1 != a[42]) goto B_q;
  if (m >= r) goto B_q;
  memcpy(a[578] + 0 - o, u + (a[581] << 4), o);
  memcpy(a[579] + (d = 0 - q), x + (a[582] << 3), q);
  memcpy(a[580] + d, w + (a[582] << 3), q);
  goto B_q;
  label B_r:
  g = VP8SetError(a, 3, 1048990);
  label B_q:
  stack_pointer = c + 64;
  return g;
}

function VP8EnterCritical(a:int_ptr, b:int_ptr):int {
  var c:int;
  var f:int;
  var e:int_ptr;
  var d:int;
  var i:int;
  c = b[12];
  if (eqz(c)) goto B_a;
  if (call_indirect(b, c)) goto B_a;
  VP8SetError(a, 6, 1048755);
  return a[0];
  label B_a:
  if (eqz(b[17])) goto B_f;
  c = 0;
  a[588] = 0;
  d = 0;
  goto B_e;
  label B_f:
  d = 2;
  e = a[588];
  c = (e + 1049301)[0]:ubyte;
  if (e == 2) goto B_d;
  d = e;
  label B_e:
  a[77] = (e = b[19] - c) >> 4;
  a[78] = (f = b[21] - c) >> 4;
  if (e > -1) goto B_g;
  a[77] = 0;
  label B_g:
  if (f > -1) goto B_b;
  e = a + 312;
  goto B_c;
  label B_d:
  a[77] = 0;
  e = a + 312;
  label B_c:
  e[0] = 0;
  label B_b:
  a[80] = (e = (c = c + 15) + b[22] >> 4);
  a[79] = select_if(b = c + b[20] >> 4, c = a[75], b < c);
  if (e <= (b = a[76])) goto B_h;
  a[80] = b;
  label B_h:
  if (d < 1) goto B_i;
  var g:int = (a + 80)[0]:int;
  var h:int = a[29];
  f = 132;
  e = 0;
  loop L_j {
    if (eqz(h)) goto B_l;
    c = (a + f)[0]:byte;
    if (a[31]) goto B_k;
    c = a[18] + c;
    goto B_k;
    label B_l:
    c = a[18];
    label B_k:
    d = c;
    if (eqz(g)) goto B_m;
    d = a[21] + c;
    label B_m:
    b = a + e;
    d = select_if(d, 63, d < 63);
    if (d < 1) goto B_o;
    d = select_if(d, 0, d > 0);
    i = d;
    var j:int = a[19];
    if (j < 1) goto B_p;
    i = d >> select_if(2, 1, j > 4);
    i = select_if(i, j = 9 - j, i < j);
    label B_p:
    (b + 2357)[0]:byte = (i = select_if(i, 1, i > 1));
    (b + 2359)[0]:byte = select_if(2, d > 14, d > 39);
    (b + 2356)[0]:byte = i + (d << 1);
    goto B_n;
    label B_o:
    (b + 2356)[0]:byte = 0;
    label B_n:
    (b + 2358)[0]:byte = 0;
    if (eqz(g)) goto B_q;
    c = a[21] + c + a[25];
    label B_q:
    c = select_if(c, 63, c < 63);
    if (c < 1) goto B_s;
    c = select_if(c, 0, c > 0);
    d = c;
    i = a[19];
    if (i < 1) goto B_t;
    d = c >> select_if(2, 1, i > 4);
    d = select_if(d, i = 9 - i, d < i);
    label B_t:
    (b + 2361)[0]:byte = (d = select_if(d, 1, d > 1));
    (b + 2363)[0]:byte = select_if(2, c > 14, c > 39);
    (b + 2360)[0]:byte = d + (c << 1);
    goto B_r;
    label B_s:
    (b + 2360)[0]:byte = 0;
    label B_r:
    (b + 2362)[0]:byte = 1;
    f = f + 1;
    e = e + 8;
    if (e != 32) continue L_j;
  }
  label B_i:
  return 0;
}

function VP8ExitCritical(a:int_ptr, b:int_ptr):int {
  var c:int = 1;
  if (a[40] < 1) goto B_a;
  c = call_indirect(a + 136, WebPGetWorkerInterface()[2]:int);
  label B_a:
  a = b[13];
  if (eqz(a)) goto B_b;
  call_indirect(b, a);
  label B_b:
  return c;
}

function VP8GetThreadMethod(a:int, b:int, c:int, d:int):int {
  return 0
}

function VP8InitFrame(a:int, b:int):int {
  var f:int;
  var g:int;
  var j:int;
  var o:long;
  a[41]:int = 0;
  var c:int = 1;
  if (a[40]:int < 1) goto B_c;
  if (
    eqz(call_indirect(a + 136, WebPGetWorkerInterface()[1]:int))) goto B_b;
  (a + 152)[0]:int = a + 192;
  (a + 148)[0]:int = a;
  (a + 144)[0]:int = 1;
  c = select_if(3, 2, a[588]:int > 0);
  label B_c:
  a[42]:int = c;
  goto B_a;
  label B_b:
  if (VP8SetError(a, 1, 1048960)) goto B_d;
  return 0;
  label B_d:
  c = a[42]:int;
  label B_a:
  var d:int = 0;
  var e:int = a[75]:int;
  var h:int = 
    select_if((e << ((f = a[40]:int) > 0)) << 2, 0, (g = a[588]:int) > 0);
  var i:int = c << 4;
  var k:int = (i + (g + 1049301)[0]:ubyte) * 3 / 2 * (j = e << 5);
  var l:int = e << 2;
  var m:int = (e << 1) + 2;
  var n:int = (e << (f == 2)) * 800;
  if (a[598]:int) goto B_f;
  o = 0L;
  goto B_e;
  label B_f:
  o = (a + 62)[0]:ushort * a[30]:ushort;
  label B_e:
  var p:long = 
    i64_extend_i32_u(j) + i64_extend_i32_u(l) + i64_extend_i32_u(m) +
    i64_extend_i32_u(n) +
    i64_extend_i32_u(h) +
    i64_extend_i32_u(k) +
    o;
  if (p + 832L > 4294967264L) goto B_g;
  var q:int = a[583]:int;
  p = p + 863L;
  if (p <= a[584]:uint) goto B_j;
  WebPSafeFree(q);
  d = 0;
  a[584]:int = 0;
  a[583]:int = (q = WebPSafeMalloc(p, 1));
  if (eqz(q)) goto B_i;
  a[584]:int = p;
  f = a[40]:int;
  g = a[588]:int;
  label B_j:
  a[572]:int = q;
  a[43]:int = 0;
  a[574]:int = (d = q + l);
  a[575]:int = (d = d + j) + 2;
  a[576]:int = (j = select_if(q = d + m, 0, h));
  (a + 184)[0]:int = j;
  h = q + h;
  if (g < 1) goto B_l;
  if (f > 0) goto B_m;
  a[577]:int = (h = h + 31 & -32);
  a[587]:int = (j = h + 832);
  goto B_k;
  label B_m:
  a[46]:int = j + (e << 2);
  label B_l:
  a[577]:int = (h = h + 31 & -32);
  a[587]:int = (j = h + 832);
  j = j + select_if(e, 0, f == 2) * 800;
  label B_k:
  a[41]:int = 0;
  a[582]:int = (f = e << 3);
  a[581]:int = (e = e << 4);
  (a + 188)[0]:int = j;
  a[578]:int =
    (j = (h = h + n + 832) + e * (g = (g + 1049301)[0]:ubyte));
  a[602]:int = select_if(0, h + k, eqz(o));
  a[579]:int = (g = j + e * i + (e = (g >> 1) * f));
  a[580]:int = g + (c * f << 3) + e;
  memset(d, 0, m);
  VP8InitScanline(a);
  memset(a[572]:int, 0, l);
  goto B_h;
  label B_i:
  if (eqz(VP8SetError(a, 1, 1048844))) goto B_g;
  label B_h:
  b[2]:int = 0;
  b[26]:int = 0;
  b[5]:int = a[578]:int;
  b[6]:simd@4 = a[579]:simd@4;
  VP8DspInit();
  d = 1;
  label B_g:
  return d;
}

function NewDecoder(a:int_ptr, b:int):int {
  var c:int;
  var d:int;
  var e:int;
  c = WebPSafeCalloc(1L, 300);
  if (c) goto B_a;
  return 0;
  label B_a:
  c[73]:long@4 = -4294967296L;
  c[0]:int = 0;
  c[44]:int = 0;
  (c + 188)[0]:simd@4 = V128;
  d = c + 204;
  if (eqz(WebPInitDecBufferInternal(d, 521))) goto B_c;
  e = c + 68;
  if (VP8InitIoInternal(e, 521)) goto B_b;
  label B_c:
  WebPSafeFree(c);
  return 0;
  label B_b:
  var f:int = c + 4;
  WebPResetDecParams(f);
  if (a) goto B_d;
  c[72]:int = 0;
  c[1]:int = d;
  WebPInitCustomIo(f, e);
  return c;
  label B_d:
  if (eqz(WebPAvoidSlowMemory(a, b))) goto B_e;
  c[72]:int = a;
  c[1]:int = d;
  c[51]:int = a[0];
  WebPInitCustomIo(f, e);
  return c;
  label B_e:
  c[72]:int = 0;
  c[1]:int = a;
  WebPInitCustomIo(f, e);
  return c;
}

function WebPIDecode(a:int, b:int, c:int):int {
  var e:simd;
  var f:int;
  var d:simd_ptr@8 = stack_pointer - 48;
  stack_pointer = d;
  (d + 40)[0]:long = 0L;
  (d + 24)[0]:simd@8 = (e = V128);
  d[1] = e;
  if (eqz(a)) goto B_b;
  if (eqz(b)) goto B_b;
  f = 0;
  if (
    WebPGetFeaturesInternal(a, b, select_if(c, d + 8, c), 521)) goto B_a;
  label B_b:
  if (c) goto B_c;
  f = NewDecoder(0, d + 8);
  goto B_a;
  label B_c:
  f = NewDecoder(c + 40, c);
  if (f) goto B_d;
  f = 0;
  goto B_a;
  label B_d:
  (f + 24)[0]:int = c + 124;
  label B_a:
  stack_pointer = d + 48;
  return f;
}

function WebPIDelete(a:int_ptr) {
  if (eqz(a)) goto B_a;
  var b:int = a[16];
  if (eqz(b)) goto B_b;
  if (a[15]) goto B_c;
  if (a[0] != 3) goto B_d;
  VP8ExitCritical(b, a + 68);
  b = a[16];
  label B_d:
  VP8Delete(b);
  goto B_b;
  label B_c:
  VP8LDelete(b);
  label B_b:
  if (a[44] != 1) goto B_e;
  WebPSafeFree((a + 192)[0]:int);
  WebPSafeFree((a + 200)[0]:int);
  label B_e:
  WebPFreeDecBuffer(a + 204);
  WebPSafeFree(a);
  label B_a:
}

function DoRemap(a:int_ptr, b:int) {
  var c:int_ptr;
  var d:int;
  (a + 132)[0]:int = (d = (a + 192)[0]:int + (c = (a + 180)[0]:int));
  (a + 128)[0]:int = (c = (a + 184)[0]:int - c);
  var e:int_ptr = a[16];
  if (eqz(e)) goto B_a;
  if (a[15]) goto B_b;
  var f:int = e[81];
  if (eqz(b)) goto B_c;
  c = e + 328;
  d = 0;
  loop L_d {
    VP8RemapBitReader(c, b);
    c = c + 32;
    d = d + 1;
    if (d <= f) continue L_d;
  }
  if (a[44] != 2) goto B_c;
  VP8RemapBitReader(e + 16, b);
  label B_c:
  c = e + (f << 5);
  VP8BitReaderSetBuffer(c + 328, c = (c + 344)[0]:int, a[48] + a[46] - c);
  if (eqz(a[0])) goto B_a;
  if (a[15]) goto B_a;
  c = a[16];
  if (eqz(c[598])) goto B_a;
  if (c[600]) goto B_a;
  e[598] = (d = e[598] + b);
  c = e[597];
  if (eqz(c)) goto B_a;
  a = c[5];
  if (eqz(a)) goto B_a;
  if (c[2] != 1) goto B_a;
  VP8LBitReaderSetBuffer(a + 24, d + 1, e[599] + -1);
  return ;
  label B_b:
  VP8LBitReaderSetBuffer(e + 24, d, c);
  label B_a:
}

function IDecode(a:int_ptr):int {
  var c:int_ptr;
  var f:simd_ptr@4;
  var e:int;
  var d:int_ptr;
  var h:int;
  var g:simd_ptr@4;
  var b:int = stack_pointer - 48;
  stack_pointer = b;
  c = a[0];
  if (c) goto B_c;
  c = (a + 192)[0]:int;
  d = (a + 184)[0]:int;
  e = (a + 180)[0]:int;
  b[5]:int = 0;
  b[4]:int = d - e;
  b[3]:int = c + e;
  e = 5;
  c = WebPParseHeaders(b + 12);
  br_table[B_e, B_f, B_f, B_f, B_f, B_f, B_f, B_d, ..B_f](c);
  label B_f:
  if (a[0] != 3) goto B_g;
  VP8ExitCritical(a[16], a + 68);
  label B_g:
  a[0] = 7;
  e = c;
  c = a[0];
  goto B_b;
  label B_e:
  a[73] = b[9]:int;
  a[15] = (e = b[11]:int);
  if (e) goto B_i;
  e = VP8New();
  if (e) goto B_j;
  e = 1;
  c = a[0];
  goto B_b;
  label B_j:
  a[16] = e;
  e[12]:int = 1;
  e[299]:long = b[7]:long@4;
  a[0] = 1;
  a[45] = (e = a[45] + b[6]:int);
  (a + 132)[0]:int = a[48] + e;
  (a + 128)[0]:int = a[46] - e;
  goto B_h;
  label B_i:
  e = VP8LNew();
  if (e) goto B_k;
  e = 1;
  c = a[0];
  goto B_b;
  label B_k:
  a[16] = e;
  a[0] = 4;
  a[45] = (e = a[45] + b[6]:int);
  (a + 132)[0]:int = a[48] + e;
  (a + 128)[0]:int = a[46] - e;
  label B_h:
  e = 0;
  label B_d:
  c = a[0];
  goto B_b;
  label B_c:
  e = 5;
  if (eqz(a[16])) goto B_a;
  label B_b:
  d = 1;
  if (c != 1) goto B_l;
  e = 5;
  c = (a + 184)[0]:int - (f = (a + 180)[0]:int);
  if (c < 10) goto B_m;
  e = (a + 192)[0]:int + f;
  if (VP8GetInfo(e, c, a[73], b + 12, b + 8)) goto B_o;
  e = 3;
  d = 7;
  if (a[0] != 3) goto B_n;
  VP8ExitCritical(a[16], a + 68);
  goto B_n;
  label B_o:
  d = e[0]:ushort@1;
  f = e[2]:ubyte;
  (a + 132)[0]:int = e;
  (a + 128)[0]:int = c;
  (a + 196)[0]:int = ((d | f << 16) >> 5) + 10;
  e = 0;
  d = 2;
  label B_n:
  a[0] = d;
  label B_m:
  c = d;
  label B_l:
  if (c != 2) goto B_r;
  e = 5;
  if ((a + 184)[0]:int - (a + 180)[0]:int < (a + 196)[0]:int) goto B_q;
  e = a[1];
  d = a[16];
  if (VP8GetHeaders(d, f = a + 68)) goto B_u;
  c = a[0];
  e = d[0];
  if ((e & -3) != 5) goto B_v;
  e = 5;
  goto B_r;
  label B_v:
  if (c == 3) goto B_t;
  goto B_s;
  label B_u:
  d[0] =
    (e = WebPAllocateDecBuffer(a[17], (a + 72)[0]:int, (a + 24)[0]:int, e));
  if (eqz(e)) goto B_w;
  if (a[0] == 3) goto B_t;
  goto B_s;
  label B_w:
  d[40] = VP8GetThreadMethod(a[6], 0, a[17], a[18]);
  VP8InitDithering(a[6], d);
  e = 3;
  c = a[16];
  g = (c + 36)[0]:int;
  if (g == (h = (c + 32)[0]:int)) goto B_x;
  g = g - h;
  e = 1;
  if (a[44] != 1) goto B_y;
  h = WebPSafeMalloc(1L, g);
  if (eqz(h)) goto B_x;
  (a + 200)[0]:int = (e = memcpy(h, c[8], g));
  VP8BitReaderSetBuffer(c + 16, e, g);
  label B_y:
  e = 0;
  d[0] = 0;
  a[45] = a[45] + g;
  if (eqz(VP8EnterCritical(d, f))) goto B_z;
  e = d[0];
  if (a[0] == 3) goto B_t;
  goto B_s;
  label B_z:
  a[0] = 3;
  g = VP8InitFrame(d, f);
  c = a[0];
  if (g) goto B_r;
  e = d[0];
  if (c != 3) goto B_s;
  goto B_t;
  label B_x:
  d[0] = e;
  if (a[0] != 3) goto B_s;
  label B_t:
  VP8ExitCritical(a[16], f);
  label B_s:
  a[0] = 7;
  goto B_a;
  label B_r:
  if (c != 3) goto B_aa;
  e = a[16];
  if (e) goto B_ba;
  e = 5;
  goto B_a;
  label B_ba:
  var i:int = a + 68;
  if (eqz(e[1]:int)) goto B_da;
  c = e[586]:int;
  if (c >= e[76]:int) goto B_ea;
  var j:int = e + 16;
  f = b + 16;
  loop L_fa {
    if (a[74] == c) goto B_ga;
    if (VP8ParseIntraModeRow(j, e)) goto B_ha;
    e = 3;
    if (a[0] != 3) goto B_ia;
    VP8ExitCritical(a[16], i);
    label B_ia:
    a[0] = 7;
    goto B_a;
    label B_ha:
    a[74] = e[586]:int;
    label B_ga:
    d = e[585]:int;
    if (d >= e[75]:int) goto B_ja;
    c = e[81]:int;
    loop L_ka {
      f[0] = (g = (c = e + ((e[586]:int & c) << 5)) + 328)[0];
      (f + 16)[0]:simd@4 = (h = c + 344)[0]:simd@4;
      c = e[575]:int;
      var k:int = (c + (d << 1))[0]:ushort@1;
      var l:int = (c + -2)[0]:ushort@1;
      d = VP8DecodeMB(e, g);
      c = e[81]:int;
      if (d) goto B_la;
      if (c) goto B_ma;
      if ((a + 184)[0]:int - a[45] < 4097) goto B_ma;
      e = 3;
      if (a[0] != 3) goto B_na;
      VP8ExitCritical(a[16], i);
      label B_na:
      a[0] = 7;
      goto B_ca;
      label B_ma:
      if (e[40]:int < 1) goto B_oa;
      if (
        call_indirect(e + 136, WebPGetWorkerInterface()[2]:int)) goto B_oa;
      e = 3;
      if (a[0] != 3) goto B_pa;
      VP8ExitCritical(a[16], i);
      label B_pa:
      a[0] = 7;
      goto B_ca;
      label B_oa:
      (e[575]:int + -2)[0]:short@1 = l;
      (e[575]:int + (e[585]:int << 1))[0]:short@1 = k;
      (g + 16)[0]:simd@4 = (f + 16)[0]:simd@4;
      g[0] = f[0];
      e = 5;
      goto B_ca;
      label B_la:
      if (c) goto B_qa;
      a[45] = h[0]:int - a[48];
      label B_qa:
      e[585]:int = (d = e[585]:int + 1);
      if (d < e[75]:int) continue L_ka;
    }
    label B_ja:
    VP8InitScanline(e);
    if (VP8ProcessRow(e, i)) goto B_ra;
    if (a[0] != 3) goto B_sa;
    VP8ExitCritical(a[16], i);
    label B_sa:
    a[0] = 7;
    e = 6;
    goto B_ca;
    label B_ra:
    e[586]:int = (c = e[586]:int + 1);
    if (c < e[76]:int) continue L_fa;
  }
  label B_ea:
  if (VP8ExitCritical(e, i)) goto B_ta;
  a[0] = 7;
  e = 6;
  goto B_ca;
  label B_ta:
  e[1]:int = 0;
  a[0] = 6;
  c = a[1];
  e = (a + 24)[0]:int;
  if (eqz(e)) goto B_ua;
  if (eqz(e[12]:int)) goto B_ua;
  e = WebPFlipBuffer(c);
  if (e) goto B_ca;
  label B_ua:
  e = 0;
  d = a[72];
  if (eqz(d)) goto B_ca;
  e = WebPCopyDecBufferPixels(c, d);
  WebPFreeDecBuffer(a + 204);
  if (e) goto B_ca;
  memcpy(c, a[72], 84);
  e = 0;
  a[72] = 0;
  goto B_ca;
  label B_da:
  VP8ExitCritical(e, i);
  a[0] = 7;
  e = 3;
  label B_ca:
  c = a[0];
  label B_aa:
  if (c != 4) goto B_q;
  c = a[16];
  e = (a + 184)[0]:int - (a + 180)[0]:int;
  if (e < a[73] >> 3) goto B_ya;
  d = a[1];
  if (VP8LDecodeHeader(c, f = a + 68)) goto B_va;
  d = c[0];
  if (d != 3) goto B_xa;
  if (e >= a[73]) goto B_wa;
  label B_ya:
  e = 5;
  c[0] = 5;
  goto B_q;
  label B_xa:
  e = 5;
  if ((d & -3) == 5) goto B_q;
  label B_wa:
  if (a[0] != 3) goto B_za;
  VP8ExitCritical(a[16], f);
  label B_za:
  a[0] = 7;
  e = d;
  goto B_a;
  label B_va:
  c[0] =
    (e = WebPAllocateDecBuffer(a[17], (a + 72)[0]:int, (a + 24)[0]:int, d));
  if (eqz(e)) goto B_ab;
  if (a[0] != 3) goto B_bb;
  VP8ExitCritical(a[16], f);
  label B_bb:
  a[0] = 7;
  goto B_a;
  label B_ab:
  a[0] = 5;
  goto B_p;
  label B_q:
  if (a[0] != 5) goto B_a;
  label B_p:
  e = a[16];
  e[14]:int = (a + 184)[0]:int - (a + 180)[0]:int < a[73];
  d = VP8LDecodeImage(e);
  c = e[0]:int;
  if (d) goto B_cb;
  e = 5;
  if ((c & -3) == 5) goto B_a;
  if (a[0] != 3) goto B_db;
  VP8ExitCritical(a[16], a + 68);
  label B_db:
  a[0] = 7;
  e = c;
  goto B_a;
  label B_cb:
  e = 5;
  if (c == 5) goto B_a;
  a[0] = 6;
  c = a[1];
  e = (a + 24)[0]:int;
  if (eqz(e)) goto B_eb;
  if (eqz(e[12]:int)) goto B_eb;
  e = WebPFlipBuffer(c);
  if (e) goto B_a;
  label B_eb:
  e = a[72];
  if (e) goto B_fb;
  e = 0;
  goto B_a;
  label B_fb:
  e = WebPCopyDecBufferPixels(c, e);
  WebPFreeDecBuffer(a + 204);
  if (e) goto B_a;
  memcpy(c, a[72], 84);
  e = 0;
  a[72] = 0;
  label B_a:
  stack_pointer = b + 48;
  return e;
}

function WebPIUpdate(a:int_ptr, b:int, c:int):int {
  var e:int;
  var d:int = 2;
  if (eqz(a)) goto B_a;
  if (eqz(b)) goto B_a;
  d = select_if(3, select_if(0, 5, (d = a[0]) == 6), d == 7);
  if (d != 5) goto B_a;
  d = 2;
  br_table[B_c, B_a, B_b, ..B_a](a[44])
  label B_c:
  a[44] = 2;
  label B_b:
  d = (a + 192)[0]:int;
  if (d) goto B_e;
  e = 0;
  goto B_d;
  label B_e:
  e = d + (a + 180)[0]:int;
  label B_d:
  d = 2;
  if ((a + 188)[0]:int > c) goto B_a;
  a[47] = c;
  a[48] = b;
  (a + 184)[0]:int = c;
  DoRemap(a, b + (a + 180)[0]:int - e);
  d = IDecode(a);
  label B_a:
  return d;
}

function WebPInitCustomIo(a:int, b:int_ptr) {
  b[13] = 2;
  b[12] = 3;
  b[11] = 4;
  b[10] = a;
}

function CustomTeardown(a:int_ptr) {
  a = a[10];
  WebPSafeFree(a[10]);
  a[10] = 0;
}

function CustomSetup(a:int_ptr):int {
  var c:int;
  var b:int;
  var e:int;
  var h:int;
  var g:int_ptr;
  var i:int;
  var j:long;
  var k:int;
  var l:int;
  var m:int;
  var q:int;
  var d:int;
  var r:long;
  var p:int;
  b = a[10];
  c = (b[0]:int)[0]:int;
  d = c + -1;
  if (d >= 12) goto B_b;
  e = 1;
  if (2077 >> (d & 65535) & 1) goto B_a;
  label B_b:
  e = c + -7 < 4;
  label B_a:
  b[10]:simd@4 = V128;
  d = 0;
  if (
    eqz(WebPIoInitFromOptions(b[5]:int, a, select_if(11, 12, e)))) goto B_c;
  if (c + -11 < -4) goto B_d;
  if (eqz(e)) goto B_d;
  WebPInitUpsamplers();
  label B_d:
  var f:int_ptr = b + 40;
  if (eqz(a[23])) goto B_j;
  g = b[0]:int;
  h = g[0];
  e = h + -1;
  if (c > 10) goto B_k;
  if (e >= 12) goto B_g;
  c = 0;
  if (eqz(2077 >> (e & 65535) & 1)) goto B_g;
  goto B_f;
  label B_k:
  if (e >= 12) goto B_i;
  c = 0;
  if (eqz(2077 >> (e & 65535) & 1)) goto B_i;
  goto B_h;
  label B_j:
  if (c > 10) goto B_m;
  WebPInitSamplers();
  b[11]:int = 5;
  if (eqz(a[14])) goto B_l;
  f[0] = (h = WebPSafeMalloc(1L, ((g = (h = a[3]) + 1) & -2) + h));
  if (eqz(h)) goto B_c;
  b[1]:int = h;
  b[11]:int = 6;
  b[2]:int = (a = h + a[3]);
  b[3]:int = a + (g >> 1);
  WebPInitUpsamplers();
  goto B_l;
  label B_m:
  b[11]:int = 7;
  label B_l:
  d = 1;
  if (eqz(e)) goto B_c;
  br_table[B_o, B_n, B_n, B_n, B_n, B_o, ..B_n](c + -5)
  label B_o:
  b[12]:int = 8;
  goto B_e;
  label B_n:
  b[12]:int = select_if(9, 10, a = c > 10);
  if (a) goto B_c;
  goto B_e;
  label B_i:
  c = h + -11 < -4;
  label B_h:
  j = 
    (select_if(0L, j = i64_extend_i32_u(i = (e = a[24]) << 1), c) + j +
     i64_extend_i32_u(m = (l = (k = e + 1) & -2) << 1) <<
     2L) +
    select_if(283L, 367L, c);
  if (j > 4294967295L) goto B_c;
  var n:int = a[4];
  var o:int = a[3];
  p = a[25];
  f[0] = (h = WebPSafeMalloc(1L, q = i32_wrap_i64(j)));
  if (eqz(h)) goto B_c;
  b[6]:int = (d = h + q + select_if(-283, -367, c) + 31 & -32);
  b[8]:int = d + 168;
  b[7]:int = d + 84;
  b[9]:int = select_if(0, d + 252, c);
  if (
    WebPRescalerInit(d, a[3], a[4], g[4], e, p, (g + 32)[0]:int, 1, h)) goto B_p;
  return 0;
  label B_p:
  if (WebPRescalerInit(b[7]:int,
                       q = o + 1 >> 1,
                       n = n + 1 >> 1,
                       (g + 20)[0]:int,
                       k = k >> 1,
                       o = p + 1 >> 1,
                       (g + 36)[0]:int,
                       1,
                       f = h + (i << 2))) goto B_q;
  return 0;
  label B_q:
  d = 1;
  if (WebPRescalerInit(b[8]:int,
                       q,
                       n,
                       (g + 24)[0]:int,
                       k,
                       o,
                       (g + 40)[0]:int,
                       1,
                       f + (l << 2))) goto B_r;
  return 0;
  label B_r:
  b[11]:int = 11;
  if (c) goto B_c;
  d = 0;
  if (eqz(WebPRescalerInit(b[9]:int,
                           a[3],
                           a[4],
                           (g + 28)[0]:int,
                           e,
                           p,
                           (g + 44)[0]:int,
                           1,
                           f + (m << 2)))) goto B_c;
  b[12]:int = 12;
  goto B_e;
  label B_g:
  c = h + -11 < -4;
  label B_f:
  j = select_if(3L, 4L, c);
  j = j * i64_extend_i32_s(e = a[24]) +
      i64_extend_i32_u((i = select_if(252, 336, c)) + 31) +
      ((r = i64_extend_i32_u(g = e << 1) * j) << 2L);
  if (j > 4294967295L) goto B_c;
  p = a[4];
  m = a[3];
  k = a[25];
  f[0] = (h = WebPSafeMalloc(1L, l = i32_wrap_i64(j)));
  if (eqz(h)) goto B_c;
  b[6]:int = (f = h + l - i & -32);
  b[8]:int = f + 168;
  b[7]:int = f + 84;
  d = 0;
  b[9]:int = select_if(0, f + 252, c);
  if (
    eqz(
      WebPRescalerInit(f, a[3], a[4], i = h + (i32_wrap_i64(r) << 2), e, k, 0, 1, h))) goto B_c;
  d = 0;
  if (eqz(WebPRescalerInit(b[7]:int,
                           f = m + 1 >> 1,
                           l = p + 1 >> 1,
                           i + e,
                           e,
                           k,
                           0,
                           1,
                           h + (g << 2)))) goto B_c;
  d = 0;
  if (
    eqz(WebPRescalerInit(b[8]:int, f, l, i + g, e, k, 0, 1, h + (e << 4)))) goto B_c;
  b[11]:int = 13;
  WebPInitYUV444Converters();
  d = 1;
  if (c) goto B_c;
  d = 0;
  if (
    eqz(
      WebPRescalerInit(b[9]:int, a[3], a[4], i + e * 3, e, k, 0, 1, h + e * 24))) goto B_c;
  b[12]:int = 14;
  b[13]:int =
    select_if(15, select_if(15, 16, (a = (b[0]:int)[0]:int) == 10), a == 5);
  label B_e:
  WebPInitAlphaProcessing();
  d = 1;
  label B_c:
  return d;
}

function CustomPut(a:int_ptr):int {
  var b:int_ptr = 0;
  if (a[3] < 1) goto B_a;
  if (a[4] < 1) goto B_a;
  var c:int = call_indirect(a, b = a[10], b[11]);
  var d:int = b[12];
  if (eqz(d)) goto B_b;
  call_indirect(a, b, c, d);
  label B_b:
  b[4] = b[4] + c;
  b = 1;
  label B_a:
  return b;
}

function EmitSampledRGB(a:int_ptr, b:int_ptr):int {
  var c:int;
  WebPSamplerProcessPlane(a[5],
                          a[8],
                          a[6],
                          a[7],
                          a[9],
                          (b = b[0])[4] + (c = (b + 20)[0]:int) * a[2],
                          c,
                          a[3],
                          a[4],
                          1060336[b[0]]:int);
  return a[4];
}

function EmitFancyRGB(a:int_ptr, b:{ a:int, b:int, c:int, d:int }):int {
  var g:int;
  var h:int;
  var p:int;
  var n:int;
  var c:int = a[4];
  var d:int = a[3];
  var e:int = (d + 1) / 2;
  var f:int_ptr = b.a;
  var i:int = f[4] + (g = (f + 20)[0]:int) * (h = a[2]);
  var j:int = 1060208[f[0]]:int;
  var k:int = a[7];
  var l:int = a[6];
  var m:int = a[5];
  if (h) goto B_b;
  call_indirect(m, 0, l, k, l, k, i, 0, d, j);
  n = c;
  goto B_a;
  label B_b:
  call_indirect(b.b, m, b.c, b.d, l, k, i - g, i, d, j);
  n = c + 1;
  label B_a:
  var o:int = h + c;
  if (c >= 3) goto B_d;
  c = l;
  h = k;
  goto B_c;
  label B_d:
  g = h + 2;
  loop L_e {
    m = m + ((c = a[8]) << 1);
    call_indirect(m - c,
                  m,
                  l,
                  k,
                  c = l + (h = a[9]),
                  h = k + h,
                  (i = i + ((p = f[5]) << 1)) - p,
                  i,
                  d,
                  j);
    k = h;
    l = c;
    g = g + 2;
    if (g < o) continue L_e;
  }
  label B_c:
  m = m + a[8];
  if (a[21] + o >= a[22]) goto B_f;
  memcpy(b.b, m, d);
  memcpy(b.c, c, e);
  memcpy(b.d, h, e);
  return n + -1;
  label B_f:
  if (o & 1) goto B_g;
  call_indirect(m, 0, c, h, c, h, i + f[5], 0, d, j);
  label B_g:
  return n;
}

function EmitYUV(a:int_ptr, b:int_ptr):int {
  var i:int;
  var j:int;
  var k:int;
  b = b[0];
  var c:int = (b + 24)[0]:int;
  var d:int_ptr = b + 40;
  var e:int = d[0];
  var f:int = (b + 20)[0]:int;
  var g:int_ptr = b + 36;
  var h:int = g[0];
  WebPCopyPlane(a[5],
                a[8],
                b[4] + (b = (b + 32)[0]:int) * (i = a[2]),
                b,
                j = a[3],
                k = a[4]);
  WebPCopyPlane(a[6],
                a[9],
                f + h * (b = i >> 1),
                g[0],
                f = (j + 1) / 2,
                g = (k + 1) / 2);
  WebPCopyPlane(a[7], a[9], c + e * b, d[0], f, g);
  return a[4];
}

function EmitAlphaRGBA4444(a:int_ptr, b:int, c:int):int {
  var h:int;
  var i:int;
  var g:int;
  var u:simd;
  var v:int;
  var w:int;
  var x:simd;
  var d:int = a[26];
  if (eqz(d)) goto B_a;
  var e:int = a[4];
  var f:int = a[2];
  if (a[14]) goto B_c;
  g = f;
  goto B_b;
  label B_c:
  if (f) goto B_e;
  h = e + -1;
  g = 0;
  goto B_d;
  label B_e:
  g = f + -1;
  d = d - a[0];
  h = e;
  label B_d:
  i = e + f + (f = a[21]);
  if (i == a[22]) goto B_f;
  e = h;
  goto B_b;
  label B_f:
  e = i - f + g;
  label B_b:
  if (e < 1) goto B_a;
  var j:int_ptr = b[0]:int;
  var k:int = j[0];
  var l:int = a[3];
  var m:int = l & 1;
  var n:int = l & -4;
  var o:int = j[4] + (f = (j + 20)[0]:int) * g;
  g = o + 1;
  var p:int = (l << 1) + -1;
  h = 15;
  var q:int = 0;
  var r:int = l < 4;
  loop L_g {
    if (l < 1) goto B_h;
    f = 0;
    if (r) goto B_j;
    if (g >= d + l) goto B_k;
    if (d < g + p) goto B_j;
    label B_k:
    var s:simd = SimdLaneOp(V128, h);
    var t:simd = V128;
    b = n;
    f = d;
    loop L_l {
      h = g + SimdLaneOp(u = t i32x4_shl 1);
      let t0, t1, t2, t3 = 
        SimdStoreLane(
          h,
          u = 
            (SimdLoadLane(
               i = g + SimdLaneOp(u),
               SimdLoadLane(v = g + SimdLaneOp(u),
                            SimdLoadLane(w = g + SimdLaneOp(u), LoadSplat(h)))) v128_and
             V128) v128_or
            (x = LoadZero(f) i8x16_shr_u 4)),
        SimdStoreLane(w, u),
        SimdStoreLane(v, u),
        SimdStoreLane(i, u);
      f = f + 4;
      t = t i32x4_add V128;
      s = s v128_and i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(x));
      if (b = b + -4) continue L_l;
      t0;
      t1;
      t2;
      t3;
    }
    u = s v128_and SimdShuffleOp(s, u);
    h = SimdLaneOp(u v128_and SimdShuffleOp(u, u));
    f = n;
    if (l == n) goto B_i;
    label B_j:
    b = f | 1;
    if (eqz(m)) goto B_m;
    i = g + (f << 1);
    i[0]:byte = (i[0]:ubyte & 240) | (f = (d + f)[0]:ubyte >> 4);
    h = h & f;
    f = b;
    label B_m:
    if (l == b) goto B_i;
    b = d + f;
    i = l - f;
    f = g + (f << 1);
    loop L_n {
      f[0]:byte = (f[0]:ubyte & 240) | (v = b[0]:ubyte >> 4);
      w = f + 2;
      w[0]:byte = (w[0]:ubyte & 240) | (w = (b + 1)[0]:ubyte >> 4);
      h = (h & v) & w;
      b = b + 2;
      f = f + 4;
      i = i + -2;
      if (i) continue L_n;
    }
    label B_i:
    f = j[5];
    label B_h:
    g = g + f;
    d = d + a[0];
    q = q + 1;
    if (q != e) continue L_g;
  }
  if (h == 15) goto B_a;
  if (k + -11 < -4) goto B_a;
  call_indirect(o, l, e, f, 0[264921]:int);
  label B_a:
  return 0;
}

function EmitAlphaYUV(a:int_ptr, b:int_ptr, c:int):int {
  var f:int;
  var i:int;
  var d:int_ptr = b[0];
  var e:int = (d + 28)[0]:int;
  var g:int = e + (f = (d + 44)[0]:int) * a[2];
  var h:int = a[4];
  b = a[3];
  i = a[26];
  if (eqz(i)) goto B_b;
  if (h < 1) goto B_a;
  e = h & 1;
  if (h == 1) goto B_c;
  f = h & -2;
  loop L_d {
    g = memcpy(memcpy(g, i, b) + d[11], i = i + a[0], b) + d[11];
    i = i + a[0];
    f = f + -2;
    if (f) continue L_d;
  }
  label B_c:
  if (eqz(e)) goto B_a;
  memcpy(g, i, b);
  return 0;
  label B_b:
  if (eqz(e)) goto B_a;
  if (h < 1) goto B_a;
  i = h & 7;
  if (h < 8) goto B_e;
  a = h & -8;
  loop L_f {
    g = 
      memset(
        memset(
          memset(
            memset(
              memset(memset(memset(memset(g, 255, b) + f, 255, b) + f, 255, b) + f,
                     255,
                     b) +
              f,
              255,
              b) +
            f,
            255,
            b) +
          f,
          255,
          b) +
        f,
        255,
        b) +
      f;
    a = a + -8;
    if (a) continue L_f;
  }
  label B_e:
  if (eqz(i)) goto B_a;
  loop L_g {
    g = memset(g, 255, b) + f;
    i = i + -1;
    if (i) continue L_g;
  }
  label B_a:
  return 0;
}

function EmitAlphaRGB(a:int_ptr, b:int_ptr, c:int):int {
  var k:int;
  var j:int;
  var d:int = a[26];
  if (eqz(d)) goto B_a;
  var e:int_ptr = b[0];
  var f:int = e[0];
  var g:int = f == 4 | f == 9;
  b = a[4];
  var h:int = a[2];
  var i:int = a[3];
  if (a[14]) goto B_c;
  j = h;
  goto B_b;
  label B_c:
  if (h) goto B_e;
  k = b + -1;
  j = 0;
  goto B_d;
  label B_e:
  j = h + -1;
  d = d - a[0];
  k = b;
  label B_d:
  h = b + h + (b = a[21]);
  if (h == a[22]) goto B_f;
  b = k;
  goto B_b;
  label B_f:
  b = h - b + j;
  label B_b:
  if (
    eqz(call_indirect(
          d,
          a[0],
          i,
          b,
          (h = e[4] + (a = (e + 20)[0]:int) * j) + select_if(0, 3, g),
          a,
          0[264922]:int))) goto B_a;
  if (f + -11 < -4) goto B_a;
  call_indirect(h, g, i, b, e[5], 0[264920]:int);
  label B_a:
  return 0;
}

function EmitRescaledYUV(a:int_ptr, b:int_ptr):int {
  var e:int;
  var j:int;
  var c:int = b[6];
  var d:int = a[4];
  e = (b[0])[0]:int;
  if (e > 12) goto B_c;
  if (1 << e & 4154) goto B_b;
  label B_c:
  if (e + -11 < -4) goto B_a;
  label B_b:
  e = a[26];
  if (eqz(e)) goto B_a;
  WebPMultRows(a[5], a[8], e, a[0], a[3], d, 0);
  label B_a:
  if (d >= 1) goto B_d;
  return 0;
  label B_d:
  var f:int = d + 1 >> 1;
  var g:int = a[8];
  e = a[5];
  var h:int = 0;
  var i:int = d;
  loop L_e {
    e = e + (j = WebPRescalerImport(c, i, e, g)) * g;
    h = WebPRescalerExport(c) + h;
    i = i - j;
    if (i > 0) continue L_e;
  }
  if (d < 1) goto B_f;
  g = b[7];
  j = a[9];
  e = a[6];
  i = f;
  loop L_g {
    c = WebPRescalerImport(g, i, e, j);
    WebPRescalerExport(g);
    e = e + c * j;
    i = i - c;
    if (i > 0) continue L_g;
  }
  c = b[8];
  g = a[9];
  e = a[7];
  loop L_h {
    i = WebPRescalerImport(c, f, e, g);
    WebPRescalerExport(c);
    e = e + i * g;
    f = f - i;
    if (f > 0) continue L_h;
  }
  label B_f:
  return h;
}

function EmitRescaledAlphaYUV(a:int_ptr, b:int_ptr, c:int):int {
  var f:int;
  var g:int;
  var l:int;
  var i:int;
  var d:int_ptr = b[0];
  var e:int = (d + 28)[0]:int;
  var h:int = e + (f = (d + 44)[0]:int) * (g = b[4]);
  i = a[26];
  if (eqz(i)) goto B_b;
  f = a[4];
  if (f < 1) goto B_a;
  var j:int = (d + 32)[0]:int;
  c = b[9];
  e = a[0];
  var k:int = d[4];
  a = 0;
  loop L_c {
    i = i + (l = WebPRescalerImport(c, f, i, e)) * e;
    a = WebPRescalerExport(c) + a;
    f = f - l;
    if (f > 0) continue L_c;
  }
  if (a < 1) goto B_a;
  WebPMultRows(k + j * g, d[8], h, d[11], (b[9])[13]:int, a, 1);
  return 0;
  label B_b:
  if (eqz(e)) goto B_a;
  if (c < 1) goto B_a;
  i = a[24];
  a = c & 7;
  if (c < 8) goto B_d;
  c = c & -8;
  loop L_e {
    h = 
      memset(
        memset(
          memset(
            memset(
              memset(memset(memset(memset(h, 255, i) + f, 255, i) + f, 255, i) + f,
                     255,
                     i) +
              f,
              255,
              i) +
            f,
            255,
            i) +
          f,
          255,
          i) +
        f,
        255,
        i) +
      f;
    c = c + -8;
    if (c) continue L_e;
  }
  label B_d:
  if (eqz(a)) goto B_a;
  loop L_f {
    h = memset(h, 255, i) + f;
    a = a + -1;
    if (a) continue L_f;
  }
  label B_a:
  return 0;
}

function EmitRescaledRGB(a:int_ptr, b:int_ptr):int {
  var c:int;
  var i:int_ptr;
  var j:int;
  var k:int;
  var l:int_ptr;
  c = a[4];
  if (c >= 1) goto B_a;
  return 0;
  label B_a:
  var d:int = c + 1 >> 1;
  var e:int_ptr = b[6];
  var f:int = 0;
  var g:int = 0;
  var h:int = 0;
  loop L_b {
    i = WebPRescalerImport(e, c - f, a[5] + (i = a[8]) * f, i);
    if (eqz(WebPRescaleNeededLines(b[7], e = d - g))) goto B_c;
    j = WebPRescalerImport(b[7], e, a[6] + (j = a[9]) * g, j);
    WebPRescalerImport(b[8], e, a[7] + (k = a[9]) * g, k);
    g = j + g;
    label B_c:
    f = i + f;
    k = 0;
    e = b[6];
    if (e[16] >= e[14]) goto B_d;
    var m:int = 1060272[(l = b[0])[0]]:int;
    j = l[4] + l[5] * (b[4] + h);
    k = 0;
    loop L_e {
      if (e[6] > 0) goto B_d;
      i = b[7];
      if (i[16] >= i[14]) goto B_d;
      if (i[6] > 0) goto B_d;
      WebPRescalerExportRow(e);
      WebPRescalerExportRow(b[7]);
      WebPRescalerExportRow(b[8]);
      e = b[6];
      call_indirect(e[17], (b[7])[17]:int, (b[8])[17]:int, j, e[13], m);
      k = k + 1;
      j = j + l[5];
      e = b[6];
      if (e[16] < e[14]) continue L_e;
    }
    label B_d:
    h = k + h;
    if (f < c) continue L_b;
  }
  return h;
}

function EmitRescaledAlphaRGB(a:int_ptr, b:int_ptr, c:int):int {
  var f:int;
  var g:int;
  var h:int;
  if (eqz(a[26])) goto B_a;
  if (c < 1) goto B_a;
  var d:int = b[4] + c;
  var e:int_ptr = b[9];
  loop L_b {
    WebPRescalerImport(e,
                       (f = a[2]) - (g = e[15]) + a[4],
                       a[26] + (h = a[0]) * (g - f),
                       h);
    c = c - call_indirect(b, d - c, c, b[13]);
    if (c > 0) continue L_b;
  }
  label B_a:
  return 0;
}

function ExportAlphaRGBA4444(a:int_ptr, b:int, c:int):int {
  var h:int;
  var n:int;
  var d:int = 0;
  var e:int = a[9];
  if (e[16]:int >= e[14]:int) goto B_a;
  var f:int_ptr = a[0];
  var g:int = f[0] + -7;
  var i:int = f[4] + (h = (f + 20)[0]:int) * b;
  var j:int = e[13]:int;
  d = 0;
  b = 15;
  if (e[6]:int > 0) goto B_b;
  if (c < 1) goto B_b;
  var k:int = j & -2;
  var l:int = j & 1;
  var m:int = i + 1;
  b = 15;
  d = 0;
  loop L_c {
    WebPRescalerExportRow(e);
    if (j < 1) goto B_d;
    h = 0;
    if (j == 1) goto B_e;
    h = 0;
    e = m;
    loop L_f {
      e[0]:byte =
        (e[0]:ubyte & 240) | (n = ((a[9])[17]:int + h)[0]:ubyte >> 4);
      var o:int = e + 2;
      o[0]:byte =
        (o[0]:ubyte & 240) | (o = ((a[9])[17]:int + h + 1)[0]:ubyte >> 4);
      b = (b & n) & o;
      e = e + 4;
      if (k != (h = h + 2)) continue L_f;
    }
    label B_e:
    if (eqz(l)) goto B_d;
    e = m + (h << 1);
    e[0]:byte =
      (e[0]:ubyte & 240) | (e = ((a[9])[17]:int + h)[0]:ubyte >> 4);
    b = b & e;
    label B_d:
    d = d + 1;
    h = f[5];
    e = a[9];
    if (e[16]:int >= e[14]:int) goto B_b;
    if (e[6]:int > 0) goto B_b;
    m = m + h;
    if (d < c) continue L_c;
  }
  label B_b:
  if (g > 3) goto B_a;
  if (b == 15) goto B_a;
  call_indirect(i, j, d, h, 0[264921]:int);
  label B_a:
  return d;
}

function ExportAlpha(a:int_ptr, b:int, c:int):int {
  var i:int;
  var d:int = 0;
  var e:int_ptr = a[9];
  if (e[16] >= e[14]) goto B_a;
  var f:int_ptr = a[0];
  d = f[0];
  var g:int = d == 4 | d == 9;
  var h:int = d + -7;
  var j:int = f[4] + (i = (f + 20)[0]:int) * b;
  var k:int = e[13];
  d = 0;
  if (e[6] <= 0) goto B_c;
  b = 0;
  goto B_b;
  label B_c:
  b = 0;
  if (c < 1) goto B_b;
  b = j + select_if(0, 3, g);
  var l:int = 1;
  var m:int = 0;
  loop L_e {
    d = l;
    WebPRescalerExportRow(e);
    m = call_indirect((a[9])[17]:int, 0, k, 1, b, 0, 0[264922]:int) | m;
    i = f[5];
    e = a[9];
    if (e[16] >= e[14]) goto B_d;
    if (e[6] > 0) goto B_d;
    l = d + 1;
    b = b + i;
    if (d < c) continue L_e;
  }
  label B_d:
  b = m != 0;
  label B_b:
  if (h > 3) goto B_a;
  if (eqz(b)) goto B_a;
  call_indirect(j, g, k, d, i, 0[264920]:int);
  label B_a:
  return d;
}

function VP8ResetProba(a:short_ptr) {
  a[0] = -1;
  (a + 2)[0]:byte = -1;
}

function VP8ParseIntraModeRow(a:int, b:int):int {
  var l:long;
  var m:long;
  var n:long_ptr@1;
  var k:int;
  var i:int;
  var j:long_ptr@1;
  var u:int;
  var v:int;
  if (b[75]:int < 1) goto B_a;
  var c:int_ptr@1 = b + 2292;
  var d:int = 0;
  var e:int = 0;
  loop L_b {
    var f:int = b[572]:int;
    var g:long_ptr@1 = b[587]:int;
    var h:int = 0;
    if (eqz(b[30]:int)) goto B_c;
    i = a[2]:int;
    j = b[948]:ubyte;
    h = a[3]:int;
    if (h > -1) goto B_d;
    k = a[4]:int;
    if (k >= a[6]:int) goto B_e;
    a[4]:int = k + 7;
    a[0]:long =
      a[0]:long << 56L |
      ((((l = k[0]:long@1) << 56L | (l & 65280L) << 40L) |
        ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
       (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
        (l >> 40L & 65280L))) >>
      8L;
    h = h + 56;
    goto B_d;
    label B_e:
    VP8LoadFinalBytes(a);
    h = a[3]:int;
    label B_d:
    j = i * j >> 8;
    if (
      j >= (k = i32_wrap_i64((l = a[0]:long) >> (m = i64_extend_i32_u(h))))) goto B_g;
    a[0]:long = (l = l - (i64_extend_i32_u(j + 1) << m));
    i = i - j;
    goto B_f;
    label B_g:
    i = j + 1;
    label B_f:
    a[3]:int = (h = h - (n = clz(i) ^ 24));
    a[2]:int = (i = (i << n) + -1);
    if (j < k) goto B_h;
    j = b[949]:ubyte;
    if (h > -1) goto B_i;
    k = a[4]:int;
    if (k >= a[6]:int) goto B_j;
    a[4]:int = k + 7;
    a[0]:long =
      (l = l << 56L |
           ((((l = k[0]:long@1) << 56L | (l & 65280L) << 40L) |
             ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
            (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
             (l >> 40L & 65280L))) >>
           8L);
    h = h + 56;
    goto B_i;
    label B_j:
    VP8LoadFinalBytes(a);
    l = a[0]:long;
    h = a[3]:int;
    label B_i:
    j = i * j >> 8;
    if (j >= (k = i32_wrap_i64(l >> (m = i64_extend_i32_u(h))))) goto B_l;
    a[0]:long = l - (i64_extend_i32_u(j + 1) << m);
    i = i - j;
    goto B_k;
    label B_l:
    i = j + 1;
    label B_k:
    a[3]:int = h - (n = clz(i) ^ 24);
    a[2]:int = (i << n) + -1;
    h = j < k;
    goto B_c;
    label B_h:
    j = b[950]:ubyte;
    if (h > -1) goto B_m;
    k = a[4]:int;
    if (k >= a[6]:int) goto B_n;
    a[4]:int = k + 7;
    a[0]:long =
      (l = l << 56L |
           ((((l = k[0]:long@1) << 56L | (l & 65280L) << 40L) |
             ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
            (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
             (l >> 40L & 65280L))) >>
           8L);
    h = h + 56;
    goto B_m;
    label B_n:
    VP8LoadFinalBytes(a);
    l = a[0]:long;
    h = a[3]:int;
    label B_m:
    j = i * j >> 8;
    if (j >= (k = i32_wrap_i64(l >> (m = i64_extend_i32_u(h))))) goto B_p;
    a[0]:long = l - (i64_extend_i32_u(j + 1) << m);
    i = i - j;
    goto B_o;
    label B_p:
    i = j + 1;
    label B_o:
    a[3]:int = h - (n = clz(i) ^ 24);
    a[2]:int = (i << n) + -1;
    h = j < k | 2;
    label B_c:
    var o:byte_ptr = g + e * 800;
    o[798] = h;
    if (b[570]:int) goto B_r;
    h = a[3]:int;
    g = a[2]:int;
    goto B_q;
    label B_r:
    g = a[2]:int;
    j = b[2284]:ubyte;
    h = a[3]:int;
    if (h > -1) goto B_s;
    i = a[4]:int;
    if (i >= a[6]:int) goto B_t;
    a[4]:int = i + 7;
    a[0]:long =
      a[0]:long << 56L |
      ((((l = i[0]:long@1) << 56L | (l & 65280L) << 40L) |
        ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
       (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
        (l >> 40L & 65280L))) >>
      8L;
    h = h + 56;
    goto B_s;
    label B_t:
    VP8LoadFinalBytes(a);
    h = a[3]:int;
    label B_s:
    j = g * j >> 8;
    if (
      j >= (i = i32_wrap_i64((l = a[0]:long) >> (m = i64_extend_i32_u(h))))) goto B_v;
    a[0]:long = l - (i64_extend_i32_u(j + 1) << m);
    g = g - j;
    goto B_u;
    label B_v:
    g = j + 1;
    label B_u:
    o[797] = j < i;
    a[3]:int = (h = h - (j = clz(g) ^ 24));
    a[2]:int = (g = (g << j) + -1);
    label B_q:
    if (h > -1) goto B_w;
    j = a[4]:int;
    if (j >= a[6]:int) goto B_x;
    a[4]:int = j + 7;
    a[0]:long =
      a[0]:long << 56L |
      ((((l = j[0]) << 56L | (l & 65280L) << 40L) |
        ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
       (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
        (l >> 40L & 65280L))) >>
      8L;
    h = h + 56;
    goto B_w;
    label B_x:
    VP8LoadFinalBytes(a);
    h = a[3]:int;
    label B_w:
    i = g * 145 >> 8;
    j = i >= i32_wrap_i64((l = a[0]:long) >> (m = i64_extend_i32_u(h)));
    if (j) goto B_z;
    a[0]:long = l - (i64_extend_i32_u(i + 1) << m);
    g = g - i;
    goto B_y;
    label B_z:
    g = i + 1;
    label B_y:
    var p:int_ptr@1 = f + (e << 2);
    o[768] = j;
    a[3]:int = (h = h - (i = clz(g) ^ 24));
    a[2]:int = (g = (g << i) + -1);
    if (j) goto B_ba;
    if (h > -1) goto B_ca;
    j = a[4]:int;
    if (j >= a[6]:int) goto B_da;
    a[4]:int = j + 7;
    a[0]:long =
      a[0]:long << 56L |
      ((((l = j[0]) << 56L | (l & 65280L) << 40L) |
        ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
       (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
        (l >> 40L & 65280L))) >>
      8L;
    h = h + 56;
    goto B_ca;
    label B_da:
    VP8LoadFinalBytes(a);
    h = a[3]:int;
    label B_ca:
    j = g * 156 >> 8;
    f = j >= i32_wrap_i64((l = a[0]:long) >> (m = i64_extend_i32_u(h)));
    if (f) goto B_fa;
    a[0]:long = (l = l - (i64_extend_i32_u(j + 1) << m));
    j = g - j;
    goto B_ea;
    label B_fa:
    j = j + 1;
    label B_ea:
    a[3]:int = (h = h - (g = clz(j) ^ 24));
    a[2]:int = (g = (j << g) + -1);
    if (f) goto B_ha;
    if (h > -1) goto B_ia;
    j = a[4]:int;
    if (j >= a[6]:int) goto B_ja;
    a[4]:int = j + 7;
    a[0]:long =
      (l = l << 56L |
           ((((l = j[0]) << 56L | (l & 65280L) << 40L) |
             ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
            (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
             (l >> 40L & 65280L))) >>
           8L);
    h = h + 56;
    goto B_ia;
    label B_ja:
    VP8LoadFinalBytes(a);
    l = a[0]:long;
    h = a[3]:int;
    label B_ia:
    f = g >> 1 & 16777215;
    if (f >= i32_wrap_i64(l >> (m = i64_extend_i32_u(h)))) goto B_la;
    j = 1;
    a[0]:long = l - (i64_extend_i32_u(f + 1) << m);
    g = g - f;
    goto B_ka;
    label B_la:
    g = f + 1;
    j = 3;
    label B_ka:
    h = h - (f = clz(g) ^ 24);
    g = g << f;
    goto B_ga;
    label B_ha:
    if (h > -1) goto B_ma;
    j = a[4]:int;
    if (j >= a[6]:int) goto B_na;
    a[4]:int = j + 7;
    a[0]:long =
      (l = l << 56L |
           ((((l = j[0]) << 56L | (l & 65280L) << 40L) |
             ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
            (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
             (l >> 40L & 65280L))) >>
           8L);
    h = h + 56;
    goto B_ma;
    label B_na:
    VP8LoadFinalBytes(a);
    l = a[0]:long;
    h = a[3]:int;
    label B_ma:
    j = g * 163 >> 8;
    if (j >= i32_wrap_i64(l >> (m = i64_extend_i32_u(h)))) goto B_pa;
    a[0]:long = l - (i64_extend_i32_u(j + 1) << m);
    g = g - j;
    j = 2;
    goto B_oa;
    label B_pa:
    g = j + 1;
    j = 0;
    label B_oa:
    h = h - (f = clz(g) ^ 24);
    g = g << f;
    label B_ga:
    a[3]:int = h;
    a[2]:int = g + -1;
    o[769] = j;
    p[0] = (h = j * 16843009);
    c[0] = h;
    goto B_aa;
    label B_ba:
    var q:int = f + d;
    var r:int_ptr@1 = o + 769;
    var s:int = 0;
    loop L_qa {
      var t:int = c + s;
      h = t[0]:ubyte;
      j = 0;
      loop L_ra {
        k = q + j;
        i = k[0]:ubyte * 90 + h * 9 + 1051456;
        f = i[0]:ubyte;
        g = a[2]:int;
        h = a[3]:int;
        if (h > -1) goto B_sa;
        n = a[4]:int;
        if (n >= a[6]:int) goto B_ta;
        a[4]:int = n + 7;
        a[0]:long =
          a[0]:long << 56L |
          ((((l = n[0]) << 56L | (l & 65280L) << 40L) |
            ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
           (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
            (l >> 40L & 65280L))) >>
          8L;
        h = h + 56;
        goto B_sa;
        label B_ta:
        VP8LoadFinalBytes(a);
        h = a[3]:int;
        label B_sa:
        f = g * f >> 8;
        n = f >= i32_wrap_i64((l = a[0]:long) >> (m = i64_extend_i32_u(h)));
        if (n) goto B_va;
        a[0]:long = (l = l - (i64_extend_i32_u(f + 1) << m));
        g = g - f;
        goto B_ua;
        label B_va:
        g = f + 1;
        label B_ua:
        a[3]:int = (f = h - (u = clz(g) ^ 24));
        a[2]:int = (g = (g << u) + -1);
        h = 0;
        if (n) goto B_wa;
        h = i[1]:ubyte;
        if (f > -1) goto B_xa;
        n = a[4]:int;
        if (n >= a[6]:int) goto B_ya;
        a[4]:int = n + 7;
        a[0]:long =
          (l = l << 56L |
               ((((l = n[0]) << 56L | (l & 65280L) << 40L) |
                 ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
                (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
                 (l >> 40L & 65280L))) >>
               8L);
        f = f + 56;
        goto B_xa;
        label B_ya:
        VP8LoadFinalBytes(a);
        l = a[0]:long;
        f = a[3]:int;
        label B_xa:
        h = g * h >> 8;
        n = h >= i32_wrap_i64(l >> (m = i64_extend_i32_u(f)));
        if (n) goto B_ab;
        a[0]:long = (l = l - (i64_extend_i32_u(h + 1) << m));
        h = g - h;
        goto B_za;
        label B_ab:
        h = h + 1;
        label B_za:
        a[3]:int = (g = f - (u = clz(h) ^ 24));
        a[2]:int = (f = (h << u) + -1);
        h = 1;
        if (n) goto B_wa;
        h = i[2]:ubyte;
        if (g > -1) goto B_bb;
        n = a[4]:int;
        if (n >= a[6]:int) goto B_cb;
        a[4]:int = n + 7;
        a[0]:long =
          (l = l << 56L |
               ((((l = n[0]) << 56L | (l & 65280L) << 40L) |
                 ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
                (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
                 (l >> 40L & 65280L))) >>
               8L);
        g = g + 56;
        goto B_bb;
        label B_cb:
        VP8LoadFinalBytes(a);
        l = a[0]:long;
        g = a[3]:int;
        label B_bb:
        h = f * h >> 8;
        n = h >= i32_wrap_i64(l >> (m = i64_extend_i32_u(g)));
        if (n) goto B_eb;
        a[0]:long = (l = l - (i64_extend_i32_u(h + 1) << m));
        h = f - h;
        goto B_db;
        label B_eb:
        h = h + 1;
        label B_db:
        a[3]:int = (g = g - (f = clz(h) ^ 24));
        a[2]:int = (f = (h << f) + -1);
        h = 2;
        if (n) goto B_wa;
        h = i[3]:ubyte;
        if (g > -1) goto B_fb;
        n = a[4]:int;
        if (n >= a[6]:int) goto B_gb;
        a[4]:int = n + 7;
        a[0]:long =
          (l = l << 56L |
               ((((l = n[0]) << 56L | (l & 65280L) << 40L) |
                 ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
                (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
                 (l >> 40L & 65280L))) >>
               8L);
        g = g + 56;
        goto B_fb;
        label B_gb:
        VP8LoadFinalBytes(a);
        l = a[0]:long;
        g = a[3]:int;
        label B_fb:
        n = f * h >> 8;
        if (
          n >= (u = i32_wrap_i64(l >> (m = i64_extend_i32_u(g))))) goto B_ib;
        a[0]:long = (l = l - (i64_extend_i32_u(n + 1) << m));
        f = f - n;
        goto B_hb;
        label B_ib:
        f = n + 1;
        label B_hb:
        a[3]:int = (h = g - (v = clz(f) ^ 24));
        a[2]:int = (g = (f << v) + -1);
        if (n < u) goto B_kb;
        f = i[4]:ubyte;
        if (h > -1) goto B_lb;
        n = a[4]:int;
        if (n >= a[6]:int) goto B_mb;
        a[4]:int = n + 7;
        a[0]:long =
          (l = l << 56L |
               ((((l = n[0]) << 56L | (l & 65280L) << 40L) |
                 ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
                (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
                 (l >> 40L & 65280L))) >>
               8L);
        h = h + 56;
        goto B_lb;
        label B_mb:
        VP8LoadFinalBytes(a);
        l = a[0]:long;
        h = a[3]:int;
        label B_lb:
        f = g * f >> 8;
        n = f >= i32_wrap_i64(l >> (m = i64_extend_i32_u(h)));
        if (n) goto B_ob;
        a[0]:long = (l = l - (i64_extend_i32_u(f + 1) << m));
        g = g - f;
        goto B_nb;
        label B_ob:
        g = f + 1;
        label B_nb:
        a[3]:int = (f = h - (u = clz(g) ^ 24));
        a[2]:int = (g = (g << u) + -1);
        h = 3;
        if (n) goto B_wa;
        h = i[5]:ubyte;
        if (f > -1) goto B_pb;
        i = a[4]:int;
        if (i >= a[6]:int) goto B_qb;
        a[4]:int = i + 7;
        a[0]:long =
          (l = l << 56L |
               ((((l = i[0]:long@1) << 56L | (l & 65280L) << 40L) |
                 ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
                (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
                 (l >> 40L & 65280L))) >>
               8L);
        f = f + 56;
        goto B_pb;
        label B_qb:
        VP8LoadFinalBytes(a);
        l = a[0]:long;
        f = a[3]:int;
        label B_pb:
        h = g * h >> 8;
        if (h >= i32_wrap_i64(l >> (m = i64_extend_i32_u(f)))) goto B_sb;
        a[0]:long = l - (i64_extend_i32_u(h + 1) << m);
        i = g - h;
        h = 5;
        goto B_rb;
        label B_sb:
        i = h + 1;
        h = 4;
        label B_rb:
        g = f - (n = clz(i) ^ 24);
        f = i << n;
        goto B_jb;
        label B_kb:
        f = i[6]:ubyte;
        if (h > -1) goto B_tb;
        n = a[4]:int;
        if (n >= a[6]:int) goto B_ub;
        a[4]:int = n + 7;
        a[0]:long =
          (l = l << 56L |
               ((((l = n[0]) << 56L | (l & 65280L) << 40L) |
                 ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
                (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
                 (l >> 40L & 65280L))) >>
               8L);
        h = h + 56;
        goto B_tb;
        label B_ub:
        VP8LoadFinalBytes(a);
        l = a[0]:long;
        h = a[3]:int;
        label B_tb:
        f = g * f >> 8;
        n = f >= i32_wrap_i64(l >> (m = i64_extend_i32_u(h)));
        if (n) goto B_wb;
        a[0]:long = (l = l - (i64_extend_i32_u(f + 1) << m));
        g = g - f;
        goto B_vb;
        label B_wb:
        g = f + 1;
        label B_vb:
        a[3]:int = (f = h - (u = clz(g) ^ 24));
        a[2]:int = (g = (g << u) + -1);
        h = 6;
        if (n) goto B_wa;
        h = i[7]:ubyte;
        if (f > -1) goto B_xb;
        n = a[4]:int;
        if (n >= a[6]:int) goto B_yb;
        a[4]:int = n + 7;
        a[0]:long =
          (l = l << 56L |
               ((((l = n[0]) << 56L | (l & 65280L) << 40L) |
                 ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
                (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
                 (l >> 40L & 65280L))) >>
               8L);
        f = f + 56;
        goto B_xb;
        label B_yb:
        VP8LoadFinalBytes(a);
        l = a[0]:long;
        f = a[3]:int;
        label B_xb:
        h = g * h >> 8;
        n = h >= i32_wrap_i64(l >> (m = i64_extend_i32_u(f)));
        if (n) goto B_ac;
        a[0]:long = (l = l - (i64_extend_i32_u(h + 1) << m));
        h = g - h;
        goto B_zb;
        label B_ac:
        h = h + 1;
        label B_zb:
        a[3]:int = (g = f - (u = clz(h) ^ 24));
        a[2]:int = (f = (h << u) + -1);
        h = 7;
        if (n) goto B_wa;
        h = i[8]:ubyte;
        if (g > -1) goto B_bc;
        i = a[4]:int;
        if (i >= a[6]:int) goto B_cc;
        a[4]:int = i + 7;
        a[0]:long =
          (l = l << 56L |
               ((((l = i[0]:long@1) << 56L | (l & 65280L) << 40L) |
                 ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
                (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
                 (l >> 40L & 65280L))) >>
               8L);
        g = g + 56;
        goto B_bc;
        label B_cc:
        VP8LoadFinalBytes(a);
        l = a[0]:long;
        g = a[3]:int;
        label B_bc:
        h = f * h >> 8;
        if (h >= i32_wrap_i64(l >> (m = i64_extend_i32_u(g)))) goto B_ec;
        a[0]:long = l - (i64_extend_i32_u(h + 1) << m);
        f = f - h;
        h = 9;
        goto B_dc;
        label B_ec:
        f = h + 1;
        h = 8;
        label B_dc:
        g = g - (i = clz(f) ^ 24);
        f = f << i;
        label B_jb:
        a[3]:int = g;
        a[2]:int = f + -1;
        label B_wa:
        k[0]:byte = h;
        j = j + 1;
        if (j != 4) continue L_ra;
      }
      r[0] = p[0];
      t[0]:byte = h;
      r = r + 4;
      s = s + 1;
      if (s != 4) continue L_qa;
    }
    label B_aa:
    j = a[2]:int;
    h = a[3]:int;
    if (h > -1) goto B_fc;
    g = a[4]:int;
    if (g >= a[6]:int) goto B_gc;
    a[4]:int = g + 7;
    a[0]:long =
      a[0]:long << 56L |
      ((((l = g[0]) << 56L | (l & 65280L) << 40L) |
        ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
       (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
        (l >> 40L & 65280L))) >>
      8L;
    h = h + 56;
    goto B_fc;
    label B_gc:
    VP8LoadFinalBytes(a);
    h = a[3]:int;
    label B_fc:
    g = j * 142 >> 8;
    f = g >= i32_wrap_i64((l = a[0]:long) >> (m = i64_extend_i32_u(h)));
    if (f) goto B_ic;
    a[0]:long = (l = l - (i64_extend_i32_u(g + 1) << m));
    j = j - g;
    goto B_hc;
    label B_ic:
    j = g + 1;
    label B_hc:
    a[3]:int = (h = h - (g = clz(j) ^ 24));
    a[2]:int = (g = (j << g) + -1);
    j = 0;
    if (f) goto B_jc;
    if (h > -1) goto B_kc;
    j = a[4]:int;
    if (j >= a[6]:int) goto B_lc;
    a[4]:int = j + 7;
    a[0]:long =
      (l = l << 56L |
           ((((l = j[0]) << 56L | (l & 65280L) << 40L) |
             ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
            (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
             (l >> 40L & 65280L))) >>
           8L);
    h = h + 56;
    goto B_kc;
    label B_lc:
    VP8LoadFinalBytes(a);
    l = a[0]:long;
    h = a[3]:int;
    label B_kc:
    j = g * 114 >> 8;
    f = j >= i32_wrap_i64(l >> (m = i64_extend_i32_u(h)));
    if (f) goto B_nc;
    a[0]:long = (l = l - (i64_extend_i32_u(j + 1) << m));
    j = g - j;
    goto B_mc;
    label B_nc:
    j = j + 1;
    label B_mc:
    a[3]:int = (h = h - (g = clz(j) ^ 24));
    a[2]:int = (g = (j << g) + -1);
    j = 2;
    if (f) goto B_jc;
    if (h > -1) goto B_oc;
    j = a[4]:int;
    if (j >= a[6]:int) goto B_pc;
    a[4]:int = j + 7;
    a[0]:long =
      (l = l << 56L |
           ((((l = j[0]) << 56L | (l & 65280L) << 40L) |
             ((l & 16711680L) << 24L | (l & 4278190080L) << 8L)) |
            (((l >> 8L & 4278190080L) | (l >> 24L & 16711680L)) |
             (l >> 40L & 65280L))) >>
           8L);
    h = h + 56;
    goto B_oc;
    label B_pc:
    VP8LoadFinalBytes(a);
    l = a[0]:long;
    h = a[3]:int;
    label B_oc:
    f = g * 183 >> 8;
    if (f >= i32_wrap_i64(l >> (m = i64_extend_i32_u(h)))) goto B_rc;
    j = 1;
    a[0]:long = l - (i64_extend_i32_u(f + 1) << m);
    g = g - f;
    goto B_qc;
    label B_rc:
    g = f + 1;
    j = 3;
    label B_qc:
    a[3]:int = h - (f = clz(g) ^ 24);
    a[2]:int = (g << f) + -1;
    label B_jc:
    o[785] = j;
    d = d + 4;
    e = e + 1;
    if (e < b[75]:int) continue L_b;
  }
  label B_a:
  return eqz((b + 44)[0]:int);
}

function VP8ParseProba(a:int, b:int) {
  var r:long;
  var p:int;
  var s:long;
  var q:long_ptr@1;
  var l:int;
  var o:int;
  var n:int;
  var c:int = b + 951;
  var d:int = 0;
  var e:int = b + 948;
  var f:int = 0;
  loop L_a {
    var g:int = d;
    var h:int = 0;
    loop L_b {
      var i:int = 0;
      var j:int = g;
      loop L_c {
        var k:int = c + j;
        l = 0;
        loop L_d {
          var m:int = j + l;
          n = (m + 1049344)[0]:ubyte;
          o = a[2]:int;
          p = a[3]:int;
          if (p > -1) goto B_e;
          q = a[4]:int;
          if (q >= a[6]:int) goto B_f;
          a[4]:int = q + 7;
          a[0]:long =
            a[0]:long << 56L |
            ((((r = q[0]) << 56L | (r & 65280L) << 40L) |
              ((r & 16711680L) << 24L | (r & 4278190080L) << 8L)) |
             (((r >> 8L & 4278190080L) | (r >> 24L & 16711680L)) |
              (r >> 40L & 65280L))) >>
            8L;
          p = p + 56;
          goto B_e;
          label B_f:
          VP8LoadFinalBytes(a);
          p = a[3]:int;
          label B_e:
          n = o * n >> 8;
          q = n >= i32_wrap_i64((r = a[0]:long) >> (s = i64_extend_i32_u(p)));
          if (q) goto B_h;
          a[0]:long = r - (i64_extend_i32_u(n + 1) << s);
          o = o - n;
          goto B_g;
          label B_h:
          o = n + 1;
          label B_g:
          a[3]:int = p - (n = clz(o) ^ 24);
          a[2]:int = (o << n) + -1;
          if (q) goto B_j;
          p = VP8GetValue(a, 8);
          goto B_i;
          label B_j:
          p = (m + 1050400)[0]:ubyte;
          label B_i:
          (k + l)[0]:byte = p;
          l = l + 1;
          if (l != 11) continue L_d;
        }
        j = j + 11;
        i = i + 1;
        if (i != 3) continue L_c;
      }
      g = g + 33;
      h = h + 1;
      if (h != 8) continue L_b;
    }
    l = e + f * 68;
    (l + 1124)[0]:int = (n = (o = e + f * 264) + 3);
    (l + 1120)[0]:int = o + 234;
    (l + 1116)[0]:int = (p = o + 201);
    (l + 1112)[0]:int = p;
    (l + 1108)[0]:int = p;
    (l + 1104)[0]:int = p;
    (l + 1100)[0]:int = p;
    (l + 1096)[0]:int = p;
    (l + 1092)[0]:int = p;
    (l + 1088)[0]:int = p;
    (l + 1084)[0]:int = o + 168;
    (l + 1080)[0]:int = o + 135;
    (l + 1076)[0]:int = p;
    (l + 1072)[0]:int = o + 102;
    (l + 1068)[0]:int = o + 69;
    (l + 1064)[0]:int = o + 36;
    (l + 1060)[0]:int = n;
    d = d + 264;
    f = f + 1;
    if (f != 4) continue L_a;
  }
  b[570]:int = (l = VP8GetValue(a, 1));
  if (eqz(l)) goto B_k;
  b[2284]:byte = VP8GetValue(a, 8);
  label B_k:
}

function VP8ParseQuant(a:int_ptr) {
  var o:int;
  var p:int;
  var b:int = 0;
  var c:int = a + 16;
  var d:int = VP8GetValue(c, 7);
  var e:int = 0;
  if (eqz(VP8GetValue(c, 1))) goto B_a;
  e = VP8GetSignedValue(c, 4);
  label B_a:
  if (eqz(VP8GetValue(c, 1))) goto B_b;
  b = VP8GetSignedValue(c, 4);
  label B_b:
  var f:int = 0;
  var g:int = 0;
  if (eqz(VP8GetValue(c, 1))) goto B_c;
  g = VP8GetSignedValue(c, 4);
  label B_c:
  if (eqz(VP8GetValue(c, 1))) goto B_d;
  f = VP8GetSignedValue(c, 4);
  label B_d:
  var h:int = 0;
  if (eqz(VP8GetValue(c, 1))) goto B_e;
  h = VP8GetSignedValue(c, 4);
  label B_e:
  var i:int = a[29];
  var j:simd_ptr@4 = a + 820;
  var k:simd_ptr@4 = j + 16;
  var l:int = 128;
  var m:int = 0;
  loop L_f {
    if (eqz(i)) goto B_i;
    c = select_if(0, d, a[31]) + (a + l)[0]:byte;
    goto B_h;
    label B_i:
    c = d;
    if (eqz(m)) goto B_h;
    c = a + m;
    (c + 836)[0]:simd@4 = k[0];
    (c + 820)[0]:simd@4 = j[0];
    goto B_g;
    label B_h:
    var n:int = a + m;
    (n + 844)[0]:int = (o = c + h);
    (n + 836)[0]:int =
      (select_if(p = select_if(p = c + f, 117, p < 117), 0, p > 0) + 1052368)[0]:ubyte;
    (n + 824)[0]:int =
      ((select_if(p = select_if(c, 127, c < 127), 0, p > 0) << 1) + 1052496)[0]:ushort;
    (n + 820)[0]:int =
      (select_if(p = select_if(p = c + e, 127, p < 127), 0, p > 0) + 1052368)[0]:ubyte;
    (n + 840)[0]:int =
      ((select_if(o = select_if(o, 127, o < 127), 0, o > 0) << 1) + 1052496)[0]:ushort;
    (n + 828)[0]:int =
      (select_if(o = select_if(o = c + b, 127, o < 127), 0, o > 0) + 1052368)[0]:ubyte <<
      1;
    (n + 832)[0]:int =
      select_if(
        8,
        (c = 
           ((select_if(c = select_if(c = c + g, 127, c < 127), 0, c > 0) << 1) +
            1052496)[0]:ushort *
           101581) >>
        16,
        c < 524288);
    label B_g:
    l = l + 1;
    m = m + 32;
    if (m != 128) continue L_f;
  }
}

function VP8InitIoInternal(a:int, b:int):int {
  var c:int = 0;
  if ((b & -256) != 512) goto B_a;
  c = 1;
  if (eqz(a)) goto B_a;
  memset(a, 0, 108);
  label B_a:
  return c;
}

function VP8New():int {
  var c:int;
  var a:int_ptr;
  a = WebPSafeCalloc(1L, 2424);
  if (eqz(a)) goto B_a;
  a[2] = 1048783;
  a[0] = 0;
  call_indirect(a + 136, WebPGetWorkerInterface()[0]:int);
  a[81] = 0;
  a[1] = 0;
  var b:int = data[2]:int;
  if (b == data[0]:int) goto B_a;
  if (eqz(b)) goto B_c;
  c = 17;
  if (call_indirect(2, b)) goto B_b;
  label B_c:
  c = 18;
  label B_b:
  0[264917]:int = c;
  data[0]:int = data[2]:int;
  label B_a:
  return a;
}

function GetCoeffsAlt(a:int, b:long_ptr@1, c:int, d:int, e:int, f:int):int {
  var k:long;
  var l:long;
  var j:long_ptr@1;
  var n:int;
  var m:long_ptr@1;
  if (e > 15) goto B_b;
  var g:{ a:ubyte, b:ubyte, c:ubyte } = b[e]:int + c * 11;
  var h:int = b + 4;
  c = a[3]:int;
  var i:int = a[2]:int;
  loop L_c {
    b = g.a;
    if (c > -1) goto B_d;
    j = a[4]:int;
    if (j >= a[6]:int) goto B_e;
    a[4]:int = j + 7;
    a[3]:int = (c = c + 56);
    a[0]:long =
      a[0]:long << 56L |
      ((((k = j[0]) << 56L | (k & 65280L) << 40L) |
        ((k & 16711680L) << 24L | (k & 4278190080L) << 8L)) |
       (((k >> 8L & 4278190080L) | (k >> 24L & 16711680L)) |
        (k >> 40L & 65280L))) >>
      8L;
    goto B_d;
    label B_e:
    VP8LoadFinalBytes(a);
    c = a[3]:int;
    label B_d:
    b = i * b >> 8;
    j = b >= i32_wrap_i64((k = a[0]:long) >> (l = i64_extend_i32_u(c)));
    if (j) goto B_f;
    a[0]:long = (k = k - (i64_extend_i32_u(b = b + 1) << l));
    b = i - b;
    label B_f:
    if (b > 126) goto B_g;
    a[3]:int = (c = c - (1056688 + b)[0]:ubyte);
    b = (1056816 + b)[0]:ubyte;
    label B_g:
    a[2]:int = b;
    if (j) goto B_a;
    i = h + (e << 2);
    j = e;
    loop L_h {
      e = g.b;
      if (c > -1) goto B_i;
      m = a[4]:int;
      if (m >= a[6]:int) goto B_j;
      a[4]:int = m + 7;
      a[3]:int = (c = c + 56);
      a[0]:long =
        (k = k << 56L |
             ((((k = m[0]) << 56L | (k & 65280L) << 40L) |
               ((k & 16711680L) << 24L | (k & 4278190080L) << 8L)) |
              (((k >> 8L & 4278190080L) | (k >> 24L & 16711680L)) |
               (k >> 40L & 65280L))) >>
             8L);
      goto B_i;
      label B_j:
      VP8LoadFinalBytes(a);
      k = a[0]:long;
      c = a[3]:int;
      label B_i:
      e = b * e >> 8;
      if (e < (m = i32_wrap_i64(k >> (l = i64_extend_i32_u(c))))) goto B_l;
      b = e;
      goto B_k;
      label B_l:
      a[0]:long = (k = k - (i64_extend_i32_u(n = e + 1) << l));
      b = b - n;
      label B_k:
      if (b > 126) goto B_m;
      a[3]:int = (c = c - (1056688 + b)[0]:ubyte);
      b = (1056816 + b)[0]:ubyte;
      label B_m:
      a[2]:int = b;
      n = i[0]:int;
      if (e < m) goto B_n;
      i = i + 4;
      e = 16;
      g = n;
      j = j + 1;
      if (j != 16) continue L_h;
      goto B_a;
      label B_n:
    }
    e = g.c;
    if (c > -1) goto B_o;
    i = a[4]:int;
    if (i >= a[6]:int) goto B_p;
    a[4]:int = i + 7;
    a[3]:int = (c = c + 56);
    a[0]:long =
      (k = k << 56L |
           ((((k = i[0]:long@1) << 56L | (k & 65280L) << 40L) |
             ((k & 16711680L) << 24L | (k & 4278190080L) << 8L)) |
            (((k >> 8L & 4278190080L) | (k >> 24L & 16711680L)) |
             (k >> 40L & 65280L))) >>
           8L);
    goto B_o;
    label B_p:
    VP8LoadFinalBytes(a);
    k = a[0]:long;
    c = a[3]:int;
    label B_o:
    i = b * e >> 8;
    e = i;
    if (i >= (m = i32_wrap_i64(k >> (l = i64_extend_i32_u(c))))) goto B_q;
    a[0]:long = k - (i64_extend_i32_u(e = i + 1) << l);
    e = b - e;
    label B_q:
    if (e > 126) goto B_r;
    a[3]:int = (c = c - (1056688 + e)[0]:ubyte);
    e = (1056816 + e)[0]:ubyte;
    label B_r:
    a[2]:int = e;
    if (i < m) goto B_t;
    g = n + 11;
    m = 1;
    goto B_s;
    label B_t:
    m = GetLargeValue(a, g);
    c = a[3]:int;
    g = n + 22;
    label B_s:
    if (c <= -1) goto B_v;
    b = c;
    goto B_u;
    label B_v:
    b = a[4]:int;
    if (b >= a[6]:int) goto B_w;
    a[4]:int = b + 7;
    a[0]:long =
      a[0]:long << 56L |
      ((((k = b[0]) << 56L | (k & 65280L) << 40L) |
        ((k & 16711680L) << 24L | (k & 4278190080L) << 8L)) |
       (((k >> 8L & 4278190080L) | (k >> 24L & 16711680L)) |
        (k >> 40L & 65280L))) >>
      8L;
    b = c + 56;
    goto B_u;
    label B_w:
    VP8LoadFinalBytes(a);
    b = a[3]:int;
    label B_u:
    e = j + 1;
    a[3]:int = (c = b + -1);
    a[2]:int =
      (i = 
         (b = (n = (i = a[2]:int) >> 1) -
              i32_wrap_i64((k = a[0]:long) >> (l = i64_extend_i32_u(b))) >>
              31) +
         i |
         1);
    a[0]:long = k - (i64_extend_i32_u(b & n + 1) << l);
    f[(j + 1052752)[0]:ubyte]:short = ((b ^ m) - b) * d[j > 0]:int;
    if (j < 15) continue L_c;
  }
  label B_b:
  e = 16;
  label B_a:
  return e;
}

function GetCoeffsFast(a:int, b:long_ptr@1, c:int, d:int, e:int, f:int):int {
  var k:long;
  var l:long;
  var j:long_ptr@1;
  var n:int;
  var m:long_ptr@1;
  var o:int;
  if (e > 15) goto B_b;
  var g:{ a:ubyte, b:ubyte, c:ubyte } = b[e]:int + c * 11;
  var h:int = b + 4;
  b = a[3]:int;
  c = a[2]:int;
  loop L_c {
    var i:int = g.a;
    if (b > -1) goto B_d;
    j = a[4]:int;
    if (j >= a[6]:int) goto B_e;
    a[4]:int = j + 7;
    a[0]:long =
      a[0]:long << 56L |
      ((((k = j[0]) << 56L | (k & 65280L) << 40L) |
        ((k & 16711680L) << 24L | (k & 4278190080L) << 8L)) |
       (((k >> 8L & 4278190080L) | (k >> 24L & 16711680L)) |
        (k >> 40L & 65280L))) >>
      8L;
    b = b + 56;
    goto B_d;
    label B_e:
    VP8LoadFinalBytes(a);
    b = a[3]:int;
    label B_d:
    i = c * i >> 8;
    j = i >= i32_wrap_i64((k = a[0]:long) >> (l = i64_extend_i32_u(b)));
    if (j) goto B_g;
    a[0]:long = (k = k - (i64_extend_i32_u(i + 1) << l));
    c = c - i;
    goto B_f;
    label B_g:
    c = i + 1;
    label B_f:
    a[3]:int = (b = b - (i = clz(c) ^ 24));
    a[2]:int = (c = (c << i) + -1);
    if (j) goto B_a;
    i = h + (e << 2);
    j = e;
    loop L_h {
      e = g.b;
      if (b > -1) goto B_i;
      m = a[4]:int;
      if (m >= a[6]:int) goto B_j;
      a[4]:int = m + 7;
      a[0]:long =
        (k = k << 56L |
             ((((k = m[0]) << 56L | (k & 65280L) << 40L) |
               ((k & 16711680L) << 24L | (k & 4278190080L) << 8L)) |
              (((k >> 8L & 4278190080L) | (k >> 24L & 16711680L)) |
               (k >> 40L & 65280L))) >>
             8L);
      b = b + 56;
      goto B_i;
      label B_j:
      VP8LoadFinalBytes(a);
      k = a[0]:long;
      b = a[3]:int;
      label B_i:
      e = c * e >> 8;
      if (e >= (m = i32_wrap_i64(k >> (l = i64_extend_i32_u(b))))) goto B_l;
      a[0]:long = (k = k - (i64_extend_i32_u(e + 1) << l));
      c = c - e;
      goto B_k;
      label B_l:
      c = e + 1;
      label B_k:
      a[3]:int = (b = b - (n = clz(c) ^ 24));
      a[2]:int = (c = (c << n) + -1);
      n = i[0]:int;
      if (e < m) goto B_m;
      i = i + 4;
      e = 16;
      g = n;
      j = j + 1;
      if (j != 16) continue L_h;
      goto B_a;
      label B_m:
    }
    e = g.c;
    if (b > -1) goto B_n;
    i = a[4]:int;
    if (i >= a[6]:int) goto B_o;
    a[4]:int = i + 7;
    a[0]:long =
      (k = k << 56L |
           ((((k = i[0]:long@1) << 56L | (k & 65280L) << 40L) |
             ((k & 16711680L) << 24L | (k & 4278190080L) << 8L)) |
            (((k >> 8L & 4278190080L) | (k >> 24L & 16711680L)) |
             (k >> 40L & 65280L))) >>
           8L);
    b = b + 56;
    goto B_n;
    label B_o:
    VP8LoadFinalBytes(a);
    k = a[0]:long;
    b = a[3]:int;
    label B_n:
    e = c * e >> 8;
    if (e >= (m = i32_wrap_i64(k >> (l = i64_extend_i32_u(b))))) goto B_q;
    a[0]:long = k - (i64_extend_i32_u(e + 1) << l);
    i = c - e;
    goto B_p;
    label B_q:
    i = e + 1;
    label B_p:
    a[3]:int = (c = b - (o = clz(i) ^ 24));
    a[2]:int = (i << o) + -1;
    if (e < m) goto B_s;
    g = n + 11;
    m = 1;
    goto B_r;
    label B_s:
    m = GetLargeValue(a, g);
    c = a[3]:int;
    g = n + 22;
    label B_r:
    if (c > -1) goto B_t;
    b = a[4]:int;
    if (b >= a[6]:int) goto B_u;
    a[4]:int = b + 7;
    a[0]:long =
      a[0]:long << 56L |
      ((((k = b[0]) << 56L | (k & 65280L) << 40L) |
        ((k & 16711680L) << 24L | (k & 4278190080L) << 8L)) |
       (((k >> 8L & 4278190080L) | (k >> 24L & 16711680L)) |
        (k >> 40L & 65280L))) >>
      8L;
    c = c + 56;
    goto B_t;
    label B_u:
    VP8LoadFinalBytes(a);
    c = a[3]:int;
    label B_t:
    e = j + 1;
    a[3]:int = (b = c + -1);
    a[2]:int =
      (c = 
         (i = (o = (n = a[2]:int) >> 1) -
              i32_wrap_i64((k = a[0]:long) >> (l = i64_extend_i32_u(c))) >>
              31) +
         n |
         1);
    a[0]:long = k - (i64_extend_i32_u(i & o + 1) << l);
    f[(j + 1052752)[0]:ubyte]:short = ((i ^ m) - i) * d[j > 0]:int;
    if (j < 15) continue L_c;
  }
  label B_b:
  e = 16;
  label B_a:
  return e;
}

function VP8Delete(a:int) {
  var b:simd;
  if (eqz(a)) goto B_a;
  call_indirect(a + 136, WebPGetWorkerInterface()[5]:int);
  WebPDeallocateAlphaMemory(a);
  WebPSafeFree(a[583]:int);
  a[583]:long@4 = 0L;
  a[2]:simd@8 = (b = V128);
  (a + 32)[0]:simd@8 = b;
  a[1]:int = 0;
  WebPSafeFree(a);
  label B_a:
}

function VP8SetError(a:{ a:int, b:int, c:int }, b:int, c:int):int {
  if (a.a) goto B_a;
  a.c = c;
  a.a = b;
  a.b = 0;
  label B_a:
  return 0;
}

function VP8GetInfo(a:{ a:ubyte, b:ubyte, c:ubyte, d:ubyte, e:ubyte, f:ubyte, g:ubyte, h:ubyte, i:ubyte, j:ubyte }, b:int, c:int, d:int_ptr, e:int_ptr):int {
  var f:int = 0;
  if (eqz(a)) goto B_a;
  if (b < 10) goto B_a;
  if (a.d != 157) goto B_a;
  if (a.e != 1) goto B_a;
  if (a.f != 42) goto B_a;
  b = a.a;
  if ((b & 25) != 16) goto B_a;
  if (((a.b << 8 | a.c << 16) | b) >> 5 >= c) goto B_a;
  b = (a.h << 8 & 16128) | a.g;
  if (eqz(b)) goto B_a;
  a = (a.j << 8 & 16128) | a.i;
  if (eqz(a)) goto B_a;
  if (eqz(d)) goto B_b;
  d[0] = b;
  label B_b:
  f = 1;
  if (eqz(e)) goto B_a;
  e[0] = a;
  label B_a:
  return f;
}

function VP8GetHeaders(a:int, b:int):int {
  var h:int;
  var i:int;
  var j:int;
  var d:int;
  if (a) goto B_a;
  return 0;
  label B_a:
  a[2]:int = 1048783;
  var c:int = 0;
  a[0]:int = 0;
  if (b) goto B_d;
  a[2]:int = 1049026;
  a[0]:int = 2;
  goto B_c;
  label B_d:
  d = b[15]:int;
  if (d > 3) goto B_e;
  a[2]:int = 1048826;
  a[0]:int = 7;
  c = 0;
  goto B_c;
  label B_e:
  var e:ubyte_ptr = b[16]:int;
  var f:int = e[1];
  var g:ubyte_ptr = e[2];
  (a + 54)[0]:byte = (h = (c = e[0]) >> 4 & 1);
  (a + 53)[0]:byte = (i = c >> 1 & 7);
  a[52]:byte = eqz(j = c & 1);
  (a + 56)[0]:int = (c = (c | (f << 8 | g << 16)) >> 5);
  if (i < 4) goto B_f;
  a[2]:int = 1048795;
  a[0]:int = 3;
  c = 0;
  goto B_c;
  label B_f:
  if (h) goto B_g;
  a[2]:int = 1048900;
  a[0]:int = 4;
  c = 0;
  goto B_c;
  label B_g:
  f = d + -3;
  g = e + 3;
  if (j) goto B_h;
  if (f > 6) goto B_i;
  a[2]:int = 1048684;
  a[0]:int = 7;
  c = 0;
  goto B_c;
  label B_i:
  if (g[0] != 157) goto B_k;
  if (e[4] != 1) goto B_k;
  if (e[5] == 42) goto B_j;
  label B_k:
  a[2]:int = 1048741;
  a[0]:int = 3;
  c = 0;
  goto B_c;
  label B_j:
  a[30]:short = (c = (e[7] << 8 & 16128) | e[6]);
  (a + 64)[0]:byte = e[7] >> 6;
  (a + 62)[0]:short = (f = (e[9] << 8 & 16128) | e[8]);
  g = e[9];
  a[76]:int = f + 15 >> 4;
  a[75]:int = c + 15 >> 4;
  b[21]:int = 0;
  b[1]:int = f;
  b[0]:int = c;
  b[25]:int = f;
  b[24]:int = c;
  b[23]:int = 0;
  b[22]:int = f;
  b[20]:int = c;
  b[18]:long@4 = 0L;
  b[4]:int = f;
  b[3]:int = c;
  (a + 65)[0]:byte = g >> 6;
  VP8ResetProba(a + 948);
  (a + 132)[0]:int = 0;
  a[29]:simd@4 = V128;
  f = d + -10;
  g = e + 10;
  c = a[14]:int;
  label B_h:
  if (c <= f) goto B_l;
  c = 0;
  if (a[0]:int) goto B_b;
  a[2]:int = 1048716;
  a[0]:int = 7;
  c = 0;
  goto B_c;
  label B_l:
  b = a + 16;
  VP8InitBitReader(b, g, c);
  e = a[14]:int;
  if (eqz(a[52]:ubyte)) goto B_m;
  (a + 66)[0]:byte = VP8GetValue(b, 1);
  (a + 67)[0]:byte = VP8GetValue(b, 1);
  label B_m:
  a[29]:int = (c = VP8GetValue(b, 1));
  if (eqz(c)) goto B_o;
  (a + 120)[0]:int = VP8GetValue(b, 1);
  if (eqz(VP8GetValue(b, 1))) goto B_p;
  (a + 124)[0]:int = VP8GetValue(b, 1);
  c = 0;
  d = 0;
  if (eqz(VP8GetValue(b, 1))) goto B_q;
  d = VP8GetSignedValue(b, 7);
  label B_q:
  (a + 128)[0]:byte = d;
  if (eqz(VP8GetValue(b, 1))) goto B_r;
  c = VP8GetSignedValue(b, 7);
  label B_r:
  (a + 129)[0]:byte = c;
  c = 0;
  d = 0;
  if (eqz(VP8GetValue(b, 1))) goto B_s;
  d = VP8GetSignedValue(b, 7);
  label B_s:
  (a + 130)[0]:byte = d;
  if (eqz(VP8GetValue(b, 1))) goto B_t;
  c = VP8GetSignedValue(b, 7);
  label B_t:
  (a + 131)[0]:byte = c;
  c = 0;
  d = 0;
  if (eqz(VP8GetValue(b, 1))) goto B_u;
  d = VP8GetSignedValue(b, 6);
  label B_u:
  (a + 132)[0]:byte = d;
  if (eqz(VP8GetValue(b, 1))) goto B_v;
  c = VP8GetSignedValue(b, 6);
  label B_v:
  (a + 133)[0]:byte = c;
  c = 0;
  d = 0;
  if (eqz(VP8GetValue(b, 1))) goto B_w;
  d = VP8GetSignedValue(b, 6);
  label B_w:
  (a + 134)[0]:byte = d;
  if (eqz(VP8GetValue(b, 1))) goto B_x;
  c = VP8GetSignedValue(b, 6);
  label B_x:
  (a + 135)[0]:byte = c;
  label B_p:
  if (eqz(a[30]:int)) goto B_n;
  c = 255;
  d = 255;
  if (eqz(VP8GetValue(b, 1))) goto B_y;
  d = VP8GetValue(b, 8);
  label B_y:
  a[948]:byte = d;
  if (eqz(VP8GetValue(b, 1))) goto B_z;
  c = VP8GetValue(b, 8);
  label B_z:
  (a + 949)[0]:byte = c;
  if (VP8GetValue(b, 1)) goto B_ba;
  c = 255;
  goto B_aa;
  label B_ba:
  c = VP8GetValue(b, 8);
  label B_aa:
  (a + 950)[0]:byte = c;
  goto B_n;
  label B_o:
  (a + 120)[0]:int = 0;
  label B_n:
  if (eqz((a + 44)[0]:int)) goto B_ca;
  c = 0;
  if (a[0]:int) goto B_b;
  a[2]:int = 1048629;
  a[0]:int = 3;
  c = 0;
  goto B_c;
  label B_ca:
  if (ParseFilterHeader(b, a)) goto B_da;
  c = 0;
  if (a[0]:int) goto B_b;
  a[2]:int = 1048657;
  a[0]:int = 3;
  c = 0;
  goto B_c;
  label B_da:
  e = ParsePartitions(a, g + e, f - e);
  if (eqz(e)) goto B_ea;
  c = 0;
  if (a[0]:int) goto B_b;
  a[2]:int = 1048605;
  a[0]:int = e;
  c = 0;
  goto B_c;
  label B_ea:
  VP8ParseQuant(a);
  if (a[52]:ubyte) goto B_fa;
  c = 0;
  if (a[0]:int) goto B_b;
  a[2]:int = 1048883;
  a[0]:int = 4;
  c = 0;
  goto B_c;
  label B_fa:
  c = 1;
  VP8GetValue(b, 1);
  VP8ParseProba(b, a);
  label B_c:
  a[1]:int = c;
  label B_b:
  return c;
}

function ParseFilterHeader(a:int_ptr, b:int_ptr):int {
  var c:int;
  b[17] = VP8GetValue(a, 1);
  (b + 72)[0]:int = VP8GetValue(a, 6);
  (b + 76)[0]:int = VP8GetValue(a, 3);
  (b + 80)[0]:int = (c = VP8GetValue(a, 1));
  if (eqz(c)) goto B_a;
  if (eqz(VP8GetValue(a, 1))) goto B_a;
  if (eqz(VP8GetValue(a, 1))) goto B_b;
  (b + 84)[0]:int = VP8GetSignedValue(a, 6);
  label B_b:
  if (eqz(VP8GetValue(a, 1))) goto B_c;
  (b + 88)[0]:int = VP8GetSignedValue(a, 6);
  label B_c:
  if (eqz(VP8GetValue(a, 1))) goto B_d;
  (b + 92)[0]:int = VP8GetSignedValue(a, 6);
  label B_d:
  if (eqz(VP8GetValue(a, 1))) goto B_e;
  (b + 96)[0]:int = VP8GetSignedValue(a, 6);
  label B_e:
  if (eqz(VP8GetValue(a, 1))) goto B_f;
  (b + 100)[0]:int = VP8GetSignedValue(a, 6);
  label B_f:
  if (eqz(VP8GetValue(a, 1))) goto B_g;
  (b + 104)[0]:int = VP8GetSignedValue(a, 6);
  label B_g:
  if (eqz(VP8GetValue(a, 1))) goto B_h;
  (b + 108)[0]:int = VP8GetSignedValue(a, 6);
  label B_h:
  if (eqz(VP8GetValue(a, 1))) goto B_a;
  (b + 112)[0]:int = VP8GetSignedValue(a, 6);
  label B_a:
  if (b[18]) goto B_j;
  c = 0;
  goto B_i;
  label B_j:
  c = select_if(1, 2, b[17]);
  label B_i:
  b[588] = c;
  return eqz(a[7]);
}

function ParsePartitions(a:int_ptr, b:int, c:int):int {
  var d:int;
  var e:int;
  var g:int;
  a[81] = (e = -1 << (d = VP8GetValue(a + 16, 2)) ^ -1);
  var f:int = 7;
  if (c < (g = e * 3)) goto B_a;
  var h:int = b + c;
  c = c - g;
  g = b + g;
  if (eqz(d)) goto B_b;
  var i:int = select_if(e, 1, e > 1);
  f = a + 328;
  loop L_c {
    VP8InitBitReader(
      f,
      g,
      d = select_if(d = b[0]:ushort@1 | b[2]:ubyte << 16, c, d < c));
    c = c - d;
    g = g + d;
    f = f + 32;
    b = b + 3;
    i = i + -1;
    if (i) continue L_c;
  }
  label B_b:
  VP8InitBitReader(a + (e << 5) + 328, g, c);
  f = 0;
  if (g < h) goto B_a;
  f = select_if(5, 7, a[12]);
  label B_a:
  return f;
}

function VP8DecodeMB(a:int_ptr, b:int_ptr):int {
  var f:int;
  var j:ubyte_ptr;
  var k:int;
  var n:simd;
  var p:int;
  var q:int;
  var i:int;
  var m:int;
  var o:int;
  var v:int;
  var w:ushort_ptr;
  var x:int;
  var y:ushort_ptr;
  var z:ushort_ptr;
  var aa:int;
  var ba:ushort_ptr;
  var u:int;
  var l:int;
  var c:int = stack_pointer - 32;
  stack_pointer = c;
  var d:int = a[575];
  var e:int = d + -2;
  var g:int = d + ((f = a[585]) << 1);
  var h:int = a[587];
  if (eqz(a[570])) goto B_c;
  i = h + f * 800;
  if (i[797]:ubyte) goto B_b;
  label B_c:
  i = 0;
  l = a + ((k = (j = h + f * 800)[798]) << 5);
  m = memset(j, 0, 768);
  if (m[768]:ubyte) goto B_e;
  j = a + 2008;
  (c + 16)[0]:simd = (n = V128);
  c[0]:simd = n;
  i = 1;
  o = d + -1;
  o[0]:byte =
    (q = (p = call_indirect(b,
                            a + 2076,
                            o[0]:ubyte + (d = d + (f << 1))[1]:ubyte,
                            l + 828,
                            0,
                            c,
                            0[264917]:int)) >
         0);
  d[1]:byte = q;
  if (p < 2) goto B_f;
  call_indirect(c, m, 0[264930]:int);
  goto B_d;
  label B_f:
  m[240]:short = (d = c[0]:short + 3 >> 3);
  m[224]:short = d;
  m[208]:short = d;
  m[192]:short = d;
  m[176]:short = d;
  m[160]:short = d;
  m[144]:short = d;
  m[128]:short = d;
  m[112]:short = d;
  m[96]:short = d;
  m[80]:short = d;
  m[64]:short = d;
  m[48]:short = d;
  m[32]:short = d;
  m[16]:short = d;
  m[0]:short = d;
  goto B_d;
  label B_e:
  j = a + 2212;
  label B_d:
  l = l + 820;
  var r:ushort_ptr = e[0]:ubyte & 15;
  p = g[0]:ubyte & 15;
  var s:int = 0;
  var t:int = 0;
  loop L_g {
    o = 
      call_indirect(b, j, (r & 1) + (p & 1), l, i, d = m + s, 0[264917]:int);
    u = d[0]:ushort;
    p = call_indirect(b,
                      j,
                      (q = o > i) + ((v = p >> 1) & 1),
                      l,
                      i,
                      w = d + 32,
                      0[264917]:int);
    w = w[0];
    q = 
      call_indirect(b,
                    j,
                    ((v = (q << 7 | (v & 126)) >> 1) & 1) + (x = p > i),
                    l,
                    i,
                    y = d + 64,
                    0[264917]:int);
    y = y[0];
    d = call_indirect(b,
                      j,
                      ((v = (x << 7 | v) >> 1) & 1) + (x = q > i),
                      l,
                      i,
                      z = d + 96,
                      0[264917]:int);
    t = (select_if(3, select_if(z[0] != 0, 2, d < 2), d > 3) |
         (select_if(12, select_if((y != 0) << 2, 8, q < 2), q > 3) |
          (select_if(3, select_if(w != 0, 2, p < 2), p > 3) |
           select_if(12, select_if((u != 0) << 2, 8, o < 2), o > 3)) <<
          4)) |
        t << 8;
    d = (d > i) << 7;
    p = d >> 4 | (x << 7 | v) >> 5;
    r = d | (r & 254) >> 1;
    s = s + 128;
    if (s != 512) continue L_g;
  }
  i = m + s;
  l = a + 2144;
  u = r >> 4;
  v = p & 255;
  j = a + (k << 5) + 836;
  s = 0;
  w = 1;
  d = 0;
  loop L_h {
    o = 
      call_indirect(
        b,
        l,
        ((q = e[0]:ubyte >> (o = d | 4)) & 1) + ((p = g[0]:ubyte >> o) & 1),
        j,
        0,
        i,
        0[264917]:int);
    x = i[0]:ushort;
    p = 
      call_indirect(b, l, (p >> 1 & 1) + (r = o > 0), j, 0, y = i + 32, 0[264917]:int);
    y = y[0];
    q = 
      call_indirect(b, l, (q >> 1 & 1) + r, j, 0, r = i + 64, 0[264917]:int);
    z = r[0];
    r = 
      call_indirect(b, l, (m = q > 0) + (aa = p > 0), j, 0, ba = i + 96, 0[264917]:int);
    s = (select_if(3, select_if(ba[0] != 0, 2, r < 2), r > 3) |
         (select_if(12, select_if((z != 0) << 2, 8, q < 2), q > 3) |
          (select_if(3, select_if(y != 0, 2, p < 2), p > 3) |
           select_if(12, select_if((x != 0) << 2, 8, o < 2), o > 3)) <<
          4)) <<
        (d << 2) |
        s;
    o = (r > 0) << 5;
    u = (o | aa << 4) << d | u;
    v = (o | m << 4) << d | v;
    i = i + 128;
    o = w & 1;
    w = 0;
    d = 2;
    if (o) continue L_h;
  }
  g[0]:byte = v;
  e[0]:byte = u;
  i = h + f * 800;
  i[198]:int = s;
  i[197]:int = t;
  d = 0;
  if (s & 43690) goto B_i;
  d = (a + (k << 5) + 848)[0]:int;
  label B_i:
  i[796]:byte = d;
  l = (s | t) != 0;
  goto B_a;
  label B_b:
  l = 0;
  g[0]:byte = 0;
  e[0]:byte = 0;
  if (i[768]:ubyte) goto B_j;
  (d + (f << 1))[1]:byte = 0;
  (d + -1)[0]:byte = 0;
  label B_j:
  i = h + f * 800;
  i[197]:long@4 = 0L;
  (i + 796)[0]:byte = 0;
  label B_a:
  if (a[588] < 1) goto B_k;
  i = a[576] + (a[585] << 2);
  i[0]:int@1 =
    (a + ((d = h + f * 800)[798]:ubyte << 3) + (d[768]:ubyte << 2) + 2356)[0]:int;
  i[2]:byte = i[2]:ubyte | l;
  label B_k:
  b = b[7];
  stack_pointer = c + 32;
  return eqz(b);
}

function VP8InitScanline(a:int_ptr) {
  (a[575] + -2)[0]:short@1 = 0;
  a[585] = 0;
  a[573] = 0;
}

function GetLargeValue(a:int, b:int):int {
  var g:long;
  var e:int;
  var h:long;
  var i:long_ptr@1;
  var f:long_ptr@1;
  var j:int;
  var k:int;
  var c:int = a[2]:int;
  var d:int = b[3]:ubyte;
  e = a[3]:int;
  if (e > -1) goto B_a;
  f = a[4]:int;
  if (f >= a[6]:int) goto B_b;
  a[4]:int = f + 7;
  a[0]:long =
    a[0]:long << 56L |
    ((((g = f[0]) << 56L | (g & 65280L) << 40L) |
      ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
     (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
      (g >> 40L & 65280L))) >>
    8L;
  e = e + 56;
  goto B_a;
  label B_b:
  VP8LoadFinalBytes(a);
  e = a[3]:int;
  label B_a:
  d = c * d >> 8;
  if (
    d >= (f = i32_wrap_i64((g = a[0]:long) >> (h = i64_extend_i32_u(e))))) goto B_d;
  a[0]:long = (g = g - (i64_extend_i32_u(d + 1) << h));
  c = c - d;
  goto B_c;
  label B_d:
  c = d + 1;
  label B_c:
  a[3]:int = (e = e - (i = clz(c) ^ 24));
  a[2]:int = (c = (c << i) + -1);
  if (d < f) goto B_f;
  d = b[4]:ubyte;
  if (e > -1) goto B_g;
  f = a[4]:int;
  if (f >= a[6]:int) goto B_h;
  a[4]:int = f + 7;
  a[0]:long =
    (g = g << 56L |
         ((((g = f[0]) << 56L | (g & 65280L) << 40L) |
           ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
          (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
           (g >> 40L & 65280L))) >>
         8L);
  e = e + 56;
  goto B_g;
  label B_h:
  VP8LoadFinalBytes(a);
  g = a[0]:long;
  e = a[3]:int;
  label B_g:
  d = c * d >> 8;
  f = d >= i32_wrap_i64(g >> (h = i64_extend_i32_u(e)));
  if (f) goto B_j;
  a[0]:long = (g = g - (i64_extend_i32_u(d + 1) << h));
  d = c - d;
  goto B_i;
  label B_j:
  d = d + 1;
  label B_i:
  a[3]:int = (e = e - (c = clz(d) ^ 24));
  a[2]:int = (c = (d << c) + -1);
  d = 2;
  if (f) goto B_e;
  b = b[5]:ubyte;
  if (e > -1) goto B_k;
  d = a[4]:int;
  if (d >= a[6]:int) goto B_l;
  a[4]:int = d + 7;
  a[0]:long =
    (g = g << 56L |
         ((((g = d[0]:long@1) << 56L | (g & 65280L) << 40L) |
           ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
          (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
           (g >> 40L & 65280L))) >>
         8L);
  e = e + 56;
  goto B_k;
  label B_l:
  VP8LoadFinalBytes(a);
  g = a[0]:long;
  e = a[3]:int;
  label B_k:
  b = c * b >> 8;
  if (b >= i32_wrap_i64(g >> (h = i64_extend_i32_u(e)))) goto B_n;
  a[0]:long = g - (i64_extend_i32_u(b + 1) << h);
  b = c - b;
  c = 4;
  goto B_m;
  label B_n:
  b = b + 1;
  c = 3;
  label B_m:
  a[3]:int = e - (d = clz(b) ^ 24);
  a[2]:int = (b << d) + -1;
  return c;
  label B_f:
  d = b[6]:ubyte;
  if (e > -1) goto B_o;
  f = a[4]:int;
  if (f >= a[6]:int) goto B_p;
  a[4]:int = f + 7;
  a[0]:long =
    (g = g << 56L |
         ((((g = f[0]) << 56L | (g & 65280L) << 40L) |
           ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
          (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
           (g >> 40L & 65280L))) >>
         8L);
  e = e + 56;
  goto B_o;
  label B_p:
  VP8LoadFinalBytes(a);
  g = a[0]:long;
  e = a[3]:int;
  label B_o:
  d = c * d >> 8;
  if (d >= (f = i32_wrap_i64(g >> (h = i64_extend_i32_u(e))))) goto B_r;
  a[0]:long = (g = g - (i64_extend_i32_u(d + 1) << h));
  c = c - d;
  goto B_q;
  label B_r:
  c = d + 1;
  label B_q:
  a[3]:int = (e = e - (i = clz(c) ^ 24));
  a[2]:int = (c = (c << i) + -1);
  if (d < f) goto B_s;
  b = b[7]:ubyte;
  if (e > -1) goto B_t;
  d = a[4]:int;
  if (d >= a[6]:int) goto B_u;
  a[4]:int = d + 7;
  a[0]:long =
    (g = g << 56L |
         ((((g = d[0]:long@1) << 56L | (g & 65280L) << 40L) |
           ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
          (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
           (g >> 40L & 65280L))) >>
         8L);
  e = e + 56;
  goto B_t;
  label B_u:
  VP8LoadFinalBytes(a);
  g = a[0]:long;
  e = a[3]:int;
  label B_t:
  b = c * b >> 8;
  if (b >= (f = i32_wrap_i64(g >> (h = i64_extend_i32_u(e))))) goto B_w;
  a[0]:long = (g = g - (i64_extend_i32_u(b + 1) << h));
  d = c - b;
  goto B_v;
  label B_w:
  d = b + 1;
  label B_v:
  a[3]:int = (e = e - (c = clz(d) ^ 24));
  a[2]:int = (d = (d << c) + -1);
  if (b < f) goto B_x;
  if (e > -1) goto B_y;
  b = a[4]:int;
  if (b >= a[6]:int) goto B_z;
  a[4]:int = b + 7;
  a[0]:long =
    (g = g << 56L |
         ((((g = b[0]:long@1) << 56L | (g & 65280L) << 40L) |
           ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
          (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
           (g >> 40L & 65280L))) >>
         8L);
  e = e + 56;
  goto B_y;
  label B_z:
  VP8LoadFinalBytes(a);
  g = a[0]:long;
  e = a[3]:int;
  label B_y:
  b = d * 159 >> 8;
  if (b >= i32_wrap_i64(g >> (h = i64_extend_i32_u(e)))) goto B_ba;
  a[0]:long = g - (i64_extend_i32_u(b + 1) << h);
  b = d - b;
  d = 6;
  goto B_aa;
  label B_ba:
  b = b + 1;
  d = 5;
  label B_aa:
  a[3]:int = e - (c = clz(b) ^ 24);
  a[2]:int = (b << c) + -1;
  return d;
  label B_x:
  if (e > -1) goto B_ca;
  b = a[4]:int;
  if (b >= a[6]:int) goto B_da;
  a[4]:int = b + 7;
  a[0]:long =
    (g = g << 56L |
         ((((g = b[0]:long@1) << 56L | (g & 65280L) << 40L) |
           ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
          (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
           (g >> 40L & 65280L))) >>
         8L);
  e = e + 56;
  goto B_ca;
  label B_da:
  VP8LoadFinalBytes(a);
  g = a[0]:long;
  e = a[3]:int;
  label B_ca:
  b = d * 165 >> 8;
  if (b >= i32_wrap_i64(g >> (h = i64_extend_i32_u(e)))) goto B_fa;
  a[0]:long = (g = g - (i64_extend_i32_u(b + 1) << h));
  b = d - b;
  c = 9;
  goto B_ea;
  label B_fa:
  b = b + 1;
  c = 7;
  label B_ea:
  a[3]:int = (e = e - (d = clz(b) ^ 24));
  a[2]:int = (d = (b << d) + -1);
  if (e > -1) goto B_ga;
  b = a[4]:int;
  if (b >= a[6]:int) goto B_ha;
  a[4]:int = b + 7;
  a[0]:long =
    (g = g << 56L |
         ((((g = b[0]:long@1) << 56L | (g & 65280L) << 40L) |
           ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
          (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
           (g >> 40L & 65280L))) >>
         8L);
  e = e + 56;
  goto B_ga;
  label B_ha:
  VP8LoadFinalBytes(a);
  g = a[0]:long;
  e = a[3]:int;
  label B_ga:
  b = d * 145 >> 8;
  if (
    b >= (f = i32_wrap_i64(g >> (h = i64_extend_i32_u(e))))) goto B_ja;
  a[0]:long = g - (i64_extend_i32_u(b + 1) << h);
  d = d - b;
  goto B_ia;
  label B_ja:
  d = b + 1;
  label B_ia:
  a[3]:int = e - (i = clz(d) ^ 24);
  a[2]:int = (d << i) + -1;
  return c + (b < f);
  label B_s:
  d = b[8]:ubyte;
  if (e > -1) goto B_ka;
  f = a[4]:int;
  if (f >= a[6]:int) goto B_la;
  a[4]:int = f + 7;
  a[0]:long =
    (g = g << 56L |
         ((((g = f[0]) << 56L | (g & 65280L) << 40L) |
           ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
          (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
           (g >> 40L & 65280L))) >>
         8L);
  e = e + 56;
  goto B_ka;
  label B_la:
  VP8LoadFinalBytes(a);
  g = a[0]:long;
  e = a[3]:int;
  label B_ka:
  d = c * d >> 8;
  if (
    d >= (f = i32_wrap_i64(g >> (h = i64_extend_i32_u(e))))) goto B_na;
  a[0]:long = (g = g - (i64_extend_i32_u(d + 1) << h));
  c = c - d;
  j = 10;
  goto B_ma;
  label B_na:
  c = d + 1;
  j = 9;
  label B_ma:
  a[3]:int = (e = e - (i = clz(c) ^ 24));
  a[2]:int = (c = (c << i) + -1);
  b = (b + j)[0]:ubyte;
  if (e > -1) goto B_oa;
  i = a[4]:int;
  if (i >= a[6]:int) goto B_pa;
  a[4]:int = i + 7;
  a[0]:long =
    (g = g << 56L |
         ((((g = i[0]) << 56L | (g & 65280L) << 40L) |
           ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
          (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
           (g >> 40L & 65280L))) >>
         8L);
  e = e + 56;
  goto B_oa;
  label B_pa:
  VP8LoadFinalBytes(a);
  g = a[0]:long;
  e = a[3]:int;
  label B_oa:
  b = c * b >> 8;
  if (
    b >= (i = i32_wrap_i64(g >> (h = i64_extend_i32_u(e))))) goto B_ra;
  a[0]:long = (g = g - (i64_extend_i32_u(b + 1) << h));
  c = c - b;
  goto B_qa;
  label B_ra:
  c = b + 1;
  label B_qa:
  a[3]:int = (e = e - (j = clz(c) ^ 24));
  a[2]:int = (c = (c << j) + -1);
  k = (d < f) << 1 | b < i;
  d = ((k << 2) + 1052768)[0]:int;
  b = d[0]:ubyte;
  if (b) goto B_ta;
  f = 0;
  goto B_sa;
  label B_ta:
  d = d + 1;
  f = 0;
  loop L_ua {
    if (e > -1) goto B_va;
    i = a[4]:int;
    if (i >= a[6]:int) goto B_wa;
    a[4]:int = i + 7;
    a[0]:long =
      (g = g << 56L |
           ((((g = i[0]) << 56L | (g & 65280L) << 40L) |
             ((g & 16711680L) << 24L | (g & 4278190080L) << 8L)) |
            (((g >> 8L & 4278190080L) | (g >> 24L & 16711680L)) |
             (g >> 40L & 65280L))) >>
           8L);
    e = e + 56;
    goto B_va;
    label B_wa:
    VP8LoadFinalBytes(a);
    g = a[0]:long;
    e = a[3]:int;
    label B_va:
    b = c * (b & 255) >> 8;
    if (
      b >= (i = i32_wrap_i64(g >> (h = i64_extend_i32_u(e))))) goto B_ya;
    a[0]:long = (g = g - (i64_extend_i32_u(b + 1) << h));
    c = c - b;
    goto B_xa;
    label B_ya:
    c = b + 1;
    label B_xa:
    a[3]:int = (e = e - (j = clz(c) ^ 24));
    a[2]:int = (c = (c << j) + -1);
    f = f << 1 | b < i;
    b = d[0]:ubyte;
    d = d + 1;
    if (b) continue L_ua;
  }
  label B_sa:
  d = f + (8 << k) + 3;
  label B_e:
  return d;
}

function VP8LCheckSignature(a:ubyte_ptr, b:int):int {
  var c:int = 0;
  if (b < 5) goto B_a;
  if (a[0] != 47) goto B_a;
  c = a[4] < 32;
  label B_a:
  return c;
}

function VP8LGetInfo(a:ubyte_ptr, b:int, c:int_ptr, d:int_ptr, e:int_ptr):int {
  var f:int_ptr = stack_pointer - 32;
  stack_pointer = f;
  var g:int = 0;
  if (eqz(a)) goto B_a;
  if (b < 5) goto B_a;
  if (a[0] != 47) goto B_a;
  if (a[4] > 31) goto B_a;
  VP8LInitBitReader(f, a, b);
  g = 0;
  if (VP8LReadBits(f, 8) != 47) goto B_a;
  a = VP8LReadBits(f, 14);
  b = VP8LReadBits(f, 14);
  var h:int = VP8LReadBits(f, 1);
  if (VP8LReadBits(f, 3) | f[6]) goto B_a;
  if (eqz(c)) goto B_b;
  c[0] = a + 1;
  label B_b:
  if (eqz(d)) goto B_c;
  d[0] = b + 1;
  label B_c:
  g = 1;
  if (eqz(e)) goto B_a;
  e[0] = h;
  label B_a:
  stack_pointer = f + 32;
  return g;
}

function ReadHuffmanCodesHelper(a:int, b:int, c:int, d:int, e:int_ptr, f:int_ptr, g:int_ptr):int {
  var k:int;
  var l:int;
  var u:int;
  var h:int_ptr = 0;
  if (b > c) goto B_a;
  h = 0;
  if (b != c & eqz(d)) goto B_a;
  var i:int = ((a << 1) + 1052832)[0]:ushort;
  var j:int = 1 << a;
  h = 
    WebPSafeCalloc(i64_extend_i32_s(select_if(j + 280, 280, a > 0)), 4);
  g[0] = (k = VP8LHtreeGroupsNew(b));
  if (eqz(k)) goto B_b;
  if (eqz(h)) goto B_b;
  if (eqz(VP8LHuffmanTablesAllocate(i * b, f))) goto B_b;
  if (c < 1) goto B_c;
  var m:int = select_if(j + 280, 280, l = a > 0);
  var n:int = h + 4;
  var o:int = 0;
  loop L_d {
    b = o;
    if (eqz(d)) goto B_f;
    b = d[o]:int;
    if (b != -1) goto B_f;
    if (eqz(ReadHuffmanCode(m, e, h, 0))) goto B_a;
    if (eqz(ReadHuffmanCode(256, e, h, 0))) goto B_a;
    if (eqz(ReadHuffmanCode(256, e, h, 0))) goto B_a;
    if (eqz(ReadHuffmanCode(256, e, h, 0))) goto B_a;
    if (ReadHuffmanCode(40, e, h, 0)) goto B_e;
    goto B_a;
    label B_f:
    var p:int_ptr = g[0] + b * 548;
    var q:int = 1;
    var r:int = 0;
    var s:int = 0;
    var t:int = 0;
    loop L_g {
      i = 
        select_if(select_if(0, j, r), 0, l) + ((r << 1) + 1052812)[0]:ushort;
      b = ReadHuffmanCode(i, e, h, f);
      p[r]:int = (a = (f[4])[1]:int);
      if (eqz(b)) goto B_a;
      if (q) goto B_i;
      a = a[0]:ubyte;
      q = 0;
      goto B_h;
      label B_i:
      a = a[0]:ubyte;
      if (r & 2147483643) goto B_j;
      q = 1;
      goto B_h;
      label B_j:
      q = eqz(a & 255);
      label B_h:
      k = f[4];
      k[1]:int = k[1]:int + (b << 2);
      u = a & 255;
      if (r > 3) goto B_k;
      b = h[0];
      if (i < 2) goto B_l;
      k = 1;
      var v:int = i + -1;
      if (v < 4) goto B_m;
      var w:int = v & -4;
      k = w | 1;
      var x:simd = i32x4_splat(b);
      a = w;
      b = n;
      loop L_n {
        x = b[0]:simd@4 i32x4_max_s x;
        b = b + 16;
        a = a + -4;
        if (a) continue L_n;
      }
      x = x i32x4_max_s SimdShuffleOp(x, x);
      b = SimdLaneOp(x i32x4_max_s SimdShuffleOp(x, x));
      if (v == w) goto B_l;
      label B_m:
      a = h + (k << 2);
      k = i - k;
      loop L_o {
        i = a[0]:int;
        b = select_if(i, b, i > b);
        a = a + 4;
        k = k + -1;
        if (k) continue L_o;
      }
      label B_l:
      s = b + s;
      label B_k:
      t = t + u;
      r = r + 1;
      if (r != 5) continue L_g;
    }
    p[7] = 0;
    p[5] = q;
    if (eqz(q)) goto B_p;
    p[6] =
      (b = 
         ((p[1])[1]:ushort << 16 | (p[2])[1]:ushort) | (p[3])[1]:ushort << 24);
    if (t) goto B_p;
    a = (p[0])[1]:ushort;
    if (a > 255) goto B_p;
    (p + 28)[0]:int = 1;
    (p + 24)[0]:int = a << 8 | b;
    p[8] = 0;
    goto B_e;
    label B_p:
    p[8] = s < 6;
    if (s > 5) goto B_e;
    b = p + 40;
    k = p[0];
    r = 0;
    loop L_q {
      a = b + -4;
      i = k[0]:int@2;
      q = i >> 16;
      if (i < 16777216) goto B_s;
      b[0]:int = q;
      a[0]:int = (i & 255) | 256;
      goto B_r;
      label B_s:
      b[0]:int = (q = q << 8);
      a[0]:int = (i = i & 255);
      u = p[1] + ((t = r >> i) << 2);
      s = u[2]:ushort@1;
      a[0]:int = (i = i + (u = u[0]:ubyte));
      b[0]:int = (q = s << 16 | q);
      u = p[2] + ((t = t >> u) << 2);
      s = u[2]:ushort@1;
      a[0]:int = (i = i + (u = u[0]:ubyte));
      b[0]:int = (q = q | s);
      t = p[3] + ((t >> u) << 2);
      u = t[2]:ushort@1;
      a[0]:int = i + t[0]:ubyte;
      b[0]:int = u << 24 | q;
      label B_r:
      k = k + 4;
      b = b + 8;
      r = r + 1;
      if (r != 64) continue L_q;
    }
    label B_e:
    o = o + 1;
    if (o != c) continue L_d;
  }
  label B_c:
  WebPSafeFree(h);
  return 1;
  label B_b:
  br_table[B_t, B_a, B_a, B_a, B_a, B_t, ..B_a](e[0])
  label B_t:
  e[0] = 1;
  label B_a:
  WebPSafeFree(h);
  VP8LHuffmanTablesDeallocate(f);
  VP8LHtreeGroupsFree(g[0]);
  g[0] = 0;
  return 0;
}

function ReadHuffmanCode(a:int, b:int, c:int, d:int):int {
  var n:int;
  var s:int;
  var e:int = stack_pointer - 96;
  stack_pointer = e;
  var f:int = b + 24;
  var g:{ a:ubyte, b:ushort } = VP8LReadBits(f, 1);
  var h:int = memset(c, 0, a << 2);
  if (eqz(g)) goto B_d;
  c = VP8LReadBits(f, 1);
  h[VP8LReadBits(f, select_if(8, 1, VP8LReadBits(f, 1)))]:int = 1;
  if (c != 1) goto B_c;
  h[VP8LReadBits(f, 8)]:int = 1;
  goto B_c;
  label B_d:
  var i:int_ptr = memset(e, 0, 76);
  g = VP8LReadBits(f, 4);
  if (g + 4 < 1) goto B_e;
  c = -4;
  loop L_f {
    i[(c + 1052868)[0]:ubyte]:int = VP8LReadBits(f, 3);
    if (g != (c = c + 1)) continue L_f;
  }
  label B_e:
  if (eqz(VP8LHuffmanTablesAllocate(128, i + 76))) goto B_g;
  if (eqz(VP8LBuildHuffmanTable(i + 76, 7, i, 19))) goto B_g;
  var j:int = a;
  if (eqz(VP8LReadBits(f, 1))) goto B_h;
  j = VP8LReadBits(f, (VP8LReadBits(f, 3) << 1) + 2) + 2;
  if (j > a) goto B_g;
  label B_h:
  if (a < 1) goto B_i;
  var k:int = 8;
  var l:int = 0;
  loop L_j {
    if (eqz(j)) goto B_i;
    c = b[11]:int;
    if (c < 32) goto B_k;
    VP8LDoFillBitWindow(f);
    c = b[11]:int;
    label B_k:
    b[11]:int =
      c +
      (g = 
         (i[23])[0]:int +
         ((i32_wrap_i64(b[3]:long >> i64_extend_i32_u(c & 63)) & 127) << 2)).a;
    c = g.b;
    if (c > 15) goto B_m;
    h[l]:int = c;
    k = select_if(c, k, c);
    l = l + 1;
    goto B_l;
    label B_m:
    var m:int = (c + 1052870)[0]:ubyte;
    var o:int = m + (n = VP8LReadBits(f, (c + 1052867)[0]:ubyte));
    var p:int = o + l;
    if (p > a) goto B_g;
    if (o < 1) goto B_l;
    var q:int = select_if(k, 0, c == 16);
    var r:int = l;
    if (o < 4) goto B_o;
    c = h + (l << 2);
    r = l + (s = o & -4);
    var t:simd = i32x4_splat(q);
    g = s;
    loop L_p {
      c[0]:simd@4 = t;
      c = c + 16;
      g = g + -4;
      if (g) continue L_p;
    }
    if (o == s) goto B_n;
    label B_o:
    c = h + (r << 2);
    g = n + l + m - r;
    loop L_q {
      c[0]:int = q;
      c = c + 4;
      g = g + -1;
      if (g) continue L_q;
    }
    label B_n:
    l = p;
    label B_l:
    j = j + -1;
    if (l < a) continue L_j;
  }
  label B_i:
  VP8LHuffmanTablesDeallocate(i + 76);
  goto B_c;
  label B_g:
  VP8LHuffmanTablesDeallocate(i + 76);
  br_table[B_r, B_b, B_b, B_b, B_b, B_r, ..B_b](b[0]:int)
  label B_r:
  b[0]:int = 3;
  goto B_b;
  label B_c:
  if ((b + 48)[0]:int) goto B_b;
  c = VP8LBuildHuffmanTable(d, 8, h, a);
  if (c) goto B_a;
  label B_b:
  c = 0;
  br_table[B_s, B_a, B_a, B_a, B_a, B_s, ..B_a](b[0]:int)
  label B_s:
  b[0]:int = 3;
  label B_a:
  stack_pointer = e + 96;
  return c;
}

function VP8LNew():int {
  var a:long_ptr;
  a = WebPSafeCalloc(1L, 288);
  if (eqz(a)) goto B_a;
  a[0] = 8589934592L;
  VP8LDspInit();
  label B_a:
  return a;
}

function VP8LClear(a:int_ptr) {
  if (eqz(a)) goto B_a;
  WebPSafeFree((a + 160)[0]:int);
  VP8LHuffmanTablesDeallocate(a + 172);
  VP8LHtreeGroupsFree((a + 168)[0]:int);
  VP8LColorCacheClear(a + 124);
  VP8LColorCacheClear(a + 136);
  memset(a + 120, 0, 72);
  WebPSafeFree(a[4]);
  a[4] = 0;
  if (a[48] < 1) goto B_b;
  var b:int_ptr = a + 212;
  var c:int = 0;
  loop L_c {
    WebPSafeFree(b[0]);
    b[0] = 0;
    b = b + 20;
    c = c + 1;
    if (c < a[48]) continue L_c;
  }
  label B_b:
  a[69] = 0;
  a[48] = 0;
  WebPSafeFree(a[70]);
  a[3] = 0;
  a[70] = 0;
  label B_a:
}

function VP8LDelete(a:int) {
  if (eqz(a)) goto B_a;
  VP8LClear(a);
  WebPSafeFree(a);
  label B_a:
}

function VP8LDecodeAlphaHeader(a:int_ptr, b:int, c:int_ptr):int {
  var d:int;
  var e:int;
  var f:int;
  var g:long;
  d = WebPSafeCalloc(1L, 288);
  if (d) goto B_a;
  return 0;
  label B_a:
  d[0]:long = 8589934592L;
  VP8LDspInit();
  d[2]:int = a + 24;
  (a + 64)[0]:int = a;
  d[0]:int = 0;
  d[25]:int = (e = a[0]);
  d[26]:int = (f = a[1]);
  (a + 28)[0]:int = f;
  a[6] = e;
  VP8LInitBitReader(d + 24, b, c);
  if (eqz(DecodeImageStream(a[0], a[1], 1, d, 0))) goto B_b;
  if (d[48]:int != 1) goto B_g;
  if (d[49]:int != 3) goto B_g;
  if (d[30]:int > 0) goto B_g;
  b = (d + 164)[0]:int;
  if (b < 1) goto B_f;
  c = (d + 168)[0]:int + 12;
  loop L_h {
    if (((c + -8)[0]:int)[0]:ubyte) goto B_g;
    if (((c + -4)[0]:int)[0]:ubyte) goto B_g;
    if ((c[0])[0]:ubyte) goto B_g;
    c = c + 548;
    b = b + -1;
    if (eqz(b)) goto B_f;
    continue L_h;
  }
  label B_g:
  a[33] = 0;
  d[4]:int =
    (c = 
       WebPSafeMalloc(
         (i64_extend_i32_s(c = a[0]) << 4L) + i64_extend_i32_u(b = c & 65535) +
         (g = d[26]:int * d[25]:int),
         4));
  if (c) goto B_e;
  d[5]:int = 0;
  br_table[B_c, B_b, B_b, B_b, B_b, B_c, ..B_b](d[0]:int);
  label B_f:
  a[33] = 1;
  d[5]:int = 0;
  d[4]:int = (c = WebPSafeMalloc(d[26]:int * d[25]:int, 1));
  if (c) goto B_d;
  br_table[B_c, B_b, B_b, B_b, B_b, B_c, ..B_b](d[0]:int);
  label B_e:
  d[5]:int = c + (i32_wrap_i64(g) << 2) + (b << 2);
  label B_d:
  a[5] = d;
  return 1;
  label B_c:
  d[0]:int = 1;
  label B_b:
  VP8LClear(d);
  WebPSafeFree(d);
  return 0;
}

function DecodeImageStream(a:int, b:int, c:int, d:int_ptr, e:int_ptr):int {
  var l:int_ptr;
  var o:int;
  var r:int_ptr;
  var n:int_ptr;
  var m:int_ptr;
  var q:int;
  var i:int;
  var j:int;
  var k:int;
  var s:int;
  var t:int;
  var p:int_ptr;
  var f:int_ptr = stack_pointer - 16;
  stack_pointer = f;
  var g:int_ptr = d + 120;
  var h:int_ptr = d + 24;
  if (eqz(c)) goto B_i;
  loop L_j {
    if (eqz(VP8LReadBits(h, 1))) goto B_i;
    i = d[48];
    j = VP8LReadBits(h, 2);
    k = d[69];
    if (k & (l = 1 << j)) goto B_h;
    d[69] = k | l;
    k = 1;
    d[48] = d[48] + 1;
    i = d + i * 20;
    l = i + 212;
    l[0] = 0;
    m = i + 208;
    m[0] = b;
    n = i + 204;
    n[0] = a;
    (i + 196)[0]:int = j;
    br_table[B_l, B_l, B_k, B_m, ..B_k](j)
    label B_m:
    m = 0;
    j = VP8LReadBits(h, 8) + 1;
    if (j > 16) goto B_n;
    m = 1;
    if (j > 4) goto B_n;
    m = select_if(2, 3, j > 2);
    label B_n:
    i = i + 200;
    i[0]:int = m;
    k = n[0];
    if (eqz(DecodeImageStream(j, 1, 0, d, l))) goto B_h;
    p = WebPSafeMalloc(i64_extend_i32_u(1 << (o = 8 >> i[0]:int)), 4);
    if (eqz(p)) goto B_o;
    q = k + (1 << m);
    p[0] = (r = l[0])[0];
    n = 4;
    if (j < 2) goto B_p;
    a = 4;
    i = j << 2;
    n = select_if(i, 5, i > 5);
    s = n + -4;
    if (s < 8) goto B_q;
    if (p >= r + n) goto B_r;
    a = 4;
    if (r + 4 < p + n) goto B_q;
    label B_r:
    i = p + 4;
    j = r + 4;
    t = s & -4;
    a = t + 4;
    var u:simd = LoadZero(p);
    k = t;
    loop L_s {
      let t0 = SimdStoreLane(i, u = u i8x16_add LoadZero(j));
      i = i + 4;
      j = j + 4;
      if (k = k + -4) continue L_s;
      t0;
    }
    if (s == t) goto B_p;
    label B_q:
    i = a + 1;
    if (eqz(n - a & 1)) goto B_t;
    j = p + a;
    j[0]:byte = (j + -4)[0]:ubyte + (r + a)[0]:ubyte;
    a = i;
    label B_t:
    if (n == i) goto B_p;
    j = r + a;
    k = n - a;
    i = p + a + 1;
    loop L_u {
      (i + -1)[0]:byte = (i + -5)[0]:ubyte + j[0]:ubyte;
      i[0]:byte = (i + -4)[0]:ubyte + (j + 1)[0]:ubyte;
      i = i + 2;
      j = j + 2;
      k = k + -2;
      if (k) continue L_u;
    }
    label B_p:
    i = q + -1;
    j = 4 << o;
    if (j <= n) goto B_v;
    memset(p + n, 0, j - n);
    label B_v:
    a = i >> m;
    WebPSafeFree(l[0]);
    l[0] = p;
    if (1) continue L_j;
    goto B_h;
    label B_o:
    j = 1;
    k = d[0];
    br_table[B_e, B_g, B_g, B_g, B_g, B_e, ..B_g](k);
    label B_l:
    (i + 200)[0]:int = (i = VP8LReadBits(h, 3) + 2);
    k = 
      DecodeImageStream(n[0] + (j = -1 << i ^ -1) >> i, m[0] + j >> i, 0, d, l);
    label B_k:
    if (k) continue L_j;
    goto B_h;
  }
  label B_i:
  k = 0;
  j = 1;
  n = 0;
  if (eqz(VP8LReadBits(h, 1))) goto B_w;
  n = VP8LReadBits(h, 4);
  if (n + -1 < 11) goto B_w;
  j = 3;
  i = 0;
  br_table[B_e, B_d, B_d, B_d, B_d, B_e, ..B_d](d[0]);
  label B_w:
  f[3] = 0;
  f[2] = 0;
  p = d + 172;
  if (c) goto B_z;
  l = 1;
  goto B_y;
  label B_z:
  j = 1;
  l = 1;
  if (eqz(VP8LReadBits(h, 1))) goto B_y;
  j = 1;
  i = 0;
  k = 0;
  m = a + (l = 1 << (h = VP8LReadBits(h, 3) + 2)) + -1 >> h;
  if (
    eqz(DecodeImageStream(m, l = b + l + -1 >> h, 0, d, f + 12))) goto B_x;
  (d + 152)[0]:int = h;
  q = m * l;
  if (q < 1) goto B_aa;
  j = 1;
  o = q & 1;
  r = f[3];
  if (q != 1) goto B_ca;
  l = 0;
  goto B_ba;
  label B_ca:
  m = q & -2;
  l = 0;
  i = r;
  j = 1;
  loop L_da {
    i[0]:int = (k = i[1]:ushort@1);
    (i + 4)[0]:int = (h = (i + 5)[0]:ushort@1);
    j = select_if(j, k + 1, k < j);
    j = select_if(j, h + 1, h < j);
    i = i + 8;
    if (m != (l = l + 2)) continue L_da;
  }
  label B_ba:
  if (eqz(o)) goto B_aa;
  i = r + (l << 2);
  i[0]:int = (i = i[1]:ushort@1);
  j = select_if(j, i + 1, i < j);
  label B_aa:
  if (j > 1000) goto B_ea;
  k = 0;
  if (j > a * b) goto B_ea;
  l = j;
  goto B_y;
  label B_ea:
  k = WebPSafeMalloc(i64_extend_i32_u(j), 4);
  if (k) goto B_fa;
  i = 0;
  k = 0;
  br_table[B_ga, B_x, B_x, B_x, B_x, B_ga, ..B_x](d[0])
  label B_ga:
  d[0] = 1;
  k = 0;
  goto B_x;
  label B_fa:
  o = memset(k, 255, j << 2);
  if (q >= 1) goto B_ha;
  l = 0;
  goto B_y;
  label B_ha:
  t = q & 1;
  var v:int = f[3];
  if (q != 1) goto B_ja;
  q = 0;
  h = 0;
  goto B_ia;
  label B_ja:
  s = q & -2;
  q = 0;
  i = v;
  h = 0;
  loop L_ka {
    l = o + (i[0]:int << 2);
    m = l[0];
    if (m == -1) goto B_ma;
    l = h;
    goto B_la;
    label B_ma:
    l[0] = h;
    l = h + 1;
    m = h;
    label B_la:
    i[0]:int = m;
    h = o + ((r = i + 4)[0] << 2);
    m = h[0];
    if (m == -1) goto B_oa;
    h = l;
    goto B_na;
    label B_oa:
    h[0] = l;
    h = l + 1;
    m = l;
    label B_na:
    r[0] = m;
    i = i + 8;
    if (s != (q = q + 2)) continue L_ka;
  }
  label B_ia:
  if (t) goto B_pa;
  l = h;
  goto B_y;
  label B_pa:
  l = o + ((m = v + (q << 2))[0] << 2);
  i = l[0];
  if (i == -1) goto B_ra;
  l = h;
  goto B_qa;
  label B_ra:
  l[0] = h;
  l = h + 1;
  i = h;
  label B_qa:
  m[0] = i;
  label B_y:
  i = 0;
  if ((d + 48)[0]:int) goto B_x;
  j = ReadHuffmanCodesHelper(n, l, j, k, d, p, f + 8);
  i = f[2];
  if (j) goto B_f;
  label B_x:
  WebPSafeFree(k);
  WebPSafeFree(f[3]);
  VP8LHuffmanTablesDeallocate(p);
  VP8LHtreeGroupsFree(i);
  label B_h:
  k = d[0];
  label B_g:
  j = 3;
  i = 0;
  br_table[B_e, B_d, B_d, B_d, B_d, B_e, ..B_d](k);
  label B_f:
  (d + 168)[0]:int = i;
  (d + 164)[0]:int = l;
  (d + 160)[0]:int = f[3];
  WebPSafeFree(k);
  if (n < 1) goto B_ta;
  d[30] = 1 << n;
  if (VP8LColorCacheInit(d + 124, n)) goto B_sa;
  j = 1;
  i = 0;
  br_table[B_e, B_d, B_d, B_d, B_d, B_e, ..B_d](d[0]);
  label B_ta:
  g[0] = 0;
  label B_sa:
  d[26] = b;
  d[25] = a;
  (d + 148)[0]:int =
    select_if(-1 << (i = (d + 152)[0]:int) ^ -1, -1, i);
  (d + 156)[0]:int = a + (1 << i) + -1 >> i;
  if (eqz(c)) goto B_ua;
  d[1] = 1;
  i = 0;
  goto B_c;
  label B_ua:
  i = WebPSafeMalloc(i64_extend_i32_s(a) * i64_extend_i32_s(b), 4);
  if (i) goto B_va;
  j = 1;
  i = 0;
  br_table[B_e, B_d, B_d, B_d, B_d, B_e, ..B_d](d[0]);
  label B_va:
  if (eqz(DecodeImageData(d, i, a, b, b, 0))) goto B_d;
  if (eqz(d[12])) goto B_c;
  goto B_d;
  label B_e:
  d[0] = j;
  i = 0;
  label B_d:
  WebPSafeFree(i);
  WebPSafeFree((d + 160)[0]:int);
  VP8LHuffmanTablesDeallocate(d + 172);
  i = 0;
  goto B_b;
  label B_c:
  if (eqz(e)) goto B_wa;
  e[0] = i;
  label B_wa:
  d[28] = 0;
  i = 1;
  if (c) goto B_a;
  WebPSafeFree(d[40]);
  VP8LHuffmanTablesDeallocate(p);
  i = 1;
  label B_b:
  VP8LHtreeGroupsFree(d[42]);
  VP8LColorCacheClear(d + 124);
  VP8LColorCacheClear(d + 136);
  memset(g, 0, 72);
  label B_a:
  stack_pointer = f + 16;
  return i;
}

function DecodeImageData(a:int, b:int, c:int, d:{ a:ubyte, b:ushort }, e:int, f:int):int {
  var k:{ a:int, b:int }
  var y:long;
  var z:int;
  var g:int = a + 124;
  var h:int_ptr = a[28]:int;
  var i:int = h / c;
  var j:int = a + 24;
  var l:int = b + ((k = e * c) << 2);
  var m:int_ptr = b + (h << 2);
  if (h >= k) goto B_c;
  var n:int = a[30]:int;
  var o:{ a:ubyte, b:ushort } = n > 0;
  var p:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int } = 
    a[14]:int;
  d = d * c << 2;
  var q:int = h - i * c;
  var r:int = a + 148;
  h = 0;
  k = (a + 152)[0]:int;
  if (eqz(k)) goto B_d;
  h = ((a + 160)[0]:int)[(a + 156)[0]:int * (i >> k) + (q >> k)]:int;
  label B_d:
  k = select_if(g, 0, o);
  var s:int = select_if(i, 16777216, p);
  var t:int = n + 280;
  var u:int = b + d;
  var v:int = r[0]:int;
  p = (a + 168)[0]:int + h * 548;
  var w:int = a + 136;
  var x:simd_ptr@8 = a + 64;
  h = m;
  loop L_e {
    if (i < s) goto B_f;
    x[0] = j[0]:simd@8;
    (x + 16)[0]:simd@8 = (j + 16)[0]:simd@8;
    a[24]:int = m - b >> 2;
    if (a[30]:int < 1) goto B_g;
    VP8LColorCacheCopy(g, w);
    label B_g:
    s = i + 8;
    label B_f:
    if (q & v) goto B_h;
    d = a[38]:int;
    if (d) goto B_j;
    d = 0;
    goto B_i;
    label B_j:
    d = (a[40]:int)[a[39]:int * (i >> d) + (q >> d)]:int;
    label B_i:
    p = a[42]:int + d * 548;
    label B_h:
    if (eqz(p.h)) goto B_n;
    d = p.g;
    goto B_m;
    label B_n:
    if (a[11]:int < 32) goto B_o;
    VP8LDoFillBitWindow(j);
    label B_o:
    if (eqz(p.i)) goto B_q;
    o = p +
        ((i32_wrap_i64(
            (y = a[3]:long) >> i64_extend_i32_u((d = a[11]:int) & 63)) &
          63) <<
         3);
    r = (o + 36)[0]:int;
    z = r + d;
    d = (o + 40)[0]:int;
    if (r > 255) goto B_s;
    a[11]:int = z;
    m[0] = d;
    d = 0;
    goto B_r;
    label B_s:
    a[11]:int = z + -256;
    label B_r:
    if (a[12]:int) goto B_c;
    if (a[10]:int != a[9]:int) goto B_t;
    if (a[11]:int > 64) goto B_c;
    label B_t:
    if (d) goto B_p;
    goto B_l;
    label B_q:
    d = p.a +
        ((i32_wrap_i64(
            (y = a[3]:long) >> i64_extend_i32_u((o = a[11]:int) & 63)) &
          255) <<
         2);
    r = d.a;
    if (r < 9) goto B_u;
    d = d + (d.b << 2) +
        ((i32_wrap_i64(y >> i64_extend_i32_u((o = o + 8) & 63)) &
          (-1 << r + -8 ^ -1)) <<
         2);
    r = d.a;
    label B_u:
    a[11]:int = o + (r & 255);
    if (a[12]:int) goto B_c;
    d = d.b;
    label B_p:
    if (a[10]:int != a[9]:int) goto B_v;
    if (a[11]:int > 64) goto B_c;
    label B_v:
    if (d > 255) goto B_w;
    if (eqz(p.f)) goto B_x;
    d = p.g | d << 8;
    goto B_m;
    label B_x:
    r = 
      p.b +
      ((i32_wrap_i64(y >> i64_extend_i32_u((o = a[11]:int) & 63)) & 255) <<
       2);
    z = r[0]:ubyte;
    if (z < 9) goto B_y;
    r = r + (r[1]:ushort << 2) +
        ((i32_wrap_i64(y >> i64_extend_i32_u((o = o + 8) & 63)) &
          (-1 << z + -8 ^ -1)) <<
         2);
    z = r[0]:ubyte;
    label B_y:
    a[11]:int = (o = o + (z & 255));
    var aa:int = r[1]:ushort;
    if (o < 32) goto B_z;
    VP8LDoFillBitWindow(j);
    o = a[11]:int;
    y = a[3]:long;
    label B_z:
    r = p.c + ((i32_wrap_i64(y >> i64_extend_i32_u(o & 63)) & 255) << 2);
    z = r[0]:ubyte;
    if (z < 9) goto B_aa;
    r = r + (r[1]:ushort << 2) +
        ((i32_wrap_i64(y >> i64_extend_i32_u((o = o + 8) & 63)) &
          (-1 << z + -8 ^ -1)) <<
         2);
    z = r[0]:ubyte;
    label B_aa:
    var ba:int = r[1]:ushort;
    o = 
      p.d +
      ((i32_wrap_i64(y >> i64_extend_i32_u((r = o + (z & 255)) & 63)) & 255) <<
       2);
    z = o.a;
    if (z < 9) goto B_ba;
    o = o + (o.b << 2) +
        (((-1 << z + -8 ^ -1) &
          i32_wrap_i64(y >> i64_extend_i32_u((r = r + 8) & 63))) <<
         2);
    z = o.a;
    label B_ba:
    a[11]:int = (r = r + (z & 255));
    if (a[12]:int) goto B_c;
    o = o.b;
    if (a[10]:int != a[9]:int) goto B_ca;
    if (r > 64) goto B_c;
    label B_ca:
    d = ((aa << 16 | d << 8) | ba) | o << 24;
    goto B_m;
    label B_w:
    if (d > 279) goto B_da;
    z = d + -256;
    if (z < 4) goto B_ea;
    z = VP8LReadBits(j, o = d + -258 >> 1) + (((d & 1) | 2) << o);
    y = j[0]:long;
    label B_ea:
    d = 
      p.e +
      ((i32_wrap_i64(y >> i64_extend_i32_u((o = a[11]:int) & 63)) & 255) <<
       2);
    r = d.a;
    if (r < 9) goto B_fa;
    d = d + (d.b << 2) +
        ((i32_wrap_i64(y >> i64_extend_i32_u((o = o + 8) & 63)) &
          (-1 << r + -8 ^ -1)) <<
         2);
    r = d.a;
    label B_fa:
    a[11]:int = (o = o + (r & 255));
    d = d.b;
    if (o < 32) goto B_ga;
    VP8LDoFillBitWindow(j);
    label B_ga:
    if (d < 4) goto B_ha;
    d = VP8LReadBits(j, o = d + -2 >> 1) + (((d & 1) | 2) << o);
    label B_ha:
    if (d + 1 < 121) goto B_ja;
    d = d + -119;
    goto B_ia;
    label B_ja:
    d = (d + 1052896)[0]:ubyte;
    d = (d >> 4) * c - (d & 15) + 8;
    d = select_if(d, 1, d > 1);
    label B_ia:
    if (a[12]:int) goto B_c;
    if (a[10]:int != a[9]:int) goto B_ka;
    if (a[11]:int > 64) goto B_c;
    label B_ka:
    if (m - b >> 2 < d) goto B_b;
    if (u - m >> 2 < (o = z + 1)) goto B_b;
    CopyBlock32b(m, d, o);
    q = o + q;
    if (q < c) goto B_la;
    loop L_ma {
      d = i;
      i = d + 1;
      if (eqz(f)) goto B_na;
      if (d >= e) goto B_na;
      if (i & 15) goto B_na;
      call_indirect(a, i, f);
      label B_na:
      q = q - c;
      if (q >= c) continue L_ma;
    }
    label B_la:
    d = o << 2;
    if (eqz(q & v)) goto B_oa;
    o = a[38]:int;
    if (o) goto B_qa;
    o = 0;
    goto B_pa;
    label B_qa:
    o = (a[40]:int)[a[39]:int * (i >> o) + (q >> o)]:int;
    label B_pa:
    p = a[42]:int + o * 548;
    label B_oa:
    m = m + d;
    if (n < 1) goto B_k;
    if (h >= m) goto B_k;
    o = k.a;
    loop L_ra {
      o[(d = h[0]) * 506832829 >> k.b]:int = d;
      h = h + 4;
      if (h < m) continue L_ra;
      goto B_k;
    }
    label B_da:
    if (d >= t) goto B_b;
    r = d + -280;
    o = k.a;
    if (h >= m) goto B_sa;
    loop L_ta {
      o[(d = h[0]) * 506832829 >> k.b]:int = d;
      h = h + 4;
      if (h < m) continue L_ta;
    }
    label B_sa:
    d = o[r]:int;
    label B_m:
    m[0] = d;
    label B_l:
    r = m + 4;
    q = q + 1;
    if (q >= c) goto B_ua;
    m = r;
    goto B_k;
    label B_ua:
    z = i + 1;
    if (eqz(f)) goto B_va;
    if (i >= e) goto B_va;
    if (z & 15) goto B_va;
    call_indirect(a, z, f);
    label B_va:
    q = 0;
    if (n < 1) goto B_wa;
    if (h >= r) goto B_wa;
    d = k.a;
    loop L_xa {
      d[(i = h[0]) * 506832829 >> k.b]:int = i;
      i = h < m;
      o = h + 4;
      h = o;
      if (i) continue L_xa;
    }
    h = o;
    label B_wa:
    m = r;
    i = z;
    label B_k:
    if (m < l) continue L_e;
  }
  label B_c:
  h = 1;
  if ((a + 48)[0]:int) goto B_ya;
  h = 0;
  if ((a + 40)[0]:int != (a + 36)[0]:int) goto B_ya;
  h = (a + 44)[0]:int > 64;
  label B_ya:
  a[12]:int = h;
  k = a[14]:int;
  if (eqz(k)) goto B_za;
  if (eqz(h)) goto B_za;
  if (m >= l) goto B_za;
  a[0]:int = 5;
  j[0]:simd@8 = a[8]:simd@8;
  a[28]:int = a[24]:int;
  (j + 16)[0]:simd@8 = (a + 80)[0]:simd@8;
  h = 1;
  if (a[30]:int < 1) goto B_a;
  VP8LColorCacheCopy(a + 136, g);
  return 1;
  label B_za:
  if ((eqz(k) | m < l) != 1) goto B_ab;
  if (h) goto B_b;
  label B_ab:
  if (eqz(f)) goto B_bb;
  call_indirect(a, select_if(i, e, i < e), f);
  label B_bb:
  a[0]:int = 0;
  a[28]:int = m - b >> 2;
  return 1;
  label B_b:
  h = 0;
  br_table[B_cb, B_a, B_a, B_a, B_a, B_cb, ..B_a](a[0]:int)
  label B_cb:
  a[0]:int = 3;
  label B_a:
  return h;
}

function VP8LDecodeAlphaImageStream(a:int, b:int):int {
  var f:int;
  var j:int;
  var k:int_ptr;
  var r:long;
  var s:int;
  var t:int;
  var u:int_ptr;
  var w:int;
  var x:int;
  var v:int;
  var y:int;
  var aa:int;
  var l:int;
  var c:int = 1;
  var d:int = a[5]:int;
  if (d[27]:int >= b) goto B_a;
  if (a[33]:int) goto B_c;
  WebPInitAlphaProcessing();
  if (eqz(a[33]:int)) goto B_b;
  label B_c:
  var e:int = d + 108;
  var g:int = d[26]:int * (f = d[25]:int);
  var h:int = d[28]:int;
  var i:int = h / f;
  if (h < (j = f * b)) goto B_f;
  k = d + 48;
  goto B_e;
  label B_f:
  l = h - i * f;
  a = (d + 152)[0]:int;
  if (a) goto B_h;
  a = 0;
  goto B_g;
  label B_h:
  a = ((d + 160)[0]:int)[(d + 156)[0]:int * (i >> a) + (l >> a)]:int;
  label B_g:
  k = d + 48;
  if (k[0]) goto B_e;
  var m:long_ptr = d + 24;
  var n:int = (d + 148)[0]:int;
  var o:int = d[4]:int;
  var p:int_ptr = (d + 168)[0]:int + a * 548;
  var q:int = d + 196;
  loop L_i {
    if (l & n) goto B_j;
    a = d[38]:int;
    if (a) goto B_l;
    a = 0;
    goto B_k;
    label B_l:
    a = (d[40]:int)[d[39]:int * (i >> a) + (l >> a)]:int;
    label B_k:
    p = d[42]:int + a * 548;
    label B_j:
    a = d[11]:int;
    if (a < 32) goto B_m;
    VP8LDoFillBitWindow(m);
    a = d[11]:int;
    label B_m:
    c = 
      p[0] +
      ((i32_wrap_i64((r = m[0]) >> i64_extend_i32_u(a & 63)) & 255) << 2);
    s = c[0]:ubyte;
    if (s < 9) goto B_n;
    c = c + (c[1]:ushort << 2) +
        (((-1 << s + -8 ^ -1) &
          i32_wrap_i64(r >> i64_extend_i32_u((a = a + 8) & 63))) <<
         2);
    s = c[0]:ubyte;
    label B_n:
    d[11]:int = (s = a + (s & 255));
    a = c[1]:ushort;
    if (a > 255) goto B_p;
    (o + h)[0]:byte = a;
    h = h + 1;
    l = l + 1;
    if (l >= f) goto B_q;
    t = i;
    goto B_o;
    label B_q:
    t = i + 1;
    l = 0;
    if (i >= b) goto B_o;
    if (t & 15) goto B_o;
    c = d[27]:int;
    v = 
      select_if(
        c,
        s = select_if((a = d[2]:int) + 84, e, (u = a[10]:int)[3] < 2)[0]:int,
        c > s);
    if (v > i) goto B_r;
    VP8LColorIndexInverseTransformAlpha(q,
                                        v,
                                        t,
                                        d[4]:int + d[25]:int * v,
                                        w = u[34] + (c = a[0]:int) * v);
    if (eqz(u[3])) goto B_r;
    s = u[35];
    x = i - v + 1;
    if (x & 1) goto B_t;
    a = w;
    goto B_s;
    label B_t:
    call_indirect(s, w, w, c, 1059936[u[3]]:int);
    v = v + 1;
    a = w + c;
    s = w;
    label B_s:
    if (x == 1) goto B_u;
    v = i - v + 1;
    loop L_v {
      call_indirect(s, a, a, c, 1059936[u[3]]:int);
      call_indirect(a, s = a + c, s, c, 1059936[u[3]]:int);
      a = s + c;
      v = v + -2;
      if (v) continue L_v;
    }
    w = a - c;
    label B_u:
    u[35] = w;
    label B_r:
    d[27]:int = t;
    d[29]:int = t;
    goto B_o;
    label B_p:
    v = 1;
    if (a > 279) goto B_d;
    w = a + -256;
    if (w < 4) goto B_w;
    w = VP8LReadBits(m, c = a + -258 >> 1) + (((a & 1) | 2) << c);
    s = d[11]:int;
    r = d[3]:long;
    label B_w:
    a = p[4] + ((i32_wrap_i64(r >> i64_extend_i32_u(s & 63)) & 255) << 2);
    c = a[0]:ubyte;
    if (c < 9) goto B_x;
    a = a + (a[1]:ushort << 2) +
        (((-1 << c + -8 ^ -1) &
          i32_wrap_i64(r >> i64_extend_i32_u((s = s + 8) & 63))) <<
         2);
    c = a[0]:ubyte;
    label B_x:
    d[11]:int = (c = s + (c & 255));
    a = a[1]:ushort;
    if (c < 32) goto B_y;
    VP8LDoFillBitWindow(m);
    label B_y:
    if (a < 4) goto B_z;
    a = VP8LReadBits(m, c = a + -2 >> 1) + (((a & 1) | 2) << c);
    label B_z:
    if (a + 1 < 121) goto B_ba;
    u = a + -119;
    goto B_aa;
    label B_ba:
    a = (a + 1052896)[0]:ubyte;
    a = (a >> 4) * f - (a & 15) + 8;
    u = select_if(a, 1, a > 1);
    label B_aa:
    if (h < u) goto B_d;
    if (g - h < (t = w + 1)) goto B_d;
    a = o + h;
    c = a - u;
    if (t < 8) goto B_ha;
    br_table[B_la, B_ka, B_ha, B_ja, ..B_ha](u + -1)
    label B_la:
    v = c[0]:ubyte * 16843009;
    goto B_ia;
    label B_ka:
    v = c[0]:ushort@1 * 65537;
    goto B_ia;
    label B_ja:
    v = c[0]:int@1;
    label B_ia:
    if (a & 3) goto B_ma;
    w = t;
    u = a;
    goto B_ea;
    label B_ma:
    a[0]:byte = c[0]:ubyte;
    v = v << 24;
    u = a + 1;
    if (u & 3) goto B_na;
    c = c + 1;
    s = t;
    goto B_fa;
    label B_na:
    a[1]:byte = c[1]:ubyte;
    x = w + -1;
    v = v << 24;
    u = a + 2;
    if (u & 3) goto B_oa;
    c = c + 2;
    s = w;
    w = x;
    goto B_fa;
    label B_oa:
    a[2]:byte = c[2]:ubyte;
    y = w + -2;
    v = v << 24;
    u = a + 3;
    if (u & 3) goto B_ga;
    c = c + 3;
    s = x;
    w = y;
    goto B_fa;
    label B_ha:
    if (u >= t) goto B_pa;
    if (w > 2147483646) goto B_ca;
    s = 0 - u;
    v = 0;
    if (t < 16) goto B_qa;
    if (u < 16) goto B_qa;
    v = t & -16;
    c = v;
    loop L_ra {
      a[0]:simd@1 = (a + s)[0]:simd@1;
      a = a + 16;
      c = c + -16;
      if (c) continue L_ra;
    }
    if (t == v) goto B_ca;
    label B_qa:
    x = w - v;
    u = w + 1 & 3;
    if (eqz(u)) goto B_sa;
    c = 0 - v;
    a = o + h + v;
    loop L_ta {
      a[0]:byte = (a + s)[0]:ubyte;
      a = a + 1;
      c = c + -1;
      u = u + -1;
      if (u) continue L_ta;
    }
    v = 0 - c;
    label B_sa:
    if (x < 3) goto B_ca;
    a = o + v + h;
    u = w - v + 1;
    loop L_ua {
      a[0]:byte = (c = a + s)[0]:ubyte;
      (a + 1)[0]:byte = (c + 1)[0]:ubyte;
      (a + 2)[0]:byte = (c + 2)[0]:ubyte;
      (a + 3)[0]:byte = (c + 3)[0]:ubyte;
      a = a + 4;
      u = u + -4;
      if (u) continue L_ua;
      goto B_ca;
    }
    label B_pa:
    memcpy(a, c, t);
    goto B_ca;
    label B_ga:
    a[3]:byte = c[3]:ubyte;
    w = w + -3;
    v = v << 24;
    u = a + 4;
    c = c + 4;
    s = y;
    label B_fa:
    a = 0;
    if (s < 5) goto B_da;
    label B_ea:
    y = w >> 2;
    x = 0;
    if (w < 16) goto B_wa;
    var z:simd = i32x4_splat(v);
    x = y & 1073741820;
    s = x;
    a = u;
    loop L_xa {
      a[0]:simd@4 = z;
      a = a + 16;
      s = s + -4;
      if (s) continue L_xa;
    }
    if (y == x) goto B_va;
    label B_wa:
    s = y - x;
    a = u + (x << 2);
    loop L_ya {
      a[0]:int = v;
      a = a + 4;
      s = s + -1;
      if (s) continue L_ya;
    }
    label B_va:
    a = w & -4;
    label B_da:
    if (w <= a) goto B_ca;
    y = w - a;
    if (y < 16) goto B_za;
    s = a + u;
    if (s - (v = a + c) < 16) goto B_za;
    a = a + (aa = y & -16);
    x = aa;
    loop L_ab {
      s[0]:simd@1 = v[0]:simd@1;
      s = s + 16;
      v = v + 16;
      x = x + -16;
      if (x) continue L_ab;
    }
    if (y == aa) goto B_ca;
    label B_za:
    v = w + (a ^ -1);
    s = w - a & 3;
    if (eqz(s)) goto B_bb;
    loop L_cb {
      (u + a)[0]:byte = (c + a)[0]:ubyte;
      a = a + 1;
      s = s + -1;
      if (s) continue L_cb;
    }
    label B_bb:
    if (v < 3) goto B_ca;
    loop L_db {
      s = u + a;
      s[0]:byte = (v = c + a)[0]:ubyte;
      (s + 1)[0]:byte = (v + 1)[0]:ubyte;
      (s + 2)[0]:byte = (v + 2)[0]:ubyte;
      (s + 3)[0]:byte = (v + 3)[0]:ubyte;
      c = c + 4;
      u = u + 4;
      if (a != (w = w + -4)) continue L_db;
    }
    label B_ca:
    h = t + h;
    l = t + l;
    if (l >= f) goto B_fb;
    t = i;
    goto B_eb;
    label B_fb:
    aa = i + 1;
    x = 0;
    t = i;
    loop L_gb {
      w = t;
      t = w + 1;
      if (w >= b) goto B_hb;
      if (t & 15) goto B_hb;
      c = d[27]:int;
      v = 
        select_if(
          c,
          s = select_if((a = d[2]:int) + 84, e, (u = a[10]:int)[3] < 2)[0]:int,
          c > s);
      if (v > w) goto B_ib;
      VP8LColorIndexInverseTransformAlpha(q,
                                          v,
                                          t,
                                          d[4]:int + d[25]:int * v,
                                          i = u[34] + (c = a[0]:int) * v);
      if (eqz(u[3])) goto B_ib;
      s = u[35];
      y = aa + x - v;
      if (y & 1) goto B_kb;
      a = i;
      goto B_jb;
      label B_kb:
      call_indirect(s, i, i, c, 1059936[u[3]]:int);
      v = v + 1;
      a = i + c;
      s = i;
      label B_jb:
      if (y == 1) goto B_lb;
      v = v + -1;
      loop L_mb {
        call_indirect(s, a, a, c, 1059936[u[3]]:int);
        call_indirect(a, s = a + c, s, c, 1059936[u[3]]:int);
        a = s + c;
        if (w != (v = v + 2)) continue L_mb;
      }
      i = a - c;
      label B_lb:
      u[35] = i;
      label B_ib:
      d[27]:int = t;
      d[29]:int = t;
      label B_hb:
      x = x + 1;
      l = l - f;
      if (l >= f) continue L_gb;
    }
    label B_eb:
    if (h >= j) goto B_o;
    if (eqz(l & n)) goto B_o;
    a = d[38]:int;
    if (a) goto B_ob;
    a = 0;
    goto B_nb;
    label B_ob:
    a = (d[40]:int)[d[39]:int * (t >> a) + (l >> a)]:int;
    label B_nb:
    p = d[42]:int + a * 548;
    label B_o:
    if (eqz(k[0])) goto B_qb;
    k[0] = 1;
    goto B_pb;
    label B_qb:
    a = 0;
    if (d[10]:int != d[9]:int) goto B_rb;
    a = d[11]:int > 64;
    label B_rb:
    k[0] = a;
    if (a) goto B_pb;
    i = t;
    if (h < j) continue L_i;
    label B_pb:
  }
  i = t;
  label B_e:
  w = select_if(i, b, i < b);
  if (
    w <=
    (v = 
       select_if(
         c = d[27]:int,
         s = select_if((a = d[2]:int) + 84, e, (u = a[10]:int)[3] < 2)[0]:int,
         c > s))) goto B_sb;
  VP8LColorIndexInverseTransformAlpha(d + 196,
                                      v,
                                      w,
                                      d[4]:int + d[25]:int * v,
                                      t = u[34] + (c = a[0]:int) * v);
  if (eqz(u[3])) goto B_sb;
  s = u[35];
  l = w - v;
  if (l & 1) goto B_ub;
  a = t;
  goto B_tb;
  label B_ub:
  call_indirect(s, t, t, c, 1059936[u[3]]:int);
  v = v + 1;
  a = t + c;
  s = t;
  label B_tb:
  if (l == 1) goto B_vb;
  v = w - v;
  loop L_wb {
    call_indirect(s, a, a, c, 1059936[u[3]]:int);
    call_indirect(a, s = a + c, s, c, 1059936[u[3]]:int);
    a = s + c;
    v = v + -2;
    if (v) continue L_wb;
  }
  t = a - c;
  label B_vb:
  u[35] = t;
  label B_sb:
  d[27]:int = w;
  d[29]:int = w;
  v = 0;
  label B_d:
  a = 1;
  if (k[0]) goto B_xb;
  a = 0;
  if ((d + 40)[0]:int != (d + 36)[0]:int) goto B_xb;
  a = (d + 44)[0]:int > 64;
  label B_xb:
  k[0] = a;
  if (v) goto B_zb;
  if (eqz(a)) goto B_yb;
  if (h >= g) goto B_yb;
  label B_zb:
  c = 0;
  br_table[B_ac, B_a, B_a, B_a, B_a, B_ac, ..B_a](d[0]:int)
  label B_ac:
  d[0]:int = select_if(5, 3, a);
  return 0;
  label B_yb:
  d[28]:int = h;
  return 1;
  label B_b:
  c = DecodeImageData(d, d[4]:int, d[25]:int, d[26]:int, b, 19);
  label B_a:
  return c;
}

function ExtractAlphaRows(a:int_ptr, b:int) {
  var c:int;
  var f:int;
  var p:int;
  var d:int = b - (c = a[27]);
  if (d < 1) goto B_a;
  var e:int = a + 156;
  var g:int = a[4] + ((f = a[25]) * c << 2);
  loop L_b {
    var h:int = select_if(d, 16, d < 16);
    var i:int = h + c;
    var j:int_ptr = a[2];
    var k:int = j[0];
    var l:int = k * h;
    var m:int_ptr = j[10];
    var n:int = m[34] + k * c;
    var o:int = a[5];
    p = a[48];
    if (p < 1) goto B_d;
    j = p * 20;
    VP8LInverseTransform(j + a + 176, c, i, g, o);
    if (p == 1) goto B_c;
    j = e + j;
    loop L_e {
      VP8LInverseTransform(j, c, i, o, o);
      j = j + -20;
      p = p + -1;
      if (p > 1) continue L_e;
      goto B_c;
    }
    label B_d:
    if (o == g) goto B_c;
    memcpy(o, g, h * f << 2);
    label B_c:
    call_indirect(o, n, l, 0[264925]:int);
    if (eqz(m[3])) goto B_f;
    o = m[35];
    if (h & 1) goto B_h;
    p = c;
    j = n;
    goto B_g;
    label B_h:
    call_indirect(o, n, n, k, 1059936[m[3]]:int);
    p = c + 1;
    j = n + k;
    o = n;
    label B_g:
    if (h == 1) goto B_i;
    p = h + c - p;
    loop L_j {
      call_indirect(o, j, j, k, 1059936[m[3]]:int);
      call_indirect(j, o = j + k, o, k, 1059936[m[3]]:int);
      j = o + k;
      p = p + -2;
      if (p) continue L_j;
    }
    n = j - k;
    label B_i:
    m[35] = n;
    label B_f:
    g = g + ((f = a[25]) * h << 2);
    c = i;
    d = d - h;
    if (d > 0) continue L_b;
  }
  label B_a:
  a[27] = b;
  a[29] = b;
}

function CopyBlock32b(a:int_ptr, b:int, c:int) {
  var f:long;
  var e:int;
  var i:int_ptr;
  var g:int;
  var d:int = a - (b << 2);
  if (a & 3) goto B_c;
  if (b > 2) goto B_c;
  if (c < 4) goto B_c;
  if (b != 1) goto B_e;
  e = d[0]:int;
  f = i64_extend_i32_u(e);
  f = f << 32L | f;
  goto B_d;
  label B_e:
  f = d[0]:long@4;
  e = i32_wrap_i64(f);
  label B_d:
  if (eqz(a & 4)) goto B_f;
  a[0] = e;
  c = c + -1;
  f = f << 32L;
  a = a + 4;
  d = d + 4;
  label B_f:
  g = c >> 1;
  b = 0;
  if (c < 4) goto B_h;
  var h:simd = i64x2_splat(f);
  b = g & 2147483646;
  i = b;
  e = a;
  loop L_i {
    e[0]:simd@8 = h;
    e = e + 16;
    i = i + -2;
    if (i) continue L_i;
  }
  if (g == b) goto B_g;
  label B_h:
  i = g - b;
  e = a + (b << 3);
  loop L_j {
    e[0]:long = f;
    e = e + 8;
    i = i + -1;
    if (i) continue L_j;
  }
  label B_g:
  if (eqz(c & 1)) goto B_b;
  (a + (e = c << 2 & -8))[0]:int = (d + e)[0]:int;
  return ;
  label B_c:
  if (b >= c) goto B_a;
  if (c < 1) goto B_b;
  g = 0;
  if (c < 8) goto B_k;
  if (eqz(b & 1073741820)) goto B_k;
  d = 0 - (b << 2);
  g = c & -4;
  i = g;
  e = a;
  loop L_l {
    e[0]:simd@4 = (e + d)[0]:simd@4;
    e = e + 16;
    i = i + -4;
    if (i) continue L_l;
  }
  if (g == c) goto B_b;
  label B_k:
  var j:int = (g ^ -1) + c;
  i = c & 3;
  if (eqz(i)) goto B_m;
  var k:int = g + i;
  d = 0 - (b << 2);
  e = a + (g << 2);
  loop L_n {
    e[0]:int = (e + d)[0]:int;
    e = e + 4;
    i = i + -1;
    if (i) continue L_n;
  }
  g = k;
  label B_m:
  if (j < 3) goto B_b;
  c = c - g;
  b = 0 - (b << 2);
  e = a + (g << 2);
  loop L_o {
    e[0]:int = (i = e + b)[0];
    (e + 4)[0]:int = (i + 4)[0]:int;
    (e + 8)[0]:int = (i + 8)[0]:int;
    (e + 12)[0]:int = (i + 12)[0]:int;
    e = e + 16;
    c = c + -4;
    if (c) continue L_o;
  }
  label B_b:
  return ;
  label B_a:
  memcpy(a, d, c << 2);
}

function VP8LDecodeHeader(a:{ a:int, b:int, c:int }, b:int_ptr):int {
  var e:int;
  var d:int;
  var c:int = 0;
  if (eqz(a)) goto B_a;
  if (b) goto B_b;
  br_table[B_c, B_a, B_a, B_a, B_a, B_c, ..B_a](a.a)
  label B_c:
  a.a = 2;
  return 0;
  label B_b:
  a.a = 0;
  a.c = b;
  c = a + 24;
  VP8LInitBitReader(c, b[16], b[15]);
  if (VP8LReadBits(c, 8) != 47) goto B_f;
  d = VP8LReadBits(c, 14);
  e = VP8LReadBits(c, 14);
  VP8LReadBits(c, 1);
  if (VP8LReadBits(c, 3)) goto B_f;
  if (eqz((a + 48)[0]:int)) goto B_e;
  label B_f:
  br_table[B_g, B_d, B_d, B_d, B_d, B_g, ..B_d](a.a)
  label B_g:
  a.a = 3;
  goto B_d;
  label B_e:
  b[1] = (e = e + 1);
  b[0] = (d = d + 1);
  a.b = 2;
  c = 1;
  if (DecodeImageStream(d, e, 1, a, 0)) goto B_a;
  label B_d:
  VP8LClear(a);
  c = 0;
  label B_a:
  return c;
}

function VP8LDecodeImage(a:int_ptr):int {
  var d:int_ptr;
  var e:int;
  var f:long;
  var k:long;
  var j:int;
  if (eqz(a)) goto B_a;
  var b:int_ptr = a[2];
  var c:int_ptr = b[10];
  if (eqz(a[1])) goto B_d;
  a[3] = c[0];
  if (WebPIoInitFromOptions(c[5], b, 3)) goto B_e;
  d = 2;
  br_table[B_c, B_b, B_b, B_b, B_b, B_c, ..B_b](a[0]);
  label B_e:
  a[4] =
    (d = 
       WebPSafeMalloc(
         (i64_extend_i32_s(d = b[0]) << 4L) + i64_extend_i32_u(e = d & 65535) +
         (f = a[26] * a[25]),
         4));
  if (d) goto B_f;
  a[5] = 0;
  d = 1;
  br_table[B_c, B_b, B_b, B_b, B_b, B_c, ..B_b](a[0]);
  label B_f:
  a[5] = d + (i32_wrap_i64(f) << 2) + (e << 2);
  if (eqz(b[23])) goto B_i;
  var g:int = b[25];
  var h:int = b[4];
  var i:int = b[3];
  d = 1;
  j = b[24];
  f = i64_extend_i32_s(j);
  k = f << 5L;
  e = WebPSafeMalloc(k + (f << 2L) + 84L, 1);
  if (e) goto B_j;
  br_table[B_c, B_b, B_b, B_b, B_b, B_c, ..B_b](a[0]);
  label B_j:
  a[71] = e;
  a[70] = e;
  if (
    eqz(
      WebPRescalerInit(e, i, h, (d = e + 84) + i32_wrap_i64(k), j, g, 0, 4, d))) goto B_b;
  if (b[23]) goto B_h;
  label B_i:
  d = (a[3])[0]:int;
  if (d + -11 < -4) goto B_g;
  label B_h:
  WebPInitAlphaProcessing();
  d = (a[3])[0]:int;
  label B_g:
  if (d < 11) goto B_k;
  WebPInitConvertARGBToYUV();
  if (eqz((a[3] + 28)[0]:int)) goto B_k;
  WebPInitAlphaProcessing();
  label B_k:
  if (eqz(a[14])) goto B_l;
  if (a[30] < 1) goto B_l;
  d = a + 136;
  if (d[0]) goto B_l;
  if (VP8LColorCacheInit(d, (a + 132)[0]:int)) goto B_l;
  d = 1;
  br_table[B_c, B_b, B_b, B_b, B_b, B_c, ..B_b](a[0]);
  label B_l:
  a[1] = 0;
  label B_d:
  if (eqz(DecodeImageData(a, a[4], a[25], a[26], b[22], 20))) goto B_b;
  c[4] = a[29];
  return 1;
  label B_c:
  a[0] = d;
  label B_b:
  VP8LClear(a);
  label B_a:
  return 0;
}

function ProcessRows(a:int_ptr, b:int) {
  var c:int;
  var g:int;
  var l:int;
  var m:int;
  var n:int;
  var j:int;
  var p:int;
  var d:int = b - (c = a[27]);
  if (d < 1) goto B_a;
  var e:int_ptr = a[2];
  var f:int = e[0];
  var h:int_ptr = a[4] + ((g = a[25]) * c << 2);
  var i:int_ptr = a[5];
  j = a[48];
  if (j < 1) goto B_c;
  d = j * 20 + a;
  VP8LInverseTransform(d + 176, c, b, h, i);
  if (j == 1) goto B_b;
  h = d + 156;
  loop L_d {
    VP8LInverseTransform(h, c, b, i, i);
    h = h + -20;
    j = j + -1;
    if (j > 1) continue L_d;
    goto B_b;
  }
  label B_c:
  if (i == h) goto B_b;
  memcpy(i, h, d * g << 2);
  label B_b:
  h = e[22];
  var k:int = select_if(h, b, h < b);
  if (k <= (l = select_if(h = e[21], c = a[27], d = h > c))) goto B_a;
  e[2] = l - h;
  e[4] = (m = k - l);
  e[3] = (j = e[20] - (g = e[19]));
  var o:int = i + select_if((h - c) * (n = f << 2), 0, d) + (g << 2);
  h = a[3];
  f = h[0];
  if (f > 10) goto B_e;
  p = h[4] + (d = (h + 20)[0]:int) * a[29];
  if (eqz(e[23])) goto B_g;
  if (m >= 1) goto B_h;
  l = 0;
  goto B_f;
  label B_h:
  g = 0;
  l = 0;
  loop L_i {
    i = WebPRescaleNeededLines(a[71], h = m - g);
    j = o + g * n;
    WebPMultARGBRows(j, n, (a[71])[11]:int, i, 0);
    g = WebPRescalerImport(a[71], h, j, n) + g;
    j = 0;
    h = a[71];
    if (h[16] >= h[14]) goto B_j;
    c = h[13];
    e = h[17];
    i = p + l * d;
    j = 0;
    loop L_k {
      if (h[6] > 0) goto B_j;
      WebPRescalerExportRow(h);
      call_indirect(e, c, 1, 0[264918]:int);
      VP8LConvertFromBGRA(e, c, f, i);
      j = j + 1;
      i = i + d;
      if (h[16] < h[14]) continue L_k;
    }
    label B_j:
    l = j + l;
    if (g < m) continue L_i;
    goto B_f;
  }
  label B_g:
  if (m < 1) goto B_l;
  h = k - l + 1;
  loop L_m {
    VP8LConvertFromBGRA(o, j, f, p);
    p = p + d;
    o = o + n;
    h = h + -1;
    if (h > 1) continue L_m;
  }
  label B_l:
  l = m;
  label B_f:
  a[29] = a[29] + l;
  a[27] = b;
  return ;
  label B_e:
  g = a[29];
  if (eqz(e[23])) goto B_o;
  if (m < 1) goto B_n;
  p = 0;
  loop L_p {
    h = WebPRescaleNeededLines(a[71], i = m - p);
    WebPMultARGBRows(o, n, (a[71])[11]:int, h, 0);
    k = h * n;
    p = WebPRescalerImport(a[71], i, o, n) + p;
    e = 0;
    i = a[71];
    if (i[16] >= i[14]) goto B_q;
    j = i[13];
    d = i[17];
    l = d + 3;
    e = 0;
    loop L_r {
      if (i[6] > 0) goto B_q;
      WebPRescalerExportRow(i);
      call_indirect(d, j, 1, 0[264918]:int);
      call_indirect(d,
                    (h = a[3])[4] + (h + 32)[0]:int * (c = g + e),
                    j,
                    0[265100]:int);
      call_indirect(d,
                    (h + 20)[0]:int + (h + 36)[0]:int * (f = c >> 1),
                    (h + 24)[0]:int + (h + 40)[0]:int * f,
                    j,
                    (c ^ -1) & 1,
                    0[265101]:int);
      f = (h + 28)[0]:int;
      if (eqz(f)) goto B_s;
      call_indirect(l, 0, j, 1, f + (h + 44)[0]:int * c, 0, 0[264924]:int);
      label B_s:
      e = e + 1;
      if (i[16] < i[14]) continue L_r;
    }
    label B_q:
    o = o + k;
    g = e + g;
    if (p < m) continue L_p;
    goto B_n;
  }
  label B_o:
  if (m < 1) goto B_n;
  i = k - l + 1;
  loop L_t {
    call_indirect(o, (h = a[3])[4] + (h + 32)[0]:int * g, j, 0[265100]:int);
    call_indirect(o,
                  (h + 20)[0]:int + (h + 36)[0]:int * (c = g >> 1),
                  (h + 24)[0]:int + (h + 40)[0]:int * c,
                  j,
                  (g ^ -1) & 1,
                  0[265101]:int);
    c = (h + 28)[0]:int;
    if (eqz(c)) goto B_u;
    call_indirect(o + 3, 0, j, 1, c + (h + 44)[0]:int * g, 0, 0[264924]:int);
    label B_u:
    g = g + 1;
    o = o + n;
    i = i + -1;
    if (i > 1) continue L_t;
  }
  label B_n:
  a[29] = g;
  label B_a:
  a[27] = b;
}

function WebPParseHeaders(a:{ a:int, b:int }):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  b[2] = 0;
  b[3] = ParseHeadersInternal(a.a, a.b, 0, 0, 0, b + 8, 0, a);
  if (eqz(b[3])) goto B_c;
  if (b[3] != 7) goto B_a;
  if (b[2]) goto B_b;
  goto B_a;
  label B_c:
  if (eqz(b[2])) goto B_a;
  label B_b:
  b[3] = 4;
  label B_a:
  a = b[3];
  stack_pointer = b + 16;
  return a;
}

function ParseHeadersInternal(a:int, b:int, c:int_ptr, d:int_ptr, e:int_ptr, f:int_ptr, g:int_ptr, h:int):int {
  var n:int;
  var j:int;
  var r:int;
  var m:int;
  var q:int;
  var o:int;
  var p:int_ptr@1;
  var s:long;
  var k:int;
  var i:int = stack_pointer - 64;
  stack_pointer = i;
  i[14]:int = b;
  i[15]:int = a;
  if (h) goto B_b;
  j = 0;
  goto B_a;
  label B_b:
  j = h[2]:int;
  label B_a:
  if (a) goto B_d;
  k = 7;
  goto B_c;
  label B_d:
  if (b >= 12) goto B_e;
  k = 7;
  goto B_c;
  label B_e:
  var l:int = 0;
  (i + 44)[0]:int = 0;
  (i + 36)[0]:long@4 = 0L;
  i[5]:simd@4 = V128;
  i[4]:int = b;
  i[3]:int = a;
  m = memcmp(a, 1048790, 4);
  if (eqz(m)) goto B_g;
  n = 0;
  goto B_f;
  label B_g:
  k = 3;
  if (a[8]:int@1 != 1346520407) goto B_c;
  n = a[4]:int@1;
  if (n + 9 < 21) goto B_c;
  if (eqz(j)) goto B_h;
  if (n <= b + -8) goto B_h;
  k = 7;
  goto B_c;
  label B_h:
  i[10]:int = n;
  i[15]:int = (a = a + 12);
  i[14]:int = (b = b + -12);
  if (b >= 8) goto B_f;
  k = 7;
  goto B_c;
  label B_f:
  o = memcmp(a, 1048774, 4);
  if (eqz(o)) goto B_j;
  p = a;
  a = 0;
  q = 0;
  r = 0;
  goto B_i;
  label B_j:
  if (a[4]:int@1 == 10) goto B_k;
  k = 3;
  goto B_c;
  label B_k:
  k = 7;
  if (b < 18) goto B_c;
  r = (a[12]:ushort@1 | a[14]:ubyte << 16) + 1;
  if (
    eqz(
      i32_wrap_i64(
        i64_extend_i32_u(r) *
        i64_extend_i32_u(q = (a[15]:ushort@1 | a[17]:ubyte << 16) + 1) >>
        32L))) goto B_l;
  k = 3;
  goto B_c;
  label B_l:
  i[15]:int = (p = a + 18);
  i[14]:int = (b = b + -18);
  k = 3;
  if (m) goto B_c;
  a = a[8]:int@1;
  l = (a & 2) >> 1;
  label B_i:
  if (eqz(e)) goto B_m;
  e[0] = a >> 4 & 1;
  label B_m:
  if (eqz(f)) goto B_n;
  f[0] = l;
  label B_n:
  if (eqz(g)) goto B_o;
  g[0] = 0;
  label B_o:
  i[12]:int = q;
  i[13]:int = r;
  if (eqz(h) & l) goto B_p;
  a = 7;
  if (b < 4) goto B_q;
  if (eqz(m | o)) goto B_s;
  if (m) goto B_t;
  a = n;
  goto B_r;
  label B_t:
  if (o) goto B_u;
  a = n;
  goto B_r;
  label B_u:
  a = 0;
  if (p[0] != 1213221953) goto B_r;
  label B_s:
  a = ParseOptionalChunks(i + 60, i + 56, n, i + 28, i + 32);
  if (a) goto B_q;
  a = i[10]:int;
  label B_r:
  a = ParseVP8Header(i + 60, i + 56, j, a, i + 36, i + 44);
  if (a) goto B_q;
  k = 3;
  f = i[9]:int;
  if (f > -10) goto B_c;
  a = i[11]:int;
  if (eqz(g)) goto B_v;
  if (l) goto B_v;
  g[0] = select_if(2, 1, a);
  label B_v:
  b = i[14]:int;
  if (a) goto B_x;
  a = 7;
  if (b < 10) goto B_q;
  a = i[15]:int;
  if (VP8GetInfo(a, b, f, i + 52, i + 48)) goto B_w;
  goto B_c;
  label B_x:
  a = 7;
  if (b < 5) goto B_q;
  a = i[15]:int;
  if (eqz(VP8LGetInfo(a, b, i + 52, i + 48, e))) goto B_c;
  label B_w:
  if (o) goto B_y;
  if (r != i[13]:int) goto B_c;
  if (q != i[12]:int) goto B_c;
  label B_y:
  if (eqz(h)) goto B_p;
  (h + 8)[0]:simd@4 = (i + 12 + 8)[0]:simd@4;
  h[0]:long@4 = (s = i[3]:long@4);
  (h + 32)[0]:int = (i + 12 + 32)[0]:int;
  (h + 24)[0]:long@4 = (i + 12 + 24)[0]:long@4;
  h[3]:int = a - i32_wrap_i64(s);
  goto B_p;
  label B_q:
  if (eqz(h)) goto B_z;
  k = a;
  goto B_c;
  label B_z:
  if (eqz(o)) goto B_aa;
  k = a;
  goto B_c;
  label B_aa:
  k = a;
  if (a != 7) goto B_c;
  label B_p:
  if (eqz(e)) goto B_ba;
  e[0] = e[0] | i[7]:int != 0;
  label B_ba:
  if (eqz(c)) goto B_ca;
  c[0] = i[13]:int;
  label B_ca:
  k = 0;
  if (eqz(d)) goto B_c;
  d[0] = i[12]:int;
  label B_c:
  stack_pointer = i + 64;
  return k;
}

function ParseOptionalChunks(a:int_ptr, b:int_ptr, c:int, d:int_ptr, e:int_ptr):int {
  var i:int;
  var f:int = b[0];
  e[0] = 0;
  var g:int_ptr@1 = a[0];
  d[0] = 0;
  b[0] = f;
  a[0] = g;
  if (f >= 8) goto B_a;
  return 7;
  label B_a:
  var h:int = 22;
  loop L_c {
    i = 3;
    var j:int = g[4];
    if (j > -10) goto B_b;
    var k:int = j + 9 & -2;
    h = k + h;
    if (eqz(c)) goto B_d;
    if (h > c) goto B_b;
    label B_d:
    i = 0;
    if (g[0] == 540561494) goto B_b;
    if (g[0] == 1278758998) goto B_b;
    if (f >= k) goto B_e;
    return 7;
    label B_e:
    if (g[0] != 1213221953) goto B_f;
    e[0] = j;
    d[0] = g + 8;
    label B_f:
    b[0] = (f = f - k);
    a[0] = (g = g + k);
    i = 7;
    if (f > 7) continue L_c;
  }
  label B_b:
  return i;
}

function ParseVP8Header(a:int_ptr, b:int_ptr, c:int, d:int, e:int_ptr, f:int_ptr):int {
  var g:int = 7;
  var h:int = b[0];
  if (h < 8) goto B_a;
  var i:int_ptr@1 = a[0];
  var j:int = i[0];
  if (i[0] == 540561494) goto B_d;
  if (j != 1278758998) goto B_c;
  label B_d:
  var k:int = i[4];
  if (d < 12) goto B_e;
  g = 3;
  if (k > d + -12) goto B_a;
  label B_e:
  if (eqz(c)) goto B_f;
  g = 7;
  if (k > h + -8) goto B_a;
  label B_f:
  e[0] = k;
  f[0] = j == 1278758998;
  a[0] = i + 8;
  b[0] = b[0] + -8;
  goto B_b;
  label B_c:
  f[0] = VP8LCheckSignature(i, h);
  e[0] = b[0];
  label B_b:
  g = 0;
  label B_a:
  return g;
}

function WebPResetDecParams(a:simd_ptr@4) {
  var b:simd;
  if (eqz(a)) goto B_a;
  a[0] = (b = V128);
  (a + 48)[0]:long@4 = 0L;
  (a + 32)[0]:simd@4 = b;
  (a + 16)[0]:simd@4 = b;
  label B_a:
}

function WebPInitDecoderConfigInternal(a:int, b:int):int {
  var c:int = 0;
  if (eqz(a)) goto B_a;
  if ((b & -256) != 512) goto B_a;
  c = WebPInitDecBufferInternal(memset(a, 0, 200) + 40, 521) != 0;
  label B_a:
  return c;
}

function WebPGetFeaturesInternal(a:int, b:int, c:simd_ptr@4, d:int):int {
  var f:simd;
  var e:simd_ptr@4 = 2;
  if (eqz(a)) goto B_a;
  if (eqz(c)) goto B_a;
  if ((d & -256) != 512) goto B_a;
  c[0] = (f = V128);
  (c + 32)[0]:long@4 = 0L;
  e = c + 16;
  e[0] = f;
  e = ParseHeadersInternal(a, b, c, c + 4, c + 8, c + 12, e, 0);
  label B_a:
  return e;
}

function WebPCheckCropDimensions(a:int, b:int, c:int, d:int, e:int, f:int):int {
  return 
    (f <= b &
     (b > d &
      ((e <= a & (a > c & (((d | c) > -1 & e > 0) & f > 0))) & a - c >= e))) &
    b - d >= f
}

function WebPIoInitFromOptions(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int }, b:int_ptr, c:int):int {
  var h:int;
  var i:int;
  var g:int;
  var k:int;
  var j:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  var e:int = b[1];
  var f:int = b[0];
  if (eqz(a)) goto B_c;
  g = 0;
  b[18] = (h = a.c) != 0;
  i = 0;
  j = f;
  k = e;
  if (eqz(h)) goto B_b;
  h = 0;
  k = a.g;
  if (k > e) goto B_a;
  if (e <= (i = select_if((j = a.e) & -2, j, g = c > 10))) goto B_a;
  j = a.f;
  if (j > f) goto B_a;
  if (f <= (g = select_if((c = a.d) & -2, c, g))) goto B_a;
  if (k < 1) goto B_a;
  if (j < 1) goto B_a;
  if ((i | g) < 0) goto B_a;
  if (f - g < j) goto B_a;
  if (e - i >= k) goto B_b;
  goto B_a;
  label B_c:
  g = 0;
  b[18] = 0;
  i = 0;
  j = f;
  k = e;
  label B_b:
  b[21] = i;
  b[19] = g;
  b[4] = k;
  b[3] = j;
  b[22] = k + i;
  b[20] = j + g;
  if (eqz(a)) goto B_d;
  b[23] = (g = a.h) != 0;
  h = 1;
  i = 1;
  if (eqz(g)) goto B_f;
  d[3] = a.i;
  d[2] = a.j;
  if (
    eqz(WebPRescalerGetScaledDimensions(j, k, d + 12, d + 8))) goto B_e;
  b[24] = d[3];
  b[25] = d[2];
  i = eqz(b[23]);
  label B_f:
  b[17] = (k = a.a != 0);
  b[14] = eqz(a.b);
  if (i) goto B_a;
  a = 0;
  if (b[24] >= f * 3 / 4) goto B_g;
  a = b[25] < e * 3 / 4;
  label B_g:
  b[14] = 0;
  b[17] = a | k;
  goto B_a;
  label B_e:
  h = 0;
  goto B_a;
  label B_d:
  b[17] = 0;
  b[23] = 0;
  h = 1;
  b[14] = 1;
  label B_a:
  stack_pointer = d + 16;
  return h;
}

function WebPMultARGBRow_C(a:int, b:int, c:int) {
  var k:simd;
  var m:simd;
  var n:simd;
  var l:simd;
  var e:int;
  var h:int;
  if (b < 1) goto B_a;
  var d:int = 0;
  if (b < 4) goto B_b;
  e = eqz(c);
  var f:simd = i32x4_splat(e ^ -1);
  var g:simd = i32x4_splat(e);
  d = b & -4;
  h = d;
  e = a;
  loop L_c {
    var i:simd = e[0]:simd@4;
    var j:simd = i i32x4_shr_u 24;
    l = (i i32x4_add (k = V128)) i32x4_lt_u V128;
    m = l v128_and f;
    if (eqz(SimdLaneOp(m) & 1)) goto B_d;
    n = i32x4_splat(-16777216 / SimdLaneOp(j));
    label B_d:
    if (eqz(SimdLaneOp(m) & 1)) goto B_e;
    n = SimdLaneOp(n, -16777216 / SimdLaneOp(j));
    label B_e:
    if (eqz(SimdLaneOp(m) & 1)) goto B_f;
    n = SimdLaneOp(n, -16777216 / SimdLaneOp(j));
    label B_f:
    if (eqz(SimdLaneOp(m) & 1)) goto B_g;
    n = SimdLaneOp(n, -16777216 / SimdLaneOp(j));
    label B_g:
    n = 
      v128_bitselect(
        V128,
        ((((((n = v128_bitselect(j i32x4_mul V128,
                                 n,
                                 ((l v128_and g) i32x4_shl 31) i32x4_shr_s 31)) i32x4_mul
             (i v128_and (m = V128))) i32x4_add
            (j = V128)) i32x4_shr_u
           24) v128_or
          (i v128_and k)) v128_or
         ((((n i32x4_mul ((i i32x4_shr_u 8) v128_and m)) i32x4_add j) i32x4_shr_u
           16) v128_and
          V128)) v128_or
        ((((n i32x4_mul ((i i32x4_shr_u 16) v128_and m)) i32x4_add j) i32x4_shr_u
          8) v128_and
         V128),
        i i32x4_lt_u V128);
    i = i i32x4_lt_u k;
    if (eqz(SimdLaneOp(i) & 1)) goto B_h;
    SimdStoreLane(e, n);
    label B_h:
    if (eqz(SimdLaneOp(i) & 1)) goto B_i;
    SimdStoreLane(e + 4, n);
    label B_i:
    if (eqz(SimdLaneOp(i) & 1)) goto B_j;
    SimdStoreLane(e + 8, n);
    label B_j:
    if (eqz(SimdLaneOp(i) & 1)) goto B_k;
    SimdStoreLane(e + 12, n);
    label B_k:
    e = e + 16;
    h = h + -4;
    if (h) continue L_c;
  }
  if (d == b) goto B_a;
  label B_b:
  b = b - d;
  e = a + (d << 2);
  loop L_l {
    h = e[0]:int;
    if (h > -16777217) goto B_m;
    d = 0;
    if (h < 16777216) goto B_n;
    d = h >> 24;
    if (eqz(c)) goto B_p;
    d = -16777216 / d;
    goto B_o;
    label B_p:
    d = d * 65793;
    label B_o:
    d = ((d * (h & 255) + 8388608 >> 24 | (h & -16777216)) |
         (d * (h >> 8 & 255) + 8388608 >> 16 & 65280)) |
        (d * (h >> 16 & 255) + 8388608 >> 8 & 16711680);
    label B_n:
    e[0]:int = d;
    label B_m:
    e = e + 4;
    b = b + -1;
    if (b) continue L_l;
  }
  label B_a:
}

function WebPMultRow_C(a:int, b:ubyte_ptr, c:int, d:int) {
  if (c < 1) goto B_a;
  loop L_b {
    var e:int = b[0];
    if (e == 255) goto B_c;
    if (e) goto B_d;
    a[0]:byte = 0;
    goto B_c;
    label B_d:
    if (eqz(d)) goto B_f;
    e = -16777216 / e;
    goto B_e;
    label B_f:
    e = e * 65793;
    label B_e:
    a[0]:byte = e * a[0]:ubyte + 8388608 >> 24;
    label B_c:
    b = b + 1;
    a = a + 1;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function WebPMultARGBRows(a:int, b:int, c:int, d:int, e:int) {
  if (d < 1) goto B_a;
  var f:int = d & 3;
  if (d < 4) goto B_b;
  d = d & -4;
  loop L_c {
    call_indirect(a, c, e, 0[264918]:int);
    a = a + b;
    call_indirect(a, c, e, 0[264918]:int);
    a = a + b;
    call_indirect(a, c, e, 0[264918]:int);
    a = a + b;
    call_indirect(a, c, e, 0[264918]:int);
    a = a + b;
    d = d + -4;
    if (d) continue L_c;
  }
  label B_b:
  if (eqz(f)) goto B_a;
  loop L_d {
    call_indirect(a, c, e, 0[264918]:int);
    a = a + b;
    f = f + -1;
    if (f) continue L_d;
  }
  label B_a:
}

function WebPMultRows(a:int, b:int, c:int, d:int, e:int, f:int, g:int) {
  if (f < 1) goto B_a;
  var h:int = f & 1;
  if (f == 1) goto B_b;
  f = f & -2;
  loop L_c {
    call_indirect(a, c, e, g, 0[264919]:int);
    a = a + b;
    call_indirect(a, c = c + d, e, g, 0[264919]:int);
    c = c + d;
    a = a + b;
    f = f + -2;
    if (f) continue L_c;
  }
  label B_b:
  if (eqz(h)) goto B_a;
  call_indirect(a, c, e, g, 0[264919]:int);
  label B_a:
}

function WebPInitAlphaProcessing() {
  var a:int = data[2]:int;
  if (a == data[1]:int) goto B_a;
  0[264919]:int = 21;
  0[264918]:int = 22;
  0[264921]:int = 23;
  0[264926]:int = 24;
  0[264920]:int = 25;
  0[264922]:int = 26;
  0[264923]:int = 27;
  0[264924]:int = 28;
  0[264925]:int = 29;
  0[264927]:int = 30;
  0[264928]:int = 31;
  0[264929]:int = 32;
  if (eqz(a)) goto B_b;
  if (eqz(call_indirect(0, a))) goto B_b;
  WebPInitAlphaProcessingSSE2();
  if (eqz(call_indirect(3, data[2]:int))) goto B_b;
  WebPInitAlphaProcessingSSE41();
  label B_b:
  data[1]:int = data[2]:int;
  label B_a:
}

function ApplyAlphaMultiply_16b_C(a:int, b:int, c:int, d:int) {
  var m:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:int;
  var s:int;
  var t:int;
  var u:int;
  var v:simd;
  var w:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:simd;
  var ba:int;
  var ca:int;
  var da:int;
  var ea:int;
  var fa:int;
  var ga:int;
  var ha:int;
  var ia:int;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:int;
  var na:int;
  var oa:int;
  var pa:int;
  var qa:int;
  var ra:int;
  var sa:int;
  var ta:int;
  var ua:int;
  var va:int;
  var wa:int;
  var xa:int;
  var ya:int;
  var za:int;
  var ab:int;
  var bb:simd;
  var n:int;
  if (c < 1) goto B_a;
  var e:int = b & -16;
  var f:int = b < 1;
  var g:int = b < 16;
  loop L_b {
    var h:int = c;
    if (f) goto B_c;
    c = 0;
    if (g) goto B_d;
    var i:simd = V128;
    var j:simd = V128;
    var k:simd = V128;
    var l:simd = V128;
    c = e;
    loop L_e {
      n = a + SimdLaneOp(m = l i32x4_shl 1);
      let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31 = 
        SimdStoreLane(
          n,
          m = 
            ((((((la = 
                    i32x4_extend_low_i16x8_u(
                      i16x8_extend_low_i8x16_u(
                        p = 
                          (ja = 
                             SimdLoadLane(
                               r = a + SimdLaneOp(q = (o = i i32x4_shl 1) v128_or (p = V128)),
                               SimdLoadLane(
                                 s = a + SimdLaneOp(q),
                                 SimdLoadLane(
                                   t = a + SimdLaneOp(q),
                                   SimdLoadLane(
                                     u = a + SimdLaneOp(q),
                                     SimdLoadLane(
                                       w = a + SimdLaneOp(v = (q = j i32x4_shl 1) v128_or p),
                                       SimdLoadLane(
                                         x = a + SimdLaneOp(v),
                                         SimdLoadLane(
                                           y = a + SimdLaneOp(v),
                                           SimdLoadLane(
                                             z = a + SimdLaneOp(v),
                                             SimdLoadLane(
                                               ba = a + SimdLaneOp(aa = (v = k i32x4_shl 1) v128_or p),
                                               SimdLoadLane(
                                                 ca = a + SimdLaneOp(aa),
                                                 SimdLoadLane(
                                                   da = a + SimdLaneOp(aa),
                                                   SimdLoadLane(
                                                     ea = a + SimdLaneOp(aa),
                                                     SimdLoadLane(
                                                       fa = a + SimdLaneOp(p = m v128_or p),
                                                       SimdLoadLane(
                                                         ga = a + SimdLaneOp(p),
                                                         SimdLoadLane(ha = a + SimdLaneOp(p), LoadSplat(ia = a + SimdLaneOp(p)))))))))))))))))) v128_and
                          (ka = V128))) i32x4_mul
                    (aa = V128)) i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(
                     q = 
                       ((m = 
                           SimdLoadLane(
                             ma = a + SimdLaneOp(o),
                             SimdLoadLane(
                               na = a + SimdLaneOp(o),
                               SimdLoadLane(
                                 oa = a + SimdLaneOp(o),
                                 SimdLoadLane(
                                   pa = a + SimdLaneOp(o),
                                   SimdLoadLane(
                                     qa = a + SimdLaneOp(q),
                                     SimdLoadLane(
                                       ra = a + SimdLaneOp(q),
                                       SimdLoadLane(
                                         sa = a + SimdLaneOp(q),
                                         SimdLoadLane(
                                           ta = a + SimdLaneOp(q),
                                           SimdLoadLane(
                                             ua = a + SimdLaneOp(v),
                                             SimdLoadLane(
                                               va = a + SimdLaneOp(v),
                                               SimdLoadLane(
                                                 wa = a + SimdLaneOp(v),
                                                 SimdLoadLane(
                                                   xa = a + SimdLaneOp(v),
                                                   SimdLoadLane(
                                                     ya = a + SimdLaneOp(m),
                                                     SimdLoadLane(za = a + SimdLaneOp(m),
                                                                  SimdLoadLane(ab = a + SimdLaneOp(m), LoadSplat(n))))))))))))))))) v128_and
                        (o = V128)) v128_or
                       (m i8x16_shr_u 4)))) i32x4_shr_u
                16) i16x8_narrow_i32x4_u
               (((v = i32x4_extend_low_i16x8_u(
                        i16x8_extend_low_i8x16_u(SimdShuffleOp(p, m))) i32x4_mul
                      aa) i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(SimdShuffleOp(q, m)))) i32x4_shr_u
                16)) i8x16_narrow_i16x8_u
              ((((bb = i32x4_extend_low_i16x8_u(
                         i16x8_extend_low_i8x16_u(SimdShuffleOp(p, m))) i32x4_mul
                       aa) i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(SimdShuffleOp(q, m)))) i32x4_shr_u
                16) i16x8_narrow_i32x4_u
               (((aa = i32x4_extend_low_i16x8_u(
                         i16x8_extend_low_i8x16_u(SimdShuffleOp(p, m))) i32x4_mul
                       aa) i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(SimdShuffleOp(q, m)))) i32x4_shr_u
                16))) v128_and
             o) v128_or
            (((((la i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(m = (m v128_and ka) v128_or (m i8x16_shl 4)))) i32x4_shr_u
                20) v128_and
               (q = V128)) i16x8_narrow_i32x4_u
              (((v i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(SimdShuffleOp(m, m)))) i32x4_shr_u
                20) v128_and
               q)) i8x16_narrow_i16x8_u
             ((((bb i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(SimdShuffleOp(m, m)))) i32x4_shr_u
                20) v128_and
               q) i16x8_narrow_i32x4_u
              (((aa i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(SimdShuffleOp(m, m)))) i32x4_shr_u
                20) v128_and
               q)))),
        SimdStoreLane(
          ia,
          o = 
            (((((la i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(
                     q = (ja v128_and o) v128_or (ja i8x16_shr_u 4)))) i32x4_shr_u
                16) i16x8_narrow_i32x4_u
               ((v i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(SimdShuffleOp(q, m)))) i32x4_shr_u
                16)) i8x16_narrow_i16x8_u
              (((bb i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(SimdShuffleOp(q, m)))) i32x4_shr_u
                16) i16x8_narrow_i32x4_u
               ((aa i32x4_mul
                 i32x4_extend_low_i16x8_u(
                   i16x8_extend_low_i8x16_u(SimdShuffleOp(q, m)))) i32x4_shr_u
                16))) v128_and
             o) v128_or
            p),
        SimdStoreLane(ab, m),
        SimdStoreLane(ha, o),
        SimdStoreLane(za, m),
        SimdStoreLane(ga, o),
        SimdStoreLane(ya, m),
        SimdStoreLane(fa, o),
        SimdStoreLane(xa, m),
        SimdStoreLane(ea, o),
        SimdStoreLane(wa, m),
        SimdStoreLane(da, o),
        SimdStoreLane(va, m),
        SimdStoreLane(ca, o),
        SimdStoreLane(ua, m),
        SimdStoreLane(ba, o),
        SimdStoreLane(ta, m),
        SimdStoreLane(z, o),
        SimdStoreLane(sa, m),
        SimdStoreLane(y, o),
        SimdStoreLane(ra, m),
        SimdStoreLane(x, o),
        SimdStoreLane(qa, m),
        SimdStoreLane(w, o),
        SimdStoreLane(pa, m),
        SimdStoreLane(u, o),
        SimdStoreLane(oa, m),
        SimdStoreLane(t, o),
        SimdStoreLane(na, m),
        SimdStoreLane(s, o),
        SimdStoreLane(ma, m),
        SimdStoreLane(r, o);
      l = l i32x4_add (m = V128);
      k = k i32x4_add m;
      j = j i32x4_add m;
      i = i i32x4_add m;
      if (c = c + -16) continue L_e;
      t0;
      t1;
      t2;
      t3;
      t4;
      t5;
      t6;
      t7;
      t8;
      t9;
      t10;
      t11;
      t12;
      t13;
      t14;
      t15;
      t16;
      t17;
      t18;
      t19;
      t20;
      t21;
      t22;
      t23;
      t24;
      t25;
      t26;
      t27;
      t28;
      t29;
      t30;
      t31;
    }
    c = e;
    if (e == b) goto B_c;
    label B_d:
    n = c << 1;
    t = b - c;
    loop L_f {
      r = a + n;
      c = r + 1;
      c[0]:byte =
        ((s = (u = (c = c[0]:ubyte) & 15) * 4369) * ((c & 240) | c >> 4) >> 16 &
         240) |
        u;
      r[0]:byte =
        (s * (((c = r[0]:ubyte) & 240) | c >> 4) >> 16 & 240) |
        s * (((c & 15) | c << 4) & 255) >> 20;
      n = n + 2;
      t = t + -1;
      if (t) continue L_f;
    }
    label B_c:
    c = h + -1;
    a = a + d;
    if (h > 1) continue L_b;
  }
  label B_a:
}

function PackRGB_C(a:int, b:int, c:int, d:int, e:int, f:int) {
  var h:int;
  var n:simd;
  var j:int;
  var k:int;
  if (d < 1) goto B_a;
  var g:int = 0;
  if (d >= 4) goto B_c;
  h = 0;
  goto B_b;
  label B_c:
  h = 0;
  if (e != 1) goto B_b;
  h = d & -4;
  g = h * e;
  var i:int = h;
  j = f;
  k = c;
  var l:int = b;
  var m:int = a;
  loop L_d {
    j[0]:simd@4 =
      (((SimdShuffleOp(LoadZero(m), n) i32x4_shl 16) v128_or
        (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(l))) i32x4_shl
         8)) v128_or
       i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(k)))) v128_or
      V128;
    j = j + 16;
    k = k + 4;
    l = l + 4;
    m = m + 4;
    i = i + -4;
    if (i) continue L_d;
  }
  if (h == d) goto B_a;
  label B_b:
  k = d - h;
  j = f + (h << 2);
  loop L_e {
    j[0]:int =
      (((a + g)[0]:ubyte << 16 | (b + g)[0]:ubyte << 8) | (c + g)[0]:ubyte) |
      -16777216;
    j = j + 4;
    g = g + e;
    k = k + -1;
    if (k) continue L_e;
  }
  label B_a:
}

function ApplyAlphaMultiply_C(a:ubyte_ptr, b:int, c:int, d:int, e:int) {
  if (d < 1) goto B_a;
  var f:int = a + select_if(0, 3, b);
  var g:int = a + (b != 0);
  var h:int = c < 1;
  loop L_b {
    if (h) goto B_c;
    a = f;
    b = g;
    var i:int = c;
    loop L_d {
      var j:int = a[0];
      if (j == 255) goto B_e;
      b[0]:byte = (j = j * 32897) * b[0]:ubyte >> 23;
      var k:int = b + 1;
      k[0]:byte = j * k[0]:ubyte >> 23;
      k = b + 2;
      k[0]:byte = j * k[0]:ubyte >> 23;
      label B_e:
      a = a + 4;
      b = b + 4;
      i = i + -1;
      if (i) continue L_d;
    }
    label B_c:
    f = f + e;
    g = g + e;
    b = d > 1;
    d = d + -1;
    if (b) continue L_b;
  }
  label B_a:
}

function DispatchAlpha_C(a:int, b:int, c:int, d:int, e:int, f:int):int {
  var o:simd;
  var p:simd;
  var r:int;
  var g:int = 255;
  if (d < 1) goto B_a;
  var h:int = c & -4;
  g = 255;
  var i:int = 0;
  var j:int = c < 1;
  var k:int = c < 4;
  loop L_b {
    if (j) goto B_c;
    var l:int = 0;
    if (k) goto B_d;
    var m:simd = SimdLaneOp(V128, g);
    var n:simd = V128;
    l = 0;
    loop L_e {
      let t0, t1, t2, t3 = 
        SimdStoreLane(e + SimdLaneOp(o = n i32x4_shl 2), p = LoadZero(a + l)),
        SimdStoreLane(e + SimdLaneOp(o), p),
        SimdStoreLane(e + SimdLaneOp(o), p),
        SimdStoreLane(e + SimdLaneOp(o), p);
      n = n i32x4_add V128;
      m = m v128_and i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(p));
      if (h != (l = l + 4)) continue L_e;
      t0;
      t1;
      t2;
      t3;
    }
    p = m v128_and SimdShuffleOp(m, p);
    g = SimdLaneOp(p v128_and SimdShuffleOp(p, p));
    l = h;
    if (h == c) goto B_c;
    label B_d:
    var q:byte_ptr = e + (l << 2);
    loop L_f {
      q[0] = (r = (a + l)[0]:ubyte);
      q = q + 4;
      g = g & r;
      if (c != (l = l + 1)) continue L_f;
    }
    label B_c:
    e = e + f;
    a = a + b;
    i = i + 1;
    if (i != d) continue L_b;
  }
  label B_a:
  return g != 255;
}

function DispatchAlphaToGreen_C(a:int, b:int, c:int, d:int, e:int, f:int) {
  var l:int;
  if (d < 1) goto B_a;
  var g:int = f << 2;
  var h:int = c & -4;
  var i:int = 0;
  var j:int = c < 1;
  var k:int = c < 4;
  loop L_b {
    if (j) goto B_c;
    f = 0;
    if (k) goto B_d;
    f = 0;
    l = e;
    loop L_e {
      l[0]:simd@4 =
        i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(a + f))) i32x4_shl
        8;
      l = l + 16;
      if (h != (f = f + 4)) continue L_e;
    }
    f = h;
    if (h == c) goto B_c;
    label B_d:
    l = e + (f << 2);
    loop L_f {
      l[0]:int = (a + f)[0]:ubyte << 8;
      l = l + 4;
      if (c != (f = f + 1)) continue L_f;
    }
    label B_c:
    e = e + g;
    a = a + b;
    i = i + 1;
    if (i != d) continue L_b;
  }
  label B_a:
}

function ExtractAlpha_C(a:int, b:int, c:int, d:int, e:int, f:int):int {
  var r:simd;
  var t:int;
  var g:int = 255;
  if (d < 1) goto B_a;
  var h:int = c & -16;
  g = 255;
  var i:int = 0;
  var j:int = c < 1;
  var k:int = c < 16;
  loop L_b {
    if (j) goto B_c;
    var l:int = 0;
    if (k) goto B_d;
    var m:simd = SimdLaneOp(V128, g);
    var n:simd = V128;
    var o:simd = V128;
    var p:simd = V128;
    var q:simd = V128;
    l = 0;
    loop L_e {
      (e + l)[0]:simd@1 =
        (r = 
           SimdLoadLane(
             a + SimdLaneOp(r = n i32x4_shl 2),
             SimdLoadLane(
               a + SimdLaneOp(r),
               SimdLoadLane(
                 a + SimdLaneOp(r),
                 SimdLoadLane(
                   a + SimdLaneOp(r),
                   SimdLoadLane(
                     a + SimdLaneOp(r = o i32x4_shl 2),
                     SimdLoadLane(
                       a + SimdLaneOp(r),
                       SimdLoadLane(
                         a + SimdLaneOp(r),
                         SimdLoadLane(
                           a + SimdLaneOp(r),
                           SimdLoadLane(
                             a + SimdLaneOp(r = p i32x4_shl 2),
                             SimdLoadLane(
                               a + SimdLaneOp(r),
                               SimdLoadLane(
                                 a + SimdLaneOp(r),
                                 SimdLoadLane(
                                   a + SimdLaneOp(r),
                                   SimdLoadLane(
                                     a + SimdLaneOp(r = q i32x4_shl 2),
                                     SimdLoadLane(
                                       a + SimdLaneOp(r),
                                       SimdLoadLane(a + SimdLaneOp(r), LoadSplat(a + SimdLaneOp(r))))))))))))))))));
      m = r v128_and m;
      q = q i32x4_add (r = V128);
      p = p i32x4_add r;
      o = o i32x4_add r;
      n = n i32x4_add r;
      if (h != (l = l + 16)) continue L_e;
    }
    r = m v128_and SimdShuffleOp(m, r);
    r = r v128_and SimdShuffleOp(r, r);
    r = r v128_and SimdShuffleOp(r, r);
    g = SimdLaneOp(r v128_and SimdShuffleOp(r, r));
    l = h;
    if (h == c) goto B_c;
    label B_d:
    var s:ubyte_ptr = a + (l << 2);
    loop L_f {
      (e + l)[0]:byte = (t = s[0]);
      s = s + 4;
      g = t & g;
      if (c != (l = l + 1)) continue L_f;
    }
    label B_c:
    e = e + f;
    a = a + b;
    i = i + 1;
    if (i != d) continue L_b;
  }
  label B_a:
  return (g & 255) == 255;
}

function ExtractGreen_C(a:int, b:int, c:int) {
  var h:simd;
  var f:byte_ptr;
  var g:int;
  var e:int;
  if (c < 1) goto B_a;
  var d:int = 0;
  if (c < 4) goto B_b;
  d = c & -4;
  e = d;
  f = b;
  g = a;
  loop L_c {
    let t0 = 
      SimdStoreLane(f, SimdShuffleOp(g[0]:simd@4 i32x4_shr_u 8, h));
    f = f + 4;
    g = g + 16;
    if (e = e + -4) continue L_c;
    t0;
  }
  if (d == c) goto B_a;
  label B_b:
  f = b + d;
  e = c - d;
  g = a + (d << 2);
  loop L_d {
    f[0] = g[0]:int >> 8;
    g = g + 4;
    f = f + 1;
    e = e + -1;
    if (e) continue L_d;
  }
  label B_a:
}

function HasAlpha8b_C(a:ubyte_ptr, b:int):int {
  loop L_a {
    if (b >= 1) goto B_b;
    return 0;
    label B_b:
    b = b + -1;
    var c:int = a[0];
    a = a + 1;
    if (c == 255) continue L_a;
  }
  return 1;
}

function HasAlpha32b_C(a:ubyte_ptr, b:int):int {
  var c:int = 0;
  if (b < 1) goto B_a;
  b = b + 1;
  loop L_c {
    if (a[0] != 255) goto B_b;
    a = a + 4;
    b = b + -1;
    if (b < 2) goto B_a;
    continue L_c;
  }
  label B_b:
  c = 1;
  label B_a:
  return c;
}

function AlphaReplace_C(a:int, b:int, c:int) {
  var g:simd;
  var f:int;
  var e:int;
  if (b < 1) goto B_a;
  var d:int = 0;
  if (b < 4) goto B_b;
  d = b & -4;
  e = d;
  f = a;
  loop L_c {
    g = f[0]:simd@4 i32x4_lt_u V128;
    if (eqz(SimdLaneOp(g) & 1)) goto B_d;
    f[0]:int = c;
    label B_d:
    if (eqz(SimdLaneOp(g) & 1)) goto B_e;
    (f + 4)[0]:int = c;
    label B_e:
    if (eqz(SimdLaneOp(g) & 1)) goto B_f;
    (f + 8)[0]:int = c;
    label B_f:
    if (eqz(SimdLaneOp(g) & 1)) goto B_g;
    (f + 12)[0]:int = c;
    label B_g:
    f = f + 16;
    e = e + -4;
    if (e) continue L_c;
  }
  if (d == b) goto B_a;
  label B_b:
  e = b - d;
  f = a + (d << 2);
  loop L_h {
    if (f[0]:int > 16777215) goto B_i;
    f[0]:int = c;
    label B_i:
    f = f + 4;
    e = e + -1;
    if (e) continue L_h;
  }
  label B_a:
}

function simde_feature(a:int):int {
  return a != 2
}

function VP8DspInit() {
  if (data[2]:int == data[3]:int) goto B_a;
  VP8InitClipTables();
  0[264959]:int = 34;
  0[264930]:int = 35;
  0[264962]:int = 36;
  0[264960]:int = 37;
  0[264961]:int = 38;
  0[264963]:int = 39;
  0[264964]:int = 40;
  0[264968]:int = 41;
  0[264965]:int = 42;
  0[264966]:int = 43;
  0[264970]:int = 44;
  0[264972]:int = 45;
  0[264973]:int = 46;
  0[264974]:int = 47;
  0[264975]:int = 48;
  0[264969]:int = 49;
  0[264967]:int = 50;
  0[264971]:int = 51;
  0[264946]:int = 52;
  0[264944]:int = 53;
  0[264942]:int = 54;
  0[264941]:int = 55;
  0[264940]:int = 56;
  0[264949]:int = 57;
  0[264948]:int = 58;
  0[264947]:int = 59;
  0[264945]:int = 60;
  0[264943]:int = 61;
  0[264932]:int = 62;
  0[264933]:int = 63;
  0[264934]:int = 64;
  0[264935]:int = 65;
  0[264936]:int = 66;
  0[264937]:int = 67;
  0[264938]:int = 68;
  0[264952]:int = 69;
  0[264953]:int = 70;
  0[264954]:int = 71;
  0[264955]:int = 72;
  0[264956]:int = 73;
  0[264957]:int = 74;
  0[264958]:int = 75;
  0[264976]:int = 76;
  var a:int = data[2]:int;
  if (eqz(a)) goto B_b;
  if (eqz(call_indirect(0, a))) goto B_b;
  VP8DspInitSSE2();
  if (eqz(call_indirect(3, data[2]:int))) goto B_b;
  VP8DspInitSSE41();
  label B_b:
  data[3]:int = data[2]:int;
  label B_a:
}

function TransformTwo_C(a:int, b:int, c:int) {
  TransformOne_C(a, b);
  if (eqz(c)) goto B_a;
  TransformOne_C(a + 32, b + 4);
  label B_a:
}

function TransformWHT_C(a:{ a:short, b:short, c:short, d:short, e:short, f:short, g:short, h:short, i:short, j:short, k:short, l:short, m:short, n:short, o:short, p:short }, b:short_ptr) {
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var k:int;
  var l:int;
  var m:int;
  var n:int;
  var o:int;
  var p:int;
  var q:int;
  var r:int;
  var s:int;
  var t:int;
  var u:int;
  var v:int;
  var w:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  var ba:int;
  var ca:int;
  var da:int;
  var ea:int;
  b[240] =
    (q = 
       (i = (e = (c = a.a) - (d = a.m)) - (h = (f = a.e) - (g = a.i)) + 3) -
       (p = (l = (j = a.d) - (k = a.p)) - (o = (m = a.h) - (n = a.l)))) -
    (ea = 
       (x = (t = (r = a.b) - (s = a.n)) - (w = (u = a.f) - (v = a.j))) -
       (da = (aa = (y = a.c) - (z = a.o)) - (ca = (ba = a.g) - (a = a.k)))) >>
    3;
  b[224] = (i = i + p) - (p = da + x) >> 3;
  b[208] = ea + q >> 3;
  b[192] = p + i >> 3;
  b[176] =
    (k = 
       (f = (c = d + c) - (d = g + f) + 3) - (j = (g = k + j) - (i = n + m))) -
    (s = 
       (p = (m = s + r) - (n = v + u)) - (r = (q = z + y) - (a = a + ba))) >>
    3;
  b[160] = (f = f + j) - (j = r + p) >> 3;
  b[144] = s + k >> 3;
  b[128] = j + f >> 3;
  b[112] =
    (h = (e = h + e + 3) - (f = o + l)) -
    (l = (j = w + t) - (k = ca + aa)) >>
    3;
  b[96] = (e = e + f) - (f = k + j) >> 3;
  b[80] = l + h >> 3;
  b[64] = f + e >> 3;
  b[48] =
    (e = (c = d + c + 3) - (d = i + g)) - (g = (f = n + m) - (a = a + q)) >>
    3;
  b[32] = (c = c + d) - (a = a + f) >> 3;
  b[16] = g + e >> 3;
  b[0] = a + c >> 3;
}

function TransformDC_C(a:short_ptr, b:int) {
  var c:simd;
  var d:simd;
  var e:simd;
  SimdStoreLane(
    b,
    SimdShuffleOp(
      (((c = i32x4_splat(a[0] + 4 >> 3)) i32x4_add
        i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(b)))) i32x4_max_s
       (d = V128)) i32x4_min_s
      (e = V128),
      c));
  SimdStoreLane(
    b,
    SimdShuffleOp(
      ((c i32x4_add
        i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(b)))) i32x4_max_s
       d) i32x4_min_s
      e,
      c));
  SimdStoreLane(
    b,
    SimdShuffleOp(
      ((c i32x4_add
        i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(b)))) i32x4_max_s
       d) i32x4_min_s
      e,
      c));
  SimdStoreLane(
    b,
    SimdShuffleOp(
      ((c i32x4_add
        i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(b)))) i32x4_max_s
       d) i32x4_min_s
      e,
      c));
}

function TransformAC3_C(a:short_ptr, b:int) {
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  b[32]:byte =
    select_if(
      a = select_if(
            a = ((d = ((c = a[1]) * 20091 >> 16) + c) +
                 (h = (f = (e = a[4]) * 35468 >> 16) + (g = a[0] + 4)) >>
                 3) +
                b[32]:ubyte,
            0,
            a > 0),
      255,
      a < 255);
  b[33]:byte =
    select_if(
      c = 
        select_if(c = (h + (a = c * 35468 >> 16) >> 3) + b[33]:ubyte, 0, c > 0),
      255,
      c < 255);
  b[34]:byte =
    select_if(c = select_if(c = (h - a >> 3) + b[34]:ubyte, 0, c > 0),
              255,
              c < 255);
  b[35]:byte =
    select_if(h = select_if(h = (h - d >> 3) + b[35]:ubyte, 0, h > 0),
              255,
              h < 255);
  b[0]:byte =
    select_if(
      e = 
        select_if(
          e = ((h = (c = e + (e * 20091 >> 16)) + g) + d >> 3) + b[0]:ubyte,
          0,
          e > 0),
      255,
      e < 255);
  b[1]:byte =
    select_if(e = select_if(e = (h + a >> 3) + b[1]:ubyte, 0, e > 0),
              255,
              e < 255);
  b[2]:byte =
    select_if(e = select_if(e = (h - a >> 3) + b[2]:ubyte, 0, e > 0),
              255,
              e < 255);
  b[3]:byte =
    select_if(h = select_if(h = (h - d >> 3) + b[3]:ubyte, 0, h > 0),
              255,
              h < 255);
  b[64]:byte =
    select_if(
      e = select_if(e = (d + (h = g - f) >> 3) + b[64]:ubyte, 0, e > 0),
      255,
      e < 255);
  b[65]:byte =
    select_if(e = select_if(e = (h + a >> 3) + b[65]:ubyte, 0, e > 0),
              255,
              e < 255);
  b[66]:byte =
    select_if(e = select_if(e = (h - a >> 3) + b[66]:ubyte, 0, e > 0),
              255,
              e < 255);
  b[67]:byte =
    select_if(h = select_if(h = (h - d >> 3) + b[67]:ubyte, 0, h > 0),
              255,
              h < 255);
  b[96]:byte =
    select_if(
      h = select_if(h = ((g = g - c) + d >> 3) + b[96]:ubyte, 0, h > 0),
      255,
      h < 255);
  b[97]:byte =
    select_if(h = select_if(h = (g + a >> 3) + b[97]:ubyte, 0, h > 0),
              255,
              h < 255);
  b[98]:byte =
    select_if(a = select_if(a = (g - a >> 3) + b[98]:ubyte, 0, a > 0),
              255,
              a < 255);
  b[99]:byte =
    select_if(d = select_if(d = (g - d >> 3) + b[99]:ubyte, 0, d > 0),
              255,
              d < 255);
}

function TransformUV_C(a:int, b:int) {
  call_indirect(a, b, 1, 0[264959]:int);
  call_indirect(a + 64, b + 128, 1, 0[264959]:int);
}

function TransformDCUV_C(a:ushort_ptr, b:int) {
  if (eqz(a[0])) goto B_a;
  call_indirect(a, b, 0[264962]:int);
  label B_a:
  if (eqz(a[16])) goto B_b;
  call_indirect(a + 32, b + 4, 0[264962]:int);
  label B_b:
  if (eqz(a[32])) goto B_c;
  call_indirect(a + 64, b + 128, 0[264962]:int);
  label B_c:
  if (eqz(a[48])) goto B_d;
  call_indirect(a + 96, b + 132, 0[264962]:int);
  label B_d:
}

function VFilter16_C(a:int, b:int, c:int, d:int, e:int) {
  FilterLoop26_C(a, b, 1, 16, c, d, e)
}

function VFilter16i_C(a:int, b:int, c:int, d:int, e:int) {
  var f:int;
  a = a + (f = b << 2);
  FilterLoop24_C(a, b, 1, 16, c, d, e);
  a = a + f;
  FilterLoop24_C(a, b, 1, 16, c, d, e);
  FilterLoop24_C(a + f, b, 1, 16, c, d, e);
}

function HFilter16_C(a:int, b:int, c:int, d:int, e:int) {
  FilterLoop26_C(a, 1, b, 16, c, d, e)
}

function VFilter8_C(a:int, b:int, c:int, d:int, e:int, f:int) {
  FilterLoop26_C(a, c, 1, 8, d, e, f);
  FilterLoop26_C(b, c, 1, 8, d, e, f);
}

function VFilter8i_C(a:int, b:int, c:int, d:int, e:int, f:int) {
  var g:int;
  FilterLoop24_C(a + (g = c << 2), c, 1, 8, d, e, f);
  FilterLoop24_C(b + g, c, 1, 8, d, e, f);
}

function SimpleVFilter16_C(a:int, b:int, c:int) {
  var k:int;
  var l:int;
  var m:int;
  var n:int;
  var o:int;
  var d:int = a - b;
  var e:int = a + b;
  var f:int = a - (b << 1);
  var g:int = c << 1 | 1;
  b = 0;
  var h:int = rodata[1876]:int;
  var i:int = rodata[1681]:int;
  var j:int = rodata[1623]:int;
  c = rodata[2008]:int;
  loop L_a {
    if (
      ((c + (l = (k = d + b)[0]:ubyte) - (n = (m = a + b)[0]:ubyte))[0]:ubyte <<
       2) +
      (c + (o = (f + b)[0]:ubyte - (e + b)[0]:ubyte))[0]:ubyte >
      g) goto B_b;
    var p:int = 
      (i + ((o = (n - l) * 3 + (j + o)[0]:byte) + 4 >> 3))[0]:byte;
    k[0]:byte = (h + (i + (o + 3 >> 3))[0]:byte + l)[0]:ubyte;
    m[0]:byte = (h + n - p)[0]:ubyte;
    label B_b:
    b = b + 1;
    if (b != 16) continue L_a;
  }
}

function SimpleHFilter16_C(a:ubyte_ptr, b:int, c:int) {
  var i:int;
  var j:int;
  var k:int;
  var l:int;
  var m:int;
  a = a + -2;
  var d:int = c << 1 | 1;
  var e:int = rodata[1876]:int;
  var f:int = rodata[1681]:int;
  var g:int = rodata[1623]:int;
  c = rodata[2008]:int;
  var h:int = 16;
  loop L_a {
    if (
      ((c + (j = (i = a + 1)[0]:ubyte) - (l = (k = a + 2)[0]:ubyte))[0]:ubyte <<
       2) +
      (c + (m = a[0] - (a + 3)[0]:ubyte))[0]:ubyte >
      d) goto B_b;
    var n:int = 
      (f + ((m = (l - j) * 3 + (g + m)[0]:byte) + 4 >> 3))[0]:byte;
    i[0]:byte = (e + (f + (m + 3 >> 3))[0]:byte + j)[0]:ubyte;
    k[0]:byte = (e + l - n)[0]:ubyte;
    label B_b:
    a = a + b;
    h = h + -1;
    if (h) continue L_a;
  }
}

function SimpleVFilter16i_C(a:int, b:int, c:int) {
  var g:int;
  var n:int;
  var o:int;
  var p:int;
  var q:int;
  var r:int;
  var s:int;
  var d:int = a + (b << 1);
  var e:int = a + b * 3;
  var f:int = a + b * 5;
  var h:int = a + (g = b << 2);
  var i:int = c << 1 | 1;
  c = 0;
  var j:int = rodata[1876]:int;
  var k:int = rodata[1681]:int;
  var l:int = rodata[1623]:int;
  var m:int = rodata[2008]:int;
  loop L_a {
    if (
      ((m + (o = (n = e + c)[0]:ubyte) - (q = (p = h + c)[0]:ubyte))[0]:ubyte <<
       2) +
      (m + (r = (d + c)[0]:ubyte - (f + c)[0]:ubyte))[0]:ubyte >
      i) goto B_b;
    s = (k + ((r = (q - o) * 3 + (l + r)[0]:byte) + 4 >> 3))[0]:byte;
    n[0]:byte = (j + (k + (r + 3 >> 3))[0]:byte + o)[0]:ubyte;
    p[0]:byte = (j + q - s)[0]:ubyte;
    label B_b:
    c = c + 1;
    if (c != 16) continue L_a;
  }
  h = h + g;
  d = a + b * 6;
  e = a + b * 7;
  f = a + b * 9;
  c = 0;
  loop L_c {
    if (
      ((m + (o = (n = e + c)[0]:ubyte) - (q = (p = h + c)[0]:ubyte))[0]:ubyte <<
       2) +
      (m + (r = (d + c)[0]:ubyte - (f + c)[0]:ubyte))[0]:ubyte >
      i) goto B_d;
    s = (k + ((r = (q - o) * 3 + (l + r)[0]:byte) + 4 >> 3))[0]:byte;
    n[0]:byte = (j + (k + (r + 3 >> 3))[0]:byte + o)[0]:ubyte;
    p[0]:byte = (j + q - s)[0]:ubyte;
    label B_d:
    c = c + 1;
    if (c != 16) continue L_c;
  }
  h = h + g;
  d = a + b * 10;
  e = a + b * 11;
  f = a + b * 13;
  c = 0;
  loop L_e {
    if (
      ((m + (o = (n = e + c)[0]:ubyte) - (q = (p = h + c)[0]:ubyte))[0]:ubyte <<
       2) +
      (m + (r = (d + c)[0]:ubyte - (f + c)[0]:ubyte))[0]:ubyte >
      i) goto B_f;
    s = (k + ((r = (q - o) * 3 + (l + r)[0]:byte) + 4 >> 3))[0]:byte;
    n[0]:byte = (j + (k + (r + 3 >> 3))[0]:byte + o)[0]:ubyte;
    p[0]:byte = (j + q - s)[0]:ubyte;
    label B_f:
    c = c + 1;
    if (c != 16) continue L_e;
  }
}

function SimpleHFilter16i_C(a:int, b:int, c:int) {
  var j:int;
  var k:int;
  var l:int;
  var m:int;
  var n:int;
  var o:int;
  var d:ubyte_ptr = a + 5;
  var e:int = c << 1 | 1;
  var f:int = rodata[1876]:int;
  var g:int = rodata[1681]:int;
  var h:int = rodata[1623]:int;
  c = rodata[2008]:int;
  var i:int = 16;
  loop L_a {
    if (
      ((c + (k = (j = d + -2)[0]:ubyte) - (m = (l = d + -1)[0]:ubyte))[0]:ubyte <<
       2) +
      (c + (n = (d + -3)[0]:ubyte - d[0]))[0]:ubyte >
      e) goto B_b;
    o = (g + ((n = (m - k) * 3 + (h + n)[0]:byte) + 4 >> 3))[0]:byte;
    j[0]:byte = (f + (g + (n + 3 >> 3))[0]:byte + k)[0]:ubyte;
    l[0]:byte = (f + m - o)[0]:ubyte;
    label B_b:
    d = d + b;
    i = i + -1;
    if (i) continue L_a;
  }
  d = a + 9;
  i = 16;
  loop L_c {
    if (
      ((c + (k = (j = d + -2)[0]:ubyte) - (m = (l = d + -1)[0]:ubyte))[0]:ubyte <<
       2) +
      (c + (n = (d + -3)[0]:ubyte - d[0]))[0]:ubyte >
      e) goto B_d;
    o = (g + ((n = (m - k) * 3 + (h + n)[0]:byte) + 4 >> 3))[0]:byte;
    j[0]:byte = (f + (g + (n + 3 >> 3))[0]:byte + k)[0]:ubyte;
    l[0]:byte = (f + m - o)[0]:ubyte;
    label B_d:
    d = d + b;
    i = i + -1;
    if (i) continue L_c;
  }
  d = a + 13;
  i = 16;
  loop L_e {
    if (
      ((c + (k = (j = d + -2)[0]:ubyte) - (m = (l = d + -1)[0]:ubyte))[0]:ubyte <<
       2) +
      (c + (n = (d + -3)[0]:ubyte - d[0]))[0]:ubyte >
      e) goto B_f;
    o = (g + ((n = (m - k) * 3 + (h + n)[0]:byte) + 4 >> 3))[0]:byte;
    j[0]:byte = (f + (g + (n + 3 >> 3))[0]:byte + k)[0]:ubyte;
    l[0]:byte = (f + m - o)[0]:ubyte;
    label B_f:
    d = d + b;
    i = i + -1;
    if (i) continue L_e;
  }
}

function HFilter16i_C(a:int, b:int, c:int, d:int, e:int) {
  FilterLoop24_C(a + 4, 1, b, 16, c, d, e);
  FilterLoop24_C(a + 8, 1, b, 16, c, d, e);
  FilterLoop24_C(a + 12, 1, b, 16, c, d, e);
}

function HFilter8_C(a:int, b:int, c:int, d:int, e:int, f:int) {
  FilterLoop26_C(a, 1, c, 8, d, e, f);
  FilterLoop26_C(b, 1, c, 8, d, e, f);
}

function HFilter8i_C(a:int, b:int, c:int, d:int, e:int, f:int) {
  FilterLoop24_C(a + 4, 1, c, 8, d, e, f);
  FilterLoop24_C(b + 4, 1, c, 8, d, e, f);
}

function LD4_C(a:byte_ptr) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  a[32] =
    (f = (c = (b = (a + -29)[0]:ubyte) + 2) + (d = (a + -31)[0]:ubyte) +
         ((e = (a + -30)[0]:ubyte) << 1) >>
         2);
  a[0] = (e = e + 2) + (a + -32)[0]:ubyte + (d << 1) >> 2;
  a[64] = (e = e + (b << 1) + (d = (a + -28)[0]:ubyte) >> 2);
  a[1] = f;
  a[33] = e;
  a[96] = (b = c + (d << 1) + (c = (a + -27)[0]:ubyte) >> 2);
  a[2] = e;
  a[65] = b;
  a[34] = b;
  a[3] = b;
  a[97] = (d = d + (c << 1) + (b = (a + -26)[0]:ubyte) + 2 >> 2);
  a[98] = (c = c + (b << 1) + (e = (a + -25)[0]:ubyte) + 2 >> 2);
  a[35] = d;
  a[66] = d;
  a[99] = b + e + (e << 1) + 2 >> 2;
  a[67] = c;
}

function RD4_C(a:int) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  a[96]:byte =
    (c = (b = a[31]:ubyte) + 2) + ((d = a[63]:ubyte) << 1) + a[95]:ubyte >>
    2;
  a[97]:byte =
    (b = d + (f = (e = (a + -1)[0]:ubyte) + 2) + (b << 1) >> 2);
  a[64]:byte = b;
  a[98]:byte = (b = c + (e << 1) + (c = (a + -33)[0]:ubyte) >> 2);
  a[65]:byte = b;
  a[32]:byte = b;
  a[99]:byte = (b = f + (d = (a + -32)[0]:ubyte) + (c << 1) >> 2);
  a[66]:byte = b;
  a[33]:byte = b;
  a[0]:byte = b;
  f = (a + -29)[0]:ubyte;
  b = (a + -30)[0]:ubyte;
  a[67]:byte = (c = c + (e = (a + -31)[0]:ubyte) + (d << 1) + 2 >> 2);
  a[34]:byte = c;
  a[1]:byte = c;
  a[35]:byte = (c = d + b + (e << 1) + 2 >> 2);
  a[2]:byte = c;
  a[3]:byte = e + f + (b << 1) + 2 >> 2;
}

function VE4_C(a:byte_ptr) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  a[99] =
    (e = 
       (c = (b = (a + -30)[0]:ubyte) + 2) + ((d = (a + -29)[0]:ubyte) << 1) +
       (a + -28)[0]:ubyte >>
       2);
  a[98] = (b = d + (g = (f = (a + -31)[0]:ubyte) + 2) + (b << 1) >> 2);
  a[97] = (c = c + (d = (a + -32)[0]:ubyte) + (f << 1) >> 2);
  a[96] = (d = g + (a + -33)[0]:ubyte + (d << 1) >> 2);
  a[67] = e;
  a[66] = b;
  a[65] = c;
  a[64] = d;
  a[35] = e;
  a[34] = b;
  a[33] = c;
  a[32] = d;
  a[3] = e;
  a[2] = b;
  a[1] = c;
  a[0] = d;
}

function TM4_C(a:int) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  a[0]:byte =
    ((c = (b = rodata[1876]:int - (a + -33)[0]:ubyte) + (a + -1)[0]:ubyte) +
     (d = (a + -32)[0]:ubyte))[0]:ubyte;
  a[1]:byte = (c + (e = (a + -31)[0]:ubyte))[0]:ubyte;
  a[2]:byte = (c + (f = (a + -30)[0]:ubyte))[0]:ubyte;
  a[3]:byte = (c + (g = (a + -29)[0]:ubyte))[0]:ubyte;
  a[32]:byte = (d + (c = b + a[31]:ubyte))[0]:ubyte;
  a[33]:byte = (c + e)[0]:ubyte;
  a[34]:byte = (c + f)[0]:ubyte;
  a[35]:byte = (c + g)[0]:ubyte;
  a[64]:byte = (d + (c = b + a[63]:ubyte))[0]:ubyte;
  a[65]:byte = (c + e)[0]:ubyte;
  a[66]:byte = (c + f)[0]:ubyte;
  a[67]:byte = (c + g)[0]:ubyte;
  a[96]:byte = (d + (b = b + a[95]:ubyte))[0]:ubyte;
  a[97]:byte = (b + e)[0]:ubyte;
  a[98]:byte = (b + f)[0]:ubyte;
  a[99]:byte = (b + g)[0]:ubyte;
}

function DC4_C(a:int) {
  var b:int;
  a[96]:int@1 =
    (b = ((a + -32)[0]:ubyte + (a + -1)[0]:ubyte + (a + -31)[0]:ubyte +
          a[31]:ubyte +
          (a + -30)[0]:ubyte +
          a[63]:ubyte +
          (a + -29)[0]:ubyte +
          a[95]:ubyte +
          4 >>
          3 &
          255) *
         16843009);
  a[64]:int@1 = b;
  a[32]:int@1 = b;
  a[0]:int@1 = b;
}

function HU4_C(a:int) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  a[99]:byte = (b = a[95]:ubyte);
  a[98]:byte = b;
  a[97]:byte = b;
  a[96]:byte = b;
  a[32]:byte =
    (f = (d = (c = a[31]:ubyte) + 1) + (e = a[63]:ubyte) >> 1);
  a[0]:byte = d + (g = (a + -1)[0]:ubyte) >> 1;
  a[64]:byte = (d = e + b + 1 >> 1);
  a[2]:byte = f;
  a[34]:byte = d;
  a[33]:byte = (d = b + c + (e << 1) + 2 >> 2);
  a[1]:byte = g + (e = e + 2) + (c << 1) >> 2;
  a[65]:byte = (e = e + b + (b << 1) >> 2);
  a[3]:byte = d;
  a[35]:byte = e;
  a[67]:byte = b;
  a[66]:byte = b;
}

function HD4_C(a:int) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  a[98]:byte = (d = (b = a[31]:ubyte) + (c = a[63]:ubyte) + 1 >> 1);
  a[96]:byte = c + (e = a[95]:ubyte) + 1 >> 1;
  a[64]:byte = d;
  a[34]:byte =
    (h = (g = (f = (a + -1)[0]:ubyte) + 1) + (d = (a + -33)[0]:ubyte) >> 1);
  a[66]:byte = (g = g + b >> 1);
  a[0]:byte = h;
  a[32]:byte = g;
  a[35]:byte =
    (i = (h = f + 2) + (d << 1) + (g = (a + -32)[0]:ubyte) >> 2);
  a[3]:byte =
    g + ((j = (a + -31)[0]:ubyte) << 1) + (a + -30)[0]:ubyte + 2 >> 2;
  a[2]:byte = j + d + (g << 1) + 2 >> 2;
  a[67]:byte = (d = d + (g = b + 2) + (f << 1) >> 2);
  a[1]:byte = i;
  a[99]:byte = (b = h + c + (b << 1) >> 2);
  a[33]:byte = d;
  a[97]:byte = g + e + (c << 1) >> 2;
  a[65]:byte = b;
}

function VL4_C(a:byte_ptr) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  a[64] =
    (e = 
       (c = (b = (a + -31)[0]:ubyte) + 1) + (d = (a + -30)[0]:ubyte) >> 1);
  a[0] = c + (f = (a + -32)[0]:ubyte) >> 1;
  a[65] = (g = d + (c = (a + -29)[0]:ubyte) + 1 >> 1);
  a[1] = e;
  a[66] = (h = c + (e = (a + -28)[0]:ubyte) + 1 >> 1);
  a[2] = g;
  a[3] = h;
  a[96] = (h = b + (g = c + 2) + (d << 1) >> 2);
  a[32] = f + (d = d + 2) + (b << 1) >> 2;
  a[97] = (b = e + d + (c << 1) >> 2);
  a[33] = h;
  f = (a + -25)[0]:ubyte;
  d = (a + -26)[0]:ubyte;
  a[98] = (g = g + (e << 1) + (c = (a + -27)[0]:ubyte) >> 2);
  a[34] = b;
  a[99] = f + c + (d << 1) + 2 >> 2;
  a[67] = d + e + (c << 1) + 2 >> 2;
  a[35] = g;
}

function VR4_C(a:int) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  a[65]:byte =
    (e = 
       (c = (b = (a + -32)[0]:ubyte) + 1) + (d = (a + -33)[0]:ubyte) >> 1);
  a[66]:byte = (g = c + (f = (a + -31)[0]:ubyte) >> 1);
  a[0]:byte = e;
  a[67]:byte = (e = f + (c = (a + -30)[0]:ubyte) + 1 >> 1);
  a[1]:byte = g;
  a[3]:byte = c + (g = (a + -29)[0]:ubyte) + 1 >> 1;
  a[2]:byte = e;
  a[96]:byte =
    (h = (e = (a + -1)[0]:ubyte) + 2) + a[63]:ubyte +
    ((i = a[31]:ubyte) << 1) >>
    2;
  a[97]:byte = (h = b + h + (d << 1) >> 2);
  a[64]:byte = i + (d = d + 2) + (e << 1) >> 2;
  a[98]:byte = (d = f + d + (b << 1) >> 2);
  a[32]:byte = h;
  a[99]:byte = (b = c + b + (f << 1) + 2 >> 2);
  a[33]:byte = d;
  a[35]:byte = g + f + (c << 1) + 2 >> 2;
  a[34]:byte = b;
}

function HE4_C(a:int) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  a[96]:int@1 =
    ((c = (b = a[63]:ubyte) + 2) + (d = a[95]:ubyte) + (d << 1) >> 2) *
    16843009;
  a[64]:int@1 =
    (d + (f = (e = a[31]:ubyte) + 2) + (b << 1) >> 2) * 16843009;
  a[32]:int@1 =
    (c + (d = (a + -1)[0]:ubyte) + (e << 1) >> 2) * 16843009;
  a[0]:int@1 = (f + (a + -33)[0]:ubyte + (d << 1) >> 2) * 16843009;
}

function DC16_C(a:long_ptr@1) {
  var b:simd;
  var c:long;
  (a + 8)[0]:long@1 =
    (c = 
       (i64_extend_i32_u(
          SimdLaneOp(
            (b = 
               (b = 
                  (((((((i32x4_extend_low_i16x8_u(
                           i16x8_extend_low_i8x16_u(
                             SimdLoadLane(
                               a + 95,
                               SimdLoadLane(a + 63, SimdLoadLane(a + 31, LoadSplat(a + -1)))))) i32x4_add
                         i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(a + -32)))) i32x4_add
                        i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 223,
                              SimdLoadLane(a + 191, SimdLoadLane(a + 159, LoadSplat(a))))))) i32x4_add
                       i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(a + -28)))) i32x4_add
                      i32x4_extend_low_i16x8_u(
                        i16x8_extend_low_i8x16_u(
                          SimdLoadLane(
                            a + 351,
                            SimdLoadLane(a + 319, SimdLoadLane(a + 287, LoadSplat(a))))))) i32x4_add
                     i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(a + -24)))) i32x4_add
                    i32x4_extend_low_i16x8_u(
                      i16x8_extend_low_i8x16_u(
                        SimdLoadLane(
                          a + 479,
                          SimdLoadLane(a + 447, SimdLoadLane(a + 415, LoadSplat(a))))))) i32x4_add
                   i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(a + -20)))) i32x4_add
                  V128) i32x4_add
               SimdShuffleOp(b, b)) i32x4_add
            SimdShuffleOp(b, b)) >>
          5) &
        255L) *
       72340172838076673L);
  a[0] = c;
  a[32] = c;
  (a + 40)[0]:long@1 = c;
  a[64] = c;
  (a + 72)[0]:long@1 = c;
  a[96] = c;
  (a + 104)[0]:long@1 = c;
  a[128] = c;
  (a + 136)[0]:long@1 = c;
  a[160] = c;
  (a + 168)[0]:long@1 = c;
  a[192] = c;
  (a + 200)[0]:long@1 = c;
  (a + 232)[0]:long@1 = c;
  a[224] = c;
  (a + 264)[0]:long@1 = c;
  a[256] = c;
  (a + 296)[0]:long@1 = c;
  a[288] = c;
  a[320] = c;
  (a + 328)[0]:long@1 = c;
  a[352] = c;
  (a + 360)[0]:long@1 = c;
  a[384] = c;
  (a + 392)[0]:long@1 = c;
  a[416] = c;
  (a + 424)[0]:long@1 = c;
  a[448] = c;
  (a + 456)[0]:long@1 = c;
  a[480] = c;
  (a + 488)[0]:long@1 = c;
}

function TM16_C(a:int) {
  var u:int;
  var b:ubyte_ptr = a + -17;
  var c:ubyte_ptr = a + -18;
  var d:ubyte_ptr = a + -19;
  var e:ubyte_ptr = a + -20;
  var f:ubyte_ptr = a + -21;
  var g:ubyte_ptr = a + -22;
  var h:ubyte_ptr = a + -23;
  var i:ubyte_ptr = a + -24;
  var j:ubyte_ptr = a + -25;
  var k:ubyte_ptr = a + -26;
  var l:ubyte_ptr = a + -27;
  var m:ubyte_ptr = a + -28;
  var n:ubyte_ptr = a + -29;
  var o:ubyte_ptr = a + -30;
  var p:ubyte_ptr = a + -31;
  var q:ubyte_ptr = a + -32;
  var r:int = 0;
  var s:int = rodata[1876]:int - (a + -33)[0]:ubyte;
  loop L_a {
    var t:byte_ptr = a + r;
    t[0] = ((u = s + (t + -1)[0]:ubyte) + q[0])[0]:ubyte;
    (t + 1)[0]:byte = (u + p[0])[0]:ubyte;
    (t + 2)[0]:byte = (u + o[0])[0]:ubyte;
    (t + 3)[0]:byte = (u + n[0])[0]:ubyte;
    (t + 4)[0]:byte = (u + m[0])[0]:ubyte;
    (t + 5)[0]:byte = (u + l[0])[0]:ubyte;
    (t + 6)[0]:byte = (u + k[0])[0]:ubyte;
    (t + 7)[0]:byte = (u + j[0])[0]:ubyte;
    (t + 8)[0]:byte = (u + i[0])[0]:ubyte;
    (t + 9)[0]:byte = (u + h[0])[0]:ubyte;
    (t + 10)[0]:byte = (u + g[0])[0]:ubyte;
    (t + 11)[0]:byte = (u + f[0])[0]:ubyte;
    (t + 12)[0]:byte = (u + e[0])[0]:ubyte;
    (t + 13)[0]:byte = (u + d[0])[0]:ubyte;
    (t + 14)[0]:byte = (u + c[0])[0]:ubyte;
    (t + 15)[0]:byte = (u + b[0])[0]:ubyte;
    r = r + 32;
    if (r != 512) continue L_a;
  }
}

function VE16_C(a:simd_ptr@1) {
  var b:simd;
  a[0] = (b = (a + -32)[0]:simd@1);
  a[32] = b;
  a[64] = b;
  a[96] = b;
  a[128] = b;
  a[256] = b;
  a[224] = b;
  a[192] = b;
  a[160] = b;
  a[384] = b;
  a[352] = b;
  a[320] = b;
  a[288] = b;
  a[480] = b;
  a[448] = b;
  a[416] = b;
}

function HE16_C(a:int) {
  var b:long;
  a[32]:long@1 = (b = a[31]:ubyte * 72340172838076673L);
  (a + 40)[0]:long@1 = b;
  a[64]:long@1 = (b = a[63]:ubyte * 72340172838076673L);
  (a + 72)[0]:long@1 = b;
  a[96]:long@1 = (b = a[95]:ubyte * 72340172838076673L);
  (a + 104)[0]:long@1 = b;
  a[128]:long@1 = (b = a[127]:ubyte * 72340172838076673L);
  (a + 136)[0]:long@1 = b;
  (a + 168)[0]:long@1 = (b = a[159]:ubyte * 72340172838076673L);
  a[160]:long@1 = b;
  a[0]:long@1 = (b = (a + -1)[0]:ubyte * 72340172838076673L);
  (a + 8)[0]:long@1 = b;
  (a + 200)[0]:long@1 = (b = a[191]:ubyte * 72340172838076673L);
  a[192]:long@1 = b;
  (a + 232)[0]:long@1 = (b = a[223]:ubyte * 72340172838076673L);
  a[224]:long@1 = b;
  (a + 264)[0]:long@1 = (b = a[255]:ubyte * 72340172838076673L);
  a[256]:long@1 = b;
  (a + 296)[0]:long@1 = (b = a[287]:ubyte * 72340172838076673L);
  a[288]:long@1 = b;
  (a + 328)[0]:long@1 = (b = a[319]:ubyte * 72340172838076673L);
  a[320]:long@1 = b;
  (a + 360)[0]:long@1 = (b = a[351]:ubyte * 72340172838076673L);
  a[352]:long@1 = b;
  (a + 392)[0]:long@1 = (b = a[383]:ubyte * 72340172838076673L);
  a[384]:long@1 = b;
  (a + 424)[0]:long@1 = (b = a[415]:ubyte * 72340172838076673L);
  a[416]:long@1 = b;
  (a + 456)[0]:long@1 = (b = a[447]:ubyte * 72340172838076673L);
  a[448]:long@1 = b;
  (a + 488)[0]:long@1 = (b = a[479]:ubyte * 72340172838076673L);
  a[480]:long@1 = b;
}

function DC16NoTop_C(a:int) {
  var b:long;
  a[0]:long@1 =
    (b = (i64_extend_i32_u(
            (a + -1)[0]:ubyte + a[31]:ubyte + a[63]:ubyte + a[95]:ubyte +
            a[127]:ubyte +
            a[159]:ubyte +
            a[191]:ubyte +
            a[223]:ubyte +
            a[255]:ubyte +
            a[287]:ubyte +
            a[319]:ubyte +
            a[351]:ubyte +
            a[383]:ubyte +
            a[415]:ubyte +
            a[447]:ubyte +
            a[479]:ubyte +
            8 >>
            4) &
          255L) *
         72340172838076673L);
  (a + 8)[0]:long@1 = b;
  (a + 40)[0]:long@1 = b;
  a[32]:long@1 = b;
  (a + 72)[0]:long@1 = b;
  a[64]:long@1 = b;
  (a + 104)[0]:long@1 = b;
  a[96]:long@1 = b;
  (a + 136)[0]:long@1 = b;
  a[128]:long@1 = b;
  (a + 168)[0]:long@1 = b;
  a[160]:long@1 = b;
  (a + 200)[0]:long@1 = b;
  a[192]:long@1 = b;
  (a + 232)[0]:long@1 = b;
  a[224]:long@1 = b;
  (a + 264)[0]:long@1 = b;
  a[256]:long@1 = b;
  (a + 296)[0]:long@1 = b;
  a[288]:long@1 = b;
  (a + 328)[0]:long@1 = b;
  a[320]:long@1 = b;
  (a + 360)[0]:long@1 = b;
  a[352]:long@1 = b;
  (a + 392)[0]:long@1 = b;
  a[384]:long@1 = b;
  (a + 424)[0]:long@1 = b;
  a[416]:long@1 = b;
  (a + 456)[0]:long@1 = b;
  a[448]:long@1 = b;
  (a + 488)[0]:long@1 = b;
  a[480]:long@1 = b;
}

function DC16NoLeft_C(a:long_ptr@1) {
  var b:long;
  a[0] =
    (b = (i64_extend_i32_u(
            (a + -32)[0]:ubyte + (a + -31)[0]:ubyte + (a + -30)[0]:ubyte +
            (a + -29)[0]:ubyte +
            (a + -28)[0]:ubyte +
            (a + -27)[0]:ubyte +
            (a + -26)[0]:ubyte +
            (a + -25)[0]:ubyte +
            (a + -24)[0]:ubyte +
            (a + -23)[0]:ubyte +
            (a + -22)[0]:ubyte +
            (a + -21)[0]:ubyte +
            (a + -20)[0]:ubyte +
            (a + -19)[0]:ubyte +
            (a + -18)[0]:ubyte +
            (a + -17)[0]:ubyte +
            8 >>
            4) &
          255L) *
         72340172838076673L);
  (a + 8)[0]:long@1 = b;
  (a + 40)[0]:long@1 = b;
  a[32] = b;
  (a + 72)[0]:long@1 = b;
  a[64] = b;
  (a + 104)[0]:long@1 = b;
  a[96] = b;
  (a + 136)[0]:long@1 = b;
  a[128] = b;
  (a + 168)[0]:long@1 = b;
  a[160] = b;
  (a + 200)[0]:long@1 = b;
  a[192] = b;
  (a + 232)[0]:long@1 = b;
  a[224] = b;
  (a + 264)[0]:long@1 = b;
  a[256] = b;
  (a + 296)[0]:long@1 = b;
  a[288] = b;
  (a + 328)[0]:long@1 = b;
  a[320] = b;
  (a + 360)[0]:long@1 = b;
  a[352] = b;
  (a + 392)[0]:long@1 = b;
  a[384] = b;
  (a + 424)[0]:long@1 = b;
  a[416] = b;
  (a + 456)[0]:long@1 = b;
  a[448] = b;
  (a + 488)[0]:long@1 = b;
  a[480] = b;
}

function DC16NoTopLeft_C(a:long_ptr@1) {
  a[0] = -9187201950435737472L;
  a[32] = -9187201950435737472L;
  a[64] = -9187201950435737472L;
  a[96] = -9187201950435737472L;
  a[128] = -9187201950435737472L;
  a[160] = -9187201950435737472L;
  a[192] = -9187201950435737472L;
  a[224] = -9187201950435737472L;
  a[256] = -9187201950435737472L;
  (a + 8)[0]:long@1 = -9187201950435737472L;
  (a + 40)[0]:long@1 = -9187201950435737472L;
  (a + 72)[0]:long@1 = -9187201950435737472L;
  (a + 104)[0]:long@1 = -9187201950435737472L;
  (a + 136)[0]:long@1 = -9187201950435737472L;
  (a + 168)[0]:long@1 = -9187201950435737472L;
  (a + 200)[0]:long@1 = -9187201950435737472L;
  (a + 232)[0]:long@1 = -9187201950435737472L;
  (a + 264)[0]:long@1 = -9187201950435737472L;
  (a + 296)[0]:long@1 = -9187201950435737472L;
  a[288] = -9187201950435737472L;
  (a + 328)[0]:long@1 = -9187201950435737472L;
  a[320] = -9187201950435737472L;
  (a + 360)[0]:long@1 = -9187201950435737472L;
  a[352] = -9187201950435737472L;
  (a + 392)[0]:long@1 = -9187201950435737472L;
  a[384] = -9187201950435737472L;
  (a + 424)[0]:long@1 = -9187201950435737472L;
  a[416] = -9187201950435737472L;
  (a + 456)[0]:long@1 = -9187201950435737472L;
  a[448] = -9187201950435737472L;
  (a + 488)[0]:long@1 = -9187201950435737472L;
  a[480] = -9187201950435737472L;
}

function DC8uv_C(a:int) {
  var b:long;
  a[224]:long@1 =
    (b = (i64_extend_i32_u(
            (a + -32)[0]:ubyte + (a + -1)[0]:ubyte + (a + -31)[0]:ubyte +
            a[31]:ubyte +
            (a + -30)[0]:ubyte +
            a[63]:ubyte +
            (a + -29)[0]:ubyte +
            a[95]:ubyte +
            (a + -28)[0]:ubyte +
            a[127]:ubyte +
            (a + -27)[0]:ubyte +
            a[159]:ubyte +
            (a + -26)[0]:ubyte +
            a[191]:ubyte +
            (a + -25)[0]:ubyte +
            a[223]:ubyte +
            8 >>
            4) &
          255L) *
         72340172838076673L);
  a[192]:long@1 = b;
  a[160]:long@1 = b;
  a[128]:long@1 = b;
  a[96]:long@1 = b;
  a[64]:long@1 = b;
  a[32]:long@1 = b;
  a[0]:long@1 = b;
}

function TM8uv_C(a:int) {
  var m:int;
  var b:ubyte_ptr = a + -25;
  var c:ubyte_ptr = a + -26;
  var d:ubyte_ptr = a + -27;
  var e:ubyte_ptr = a + -28;
  var f:ubyte_ptr = a + -29;
  var g:ubyte_ptr = a + -30;
  var h:ubyte_ptr = a + -31;
  var i:ubyte_ptr = a + -32;
  var j:int = 0;
  var k:int = rodata[1876]:int - (a + -33)[0]:ubyte;
  loop L_a {
    var l:byte_ptr = a + j;
    l[0] = ((m = k + (l + -1)[0]:ubyte) + i[0])[0]:ubyte;
    (l + 1)[0]:byte = (m + h[0])[0]:ubyte;
    (l + 2)[0]:byte = (m + g[0])[0]:ubyte;
    (l + 3)[0]:byte = (m + f[0])[0]:ubyte;
    (l + 4)[0]:byte = (m + e[0])[0]:ubyte;
    (l + 5)[0]:byte = (m + d[0])[0]:ubyte;
    (l + 6)[0]:byte = (m + c[0])[0]:ubyte;
    (l + 7)[0]:byte = (m + b[0])[0]:ubyte;
    j = j + 32;
    if (j != 256) continue L_a;
  }
}

function VE8uv_C(a:long_ptr@1) {
  var b:long;
  a[224] = (b = (a + -32)[0]:long@1);
  a[192] = b;
  a[160] = b;
  a[128] = b;
  a[96] = b;
  a[64] = b;
  a[32] = b;
  a[0] = b;
}

function HE8uv_C(a:int) {
  a[32]:long@1 = a[31]:ubyte * 72340172838076673L;
  a[64]:long@1 = a[63]:ubyte * 72340172838076673L;
  a[96]:long@1 = a[95]:ubyte * 72340172838076673L;
  a[128]:long@1 = a[127]:ubyte * 72340172838076673L;
  a[160]:long@1 = a[159]:ubyte * 72340172838076673L;
  a[192]:long@1 = a[191]:ubyte * 72340172838076673L;
  a[224]:long@1 = a[223]:ubyte * 72340172838076673L;
  a[0]:long@1 = (a + -1)[0]:ubyte * 72340172838076673L;
}

function DC8uvNoTop_C(a:int) {
  var b:long;
  a[224]:long@1 =
    (b = (i64_extend_i32_u(
            (a + -1)[0]:ubyte + a[31]:ubyte + a[63]:ubyte + a[95]:ubyte +
            a[127]:ubyte +
            a[159]:ubyte +
            a[191]:ubyte +
            a[223]:ubyte +
            4 >>
            3) &
          255L) *
         72340172838076673L);
  a[192]:long@1 = b;
  a[160]:long@1 = b;
  a[128]:long@1 = b;
  a[96]:long@1 = b;
  a[64]:long@1 = b;
  a[32]:long@1 = b;
  a[0]:long@1 = b;
}

function DC8uvNoLeft_C(a:long_ptr@1) {
  var b:long;
  a[224] =
    (b = (i64_extend_i32_u(
            (a + -32)[0]:ubyte + (a + -31)[0]:ubyte + (a + -30)[0]:ubyte +
            (a + -29)[0]:ubyte +
            (a + -28)[0]:ubyte +
            (a + -27)[0]:ubyte +
            (a + -26)[0]:ubyte +
            (a + -25)[0]:ubyte +
            4 >>
            3) &
          255L) *
         72340172838076673L);
  a[192] = b;
  a[160] = b;
  a[128] = b;
  a[96] = b;
  a[64] = b;
  a[32] = b;
  a[0] = b;
}

function DC8uvNoTopLeft_C(a:long_ptr@1) {
  a[224] = -9187201950435737472L;
  a[192] = -9187201950435737472L;
  a[160] = -9187201950435737472L;
  a[128] = -9187201950435737472L;
  a[96] = -9187201950435737472L;
  a[64] = -9187201950435737472L;
  a[32] = -9187201950435737472L;
  a[0] = -9187201950435737472L;
}

function DitherCombine8x8_C(a:int, b:int, c:int) {
  var e:ubyte_ptr;
  var f:int;
  var d:int;
  var g:int;
  if (c == 1) goto B_b;
  d = 0;
  loop L_c {
    b[0]:byte =
      select_if(
        f = 
          select_if(f = ((e = a + d)[0] + -120 >> 4) + b[0]:ubyte, 0, f > 0),
        255,
        f < 255);
    b[1]:byte =
      select_if(
        f = 
          select_if(f = ((e + 1)[0]:ubyte + -120 >> 4) + b[1]:ubyte, 0, f > 0),
        255,
        f < 255);
    b[2]:byte =
      select_if(
        f = 
          select_if(f = ((e + 2)[0]:ubyte + -120 >> 4) + b[2]:ubyte, 0, f > 0),
        255,
        f < 255);
    b[3]:byte =
      select_if(
        f = 
          select_if(f = ((e + 3)[0]:ubyte + -120 >> 4) + b[3]:ubyte, 0, f > 0),
        255,
        f < 255);
    b[4]:byte =
      select_if(
        f = 
          select_if(f = ((e + 4)[0]:ubyte + -120 >> 4) + b[4]:ubyte, 0, f > 0),
        255,
        f < 255);
    b[5]:byte =
      select_if(
        f = 
          select_if(f = ((e + 5)[0]:ubyte + -120 >> 4) + b[5]:ubyte, 0, f > 0),
        255,
        f < 255);
    b[6]:byte =
      select_if(
        f = 
          select_if(f = ((e + 6)[0]:ubyte + -120 >> 4) + b[6]:ubyte, 0, f > 0),
        255,
        f < 255);
    b[7]:byte =
      select_if(
        e = 
          select_if(e = ((e + 7)[0]:ubyte + -120 >> 4) + b[7]:ubyte, 0, e > 0),
        255,
        e < 255);
    b = b + c;
    d = d + 8;
    if (d != 64) continue L_c;
    goto B_a;
  }
  label B_b:
  f = (b + 6)[0]:ubyte;
  d = 0;
  loop L_d {
    b[0]:byte =
      select_if(
        g = 
          select_if(g = ((e = a + d)[0] + -120 >> 4) + b[0]:ubyte, 0, g > 0),
        255,
        g < 255);
    b[1]:byte =
      select_if(
        g = 
          select_if(g = ((e + 1)[0]:ubyte + -120 >> 4) + b[1]:ubyte, 0, g > 0),
        255,
        g < 255);
    b[2]:byte =
      select_if(
        g = 
          select_if(g = ((e + 2)[0]:ubyte + -120 >> 4) + b[2]:ubyte, 0, g > 0),
        255,
        g < 255);
    b[3]:byte =
      select_if(
        g = 
          select_if(g = ((e + 3)[0]:ubyte + -120 >> 4) + b[3]:ubyte, 0, g > 0),
        255,
        g < 255);
    b[4]:byte =
      select_if(
        g = 
          select_if(g = ((e + 4)[0]:ubyte + -120 >> 4) + b[4]:ubyte, 0, g > 0),
        255,
        g < 255);
    b[5]:byte =
      select_if(
        g = 
          select_if(g = ((e + 5)[0]:ubyte + -120 >> 4) + b[5]:ubyte, 0, g > 0),
        255,
        g < 255);
    b[6]:byte =
      select_if(
        f = 
          select_if(f = ((e + 6)[0]:ubyte + -120 >> 4) + (f & 255), 0, f > 0),
        255,
        f < 255);
    b[7]:byte =
      (f = 
         select_if(
           e = 
             select_if(e = ((e + 7)[0]:ubyte + -120 >> 4) + b[7]:ubyte, 0, e > 0),
           255,
           e < 255));
    b = b + c;
    d = d + 8;
    if (d != 64) continue L_d;
  }
  label B_a:
}

function TransformOne_C(a:int, b:int) {
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var c:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int, k:int, l:int, m:int, n:int, o:int, p:int } = 
    stack_pointer - 64;
  c.d =
    (f = (d = a[8]:short) + (e = a[0]:short)) -
    (i = ((g = a[4]:short) * 20091 >> 16) + g +
         ((h = a[12]:short) * 35468 >> 16));
  c.c = (d = e - d) - (g = (g * 35468 >> 16) - h + (h * 20091 >> 16));
  c.b = g + d;
  c.a = i + f;
  c.h =
    (f = (d = a[9]:short) + (e = a[1]:short)) -
    (i = ((g = a[5]:short) * 20091 >> 16) + g +
         ((h = a[13]:short) * 35468 >> 16));
  c.g = (d = e - d) - (g = (g * 35468 >> 16) - h + (h * 20091 >> 16));
  c.f = g + d;
  c.e = i + f;
  c.l =
    (f = (d = a[10]:short) + (e = a[2]:short)) -
    (i = ((g = a[6]:short) * 20091 >> 16) + g +
         ((h = a[14]:short) * 35468 >> 16));
  c.k = (d = e - d) - (g = (g * 35468 >> 16) - h + (h * 20091 >> 16));
  c.j = g + d;
  c.i = i + f;
  c.o =
    (e = (h = a[3]:short) - (d = a[11]:short)) -
    (f = ((g = a[7]:short) * 35468 >> 16) -
         ((a = a[15]:short) * 20091 >> 16) + a);
  c.n = f + e;
  c.p = (h = d + h) - (a = g + (g * 20091 >> 16) + (a * 35468 >> 16));
  c.m = a + h;
  g = 0;
  loop L_a {
    b[0]:byte =
      select_if(
        j = select_if(
              j = ((e = ((h = ((a = c + g) + 16)[0]:int) * 20091 >> 16) + h +
                        ((d = (a + 48)[0]:int) * 35468 >> 16)) +
                   (i = (f = a[0]:int + 4) + (a = (a + 32)[0]:int)) >>
                   3) +
                  b[0]:ubyte,
              0,
              j > 0),
        255,
        j < 255);
    j = b + 1;
    j[0]:byte =
      select_if(
        d = 
          select_if(
            d = 
              ((h = (h * 35468 >> 16) - d + (d * 20091 >> 16)) + (a = f - a) >> 3) +
              j[0]:ubyte,
            0,
            d > 0),
        255,
        d < 255);
    d = b + 2;
    d[0]:byte =
      select_if(a = select_if(a = (a - h >> 3) + d[0]:ubyte, 0, a > 0),
                255,
                a < 255);
    a = b + 3;
    a[0]:byte =
      select_if(a = select_if(a = (i - e >> 3) + a[0]:ubyte, 0, a > 0),
                255,
                a < 255);
    b = b + 32;
    g = g + 4;
    if (g != 16) continue L_a;
  }
}

function FilterLoop26_C(a:int, b:int, c:int, d:int, e:int, f:int, g:int) {
  var m:int;
  var r:int;
  var s:int;
  var t:int;
  var u:int;
  var v:int;
  var w:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  var ca:int;
  var da:int;
  if (d < 1) goto B_a;
  var h:int = e << 1 | 1;
  e = d + 1;
  var i:int = b * 3;
  var j:int = 0 - b;
  var k:int = b * -3;
  var l:int = 0 - (b << 2);
  var n:int = 0 - (m = b << 1);
  var o:int = rodata[1681]:int;
  var p:int = rodata[1876]:int;
  var q:int = rodata[1623]:int;
  d = rodata[2008]:int;
  loop L_b {
    if (
      ((d + (s = (r = a + j)[0]:ubyte) - (t = a[0]:ubyte))[0]:ubyte << 2) +
      (d + (y = (v = (u = a + n)[0]:ubyte) - (x = (w = a + b)[0]:ubyte)))[0]:ubyte >
      h) goto B_c;
    if (
      (d + (a + l)[0]:ubyte - (aa = (z = a + k)[0]:ubyte))[0]:ubyte > f) goto B_c;
    if ((d + aa - v)[0]:ubyte > f) goto B_c;
    var ba:int = (d + v - s)[0]:ubyte;
    if (ba > f) goto B_c;
    if (
      (d + (a + i)[0]:ubyte - (da = (ca = a + m)[0]:ubyte))[0]:ubyte > f) goto B_c;
    if ((d + da - x)[0]:ubyte > f) goto B_c;
    var ea:int = (d + x - t)[0]:ubyte;
    if (ea > f) goto B_c;
    y = (t - s) * 3 + (q + y)[0]:byte;
    if (ba > g) goto B_f;
    if (ea <= g) goto B_e;
    label B_f:
    v = (o + (y + 4 >> 3))[0]:byte;
    r[0]:byte = (p + (o + (y + 3 >> 3))[0]:byte + s)[0]:ubyte;
    v = t - v;
    ca = a;
    goto B_d;
    label B_e:
    z[0]:byte =
      (p + (ba = (y = (q + y)[0]:byte) * 9 + 63 >> 7) + aa)[0]:ubyte;
    u[0]:byte = (p + (aa = y * 18 + 63 >> 7) + v)[0]:ubyte;
    r[0]:byte = (p + (v = y * 27 + 63 >> 7) + s)[0]:ubyte;
    a[0]:byte = (p + t - v)[0]:ubyte;
    w[0]:byte = (p + x - aa)[0]:ubyte;
    v = da - ba;
    label B_d:
    ca[0]:byte = (p + v)[0]:ubyte;
    label B_c:
    a = a + c;
    e = e + -1;
    if (e > 1) continue L_b;
  }
  label B_a:
}

function FilterLoop24_C(a:int, b:int, c:int, d:int, e:int, f:int, g:int) {
  var m:int;
  var r:int;
  var s:int;
  var t:int;
  var u:int;
  var v:int;
  var w:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  if (d < 1) goto B_a;
  var h:int = e << 1 | 1;
  e = d + 1;
  var i:int = b * 3;
  var j:int = 0 - b;
  var k:int = b * -3;
  var l:int = 0 - (b << 2);
  var n:int = 0 - (m = b << 1);
  var o:int = rodata[1623]:int;
  var p:int = rodata[1876]:int;
  var q:int = rodata[1681]:int;
  d = rodata[2008]:int;
  loop L_b {
    if (
      ((d + (s = (r = a + j)[0]:ubyte) - (t = a[0]:ubyte))[0]:ubyte << 2) +
      (d + (y = (v = (u = a + n)[0]:ubyte) - (x = (w = a + b)[0]:ubyte)))[0]:ubyte >
      h) goto B_c;
    if (
      (d + (a + l)[0]:ubyte - (z = (a + k)[0]:ubyte))[0]:ubyte > f) goto B_c;
    if ((d + z - v)[0]:ubyte > f) goto B_c;
    z = (d + v - s)[0]:ubyte;
    if (z > f) goto B_c;
    if (
      (d + (a + i)[0]:ubyte - (aa = (a + m)[0]:ubyte))[0]:ubyte > f) goto B_c;
    if ((d + aa - x)[0]:ubyte > f) goto B_c;
    aa = (d + x - t)[0]:ubyte;
    if (aa > f) goto B_c;
    var ba:int = (t - s) * 3;
    if (z > g) goto B_f;
    if (aa <= g) goto B_e;
    label B_f:
    x = (q + ((v = ba + (o + y)[0]:byte) + 4 >> 3))[0]:byte;
    r[0]:byte = (p + (q + (v + 3 >> 3))[0]:byte + s)[0]:ubyte;
    v = t - x;
    w = a;
    goto B_d;
    label B_e:
    y = (q + (ba + 3 >> 3))[0]:byte;
    u[0]:byte =
      (p + (aa = (z = (q + (ba + 4 >> 3))[0]:byte) + 1 >> 1) + v)[0]:ubyte;
    r[0]:byte = (p + y + s)[0]:ubyte;
    a[0]:byte = (p + t - z)[0]:ubyte;
    v = x - aa;
    label B_d:
    w[0]:byte = (p + v)[0]:ubyte;
    label B_c:
    a = a + c;
    e = e + -1;
    if (e > 1) continue L_b;
  }
  label B_a:
}

function VP8InitClipTables() {
}

function VP8FiltersInit() {
  var a:int = data[2]:int;
  if (a == data[4]:int) goto B_a;
  0[264987]:int = 77;
  0[264986]:int = 78;
  0[264985]:int = 79;
  0[264984]:int = 80;
  0[264983]:int = 81;
  0[264982]:int = 82;
  0[264981]:int = 83;
  0[264980]:int = 0;
  if (eqz(a)) goto B_b;
  if (eqz(call_indirect(0, a))) goto B_b;
  VP8FiltersInitSSE2();
  label B_b:
  data[4]:int = data[2]:int;
  label B_a:
}

function GradientUnfilter_C(a:ubyte_ptr, b:ubyte_ptr, c:byte_ptr, d:byte_ptr) {
  var h:ubyte_ptr;
  var f:int;
  if (a) goto B_b;
  if (d < 1) goto B_a;
  var e:int = d & 3;
  f = 0;
  a = 0;
  if (d < 4) goto B_c;
  var g:int = d & -4;
  f = 0;
  a = 0;
  loop L_d {
    d = c + f;
    d[0] = (a = (h = b + f)[0] + a);
    (d + 1)[0]:byte = (a = (h + 1)[0]:ubyte + a);
    (d + 2)[0]:byte = (a = (h + 2)[0]:ubyte + a);
    (d + 3)[0]:byte = (a = (h + 3)[0]:ubyte + a);
    if (g != (f = f + 4)) continue L_d;
  }
  label B_c:
  if (eqz(e)) goto B_a;
  b = b + f;
  c = c + f;
  loop L_e {
    c[0] = (a = b[0] + a);
    b = b + 1;
    c = c + 1;
    e = e + -1;
    if (e) continue L_e;
    goto B_a;
  }
  label B_b:
  if (d < 1) goto B_a;
  f = a[0];
  h = f;
  loop L_f {
    c[0] =
      (f = 
         b[0] +
         select_if(
           f = select_if(f = (f & 255) - (h & 255) + (h = a[0]), 0, f > 0),
           255,
           f < 255));
    a = a + 1;
    b = b + 1;
    c = c + 1;
    d = d + -1;
    if (d) continue L_f;
  }
  label B_a:
}

function VerticalUnfilter_C(a:int, b:ubyte_ptr, c:byte_ptr, d:byte_ptr) {
  var g:int;
  var h:int;
  var i:int;
  var e:int;
  if (eqz(a)) goto B_b;
  if (d < 1) goto B_a;
  e = 0;
  if (d < 16) goto B_c;
  if (c - a < 16) goto B_c;
  if (c - b < 16) goto B_c;
  e = d & -16;
  var f:int = e;
  g = c;
  h = b;
  i = a;
  loop L_d {
    g[0]:simd@1 = h[0]:simd@1 i8x16_add i[0]:simd@1;
    g = g + 16;
    h = h + 16;
    i = i + 16;
    f = f + -16;
    if (f) continue L_d;
  }
  if (e == d) goto B_a;
  label B_c:
  g = e ^ -1;
  if (eqz(d & 1)) goto B_e;
  (c + e)[0]:byte = (b + e)[0]:ubyte + (a + e)[0]:ubyte;
  e = e | 1;
  label B_e:
  if (g == 0 - d) goto B_a;
  loop L_f {
    g = c + e;
    g[0]:byte = (h = b + e)[0]:ubyte + (i = a + e)[0]:ubyte;
    (g + 1)[0]:byte = (h + 1)[0]:ubyte + (i + 1)[0]:ubyte;
    a = a + 2;
    b = b + 2;
    c = c + 2;
    if (e != (d = d + -2)) continue L_f;
    goto B_a;
  }
  label B_b:
  if (d < 1) goto B_a;
  h = d & 3;
  a = 0;
  e = 0;
  if (d < 4) goto B_g;
  i = d & -4;
  a = 0;
  e = 0;
  loop L_h {
    d = c + a;
    d[0] = (e = (g = b + a)[0]:ubyte + e);
    (d + 1)[0]:byte = (e = (g + 1)[0]:ubyte + e);
    (d + 2)[0]:byte = (e = (g + 2)[0]:ubyte + e);
    (d + 3)[0]:byte = (e = (g + 3)[0]:ubyte + e);
    if (i != (a = a + 4)) continue L_h;
  }
  label B_g:
  if (eqz(h)) goto B_a;
  b = b + a;
  c = c + a;
  loop L_i {
    c[0] = (e = b[0] + e);
    b = b + 1;
    c = c + 1;
    h = h + -1;
    if (h) continue L_i;
  }
  label B_a:
}

function HorizontalUnfilter_C(a:ubyte_ptr, b:int, c:int, d:int) {
  var h:ubyte_ptr;
  if (a) goto B_b;
  a = 0;
  goto B_a;
  label B_b:
  a = a[0];
  label B_a:
  if (d < 1) goto B_c;
  var e:int = d & 3;
  var f:byte_ptr = 0;
  if (d < 4) goto B_d;
  var g:int = d & -4;
  f = 0;
  loop L_e {
    d = c + f;
    d[0]:byte = (a = (h = b + f)[0] + a);
    (d + 1)[0]:byte = (a = (h + 1)[0]:ubyte + a);
    (d + 2)[0]:byte = (a = (h + 2)[0]:ubyte + a);
    (d + 3)[0]:byte = (a = (h + 3)[0]:ubyte + a);
    if (g != (f = f + 4)) continue L_e;
  }
  label B_d:
  if (eqz(e)) goto B_c;
  d = b + f;
  f = c + f;
  loop L_f {
    f[0] = (a = d[0]:ubyte + a);
    d = d + 1;
    f = f + 1;
    e = e + -1;
    if (e) continue L_f;
  }
  label B_c:
}

function NoneUnfilter_C(a:int, b:int, c:int, d:int) {
  if (c == b) goto B_a;
  memcpy(c, b, d);
  label B_a:
}

function GradientFilter_C(a:ubyte_ptr, b:int, c:int, d:int, e:byte_ptr) {
  var j:int;
  var i:int;
  var k:simd_ptr@1;
  var l:ubyte_ptr;
  var n:int;
  var h:ubyte_ptr;
  var g:int;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var f:int;
  e[0] = a[0];
  if (b < 2) goto B_a;
  f = e + 1;
  g = b + -1;
  h = 0;
  if (b < 17) goto B_b;
  if (f >= a + b) goto B_c;
  if (e + b > a) goto B_b;
  label B_c:
  h = g & -16;
  i = h;
  j = f;
  k = a;
  loop L_d {
    j[0]:simd@1 = (k + 1)[0]:simd@1 i8x16_sub k[0];
    j = j + 16;
    k = k + 16;
    i = i + -16;
    if (i) continue L_d;
  }
  if (g == h) goto B_a;
  label B_b:
  j = b + -2;
  k = h;
  if (b & 1) goto B_e;
  (f + h)[0]:byte = (a + 1 + h)[0]:ubyte - (a + h)[0]:ubyte;
  k = h | 1;
  label B_e:
  if (j == h) goto B_a;
  j = a;
  i = e;
  loop L_f {
    f = i + k;
    (f + 1)[0]:byte = (l = (h = j + k) + 1)[0] - h[0];
    (f + 2)[0]:byte = (h + 2)[0]:ubyte - l[0];
    j = j + 2;
    i = i + 2;
    if (k != (g = g + -2)) continue L_f;
  }
  label B_a:
  if (c < 2) goto B_g;
  f = e + d;
  g = a + d;
  var m:int = d + b;
  l = e + (n = d + 1);
  var o:int = b + -1;
  var p:int = o & -16;
  var q:int = p | 1;
  var r:int = b < 2;
  var s:int = b < 17;
  var t:int = 0;
  var u:byte_ptr = e;
  var v:ubyte_ptr = a;
  var w:int = 1;
  loop L_h {
    u = u + d;
    u[0] = (v = (h = v) + d)[0] - h[0];
    if (r) goto B_i;
    k = 1;
    if (s) goto B_j;
    var x:int = e + n + (j = t * d);
    if (x < a + (i = m + j) & a + j + d < (i = e + i)) goto B_j;
    if (x < a + j + b & h < i) goto B_j;
    k = 0;
    loop L_k {
      (l + k)[0]:simd@1 =
        ((j = g + k) + 1)[0]:simd@1 i8x16_sub
        ((((((i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(y = ((i = h + k) + 1)[0]:simd@1)) i32x4_add
              i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(z = j[0]:simd@1))) i32x4_sub
             i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(aa = i[0]:simd@1))) i32x4_max_s
            (ba = V128)) i32x4_min_s
           (ca = V128)) i16x8_narrow_i32x4_u
          ((((i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(y, y))) i32x4_add
              i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(z, y)))) i32x4_sub
             i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, y)))) i32x4_max_s
            ba) i32x4_min_s
           ca)) i8x16_narrow_i16x8_u
         (((((i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(y, y))) i32x4_add
              i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(z, y)))) i32x4_sub
             i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, y)))) i32x4_max_s
            ba) i32x4_min_s
           ca) i16x8_narrow_i32x4_u
          ((((i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(y, y))) i32x4_add
              i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(z, y)))) i32x4_sub
             i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, y)))) i32x4_max_s
            ba) i32x4_min_s
           ca)));
      if (p != (k = k + 16)) continue L_k;
    }
    k = q;
    if (o == p) goto B_i;
    label B_j:
    loop L_l {
      (f + k)[0]:byte =
        (j = g + k)[0]:ubyte -
        select_if(
          j = 
            select_if(
              j = (i = h + k)[0]:ubyte + (j + -1)[0]:ubyte - (i + -1)[0]:ubyte,
              0,
              j > 0),
          255,
          j < 255);
      if (b != (k = k + 1)) continue L_l;
    }
    label B_i:
    f = f + d;
    l = l + d;
    g = g + d;
    t = t + 1;
    w = w + 1;
    if (w != c) continue L_h;
  }
  label B_g:
}

function VerticalFilter_C(a:ubyte_ptr, b:int, c:int, d:int, e:byte_ptr) {
  var j:int;
  var i:ubyte_ptr;
  var k:simd_ptr@1;
  var l:ubyte_ptr;
  var g:int;
  var h:ubyte_ptr;
  var f:int;
  e[0] = a[0];
  if (b < 2) goto B_a;
  f = e + 1;
  g = b + -1;
  h = 0;
  if (b < 17) goto B_b;
  if (f >= a + b) goto B_c;
  if (e + b > a) goto B_b;
  label B_c:
  h = g & -16;
  i = h;
  j = f;
  k = a;
  loop L_d {
    j[0]:simd@1 = (k + 1)[0]:simd@1 i8x16_sub k[0];
    j = j + 16;
    k = k + 16;
    i = i + -16;
    if (i) continue L_d;
  }
  if (g == h) goto B_a;
  label B_b:
  j = b + -2;
  k = h;
  if (b & 1) goto B_e;
  (f + h)[0]:byte = (a + 1 + h)[0]:ubyte - (a + h)[0]:ubyte;
  k = h | 1;
  label B_e:
  if (j == h) goto B_a;
  j = a;
  i = e;
  loop L_f {
    f = i + k;
    (f + 1)[0]:byte = (l = (h = j + k) + 1)[0] - h[0];
    (f + 2)[0]:byte = (h + 2)[0]:ubyte - l[0];
    j = j + 2;
    i = i + 2;
    if (k != (g = g + -2)) continue L_f;
  }
  label B_a:
  if (c < 2) goto B_g;
  var m:int = 0;
  var n:int = 0 - b;
  var o:int = b & 1;
  var p:int = b & -16;
  var q:int = b < 16;
  var r:int = e + d;
  f = r;
  var s:int = a + d;
  l = s;
  var t:int = a;
  var u:int = 1;
  loop L_h {
    j = e;
    e = j + d;
    g = t;
    t = g + d;
    if (b < 1) goto B_i;
    k = 0;
    if (q) goto B_j;
    h = r + (i = m * d);
    if (h - i + a < 16) goto B_j;
    if (h - s + i < 16) goto B_j;
    j = j + d;
    i = g + d;
    k = 0;
    loop L_k {
      (j + k)[0]:simd@1 = (i + k)[0]:simd@1 i8x16_sub (g + k)[0]:simd@1;
      if (p != (k = k + 16)) continue L_k;
    }
    k = p;
    if (p == b) goto B_i;
    label B_j:
    j = k ^ -1;
    if (eqz(o)) goto B_l;
    (e + k)[0]:byte = (t + k)[0]:ubyte - (g + k)[0]:ubyte;
    k = k | 1;
    label B_l:
    if (j == n) goto B_i;
    loop L_m {
      j = f + k;
      j[0]:byte = (i = l + k)[0] - (h = g + k)[0];
      (j + 1)[0]:byte = (i + 1)[0]:ubyte - (h + 1)[0]:ubyte;
      if (b != (k = k + 2)) continue L_m;
    }
    label B_i:
    f = f + d;
    l = l + d;
    m = m + 1;
    u = u + 1;
    if (u != c) continue L_h;
  }
  label B_g:
}

function HorizontalFilter_C(a:ubyte_ptr, b:ubyte_ptr, c:int, d:int, e:byte_ptr) {
  var j:int;
  var i:simd_ptr@1;
  var k:simd_ptr@1;
  var m:ubyte_ptr;
  var l:ubyte_ptr;
  var h:ubyte_ptr;
  var g:ubyte_ptr;
  e[0] = a[0];
  var f:int = b + -1;
  if (b < 2) goto B_a;
  g = e + 1;
  h = 0;
  if (b < 17) goto B_b;
  if (g >= a + b) goto B_c;
  if (e + b > a) goto B_b;
  label B_c:
  h = f & -16;
  i = h;
  j = g;
  k = a;
  loop L_d {
    j[0]:simd@1 = (k + 1)[0]:simd@1 i8x16_sub k[0];
    j = j + 16;
    k = k + 16;
    i = i + -16;
    if (i) continue L_d;
  }
  if (f == h) goto B_a;
  label B_b:
  j = b + -2;
  k = h;
  if (b & 1) goto B_e;
  (g + h)[0]:byte = (a + 1 + h)[0]:ubyte - (a + h)[0]:ubyte;
  k = h | 1;
  label B_e:
  if (j == h) goto B_a;
  j = a;
  i = e;
  g = f;
  loop L_f {
    l = i + k;
    (l + 1)[0]:byte = (m = (h = j + k) + 1)[0] - h[0];
    (l + 2)[0]:byte = (h + 2)[0]:ubyte - m[0];
    j = j + 2;
    i = i + 2;
    if (k != (g = g + -2)) continue L_f;
  }
  label B_a:
  if (c < 2) goto B_g;
  var n:int = b + -1;
  var o:int = b & 1;
  var p:int = f & -16;
  var q:int = b + -2;
  var r:int = d + b;
  var s:int = d + 1;
  var t:int = 0;
  var u:int = b < 2;
  var v:int = b < 17;
  b = a;
  var w:int = 1;
  var x:byte_ptr = e;
  loop L_h {
    m = x;
    x = m + d;
    x[0] = (b = (l = b) + d)[0] - l[0];
    if (u) goto B_i;
    k = 0;
    if (v) goto B_j;
    if (e + s + (j = t * d) >= a + (i = r + j)) goto B_k;
    if (a + j + d < e + i) goto B_j;
    label B_k:
    j = p;
    k = d;
    loop L_l {
      (m + k + 1)[0]:simd@1 = ((i = l + k) + 1)[0]:simd@1 i8x16_sub i[0];
      k = k + 16;
      j = j + -16;
      if (j) continue L_l;
    }
    k = p;
    if (f == p) goto B_i;
    label B_j:
    j = k;
    if (o) goto B_m;
    (x + 1 + k)[0]:byte = (b + 1 + k)[0]:ubyte - (b + k)[0]:ubyte;
    j = k | 1;
    label B_m:
    if (q == k) goto B_i;
    k = d + j;
    i = n - j;
    loop L_n {
      h = m + k;
      (h + 1)[0]:byte = (g = (j = l + k) + 1)[0] - j[0]:ubyte;
      (h + 2)[0]:byte = (j + 2)[0]:ubyte - g[0];
      k = k + 2;
      i = i + -2;
      if (i) continue L_n;
    }
    label B_i:
    t = t + 1;
    w = w + 1;
    if (w != c) continue L_h;
  }
  label B_g:
}

function VP8LPredictor0_C(a:int, b:int):int {
  return -16777216
}

function VP8LPredictor1_C(a:int_ptr, b:int):int {
  return a[0]
}

function VP8LPredictor2_C(a:int, b:int_ptr):int {
  return b[0]
}

function VP8LPredictor3_C(a:int, b:int_ptr):int {
  return b[1]
}

function VP8LPredictor4_C(a:int, b:int):int {
  return (b + -4)[0]:int
}

function VP8LPredictor5_C(a:int_ptr, b:{ a:int, b:int }):int {
  var c:int = b.b;
  a = ((c ^ (a = a[0])) >> 1 & 2139062143) + (c & a);
  return ((a ^ (b = b.a)) >> 1 & 2139062143) + (a & b);
}

function VP8LPredictor6_C(a:int_ptr, b:int):int {
  b = (b + -4)[0]:int;
  return ((b ^ (a = a[0])) >> 1 & 2139062143) + (b & a);
}

function VP8LPredictor7_C(a:int_ptr, b:int_ptr):int {
  b = b[0];
  return ((b ^ (a = a[0])) >> 1 & 2139062143) + (b & a);
}

function VP8LPredictor8_C(a:int, b:int_ptr):int {
  var c:int = b[0];
  return ((c ^ (b = (b + -4)[0]:int)) >> 1 & 2139062143) + (c & b);
}

function VP8LPredictor9_C(a:int, b:{ a:int, b:int }):int {
  var c:int = b.b;
  return ((c ^ (b = b.a)) >> 1 & 2139062143) + (c & b);
}

function VP8LPredictor10_C(a:int_ptr, b:{ a:int, b:int }):int {
  var d:int;
  var c:int = b.b;
  c = ((c ^ (d = b.a)) >> 1 & 2139062143) + (c & d);
  return 
    ((c ^
      (b = 
         (((b = (b + -4)[0]:int) ^ (a = a[0])) >> 1 & 2139062143) + (b & a))) >>
     1 &
     2139062143) +
    (c & b);
}

function VP8LPredictor11_C(a:int_ptr, b:int_ptr):int {
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var c:int = b[0];
  return 
    select_if(
      c,
      a = a[0],
      ((e = (a & 255) - (d = (b = (b + -4)[0]:int) & 255)) ^ (e = e >> 31)) -
      e +
      ((f = (a >> 24) - (e = b >> 24)) ^ (f = f >> 31)) - f +
      ((g = (a >> 8 & 255) - (f = b >> 8 & 255)) ^ (g = g >> 31)) - g -
      ((e = (c >> 24) - e) ^ (e = e >> 31)) - e +
      ((d = (c & 255) - d) ^ (d = d >> 31)) - d +
      ((d = (c >> 8 & 255) - f) ^ (d = d >> 31)) - d +
      ((b = (c >> 16 & 255) - (c = b >> 16 & 255)) ^ (b = b >> 31)) - b +
      ((c = (a >> 16 & 255) - c) ^ (c = c >> 31)) - c <
      1);
}

function VP8LPredictor12_C(a:int_ptr, b:int_ptr):int {
  var c:int = b[0];
  var d:int = 
    (c >> 24) + ((a = a[0]) >> 24) - ((b = (b + -4)[0]:int) >> 24);
  return 
    ((select_if(d, (d ^ -1) >> 24, d < 256) << 24 |
      select_if(d = (c & 255) + (a & 255) - (b & 255), (d ^ -1) >> 24, d < 256)) |
     select_if(d = (c >> 16 & 255) + (a >> 16 & 255) - (b >> 16 & 255),
               (d ^ -1) >> 24,
               d < 256) <<
     16) |
    select_if(c = (c >> 8 & 255) + (a >> 8 & 255) - (b >> 8 & 255),
              (c ^ -1) >> 24,
              c < 256) <<
    8;
}

function VP8LPredictor13_C(a:int_ptr, b:int_ptr):int {
  var c:int = b[0];
  a = ((c ^ (a = a[0])) >> 1 & 2139062143) + (c & a);
  c = a >> 24;
  c = c + i32_extend16_s((c - ((b = (b + -4)[0]:int) >> 24)) / 2);
  return 
    ((select_if(c, (c ^ -1) >> 24, c < 256) << 24 |
      select_if(c = (c = a & 255) + i32_extend16_s((c - (b & 255)) / 2),
                (c ^ -1) >> 24,
                c < 256)) |
     select_if(
       c = (c = a >> 16 & 255) + i32_extend16_s((c - (b >> 16 & 255)) / 2),
       (c ^ -1) >> 24,
       c < 256) <<
     16) |
    select_if(
      a = (a = a >> 8 & 255) + i32_extend16_s((a - (b >> 8 & 255)) / 2),
      (a ^ -1) >> 24,
      a < 256) <<
    8;
}

function VP8LAddGreenToBlueAndRed_C(a:int, b:int, c:int) {
  var h:simd;
  var i:simd;
  var j:simd;
  var g:int;
  var e:int;
  var f:int;
  if (b < 1) goto B_a;
  var d:int = 0;
  if (b < 4) goto B_b;
  if (c - a < 16) goto B_b;
  d = b & -4;
  e = d;
  f = c;
  g = a;
  loop L_c {
    f[0]:simd@4 =
      (((((i = (h = g[0]:simd@4) i32x4_shr_u 8) v128_and V128) i32x4_add
         (h v128_and (j = V128))) i32x4_add
        (i i32x4_shl 16)) v128_and
       j) v128_or
      (h v128_and V128);
    f = f + 16;
    g = g + 16;
    e = e + -4;
    if (e) continue L_c;
  }
  if (d == b) goto B_a;
  label B_b:
  f = d ^ -1;
  if (eqz(b & 1)) goto B_d;
  (c + (g = d << 2))[0]:int =
    (((e = (g = (a + g)[0]:int) >> 8) & 255) + (g & 16711935) + (e << 16) &
     16711935) |
    (g & -16711936);
  d = d | 1;
  label B_d:
  if (f == 0 - b) goto B_a;
  b = b - d;
  f = a + (g = d << 2);
  g = c + g;
  loop L_e {
    g[0]:int =
      (((d = (e = f[0]:int) >> 8) & 255) + (e & 16711935) + (d << 16) &
       16711935) |
      (e & -16711936);
    (g + 4)[0]:int =
      (((d = (e = (f + 4)[0]:int) >> 8) & 255) + (e & 16711935) + (d << 16) &
       16711935) |
      (e & -16711936);
    f = f + 8;
    g = g + 8;
    b = b + -2;
    if (b) continue L_e;
  }
  label B_a:
}

function VP8LTransformColorInverse_C(a:int, b:int, c:int, d:int) {
  var n:simd;
  var o:simd;
  var p:simd;
  var l:int_ptr;
  var m:int;
  if (c < 1) goto B_a;
  var e:int = a[2]:byte;
  var f:int = a[1]:byte;
  var g:int = a[0]:byte;
  var h:int = 0;
  if (c < 4) goto B_b;
  if (d - b < 16) goto B_b;
  var i:simd = i32x4_splat(e);
  var j:simd = i32x4_splat(f);
  var k:simd = i32x4_splat(g);
  h = c & -4;
  l = h;
  a = d;
  m = b;
  loop L_c {
    a[0]:simd@4 =
      ((((p = 
            (((o = ((n = m[0]:simd@4) i32x4_shl 16) i32x4_shr_s 24) i32x4_mul k) i32x4_shr_s
             5) i32x4_add
            (n i32x4_shr_u 16)) i32x4_shl
         16) v128_and
        V128) v128_or
       (n v128_and V128)) v128_or
      (((((o i32x4_mul j) i32x4_shr_u 5) i32x4_add n) i32x4_add
        ((((p i32x4_shl 24) i32x4_shr_s 24) i32x4_mul i) i32x4_shr_u 5)) v128_and
       V128);
    a = a + 16;
    m = m + 16;
    l = l + -4;
    if (l) continue L_c;
  }
  if (h == c) goto B_a;
  label B_b:
  c = c - h;
  m = b + (a = h << 2);
  l = d + a;
  loop L_d {
    l[0] =
      (((b = ((d = ((a = m[0]:int) << 16) >> 24) * g >> 5) + (a >> 16)) << 16 &
        16711680) |
       (a & -16711936)) |
      ((d * f >> 5) + a + (i32_extend8_s(b) * e >> 5) & 255);
    m = m + 4;
    l = l + 4;
    c = c + -1;
    if (c) continue L_d;
  }
  label B_a:
}

function VP8LColorIndexInverseTransformAlpha(a:int_ptr, b:int, c:int, d:ubyte_ptr, e:byte_ptr) {
  var h:int;
  var p:int;
  var f:int = a[4];
  var g:int = a[2];
  a = a[1];
  if (eqz(a)) goto B_b;
  if (b >= c) goto B_a;
  var i:int = -1 << (h = 8 >> a) ^ -1;
  var j:int = -1 << a ^ -1;
  var k:int = g & -2;
  var l:int = g & 1;
  loop L_c {
    if (g < 1) goto B_d;
    var m:int = 0;
    if (g != 1) goto B_f;
    a = 0;
    goto B_e;
    label B_f:
    var n:ubyte_ptr = 0;
    a = 0;
    loop L_g {
      m = n;
      if (eqz(m & j)) goto B_i;
      n = d;
      goto B_h;
      label B_i:
      n = d + 1;
      a = d[0];
      label B_h:
      var o:byte_ptr = e + m;
      o[0] = f[a & i]:int >> 8;
      p = m + 1;
      if (eqz(p & j)) goto B_k;
      a = a >> h;
      d = n;
      goto B_j;
      label B_k:
      d = n + 1;
      a = n[0];
      label B_j:
      (o + 1)[0]:byte = f[a & i]:int >> 8;
      a = a >> h;
      n = p + 1;
      if (n != k) continue L_g;
    }
    e = e + (m = m + 2);
    label B_e:
    if (eqz(l)) goto B_d;
    if (m & j) goto B_l;
    a = d[0];
    d = d + 1;
    label B_l:
    e[0] = f[a & i]:int >> 8;
    e = e + 1;
    label B_d:
    b = b + 1;
    if (b != c) continue L_c;
    goto B_a;
  }
  label B_b:
  call_indirect(d, f, e, b, c, g, 0[264988]:int);
  label B_a:
}

function VP8LInverseTransform(a:{ a:int, b:int, c:int, d:int, e:int }, b:int, c:int, d:int, e:int_ptr) {
  var j:ubyte_ptr;
  var h:int_ptr;
  var n:int_ptr;
  var i:int;
  var l:int;
  var s:int;
  var t:int;
  var o:int;
  var p:int;
  var m:int;
  var k:int;
  var u:int;
  var r:int;
  var q:int;
  var f:int = stack_pointer - 16;
  stack_pointer = f;
  var g:int = a.c;
  br_table[B_d, B_c, B_e, B_b, ..B_a](a.a)
  label B_e:
  call_indirect(d, g * (c - b), e, 0[264989]:int);
  goto B_a;
  label B_d:
  if (eqz(b)) goto B_g;
  h = e;
  i = b;
  goto B_f;
  label B_g:
  e[0] = (j = d[0]:int + -16777216);
  if (g < 2) goto B_h;
  k = g + -1;
  l = k & 1;
  m = 0;
  if (g == 2) goto B_i;
  n = e + 8;
  o = d + 8;
  p = k & -2;
  m = 0;
  loop L_j {
    (n + -4)[0]:int =
      (h = ((k = (o + -4)[0]:int) & -16711936) + (j & -16711936) & -16711936) |
      (j = (k & 16711935) + (j & 16711935) & 16711935);
    n[0] =
      (j = (((k = o[0]:int) & -16711936) + h & -16711936) |
           ((k & 16711935) + j & 16711935));
    n = n + 8;
    o = o + 8;
    if (p != (m = m + 2)) continue L_j;
  }
  label B_i:
  if (eqz(l)) goto B_h;
  (e + 4 + (n = m << 2))[0]:int =
    (((n = (d + 4 + n)[0]:int) & -16711936) + (j & -16711936) & -16711936) |
    ((n & 16711935) + (j & 16711935) & 16711935);
  label B_h:
  h = e + (n = g << 2);
  d = d + n;
  i = 1;
  label B_f:
  if (i >= c) goto B_k;
  q = 0 - (l = 1 << (n = a.b));
  r = 0 - g;
  u = a.e + ((t = (s = l + -1) + g >> n) * (i >> n) << 2);
  loop L_l {
    h[0] =
      (((n = d[0]:int) & -16711936) +
       ((o = (h + (p = r << 2))[0]:int) & -16711936) &
       -16711936) |
      ((n & 16711935) + (o & 16711935) & 16711935);
    if (g < 2) goto B_m;
    n = 1;
    o = u;
    loop L_n {
      call_indirect(d + (j = n << 2),
                    (m = h + j) + p,
                    (k = select_if(j = (n & q) + l, g, j < g)) - n,
                    m,
                    (((o[0]:int >> 6 & 60) + 1056612)[0]:int)[0]:int);
      o = o + 4;
      n = k;
      if (g > j) continue L_n;
    }
    label B_m:
    h = h + (n = g << 2);
    d = d + n;
    u = u + (select_if(0, t, (i = i + 1) & s) << 2);
    if (i != c) continue L_l;
  }
  label B_k:
  if (a.d == c) goto B_a;
  memcpy(e - (d = g << 2), e + (g * ((b ^ -1) + c) << 2), d);
  goto B_a;
  label B_c:
  if (c <= b) goto B_a;
  r = g - (s = g & 0 - (k = 1 << (n = a.b)));
  h = k << 2;
  p = a.e + ((i = (q = k + -1) + g >> n) * (b >> n) << 2);
  u = s < 1;
  loop L_o {
    (f + 12 + 2)[0]:byte = 0;
    f[6]:short = 0;
    l = d + (g << 2);
    if (eqz(u)) goto B_q;
    o = p;
    j = d;
    goto B_p;
    label B_q:
    m = d + (s << 2);
    n = 0;
    o = p;
    loop L_r {
      f[12]:byte = (j = o[0]:int);
      f[14]:byte = j >> 16;
      f[13]:byte = j >> 8;
      call_indirect(f + 12, d + n, k, e + n, 0[265044]:int);
      o = o + 4;
      j = d + (n = n + h);
      if (j < m) continue L_r;
    }
    e = e + n;
    label B_p:
    if (j < l) goto B_t;
    d = j;
    goto B_s;
    label B_t:
    f[12]:byte = (d = o[0]:int);
    f[14]:byte = d >> 16;
    f[13]:byte = d >> 8;
    call_indirect(f + 12, j, r, e, 0[265044]:int);
    e = e + (d = r << 2);
    d = j + d;
    label B_s:
    p = p + (select_if(0, i, (b = b + 1) & q) << 2);
    if (b != c) continue L_o;
    goto B_a;
  }
  label B_b:
  n = a.b;
  if (d != e) goto B_u;
  if (n < 1) goto B_u;
  o = 
    d + (g * (o = c - b) << 2) - (n = (g + (1 << n) + -1 >> n) * o << 2);
  j = memmove(o, d, n);
  g = a.e;
  q = a.c;
  n = a.b;
  if (eqz(n)) goto B_v;
  if (c <= b) goto B_a;
  e = -1 << (p = 8 >> n) ^ -1;
  m = -1 << n ^ -1;
  l = q & -2;
  i = q & 1;
  loop L_w {
    if (q < 1) goto B_x;
    j = 0;
    if (q != 1) goto B_z;
    n = 0;
    goto B_y;
    label B_z:
    j = 0;
    n = 0;
    loop L_aa {
      k = j;
      if (eqz(k & m)) goto B_ca;
      j = o;
      goto B_ba;
      label B_ca:
      j = o + 4;
      n = o[1]:ubyte;
      label B_ba:
      d[0]:int = g[n & e]:int;
      h = k + 1;
      if (eqz(h & m)) goto B_ea;
      n = n >> p;
      o = j;
      goto B_da;
      label B_ea:
      o = j + 4;
      n = j[1];
      label B_da:
      (d + 4)[0]:int = g[n & e]:int;
      d = d + 8;
      n = n >> p;
      j = h + 1;
      if (j != l) continue L_aa;
    }
    j = k + 2;
    label B_y:
    if (eqz(i)) goto B_x;
    if (j & m) goto B_fa;
    n = o[1]:ubyte;
    o = o + 4;
    label B_fa:
    d[0]:int = g[n & e]:int;
    d = d + 4;
    label B_x:
    b = b + 1;
    if (b != c) continue L_w;
    goto B_a;
  }
  label B_v:
  call_indirect(j, g, d, b, c, q, 0[265045]:int);
  goto B_a;
  label B_u:
  j = a.e;
  if (eqz(n)) goto B_ga;
  if (c <= b) goto B_a;
  m = -1 << (l = 8 >> n) ^ -1;
  k = -1 << n ^ -1;
  q = g & -2;
  i = g & 1;
  loop L_ha {
    if (g < 1) goto B_ia;
    o = 0;
    if (g != 1) goto B_ka;
    n = 0;
    goto B_ja;
    label B_ka:
    o = 0;
    n = 0;
    loop L_la {
      h = o;
      if (eqz(h & k)) goto B_na;
      o = d;
      goto B_ma;
      label B_na:
      o = d + 4;
      n = d[1]:ubyte;
      label B_ma:
      e[0] = j[n & m]:int;
      p = h + 1;
      if (eqz(p & k)) goto B_pa;
      n = n >> l;
      d = o;
      goto B_oa;
      label B_pa:
      d = o + 4;
      n = o[1]:ubyte;
      label B_oa:
      (e + 4)[0]:int = j[n & m]:int;
      e = e + 8;
      n = n >> l;
      o = p + 1;
      if (o != q) continue L_la;
    }
    o = h + 2;
    label B_ja:
    if (eqz(i)) goto B_ia;
    if (o & k) goto B_qa;
    n = d[1]:ubyte;
    d = d + 4;
    label B_qa:
    e[0] = j[n & m]:int;
    e = e + 4;
    label B_ia:
    b = b + 1;
    if (b != c) continue L_ha;
    goto B_a;
  }
  label B_ga:
  call_indirect(d, j, e, b, c, g, 0[265045]:int);
  label B_a:
  stack_pointer = f + 16;
}

function VP8LConvertBGRAToRGB_C(a:int_ptr, b:int, c:{ a:byte, b:byte, c:byte }) {
  if (b < 1) goto B_a;
  var d:int = a + (b << 2);
  loop L_b {
    c.c = (b = a[0]);
    c.b = b >> 8;
    c.a = b >> 16;
    c = c + 3;
    a = a + 4;
    if (a < d) continue L_b;
  }
  label B_a:
}

function VP8LConvertBGRAToRGBA_C(a:int_ptr, b:int, c:{ a:byte, b:byte, c:byte, d:byte }) {
  if (b < 1) goto B_a;
  var d:int = a + (b << 2);
  loop L_b {
    c.c = (b = a[0]);
    c.d = b >> 24;
    c.b = b >> 8;
    c.a = b >> 16;
    c = c + 4;
    a = a + 4;
    if (a < d) continue L_b;
  }
  label B_a:
}

function VP8LConvertBGRAToRGBA4444_C(a:simd_ptr@4, b:{ a:byte, b:byte }, c:byte_ptr) {
  var e:int_ptr;
  var f:int;
  var h:int;
  var i:simd;
  var j:simd;
  var k:simd;
  var d:int;
  if (b < 1) goto B_a;
  d = a + (b << 2);
  var g:int = select_if(d, e = a + 4, d > e) + (f = a ^ -1);
  if (g < 44) goto B_c;
  if (
    e + ((b = select_if(b = (b << 2) + a, e, b > e) + f) & -4) <= c) goto B_d;
  if ((b >> 1 & 2147483646) + c + 2 > a) goto B_c;
  label B_d:
  b = c + ((g = (h = (g >> 2) + 1) & 2147483644) << 1);
  e = a + (g << 2);
  f = g;
  loop L_e {
    (c + 7)[0]:byte =
      SimdLaneOp(
        k = ((i = a[0]) v128_and (j = V128)) v128_or (i i32x4_shr_u 28));
    (c + 5)[0]:byte = SimdLaneOp(k);
    (c + 3)[0]:byte = SimdLaneOp(k);
    (c + 1)[0]:byte = SimdLaneOp(k);
    (c + 6)[0]:byte =
      SimdLaneOp(i = ((i i32x4_shr_u 16) v128_and j) v128_or
                     ((i i32x4_shr_u 12) v128_and V128));
    (c + 4)[0]:byte = SimdLaneOp(i);
    (c + 2)[0]:byte = SimdLaneOp(i);
    c[0] = SimdLaneOp(i);
    a = a + 16;
    c = c + 8;
    f = f + -4;
    if (f) continue L_e;
  }
  if (h == g) goto B_a;
  goto B_b;
  label B_c:
  e = a;
  b = c;
  label B_b:
  loop L_f {
    b.b = ((c = e[0]) & 240) | c >> 28;
    b.a = (c >> 16 & 240) | (c >> 12 & 15);
    b = b + 2;
    e = e + 4;
    if (e < d) continue L_f;
  }
  label B_a:
}

function VP8LConvertBGRAToRGB565_C(a:simd_ptr@4, b:{ a:byte, b:byte }, c:byte_ptr) {
  var e:int_ptr;
  var f:int;
  var h:int;
  var i:simd;
  var j:simd;
  var d:int;
  if (b < 1) goto B_a;
  d = a + (b << 2);
  var g:int = select_if(d, e = a + 4, d > e) + (f = a ^ -1);
  if (g < 44) goto B_c;
  if (
    e + ((b = select_if(b = (b << 2) + a, e, b > e) + f) & -4) <= c) goto B_d;
  if ((b >> 1 & 2147483646) + c + 2 > a) goto B_c;
  label B_d:
  b = c + ((g = (h = (g >> 2) + 1) & 2147483644) << 1);
  e = a + (g << 2);
  f = g;
  loop L_e {
    (c + 6)[0]:byte =
      SimdLaneOp(j = (((i = a[0]) i32x4_shr_u 16) v128_and V128) v128_or
                     ((i i32x4_shr_u 13) v128_and V128));
    (c + 4)[0]:byte = SimdLaneOp(j);
    (c + 2)[0]:byte = SimdLaneOp(j);
    c[0] = SimdLaneOp(j);
    (c + 7)[0]:byte =
      SimdLaneOp(i = ((i i32x4_shr_u 5) v128_and V128) v128_or
                     ((i i32x4_shr_u 3) v128_and V128));
    (c + 5)[0]:byte = SimdLaneOp(i);
    (c + 3)[0]:byte = SimdLaneOp(i);
    (c + 1)[0]:byte = SimdLaneOp(i);
    a = a + 16;
    c = c + 8;
    f = f + -4;
    if (f) continue L_e;
  }
  if (h == g) goto B_a;
  goto B_b;
  label B_c:
  e = a;
  b = c;
  label B_b:
  loop L_f {
    b.b = ((c = e[0]) >> 5 & 224) | (c >> 3 & 31);
    b.a = (c >> 16 & 248) | (c >> 13 & 7);
    b = b + 2;
    e = e + 4;
    if (e < d) continue L_f;
  }
  label B_a:
}

function VP8LConvertBGRAToBGR_C(a:int_ptr, b:int, c:{ a:byte, b:byte, c:byte }) {
  if (b < 1) goto B_a;
  var d:int = a + (b << 2);
  loop L_b {
    c.a = (b = a[0]);
    c.c = b >> 16;
    c.b = b >> 8;
    c = c + 3;
    a = a + 4;
    if (a < d) continue L_b;
  }
  label B_a:
}

function VP8LConvertFromBGRA(a:simd_ptr@4, b:int, c:int_ptr, d:simd_ptr@1) {
  var e:int;
  var f:int;
  var i:simd;
  var j:int;
  var k:int;
  var h:simd_ptr@1;
  var g:int_ptr@1;
  br_table[B_q, B_p, B_n, B_m, B_k, B_i, B_g, B_o, B_l, B_j, B_h, ..B_a](
    c)
  label B_q:
  call_indirect(a, b, d, 0[264990]:int);
  return ;
  label B_p:
  call_indirect(a, b, d, 0[264991]:int);
  return ;
  label B_o:
  call_indirect(a, b, d, 0[264991]:int);
  call_indirect(d, 0, b, 1, 0, 0[264920]:int);
  return ;
  label B_n:
  call_indirect(a, b, d, 0[264992]:int);
  return ;
  label B_m:
  memcpy(d, a, b << 2);
  return ;
  label B_l:
  call_indirect(memcpy(d, a, b << 2), 0, b, 1, 0, 0[264920]:int);
  return ;
  label B_k:
  if (b < 1) goto B_a;
  b = a + (b << 2);
  c = select_if(b, c = a + 4, b > c) + (a ^ -1);
  if (c < 12) goto B_c;
  if (d - a < 16) goto B_c;
  g = d + (c = (f = (e = (c >> 2) + 1) & 2147483644) << 2);
  c = a + c;
  h = f;
  loop L_r {
    d[0] = SimdShuffleOp(a[0], i);
    a = a + 16;
    d = d + 16;
    h = h + -4;
    if (h) continue L_r;
  }
  if (e == f) goto B_a;
  goto B_b;
  label B_j:
  if (b < 1) goto B_d;
  e = a + (b << 2);
  c = select_if(e, c = a + 4, e > c) + (a ^ -1);
  if (c < 12) goto B_f;
  if (d - a < 16) goto B_f;
  g = d + (c = (k = (j = (c >> 2) + 1) & 2147483644) << 2);
  c = a + c;
  f = k;
  h = d;
  loop L_s {
    h[0] = SimdShuffleOp(a[0], i);
    a = a + 16;
    h = h + 16;
    f = f + -4;
    if (f) continue L_s;
  }
  if (j == k) goto B_d;
  goto B_e;
  label B_i:
  call_indirect(a, b, d, 0[264993]:int);
  return ;
  label B_h:
  call_indirect(a, b, d, 0[264993]:int);
  call_indirect(d, b, 1, 0, 0[264921]:int);
  return ;
  label B_g:
  call_indirect(a, b, d, 0[264994]:int);
  goto B_a;
  label B_f:
  c = a;
  g = d;
  label B_e:
  loop L_t {
    g[0] =
      ((a = c[0]) << 24 | (a & 65280) << 8) | ((a >> 8 & 65280) | a >> 24);
    g = g + 4;
    c = c + 4;
    if (c < e) continue L_t;
  }
  label B_d:
  call_indirect(d, 1, b, 1, 0, 0[264920]:int);
  return ;
  label B_c:
  c = a;
  g = d;
  label B_b:
  loop L_u {
    g[0] =
      ((a = c[0]) << 24 | (a & 65280) << 8) | ((a >> 8 & 65280) | a >> 24);
    g = g + 4;
    c = c + 4;
    if (c < b) continue L_u;
  }
  label B_a:
}

function VP8LDspInit() {
  var a:int = data[2]:int;
  if (a == data[5]:int) goto B_a;
  0[265027]:int = 84;
  0[265026]:int = 84;
  0[265025]:int = 85;
  0[265024]:int = 86;
  0[265023]:int = 87;
  0[265022]:int = 88;
  0[265021]:int = 89;
  0[265020]:int = 90;
  0[265019]:int = 91;
  0[265018]:int = 92;
  0[265017]:int = 93;
  0[265016]:int = 94;
  0[265015]:int = 95;
  0[265014]:int = 96;
  0[265013]:int = 97;
  0[265012]:int = 84;
  0[265011]:int = 98;
  0[265010]:int = 98;
  0[265009]:int = 99;
  0[265008]:int = 100;
  0[265007]:int = 101;
  0[265006]:int = 102;
  0[265005]:int = 103;
  0[265004]:int = 104;
  0[265003]:int = 105;
  0[265002]:int = 106;
  0[265001]:int = 107;
  0[265000]:int = 108;
  0[264999]:int = 109;
  0[264998]:int = 110;
  0[264997]:int = 111;
  0[264996]:int = 98;
  0[265043]:int = 98;
  0[265042]:int = 98;
  0[265041]:int = 99;
  0[265040]:int = 100;
  0[265039]:int = 101;
  0[265038]:int = 102;
  0[265037]:int = 103;
  0[265036]:int = 104;
  0[265035]:int = 105;
  0[265034]:int = 106;
  0[265033]:int = 107;
  0[265032]:int = 108;
  0[265031]:int = 109;
  0[265030]:int = 110;
  0[265029]:int = 111;
  0[265028]:int = 98;
  0[264989]:int = 112;
  0[265044]:int = 113;
  0[264991]:int = 114;
  0[264992]:int = 115;
  0[264990]:int = 116;
  0[264993]:int = 117;
  0[264994]:int = 118;
  0[265045]:int = 119;
  0[264988]:int = 120;
  if (eqz(a)) goto B_b;
  if (eqz(call_indirect(0, a))) goto B_b;
  VP8LDspInitSSE2();
  if (eqz(call_indirect(3, data[2]:int))) goto B_b;
  VP8LDspInitSSE41();
  label B_b:
  data[5]:int = data[2]:int;
  label B_a:
}

function PredictorAdd0_C(a:int, b:int, c:int, d:int) {
  var h:int;
  var g:int;
  var f:int;
  if (c < 1) goto B_a;
  var e:int = 0;
  if (c < 4) goto B_b;
  if (d - a < 16) goto B_b;
  e = c & -4;
  f = e;
  g = d;
  h = a;
  loop L_c {
    g[0]:simd@4 = h[0]:simd@4 i32x4_add V128;
    g = g + 16;
    h = h + 16;
    f = f + -4;
    if (f) continue L_c;
  }
  if (e == c) goto B_a;
  label B_b:
  g = e ^ -1;
  if (eqz(c & 1)) goto B_d;
  (d + (h = e << 2))[0]:int = (a + h)[0]:int + -16777216;
  e = e | 1;
  label B_d:
  if (g == 0 - c) goto B_a;
  f = c - e;
  g = a + (h = e << 2);
  h = d + h;
  loop L_e {
    h[0]:int = g[0]:int + -16777216;
    (h + 4)[0]:int = (g + 4)[0]:int + -16777216;
    g = g + 8;
    h = h + 8;
    f = f + -2;
    if (f) continue L_e;
  }
  label B_a:
}

function PredictorAdd13_C(a:int_ptr, b:int, c:int, d:int_ptr) {
  var f:int_ptr;
  var g:int;
  if (c < 1) goto B_a;
  var e:int_ptr = b + -4;
  b = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (b = 
         (((b = 
              ((select_if(
                  g = 
                    (g = 
                       (b = (((g = (f = e + 4)[0]) ^ b) >> 1 & 2139062143) + (g & b)) >> 24) +
                    i32_extend16_s((g - ((e = e[0]) >> 24)) / 2),
                  (g ^ -1) >> 24,
                  g < 256) <<
                24 |
                select_if(g = (g = b & 255) + i32_extend16_s((g - (e & 255)) / 2),
                          (g ^ -1) >> 24,
                          g < 256)) |
               select_if(
                 g = (g = b >> 16 & 255) + i32_extend16_s((g - (e >> 16 & 255)) / 2),
                 (g ^ -1) >> 24,
                 g < 256) <<
               16) |
              select_if(
                b = (b = b >> 8 & 255) + i32_extend16_s((b - (e >> 8 & 255)) / 2),
                (b ^ -1) >> 24,
                b < 256) <<
              8) &
           -16711936) +
          ((e = a[0]) & -16711936) &
          -16711936) |
         ((b & 16711935) + (e & 16711935) & 16711935));
    a = a + 4;
    d = d + 4;
    e = f;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd12_C(a:int_ptr, b:int, c:int, d:int_ptr) {
  var f:int_ptr;
  var g:int;
  var h:int;
  if (c < 1) goto B_a;
  var e:int_ptr = b + -4;
  b = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (b = 
         (((b = 
              ((select_if(
                  h = ((g = (f = e + 4)[0]) >> 24) + (b >> 24) - ((e = e[0]) >> 24),
                  (h ^ -1) >> 24,
                  h < 256) <<
                24 |
                select_if(h = (g & 255) + (b & 255) - (e & 255), (h ^ -1) >> 24, h < 256)) |
               select_if(h = (g >> 16 & 255) + (b >> 16 & 255) - (e >> 16 & 255),
                         (h ^ -1) >> 24,
                         h < 256) <<
               16) |
              select_if(b = (g >> 8 & 255) + (b >> 8 & 255) - (e >> 8 & 255),
                        (b ^ -1) >> 24,
                        b < 256) <<
              8) &
           -16711936) +
          ((g = a[0]) & -16711936) &
          -16711936) |
         ((b & 16711935) + (g & 16711935) & 16711935));
    a = a + 4;
    d = d + 4;
    e = f;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd11_C(a:int_ptr, b:int, c:int, d:int_ptr) {
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var k:int;
  if (c < 1) goto B_a;
  var e:int_ptr = b + -4;
  b = (d + -4)[0]:int;
  loop L_b {
    var f:int = e[0];
    d[0] =
      (b = 
         (((b = 
              select_if(
                g = (e = e + 4)[0],
                b,
                ((i = (b & 255) - (h = f & 255)) ^ (i = i >> 31)) - i +
                ((j = (b >> 24) - (i = f >> 24)) ^ (j = j >> 31)) - j +
                ((k = (b >> 8 & 255) - (j = f >> 8 & 255)) ^ (k = k >> 31)) - k -
                ((h = (g & 255) - h) ^ (h = h >> 31)) - h +
                ((h = (g >> 24) - i) ^ (h = h >> 31)) - h +
                ((h = (g >> 8 & 255) - j) ^ (h = h >> 31)) - h +
                ((g = (g >> 16 & 255) - (f = f >> 16 & 255)) ^ (g = g >> 31)) - g +
                ((f = (b >> 16 & 255) - f) ^ (f = f >> 31)) - f <
                1)) &
           -16711936) +
          ((f = a[0]) & -16711936) &
          -16711936) |
         ((b & 16711935) + (f & 16711935) & 16711935));
    a = a + 4;
    d = d + 4;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd10_C(a:int_ptr, b:int_ptr, c:int, d:int_ptr) {
  var f:int;
  var g:int_ptr;
  var h:int;
  if (c < 1) goto B_a;
  b = b + -4;
  var e:int = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (e = 
         (((b = 
              (((f = 
                   (((f = (b + 8)[0]:int) ^ (h = (g = b + 4)[0])) >> 1 & 2139062143) +
                   (f & h)) ^
                (b = (((b = b[0]) ^ e) >> 1 & 2139062143) + (b & e))) >>
               1 &
               2139062143) +
              (f & b)) &
           -16711936) +
          ((e = a[0]) & -16711936) &
          -16711936) |
         ((b & 16711935) + (e & 16711935) & 16711935));
    a = a + 4;
    d = d + 4;
    b = g;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd9_C(a:int, b:int, c:int_ptr, d:int) {
  var g:int;
  var j:simd;
  var k:simd;
  var l:simd;
  var i:int;
  var f:int;
  var h:int;
  if (c < 1) goto B_a;
  var e:int = 0;
  if (c < 8) goto B_b;
  f = c << 2;
  if (f + b + 4 > d & (g = d + f) > b) goto B_b;
  if (a + f > d & g > a) goto B_b;
  e = c & -4;
  h = e;
  g = d;
  i = a;
  f = b;
  loop L_c {
    g[0]:simd@4 =
      ((((k = 
            ((((j = (f + 4)[0]:simd@4) v128_xor (k = f[0]:simd@4)) i32x4_shr_u 1) v128_and
             V128) i32x4_add
            (j v128_and k)) v128_and
         (j = V128)) i32x4_add
        ((l = i[0]:simd@4) v128_and j)) v128_and
       j) v128_or
      (((k v128_and (j = V128)) i32x4_add (l v128_and j)) v128_and j);
    g = g + 16;
    i = i + 16;
    f = f + 16;
    h = h + -4;
    if (h) continue L_c;
  }
  if (e == c) goto B_a;
  label B_b:
  h = c - e;
  f = b + (i = e << 2);
  g = a + i;
  i = d + i;
  loop L_d {
    i[0]:int =
      (((f = 
           (((d = (c = f + 4)[0]) ^ (f = f[0]:int)) >> 1 & 2139062143) + (d & f)) &
        -16711936) +
       ((d = g[0]:int) & -16711936) &
       -16711936) |
      ((f & 16711935) + (d & 16711935) & 16711935);
    g = g + 4;
    i = i + 4;
    f = c;
    h = h + -1;
    if (h) continue L_d;
  }
  label B_a:
}

function PredictorAdd8_C(a:int, b:int, c:int_ptr, d:int) {
  var f:int;
  var g:int;
  var j:simd;
  var k:simd;
  var l:simd;
  var i:int;
  var h:int;
  if (c < 1) goto B_a;
  var e:int = 0;
  if (c < 8) goto B_b;
  if (b + (f = c << 2) > d & b + -4 < (g = d + f)) goto B_b;
  if (a + f > d & g > a) goto B_b;
  f = b + -4;
  e = c & -4;
  h = e;
  g = d;
  i = a;
  loop L_c {
    g[0]:simd@4 =
      ((((k = 
            ((((j = (f + 4)[0]:simd@4) v128_xor (k = f[0]:simd@4)) i32x4_shr_u 1) v128_and
             V128) i32x4_add
            (j v128_and k)) v128_and
         (j = V128)) i32x4_add
        ((l = i[0]:simd@4) v128_and j)) v128_and
       j) v128_or
      (((k v128_and (j = V128)) i32x4_add (l v128_and j)) v128_and j);
    g = g + 16;
    i = i + 16;
    f = f + 16;
    h = h + -4;
    if (h) continue L_c;
  }
  if (e == c) goto B_a;
  label B_b:
  h = c - e;
  f = a + (i = e << 2);
  g = d + i;
  i = i + b + -4;
  loop L_d {
    g[0]:int =
      (((i = 
           (((d = (c = i + 4)[0]) ^ (i = i[0]:int)) >> 1 & 2139062143) + (d & i)) &
        -16711936) +
       ((d = f[0]:int) & -16711936) &
       -16711936) |
      ((i & 16711935) + (d & 16711935) & 16711935);
    f = f + 4;
    g = g + 4;
    i = c;
    h = h + -1;
    if (h) continue L_d;
  }
  label B_a:
}

function PredictorAdd7_C(a:int_ptr, b:int_ptr, c:int, d:int_ptr) {
  var f:int;
  if (c < 1) goto B_a;
  var e:int = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (e = 
         (((e = (((f = b[0]) ^ e) >> 1 & 2139062143) + (f & e)) & -16711936) +
          ((f = a[0]) & -16711936) &
          -16711936) |
         ((e & 16711935) + (f & 16711935) & 16711935));
    b = b + 4;
    a = a + 4;
    d = d + 4;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd6_C(a:int_ptr, b:int_ptr, c:int, d:int_ptr) {
  var f:int;
  if (c < 1) goto B_a;
  b = b + -4;
  var e:int = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (e = 
         (((e = (((f = b[0]) ^ e) >> 1 & 2139062143) + (f & e)) & -16711936) +
          ((f = a[0]) & -16711936) &
          -16711936) |
         ((e & 16711935) + (f & 16711935) & 16711935));
    b = b + 4;
    a = a + 4;
    d = d + 4;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd5_C(a:int_ptr, b:int_ptr, c:int, d:int_ptr) {
  var f:int_ptr;
  var g:int;
  if (c < 1) goto B_a;
  var e:int = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (e = 
         (((b = 
              (((e = (((g = (f = b + 4)[0]) ^ e) >> 1 & 2139062143) + (g & e)) ^
                (b = b[0])) >>
               1 &
               2139062143) +
              (e & b)) &
           -16711936) +
          ((e = a[0]) & -16711936) &
          -16711936) |
         ((b & 16711935) + (e & 16711935) & 16711935));
    a = a + 4;
    d = d + 4;
    b = f;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd4_C(a:int, b:int, c:int, d:int) {
  var j:simd;
  var k:simd;
  var l:simd;
  var i:int;
  var h:int;
  var f:int;
  var g:int;
  if (c < 1) goto B_a;
  var e:int = 0;
  if (c < 4) goto B_b;
  if (d - b + 4 < 16) goto B_b;
  if (d - a < 16) goto B_b;
  f = b + -4;
  e = c & -4;
  g = e;
  h = d;
  i = a;
  loop L_c {
    h[0]:simd@4 =
      ((((j = i[0]:simd@4) v128_and (k = V128)) i32x4_add
        ((l = f[0]:simd@4) v128_and k)) v128_and
       k) v128_or
      (((j v128_and (k = V128)) i32x4_add (l v128_and k)) v128_and k);
    h = h + 16;
    i = i + 16;
    f = f + 16;
    g = g + -4;
    if (g) continue L_c;
  }
  if (e == c) goto B_a;
  label B_b:
  g = c - e;
  f = a + (i = e << 2);
  h = d + i;
  i = i + b + -4;
  loop L_d {
    h[0]:int =
      (((c = f[0]:int) & -16711936) + ((d = i[0]:int) & -16711936) &
       -16711936) |
      ((c & 16711935) + (d & 16711935) & 16711935);
    i = i + 4;
    f = f + 4;
    h = h + 4;
    g = g + -1;
    if (g) continue L_d;
  }
  label B_a:
}

function PredictorAdd3_C(a:int, b:int, c:int, d:int) {
  var j:simd;
  var k:simd;
  var l:simd;
  var i:int;
  var h:int;
  var f:int;
  var g:int;
  if (c < 1) goto B_a;
  var e:int = 0;
  if (c < 4) goto B_b;
  if (d - b + -4 < 16) goto B_b;
  if (d - a < 16) goto B_b;
  f = b + 4;
  e = c & -4;
  g = e;
  h = d;
  i = a;
  loop L_c {
    h[0]:simd@4 =
      ((((j = i[0]:simd@4) v128_and (k = V128)) i32x4_add
        ((l = f[0]:simd@4) v128_and k)) v128_and
       k) v128_or
      (((j v128_and (k = V128)) i32x4_add (l v128_and k)) v128_and k);
    h = h + 16;
    i = i + 16;
    f = f + 16;
    g = g + -4;
    if (g) continue L_c;
  }
  if (e == c) goto B_a;
  label B_b:
  g = c - e;
  f = a + (i = e << 2);
  h = d + i;
  i = i + b + 4;
  loop L_d {
    h[0]:int =
      (((c = f[0]:int) & -16711936) + ((d = i[0]:int) & -16711936) &
       -16711936) |
      ((c & 16711935) + (d & 16711935) & 16711935);
    i = i + 4;
    f = f + 4;
    h = h + 4;
    g = g + -1;
    if (g) continue L_d;
  }
  label B_a:
}

function PredictorAdd2_C(a:int, b:int, c:int, d:int) {
  var j:simd;
  var k:simd;
  var l:simd;
  var i:int;
  var h:int;
  var g:int;
  var f:int;
  if (c < 1) goto B_a;
  var e:int = 0;
  if (c < 4) goto B_b;
  if (d - b < 16) goto B_b;
  if (d - a < 16) goto B_b;
  e = c & -4;
  f = e;
  g = d;
  h = a;
  i = b;
  loop L_c {
    g[0]:simd@4 =
      ((((j = h[0]:simd@4) v128_and (k = V128)) i32x4_add
        ((l = i[0]:simd@4) v128_and k)) v128_and
       k) v128_or
      (((j v128_and (k = V128)) i32x4_add (l v128_and k)) v128_and k);
    g = g + 16;
    h = h + 16;
    i = i + 16;
    f = f + -4;
    if (f) continue L_c;
  }
  if (e == c) goto B_a;
  label B_b:
  f = c - e;
  g = b + (i = e << 2);
  h = a + i;
  i = d + i;
  loop L_d {
    i[0]:int =
      (((c = h[0]:int) & -16711936) + ((d = g[0]:int) & -16711936) &
       -16711936) |
      ((c & 16711935) + (d & 16711935) & 16711935);
    g = g + 4;
    h = h + 4;
    i = i + 4;
    f = f + -1;
    if (f) continue L_d;
  }
  label B_a:
}

function PredictorAdd1_C(a:int, b:int, c:int_ptr, d:int) {
  var j:int;
  var k:int;
  if (c < 1) goto B_a;
  var e:int = c & 1;
  var f:int = (d + -4)[0]:int;
  var g:int = 0;
  if (c == 1) goto B_b;
  var h:int = c & -2;
  g = 0;
  c = d;
  var i:int_ptr = a;
  loop L_c {
    c[0] =
      (k = ((j = i[0]) & -16711936) + (f & -16711936) & -16711936) |
      (f = (j & 16711935) + (f & 16711935) & 16711935);
    (c + 4)[0]:int =
      (f = (((j = (i + 4)[0]:int) & -16711936) + k & -16711936) |
           ((j & 16711935) + f & 16711935));
    c = c + 8;
    i = i + 8;
    if (h != (g = g + 2)) continue L_c;
  }
  label B_b:
  if (eqz(e)) goto B_a;
  (d + (c = g << 2))[0]:int =
    (((c = (a + c)[0]:int) & -16711936) + (f & -16711936) & -16711936) |
    ((c & 16711935) + (f & 16711935) & 16711935);
  label B_a:
}

function MapARGB_C(a:int_ptr, b:int, c:int_ptr, d:int, e:int, f:int) {
  if (d >= e) goto B_a;
  var g:int = f & -4;
  var h:int = f & 3;
  var i:int = f < 1;
  var j:int = f < 4;
  loop L_b {
    if (i) goto B_c;
    if (j) goto B_d;
    f = g;
    loop L_e {
      c[0] = (b + (a[0] >> 6 & 1020))[0]:int;
      (c + 4)[0]:int = (b + ((a + 4)[0]:int >> 6 & 1020))[0]:int;
      (c + 8)[0]:int = (b + ((a + 8)[0]:int >> 6 & 1020))[0]:int;
      (c + 12)[0]:int = (b + ((a + 12)[0]:int >> 6 & 1020))[0]:int;
      c = c + 16;
      a = a + 16;
      f = f + -4;
      if (f) continue L_e;
    }
    label B_d:
    if (eqz(h)) goto B_c;
    f = h;
    loop L_f {
      c[0] = (b + (a[0] >> 6 & 1020))[0]:int;
      c = c + 4;
      a = a + 4;
      f = f + -1;
      if (f) continue L_f;
    }
    label B_c:
    d = d + 1;
    if (d != e) continue L_b;
  }
  label B_a:
}

function MapAlpha_C(a:ubyte_ptr, b:int, c:byte_ptr, d:int, e:int, f:int) {
  if (d >= e) goto B_a;
  var g:int = f & -4;
  var h:int = f & 3;
  var i:int = f < 1;
  var j:int = f < 4;
  loop L_b {
    if (i) goto B_c;
    if (j) goto B_d;
    f = g;
    loop L_e {
      c[0] = b[a[0]]:int >> 8;
      (c + 1)[0]:byte = b[(a + 1)[0]:ubyte]:int >> 8;
      (c + 2)[0]:byte = b[(a + 2)[0]:ubyte]:int >> 8;
      (c + 3)[0]:byte = b[(a + 3)[0]:ubyte]:int >> 8;
      c = c + 4;
      a = a + 4;
      f = f + -4;
      if (f) continue L_e;
    }
    label B_d:
    if (eqz(h)) goto B_c;
    f = h;
    loop L_f {
      c[0] = b[a[0]]:int >> 8;
      c = c + 1;
      a = a + 1;
      f = f + -1;
      if (f) continue L_f;
    }
    label B_c:
    d = d + 1;
    if (d != e) continue L_b;
  }
  label B_a:
}

function WebPRescalerImportRowExpand_C(a:int_ptr, b:int) {
  var f:int;
  var l:int;
  var c:int = a[2];
  if (c < 1) goto B_a;
  var d:int = a[13] * c;
  var e:int = a[20];
  var g:int = e + (f = c << 2);
  var h:int = 0;
  loop L_b {
    var i:int = h + c;
    var j:int = (b + h)[0]:ubyte;
    var k:int = j;
    if (a[11] < 2) goto B_c;
    k = (b + i)[0]:ubyte;
    label B_c:
    e[h]:int = (l = a[9]) * j;
    if (i >= d) goto B_d;
    var m:int_ptr = g;
    var n:int = i;
    loop L_e {
      var o:int = a[9];
      l = l - a[10];
      if (l > -1) goto B_f;
      l = o + l;
      j = k;
      k = (b + (n = n + c))[0]:ubyte;
      label B_f:
      m[0] = o * k + (j - k) * l;
      m = m + f;
      i = i + c;
      if (i < d) continue L_e;
    }
    label B_d:
    g = g + 4;
    h = h + 1;
    if (h != c) continue L_b;
  }
  label B_a:
}

function WebPRescalerImportRowShrink_C(a:int, b:int) {
  var l:int;
  var m:int;
  var c:int = a[2]:int;
  if (c < 1) goto B_a;
  var d:int = a[13]:int * c;
  var e:int = 0;
  loop L_b {
    if (e >= d) goto B_c;
    var f:int = a[20]:int;
    var g:int = 0;
    var h:int = 0;
    var i:int = e;
    var j:int = e;
    loop L_d {
      var k:int = a[10]:int;
      g = a[9]:int + g;
      if (g >= 1) goto B_f;
      l = 0;
      goto B_e;
      label B_f:
      m = j;
      loop L_g {
        h = h + (l = (b + m)[0]:ubyte);
        j = m + c;
        m = j;
        g = g - k;
        if (g > 0) continue L_g;
      }
      label B_e:
      f[i]:int = k * h + (m = l * g);
      h = 
        i32_wrap_i64(a[3]:uint * i64_extend_i32_u(0 - m) + 2147483648L >> 32L);
      i = i + c;
      if (i < d) continue L_d;
    }
    label B_c:
    e = e + 1;
    if (e != c) continue L_b;
  }
  label B_a:
}

function WebPRescalerExportRowExpand_C(a:int) {
  var j:simd;
  var k:simd;
  var l:simd;
  var i:int;
  var e:int;
  var f:int;
  var g:uint_ptr;
  var q:simd;
  var r:simd;
  var h:simd;
  var s:simd;
  var b:int = a[2]:int * a[13]:int;
  var c:int = a[20]:int;
  var d:int = a[17]:int;
  e = a[6]:int;
  if (e) goto B_b;
  if (b < 1) goto B_a;
  f = a + 16;
  g = 0;
  if (b < 12) goto B_c;
  if (d < c + (b << 2) & c < (e = d + b)) goto B_c;
  if (d < a + 20 & f < e) goto B_c;
  h = i64x2_splat(f[0]:uint);
  g = b & -4;
  i = g;
  a = d;
  e = c;
  loop L_d {
    let t0 = 
      SimdStoreLane(
        a,
        v128_bitselect(
          V128,
          SimdShuffleOp(
            l = 
              ((h i64x2_mul i64x2_extend_low_i32x4_u(j = e[0]:simd@4)) i64x2_add
               (k = V128)) i64x2_shr_u
              32,
            j = 
              ((h i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(j, h))) i64x2_add
               k) i64x2_shr_u
              32),
          SimdShuffleOp(SimdShuffleOp(l, j) i32x4_gt_s V128, h)));
    a = a + 4;
    e = e + 16;
    if (i = i + -4) continue L_d;
    t0;
  }
  if (b == g) goto B_a;
  label B_c:
  a = g | 1;
  if (eqz(b & 1)) goto B_e;
  (d + g)[0]:byte =
    select_if(
      -1,
      e = i32_wrap_i64(f[0]:uint * c[g]:uint + 2147483648L >> 32L),
      e > 255);
  g = a;
  label B_e:
  if (b == a) goto B_a;
  a = d + g;
  i = b - g;
  e = c + (g << 2);
  loop L_f {
    a[0]:byte =
      select_if(
        -1,
        b = i32_wrap_i64(f[0]:uint * e[0]:uint + 2147483648L >> 32L),
        b > 255);
    (a + 1)[0]:byte =
      select_if(
        -1,
        b = i32_wrap_i64(f[0]:uint * (e + 4)[0]:uint + 2147483648L >> 32L),
        b > 255);
    e = e + 8;
    a = a + 2;
    i = i + -2;
    if (i) continue L_f;
    goto B_a;
  }
  label B_b:
  var m:int = 0;
  var n:long = (i64_extend_i32_u(0 - e) << 32L) / a[8]:int;
  if (b < 1) goto B_a;
  var o:int = a[19]:int;
  var p:long = n & 4294967295L;
  g = a + 16;
  n = 0L - n & 4294967295L;
  if (b < 12) goto B_g;
  if (d < c + (f = b << 2) & c < (e = d + b)) goto B_g;
  if (d < o + f & o < e) goto B_g;
  if (d < a + 20 & g < e) goto B_g;
  j = i64x2_splat(p);
  k = i64x2_splat(n);
  l = i64x2_splat(g[0]);
  m = b & -4;
  i = m;
  a = d;
  e = o;
  f = c;
  loop L_h {
    let t1 = 
      SimdStoreLane(
        a,
        v128_bitselect(
          V128,
          SimdShuffleOp(
            s = 
              ((((((k i64x2_mul i64x2_extend_low_i32x4_u(q = f[0]:simd@4)) i64x2_add
                   (j i64x2_mul i64x2_extend_low_i32x4_u(r = e[0]:simd@4))) i64x2_add
                  (h = V128)) i64x2_shr_u
                 32) i64x2_mul
                l) i64x2_add
               h) i64x2_shr_u
              32,
            h = 
              ((((((k i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(q, h))) i64x2_add
                   (j i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(r, h)))) i64x2_add
                  h) i64x2_shr_u
                 32) i64x2_mul
                l) i64x2_add
               h) i64x2_shr_u
              32),
          SimdShuffleOp(SimdShuffleOp(s, h) i32x4_gt_s V128, h)));
    a = a + 4;
    e = e + 16;
    f = f + 16;
    if (i = i + -4) continue L_h;
    t1;
  }
  if (b == m) goto B_a;
  label B_g:
  a = d + m;
  i = b - m;
  e = c + (f = m << 2);
  f = o + f;
  loop L_i {
    a[0]:byte =
      select_if(
        -1,
        b = i32_wrap_i64(
              (n * e[0]:uint + p * f[0]:uint + 2147483648L >> 32L) * g[0] +
              2147483648L >>
              32L),
        b > 255);
    e = e + 4;
    f = f + 4;
    a = a + 1;
    i = i + -1;
    if (i) continue L_i;
  }
  label B_a:
}

function WebPRescalerExportRowShrink_C(a:int) {
  var j:int;
  var k:int;
  var o:simd;
  var p:simd;
  var e:int;
  var g:uint_ptr;
  var m:simd;
  var l:simd;
  var n:simd;
  var b:int = a[2]:int * a[13]:int;
  var c:int = a[19]:int;
  var d:int = a[17]:int;
  e = a[6]:int * a[4]:int;
  if (eqz(e)) goto B_b;
  if (b < 1) goto B_a;
  var f:int = a[20]:int;
  g = a + 20;
  var h:long = i64_extend_i32_u(0 - e);
  var i:int = 0;
  if (b < 16) goto B_c;
  if (d < (k = c + (j = b << 2)) & c < (e = d + b)) goto B_c;
  if (d < (j = f + j) & f < e) goto B_c;
  if (d < (a = a + 24) & g < e) goto B_c;
  if (c < j & f < k) goto B_c;
  if (c < a & g < k) goto B_c;
  l = i64x2_splat(h);
  m = i64x2_splat(g[0]);
  i = b & -4;
  j = i;
  e = d;
  a = c;
  k = f;
  loop L_d {
    n = a[0]:simd@4;
    a[0]:simd@4 =
      (o = 
         SimdShuffleOp(
           (l i64x2_mul i64x2_extend_low_i32x4_u(o = k[0]:simd@4)) i64x2_shr_u
           32,
           (l i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(o, l))) i64x2_shr_u
           32));
    let t0 = 
      SimdStoreLane(
        e,
        v128_bitselect(
          V128,
          SimdShuffleOp(
            p = 
              ((i64x2_extend_low_i32x4_u(n = n i32x4_sub o) i64x2_mul m) i64x2_add
               (o = V128)) i64x2_shr_u
              32,
            n = 
              ((i64x2_extend_low_i32x4_u(SimdShuffleOp(n, l)) i64x2_mul m) i64x2_add
               o) i64x2_shr_u
              32),
          SimdShuffleOp(SimdShuffleOp(p, n) i32x4_gt_s V128, l)));
    e = e + 4;
    a = a + 16;
    k = k + 16;
    if (j = j + -4) continue L_d;
    t0;
  }
  if (b == i) goto B_a;
  label B_c:
  e = d + i;
  j = b - i;
  k = f + (a = i << 2);
  a = c + a;
  loop L_e {
    e[0]:byte =
      select_if(
        -1,
        d = 
          i32_wrap_i64(
            i64_extend_i32_u(a[0]:int - (b = i32_wrap_i64(k[0]:uint * h >> 32L))) *
            g[0] +
            2147483648L >>
            32L),
        d > 255);
    a[0]:int = b;
    k = k + 4;
    a = a + 4;
    e = e + 1;
    j = j + -1;
    if (j) continue L_e;
    goto B_a;
  }
  label B_b:
  if (b < 1) goto B_a;
  k = a + 20;
  g = 0;
  if (b < 12) goto B_f;
  if (d < (j = c + (b << 2)) & c < (e = d + b)) goto B_f;
  if (d < (a = a + 24) & k < e) goto B_f;
  if (c < a & k < j) goto B_f;
  m = i64x2_splat(k[0]:uint);
  g = b & -4;
  j = g;
  e = d;
  a = c;
  loop L_g {
    l = a[0]:simd@4;
    a[0]:simd@4 = V128;
    let t1 = 
      SimdStoreLane(
        e,
        v128_bitselect(
          V128,
          SimdShuffleOp(
            o = 
              ((m i64x2_mul i64x2_extend_low_i32x4_u(l)) i64x2_add (n = V128)) i64x2_shr_u
              32,
            l = 
              ((m i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(l, l))) i64x2_add
               n) i64x2_shr_u
              32),
          SimdShuffleOp(SimdShuffleOp(o, l) i32x4_gt_s V128, l)));
    e = e + 4;
    a = a + 16;
    if (j = j + -4) continue L_g;
    t1;
  }
  if (b == g) goto B_a;
  label B_f:
  a = g | 1;
  if (eqz(b & 1)) goto B_h;
  (d + g)[0]:byte =
    select_if(
      -1,
      j = i32_wrap_i64(
            k[0]:uint * (e = c + (g << 2))[0]:uint + 2147483648L >> 32L),
      j > 255);
  e[0]:int = 0;
  g = a;
  label B_h:
  if (b == a) goto B_a;
  e = d + g;
  j = b - g;
  a = c + (g << 2);
  loop L_i {
    e[0]:byte =
      select_if(
        -1,
        b = i32_wrap_i64(k[0]:uint * a[0]:uint + 2147483648L >> 32L),
        b > 255);
    a[0]:int = 0;
    (e + 1)[0]:byte =
      select_if(
        -1,
        d = 
          i32_wrap_i64(k[0]:uint * (b = a + 4)[0]:uint + 2147483648L >> 32L),
        d > 255);
    b[0]:int = 0;
    a = a + 8;
    e = e + 2;
    j = j + -2;
    if (j) continue L_i;
  }
  label B_a:
}

function WebPRescalerImportRow(a:int_ptr, b:int) {
  call_indirect(a, b, select_if(1060188, 1060184, a[0])[0]:int)
}

function WebPRescalerExportRow(a:int_ptr) {
  if (a[6] > 0) goto B_a;
  var b:int_ptr = 1060192;
  if (a[1]) goto B_c;
  b = 1060196;
  if (a[5]) goto B_c;
  if (a[13] * a[2] < 1) goto B_b;
  var c:int = a[19];
  b = 0;
  var d:int = 0;
  loop L_d {
    (a[17] + d)[0]:byte = (c + b)[0]:int;
    c = a[19];
    (c + b)[0]:int = 0;
    b = b + 4;
    d = d + 1;
    if (d < a[13] * a[2]) continue L_d;
    goto B_b;
  }
  label B_c:
  call_indirect(a, b[0]);
  label B_b:
  a[6] = a[6] + a[7];
  a[17] = a[17] + a[18];
  a[16] = a[16] + 1;
  label B_a:
}

function WebPRescalerDspInit() {
  var a:int = data[2]:int;
  if (a == data[6]:int) goto B_a;
  0[265049]:int = 121;
  0[265048]:int = 122;
  0[265047]:int = 123;
  0[265046]:int = 124;
  if (eqz(a)) goto B_b;
  if (eqz(call_indirect(0, a))) goto B_b;
  WebPRescalerDspInitSSE2();
  label B_b:
  data[6]:int = data[2]:int;
  label B_a:
}

function UpsampleBgraLinePair_C(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte, d:byte }, h:{ a:byte, b:byte, c:byte, d:byte }, i:int) {
  var o:int;
  var p:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  var j:{ a:byte, b:byte, c:byte, d:byte } = a[0];
  var k:int = c[0];
  var l:ubyte_ptr = d[0];
  var m:int = e[0];
  var n:ubyte_ptr = f[0];
  g.d = 255;
  g.c =
    select_if(
      (p = 
         (o = 
            ((n = 
                (l = (k = k | l << 16) * 3 + (m = m | n << 16) + 131074) >> 18 & 255) *
             26149 >>
             8) +
            (j = j * 19077 >> 8)) +
         -14234) >>
      6,
      select_if(0, 255, o < 14234),
      p < 16384);
  g.a =
    select_if(
      (p = (o = ((l = l >> 2 & 255) * 33050 >> 8) + j) + -17685) >> 6,
      select_if(0, 255, o < 17685),
      p < 16384);
  g.b =
    select_if(
      (l = (j = j - (n * 13320 >> 8) + (l * 6419 >> 8)) + 8708) >> 6,
      select_if(0, 255, j < -8708),
      l < 16384);
  if (eqz(b)) goto B_a;
  j = b[0];
  h.d = 255;
  h.c =
    select_if(
      (p = (o = (j = j * 19077 >> 8) +
                ((n = (l = k + m * 3 + 131074) >> 18 & 255) * 26149 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, o < 14234),
      p < 16384);
  h.a =
    select_if(
      (p = (o = j + ((l = l >> 2 & 255) * 33050 >> 8)) + -17685) >> 6,
      select_if(0, 255, o < 17685),
      p < 16384);
  h.b =
    select_if(
      (l = (j = j - (l * 6419 >> 8) + (n * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, j < -8708),
      l < 16384);
  label B_a:
  var q:int = i + -1;
  if (i >= 3) goto B_c;
  e = m;
  d = k;
  goto B_b;
  label B_c:
  j = q >> 1;
  var r:int = select_if(j, 1, j > 1);
  n = b + 1;
  l = a + 1;
  var s:int = c + 1;
  var t:int = d + 1;
  var u:int = e + 1;
  var v:int = f + 1;
  f = 0;
  c = 0;
  loop L_d {
    d = (s + c)[0]:ubyte;
    e = (t + c)[0]:ubyte;
    o = (u + c)[0]:ubyte;
    p = (v + c)[0]:ubyte;
    var w:int = l[0];
    j = g + f;
    (j + 7)[0]:byte = 255;
    (j + 6)[0]:byte =
      select_if(
        (aa = 
           (w = 
              ((z = 
                  (y = 
                     (x = (p = m + k + (d = d | e << 16) + (e = o | p << 16) + 524296) +
                          (d + m << 1) >>
                          3) +
                     k) >>
                  17 &
                  255) *
               26149 >>
               8) +
              (o = w * 19077 >> 8)) +
           -14234) >>
        6,
        select_if(0, 255, w < 14234),
        aa < 16384);
    (j + 4)[0]:byte =
      select_if(
        (aa = (y = ((w = y >> 1 & 255) * 33050 >> 8) + o) + -17685) >> 6,
        select_if(0, 255, y < 17685),
        aa < 16384);
    (j + 5)[0]:byte =
      select_if(
        (w = (o = o - (z * 13320 >> 8) + (w * 6419 >> 8)) + 8708) >> 6,
        select_if(0, 255, o < -8708),
        w < 16384);
    o = (l + 1)[0]:ubyte;
    (j + 11)[0]:byte = 255;
    (j + 10)[0]:byte =
      select_if(
        (y = 
           (o = 
              ((w = (p = (z = p + (e + k << 1) >> 3) + d) >> 17 & 255) * 26149 >> 8) +
              (k = o * 19077 >> 8)) +
           -14234) >>
        6,
        select_if(0, 255, o < 14234),
        y < 16384);
    (j + 9)[0]:byte =
      select_if(
        (w = 
           (p = k - (w * 13320 >> 8) + ((o = p >> 1 & 255) * 6419 >> 8)) + 8708) >>
        6,
        select_if(0, 255, p < -8708),
        w < 16384);
    (j + 8)[0]:byte =
      select_if((k = (j = (o * 33050 >> 8) + k) + -17685) >> 6,
                select_if(0, 255, j < 17685),
                k < 16384);
    if (eqz(b)) goto B_e;
    k = n[0];
    j = h + f;
    (j + 7)[0]:byte = 255;
    (j + 6)[0]:byte =
      select_if(
        (w = 
           (p = 
              (k = k * 19077 >> 8) + ((o = (m = z + m) >> 17 & 255) * 26149 >> 8)) +
           -14234) >>
        6,
        select_if(0, 255, p < 14234),
        w < 16384);
    (j + 4)[0]:byte =
      select_if(
        (w = (p = k + ((m = m >> 1 & 255) * 33050 >> 8)) + -17685) >> 6,
        select_if(0, 255, p < 17685),
        w < 16384);
    (j + 5)[0]:byte =
      select_if(
        (m = (k = k - (m * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, k < -8708),
        m < 16384);
    k = (n + 1)[0]:ubyte;
    (j + 11)[0]:byte = 255;
    (j + 10)[0]:byte =
      select_if(
        (w = 
           (p = 
              (k = k * 19077 >> 8) + ((o = (m = x + e) >> 17 & 255) * 26149 >> 8)) +
           -14234) >>
        6,
        select_if(0, 255, p < 14234),
        w < 16384);
    (j + 9)[0]:byte =
      select_if(
        (p = 
           (o = k - ((m = m >> 1 & 255) * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >>
        6,
        select_if(0, 255, o < -8708),
        p < 16384);
    (j + 8)[0]:byte =
      select_if((k = (j = k + (m * 33050 >> 8)) + -17685) >> 6,
                select_if(0, 255, j < 17685),
                k < 16384);
    label B_e:
    n = n + 2;
    l = l + 2;
    f = f + 8;
    k = d;
    m = e;
    if (r != (c = c + 1)) continue L_d;
  }
  label B_b:
  if (i & 1) goto B_f;
  c = (a + q)[0]:ubyte;
  j = g + (n = q << 2);
  j.d = 255;
  j.c =
    select_if(
      (f = (m = (c = c * 19077 >> 8) +
                ((l = (k = e + d * 3 + 131074) >> 18 & 255) * 26149 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, m < 14234),
      f < 16384);
  j.a =
    select_if(
      (f = (m = c + ((k = k >> 2 & 255) * 33050 >> 8)) + -17685) >> 6,
      select_if(0, 255, m < 17685),
      f < 16384);
  j.b =
    select_if(
      (k = (c = c - (k * 6419 >> 8) + (l * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, c < -8708),
      k < 16384);
  if (eqz(b)) goto B_f;
  c = (b + q)[0]:ubyte;
  j = h + n;
  j.d = 255;
  j.c =
    select_if(
      (m = (l = (c = c * 19077 >> 8) +
                ((d = (k = d + e * 3 + 131074) >> 18 & 255) * 26149 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, l < 14234),
      m < 16384);
  j.a =
    select_if(
      (m = (l = c + ((k = k >> 2 & 255) * 33050 >> 8)) + -17685) >> 6,
      select_if(0, 255, l < 17685),
      m < 16384);
  j.b =
    select_if(
      (k = (c = c - (k * 6419 >> 8) + (d * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, c < -8708),
      k < 16384);
  label B_f:
}

function UpsampleRgbaLinePair_C(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte, d:byte }, h:{ a:byte, b:byte, c:byte, d:byte }, i:int) {
  var o:int;
  var p:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  var j:{ a:byte, b:byte, c:byte, d:byte } = a[0];
  var k:int = c[0];
  var l:ubyte_ptr = d[0];
  var m:int = e[0];
  var n:ubyte_ptr = f[0];
  g.d = 255;
  g.c =
    select_if(
      (p = 
         (o = 
            ((n = 
                (l = (k = k | l << 16) * 3 + (m = m | n << 16) + 131074) >> 2 & 255) *
             33050 >>
             8) +
            (j = j * 19077 >> 8)) +
         -17685) >>
      6,
      select_if(0, 255, o < 17685),
      p < 16384);
  g.a =
    select_if(
      (p = (o = ((l = l >> 18 & 255) * 26149 >> 8) + j) + -14234) >> 6,
      select_if(0, 255, o < 14234),
      p < 16384);
  g.b =
    select_if(
      (l = (j = j - (l * 13320 >> 8) + (n * 6419 >> 8)) + 8708) >> 6,
      select_if(0, 255, j < -8708),
      l < 16384);
  if (eqz(b)) goto B_a;
  j = b[0];
  h.d = 255;
  h.c =
    select_if(
      (p = (o = (j = j * 19077 >> 8) +
                ((n = (l = k + m * 3 + 131074) >> 2 & 255) * 33050 >> 8)) +
           -17685) >>
      6,
      select_if(0, 255, o < 17685),
      p < 16384);
  h.a =
    select_if(
      (p = (o = j + ((l = l >> 18 & 255) * 26149 >> 8)) + -14234) >> 6,
      select_if(0, 255, o < 14234),
      p < 16384);
  h.b =
    select_if(
      (l = (j = j - (n * 6419 >> 8) + (l * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, j < -8708),
      l < 16384);
  label B_a:
  var q:int = i + -1;
  if (i >= 3) goto B_c;
  e = m;
  d = k;
  goto B_b;
  label B_c:
  j = q >> 1;
  var r:int = select_if(j, 1, j > 1);
  n = b + 1;
  l = a + 1;
  var s:int = c + 1;
  var t:int = d + 1;
  var u:int = e + 1;
  var v:int = f + 1;
  f = 0;
  c = 0;
  loop L_d {
    d = (s + c)[0]:ubyte;
    e = (t + c)[0]:ubyte;
    o = (u + c)[0]:ubyte;
    p = (v + c)[0]:ubyte;
    var w:int = l[0];
    j = g + f;
    (j + 7)[0]:byte = 255;
    (j + 6)[0]:byte =
      select_if(
        (aa = 
           (w = 
              ((z = 
                  (y = 
                     (x = (p = m + k + (d = d | e << 16) + (e = o | p << 16) + 524296) +
                          (d + m << 1) >>
                          3) +
                     k) >>
                  1 &
                  255) *
               33050 >>
               8) +
              (o = w * 19077 >> 8)) +
           -17685) >>
        6,
        select_if(0, 255, w < 17685),
        aa < 16384);
    (j + 4)[0]:byte =
      select_if(
        (aa = (y = ((w = y >> 17 & 255) * 26149 >> 8) + o) + -14234) >> 6,
        select_if(0, 255, y < 14234),
        aa < 16384);
    (j + 5)[0]:byte =
      select_if(
        (w = (o = o - (w * 13320 >> 8) + (z * 6419 >> 8)) + 8708) >> 6,
        select_if(0, 255, o < -8708),
        w < 16384);
    o = (l + 1)[0]:ubyte;
    (j + 11)[0]:byte = 255;
    (j + 10)[0]:byte =
      select_if(
        (y = 
           (o = 
              ((w = (p = (z = p + (e + k << 1) >> 3) + d) >> 1 & 255) * 33050 >> 8) +
              (k = o * 19077 >> 8)) +
           -17685) >>
        6,
        select_if(0, 255, o < 17685),
        y < 16384);
    (j + 9)[0]:byte =
      select_if(
        (w = 
           (p = k - ((o = p >> 17 & 255) * 13320 >> 8) + (w * 6419 >> 8)) + 8708) >>
        6,
        select_if(0, 255, p < -8708),
        w < 16384);
    (j + 8)[0]:byte =
      select_if((k = (j = (o * 26149 >> 8) + k) + -14234) >> 6,
                select_if(0, 255, j < 14234),
                k < 16384);
    if (eqz(b)) goto B_e;
    k = n[0];
    j = h + f;
    (j + 7)[0]:byte = 255;
    (j + 6)[0]:byte =
      select_if(
        (w = 
           (p = 
              (k = k * 19077 >> 8) + ((o = (m = z + m) >> 1 & 255) * 33050 >> 8)) +
           -17685) >>
        6,
        select_if(0, 255, p < 17685),
        w < 16384);
    (j + 4)[0]:byte =
      select_if(
        (w = (p = k + ((m = m >> 17 & 255) * 26149 >> 8)) + -14234) >> 6,
        select_if(0, 255, p < 14234),
        w < 16384);
    (j + 5)[0]:byte =
      select_if(
        (m = (k = k - (o * 6419 >> 8) + (m * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, k < -8708),
        m < 16384);
    k = (n + 1)[0]:ubyte;
    (j + 11)[0]:byte = 255;
    (j + 10)[0]:byte =
      select_if(
        (w = 
           (p = 
              (k = k * 19077 >> 8) + ((o = (m = x + e) >> 1 & 255) * 33050 >> 8)) +
           -17685) >>
        6,
        select_if(0, 255, p < 17685),
        w < 16384);
    (j + 9)[0]:byte =
      select_if(
        (p = 
           (o = k - (o * 6419 >> 8) + ((m = m >> 17 & 255) * 13320 >> 8)) + 8708) >>
        6,
        select_if(0, 255, o < -8708),
        p < 16384);
    (j + 8)[0]:byte =
      select_if((k = (j = k + (m * 26149 >> 8)) + -14234) >> 6,
                select_if(0, 255, j < 14234),
                k < 16384);
    label B_e:
    n = n + 2;
    l = l + 2;
    f = f + 8;
    k = d;
    m = e;
    if (r != (c = c + 1)) continue L_d;
  }
  label B_b:
  if (i & 1) goto B_f;
  c = (a + q)[0]:ubyte;
  j = g + (n = q << 2);
  j.d = 255;
  j.c =
    select_if(
      (f = (m = (c = c * 19077 >> 8) +
                ((l = (k = e + d * 3 + 131074) >> 2 & 255) * 33050 >> 8)) +
           -17685) >>
      6,
      select_if(0, 255, m < 17685),
      f < 16384);
  j.a =
    select_if(
      (f = (m = c + ((k = k >> 18 & 255) * 26149 >> 8)) + -14234) >> 6,
      select_if(0, 255, m < 14234),
      f < 16384);
  j.b =
    select_if(
      (k = (c = c - (l * 6419 >> 8) + (k * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, c < -8708),
      k < 16384);
  if (eqz(b)) goto B_f;
  c = (b + q)[0]:ubyte;
  j = h + n;
  j.d = 255;
  j.c =
    select_if(
      (m = (l = (c = c * 19077 >> 8) +
                ((d = (k = d + e * 3 + 131074) >> 2 & 255) * 33050 >> 8)) +
           -17685) >>
      6,
      select_if(0, 255, l < 17685),
      m < 16384);
  j.a =
    select_if(
      (m = (l = c + ((k = k >> 18 & 255) * 26149 >> 8)) + -14234) >> 6,
      select_if(0, 255, l < 14234),
      m < 16384);
  j.b =
    select_if(
      (k = (c = c - (d * 6419 >> 8) + (k * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, c < -8708),
      k < 16384);
  label B_f:
}

function UpsampleRgba4444LinePair_C(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte }, h:{ a:byte, b:byte }, i:int) {
  var j:{ a:byte, b:byte }
  var k:int;
  var l:ubyte_ptr;
  var m:ubyte_ptr;
  var n:int;
  var o:int;
  var p:int;
  var w:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  g.b =
    select_if(
      (p = 
         (o = 
            ((m = 
                (l = (j = d[0] << 16 | c[0]) * 3 + (k = f[0] << 16 | e[0]) + 131074) >>
                2 &
                255) *
             33050 >>
             8) +
            (n = a[0] * 19077 >> 8)) +
         -17685) >>
      6,
      select_if(0, 240, o < 17685),
      p < 16384) |
    15;
  g.a =
    (select_if((p = (o = ((l = l >> 18) * 26149 >> 8) + n) + -14234) >> 6,
               select_if(0, 240, o < 14234),
               p < 16384) &
     240) |
    select_if(
      (l = (n = n - (l * 13320 >> 8) + (m * 6419 >> 8)) + 8708) >> 10,
      select_if(0, 15, n < -8708),
      l < 16384);
  if (eqz(b)) goto B_a;
  h.b =
    select_if(
      (p = (o = (n = b[0] * 19077 >> 8) +
                ((m = (l = j + k * 3 + 131074) >> 2 & 255) * 33050 >> 8)) +
           -17685) >>
      6,
      select_if(0, 240, o < 17685),
      p < 16384) |
    15;
  h.a =
    (select_if((p = (o = n + ((l = l >> 18) * 26149 >> 8)) + -14234) >> 6,
               select_if(0, 240, o < 14234),
               p < 16384) &
     240) |
    select_if(
      (l = (n = n - (m * 6419 >> 8) + (l * 13320 >> 8)) + 8708) >> 10,
      select_if(0, 15, n < -8708),
      l < 16384);
  label B_a:
  var q:int = i + -1;
  if (i >= 3) goto B_c;
  d = k;
  f = j;
  goto B_b;
  label B_c:
  n = q >> 1;
  var r:int = select_if(n, 1, n > 1);
  m = b + 1;
  l = a + 1;
  var s:int = c + 1;
  var t:int = d + 1;
  var u:int = e + 1;
  var v:int = f + 1;
  c = 0;
  n = 0;
  loop L_d {
    e = g + c;
    (e + 3)[0]:byte =
      select_if(
        (aa = 
           (z = 
              ((y = 
                  (x = 
                     (w = (p = k + j + (f = (t + n)[0]:ubyte << 16 | (s + n)[0]:ubyte) +
                               (d = (v + n)[0]:ubyte << 16 | (u + n)[0]:ubyte) +
                               524296) +
                          (f + k << 1) >>
                          3) +
                     j) >>
                  1 &
                  255) *
               33050 >>
               8) +
              (o = l[0] * 19077 >> 8)) +
           -17685) >>
        6,
        select_if(0, 240, z < 17685),
        aa < 16384) |
      15;
    (e + 2)[0]:byte =
      (select_if((aa = (z = ((x = x >> 17) * 26149 >> 8) + o) + -14234) >> 6,
                 select_if(0, 240, z < 14234),
                 aa < 16384) &
       240) |
      select_if(
        (x = (o = o - (x * 13320 >> 8) + (y * 6419 >> 8)) + 8708) >> 10,
        select_if(0, 15, o < -8708),
        x < 16384);
    (e + 5)[0]:byte =
      select_if(
        (y = 
           (x = 
              ((p = (o = (z = p + (d + j << 1) >> 3) + f) >> 1 & 255) * 33050 >> 8) +
              (j = (l + 1)[0]:ubyte * 19077 >> 8)) +
           -17685) >>
        6,
        select_if(0, 240, x < 17685),
        y < 16384) |
      15;
    (e + 4)[0]:byte =
      (select_if((x = (o = ((e = o >> 17) * 26149 >> 8) + j) + -14234) >> 6,
                 select_if(0, 240, o < 14234),
                 x < 16384) &
       240) |
      select_if(
        (e = (j = j - (e * 13320 >> 8) + (p * 6419 >> 8)) + 8708) >> 10,
        select_if(0, 15, j < -8708),
        e < 16384);
    if (eqz(b)) goto B_e;
    j = h + c;
    (j + 3)[0]:byte =
      select_if(
        (x = 
           (p = 
              (e = m[0] * 19077 >> 8) + ((o = (k = z + k) >> 1 & 255) * 33050 >> 8)) +
           -17685) >>
        6,
        select_if(0, 240, p < 17685),
        x < 16384) |
      15;
    (j + 2)[0]:byte =
      (select_if((x = (p = e + ((k = k >> 17) * 26149 >> 8)) + -14234) >> 6,
                 select_if(0, 240, p < 14234),
                 x < 16384) &
       240) |
      select_if(
        (k = (e = e - (o * 6419 >> 8) + (k * 13320 >> 8)) + 8708) >> 10,
        select_if(0, 15, e < -8708),
        k < 16384);
    (j + 5)[0]:byte =
      select_if((x = (p = (e = (m + 1)[0]:ubyte * 19077 >> 8) +
                          ((o = (k = w + d) >> 1 & 255) * 33050 >> 8)) +
                     -17685) >>
                6,
                select_if(0, 240, p < 17685),
                x < 16384) |
      15;
    (j + 4)[0]:byte =
      (select_if((p = (k = e + ((j = k >> 17) * 26149 >> 8)) + -14234) >> 6,
                 select_if(0, 240, k < 14234),
                 p < 16384) &
       240) |
      select_if(
        (e = (j = e - (o * 6419 >> 8) + (j * 13320 >> 8)) + 8708) >> 10,
        select_if(0, 15, j < -8708),
        e < 16384);
    label B_e:
    m = m + 2;
    l = l + 2;
    c = c + 4;
    j = f;
    k = d;
    if (r != (n = n + 1)) continue L_d;
  }
  label B_b:
  if (i & 1) goto B_f;
  j = g + (m = q << 1);
  j.b =
    select_if(
      (c = (k = (n = (a + q)[0]:ubyte * 19077 >> 8) +
                ((e = (l = d + f * 3 + 131074) >> 2 & 255) * 33050 >> 8)) +
           -17685) >>
      6,
      select_if(0, 240, k < 17685),
      c < 16384) |
    15;
  j.a =
    (select_if((c = (k = n + ((l = l >> 18) * 26149 >> 8)) + -14234) >> 6,
               select_if(0, 240, k < 14234),
               c < 16384) &
     240) |
    select_if(
      (l = (n = n - (e * 6419 >> 8) + (l * 13320 >> 8)) + 8708) >> 10,
      select_if(0, 15, n < -8708),
      l < 16384);
  if (eqz(b)) goto B_f;
  j = h + m;
  j.b =
    select_if(
      (k = (e = (n = (b + q)[0]:ubyte * 19077 >> 8) +
                ((l = (f = f + d * 3 + 131074) >> 2 & 255) * 33050 >> 8)) +
           -17685) >>
      6,
      select_if(0, 240, e < 17685),
      k < 16384) |
    15;
  j.a =
    (select_if((k = (e = n + ((f = f >> 18) * 26149 >> 8)) + -14234) >> 6,
               select_if(0, 240, e < 14234),
               k < 16384) &
     240) |
    select_if(
      (f = (n = n - (l * 6419 >> 8) + (f * 13320 >> 8)) + 8708) >> 10,
      select_if(0, 15, n < -8708),
      f < 16384);
  label B_f:
}

function UpsampleArgbLinePair_C(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte, d:byte }, h:{ a:byte, b:byte, c:byte, d:byte }, i:int) {
  var o:int;
  var p:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  var j:{ a:byte, b:byte, c:byte, d:byte } = a[0];
  var k:int = c[0];
  var l:ubyte_ptr = d[0];
  var m:int = e[0];
  var n:ubyte_ptr = f[0];
  g.a = 255;
  g.d =
    select_if(
      (p = 
         (o = 
            ((n = 
                (l = (k = k | l << 16) * 3 + (m = m | n << 16) + 131074) >> 2 & 255) *
             33050 >>
             8) +
            (j = j * 19077 >> 8)) +
         -17685) >>
      6,
      select_if(0, 255, o < 17685),
      p < 16384);
  g.b =
    select_if(
      (p = (o = ((l = l >> 18 & 255) * 26149 >> 8) + j) + -14234) >> 6,
      select_if(0, 255, o < 14234),
      p < 16384);
  g.c =
    select_if(
      (l = (j = j - (l * 13320 >> 8) + (n * 6419 >> 8)) + 8708) >> 6,
      select_if(0, 255, j < -8708),
      l < 16384);
  if (eqz(b)) goto B_a;
  j = b[0];
  h.a = 255;
  h.d =
    select_if(
      (p = (o = (j = j * 19077 >> 8) +
                ((n = (l = k + m * 3 + 131074) >> 2 & 255) * 33050 >> 8)) +
           -17685) >>
      6,
      select_if(0, 255, o < 17685),
      p < 16384);
  h.b =
    select_if(
      (p = (o = j + ((l = l >> 18 & 255) * 26149 >> 8)) + -14234) >> 6,
      select_if(0, 255, o < 14234),
      p < 16384);
  h.c =
    select_if(
      (l = (j = j - (n * 6419 >> 8) + (l * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, j < -8708),
      l < 16384);
  label B_a:
  var q:int = i + -1;
  if (i >= 3) goto B_c;
  e = m;
  d = k;
  goto B_b;
  label B_c:
  j = q >> 1;
  var r:int = select_if(j, 1, j > 1);
  n = b + 1;
  l = a + 1;
  var s:int = c + 1;
  var t:int = d + 1;
  var u:int = e + 1;
  var v:int = f + 1;
  f = 0;
  c = 0;
  loop L_d {
    d = (s + c)[0]:ubyte;
    e = (t + c)[0]:ubyte;
    o = (u + c)[0]:ubyte;
    p = (v + c)[0]:ubyte;
    var w:int = l[0];
    j = g + f;
    (j + 4)[0]:byte = 255;
    (j + 7)[0]:byte =
      select_if(
        (aa = 
           (w = 
              ((z = 
                  (y = 
                     (x = (p = m + k + (d = d | e << 16) + (e = o | p << 16) + 524296) +
                          (d + m << 1) >>
                          3) +
                     k) >>
                  1 &
                  255) *
               33050 >>
               8) +
              (o = w * 19077 >> 8)) +
           -17685) >>
        6,
        select_if(0, 255, w < 17685),
        aa < 16384);
    (j + 5)[0]:byte =
      select_if(
        (aa = (y = ((w = y >> 17 & 255) * 26149 >> 8) + o) + -14234) >> 6,
        select_if(0, 255, y < 14234),
        aa < 16384);
    (j + 6)[0]:byte =
      select_if(
        (w = (o = o - (w * 13320 >> 8) + (z * 6419 >> 8)) + 8708) >> 6,
        select_if(0, 255, o < -8708),
        w < 16384);
    o = (l + 1)[0]:ubyte;
    (j + 8)[0]:byte = 255;
    (j + 11)[0]:byte =
      select_if(
        (y = 
           (o = 
              ((w = (p = (z = p + (e + k << 1) >> 3) + d) >> 1 & 255) * 33050 >> 8) +
              (k = o * 19077 >> 8)) +
           -17685) >>
        6,
        select_if(0, 255, o < 17685),
        y < 16384);
    (j + 10)[0]:byte =
      select_if(
        (w = 
           (p = k - ((o = p >> 17 & 255) * 13320 >> 8) + (w * 6419 >> 8)) + 8708) >>
        6,
        select_if(0, 255, p < -8708),
        w < 16384);
    (j + 9)[0]:byte =
      select_if((k = (j = (o * 26149 >> 8) + k) + -14234) >> 6,
                select_if(0, 255, j < 14234),
                k < 16384);
    if (eqz(b)) goto B_e;
    k = n[0];
    j = h + f;
    (j + 4)[0]:byte = 255;
    (j + 7)[0]:byte =
      select_if(
        (w = 
           (p = 
              (k = k * 19077 >> 8) + ((o = (m = z + m) >> 1 & 255) * 33050 >> 8)) +
           -17685) >>
        6,
        select_if(0, 255, p < 17685),
        w < 16384);
    (j + 5)[0]:byte =
      select_if(
        (w = (p = k + ((m = m >> 17 & 255) * 26149 >> 8)) + -14234) >> 6,
        select_if(0, 255, p < 14234),
        w < 16384);
    (j + 6)[0]:byte =
      select_if(
        (m = (k = k - (o * 6419 >> 8) + (m * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, k < -8708),
        m < 16384);
    k = (n + 1)[0]:ubyte;
    (j + 8)[0]:byte = 255;
    (j + 11)[0]:byte =
      select_if(
        (w = 
           (p = 
              (k = k * 19077 >> 8) + ((o = (m = x + e) >> 1 & 255) * 33050 >> 8)) +
           -17685) >>
        6,
        select_if(0, 255, p < 17685),
        w < 16384);
    (j + 10)[0]:byte =
      select_if(
        (p = 
           (o = k - (o * 6419 >> 8) + ((m = m >> 17 & 255) * 13320 >> 8)) + 8708) >>
        6,
        select_if(0, 255, o < -8708),
        p < 16384);
    (j + 9)[0]:byte =
      select_if((k = (j = k + (m * 26149 >> 8)) + -14234) >> 6,
                select_if(0, 255, j < 14234),
                k < 16384);
    label B_e:
    n = n + 2;
    l = l + 2;
    f = f + 8;
    k = d;
    m = e;
    if (r != (c = c + 1)) continue L_d;
  }
  label B_b:
  if (i & 1) goto B_f;
  c = (a + q)[0]:ubyte;
  j = g + (n = q << 2);
  j.a = 255;
  j.d =
    select_if(
      (f = (m = (c = c * 19077 >> 8) +
                ((l = (k = e + d * 3 + 131074) >> 2 & 255) * 33050 >> 8)) +
           -17685) >>
      6,
      select_if(0, 255, m < 17685),
      f < 16384);
  j.b =
    select_if(
      (f = (m = c + ((k = k >> 18 & 255) * 26149 >> 8)) + -14234) >> 6,
      select_if(0, 255, m < 14234),
      f < 16384);
  j.c =
    select_if(
      (k = (c = c - (l * 6419 >> 8) + (k * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, c < -8708),
      k < 16384);
  if (eqz(b)) goto B_f;
  c = (b + q)[0]:ubyte;
  j = h + n;
  j.a = 255;
  j.d =
    select_if(
      (m = (l = (c = c * 19077 >> 8) +
                ((d = (k = d + e * 3 + 131074) >> 2 & 255) * 33050 >> 8)) +
           -17685) >>
      6,
      select_if(0, 255, l < 17685),
      m < 16384);
  j.b =
    select_if(
      (m = (l = c + ((k = k >> 18 & 255) * 26149 >> 8)) + -14234) >> 6,
      select_if(0, 255, l < 14234),
      m < 16384);
  j.c =
    select_if(
      (k = (c = c - (d * 6419 >> 8) + (k * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, c < -8708),
      k < 16384);
  label B_f:
}

function UpsampleRgb565LinePair_C(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte }, h:{ a:byte, b:byte }, i:int) {
  var j:int;
  var k:{ a:byte, b:byte }
  var l:int;
  var m:ubyte_ptr;
  var n:ubyte_ptr;
  var o:int;
  var p:int;
  var w:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  g.a =
    (o = 
       select_if(
         (p = 
            (o = 
               (j = a[0] * 19077 >> 8) -
               ((n = 
                   (m = (k = d[0] << 16 | c[0]) * 3 + (l = f[0] << 16 | e[0]) + 131074) >>
                   18) *
                13320 >>
                8) +
               ((m = m >> 2 & 255) * 6419 >> 8)) +
            8708) >>
         6,
         select_if(0, 255, o < -8708),
         p < 16384)) >>
    5 |
    (select_if((p = (n = (n * 26149 >> 8) + j) + -14234) >> 6,
               select_if(0, 248, n < 14234),
               p < 16384) &
     248);
  g.b =
    (o << 3 & 224) |
    select_if((m = (j = (m * 33050 >> 8) + j) + -17685) >> 9,
              select_if(0, 31, j < 17685),
              m < 16384);
  if (eqz(b)) goto B_a;
  h.a =
    (select_if(
       (p = (o = (j = b[0] * 19077 >> 8) +
                 ((n = (m = k + l * 3 + 131074) >> 18) * 26149 >> 8)) +
            -14234) >>
       6,
       select_if(0, 248, o < 14234),
       p < 16384) &
     248) |
    (n = 
       select_if(
         (o = 
            (n = j - ((m = m >> 2 & 255) * 6419 >> 8) + (n * 13320 >> 8)) + 8708) >>
         6,
         select_if(0, 255, n < -8708),
         o < 16384)) >>
    5;
  h.b =
    (n << 3 & 224) |
    select_if((m = (j = j + (m * 33050 >> 8)) + -17685) >> 9,
              select_if(0, 31, j < 17685),
              m < 16384);
  label B_a:
  var q:int = i + -1;
  if (i >= 3) goto B_c;
  d = l;
  f = k;
  goto B_b;
  label B_c:
  j = q >> 1;
  var r:int = select_if(j, 1, j > 1);
  n = b + 1;
  m = a + 1;
  var s:int = c + 1;
  var t:int = d + 1;
  var u:int = e + 1;
  var v:int = f + 1;
  c = 0;
  j = 0;
  loop L_d {
    e = g + c;
    (e + 2)[0]:byte =
      (z = 
         select_if(
           (aa = 
              (z = 
                 (o = m[0] * 19077 >> 8) -
                 ((y = 
                     (x = 
                        (w = (p = l + k + (f = (t + j)[0]:ubyte << 16 | (s + j)[0]:ubyte) +
                                  (d = (v + j)[0]:ubyte << 16 | (u + j)[0]:ubyte) +
                                  524296) +
                             (f + l << 1) >>
                             3) +
                        k) >>
                     17) *
                  13320 >>
                  8) +
                 ((x = x >> 1 & 255) * 6419 >> 8)) +
              8708) >>
           6,
           select_if(0, 255, z < -8708),
           aa < 16384)) >>
      5 |
      (select_if((aa = (y = (y * 26149 >> 8) + o) + -14234) >> 6,
                 select_if(0, 248, y < 14234),
                 aa < 16384) &
       248);
    (e + 3)[0]:byte =
      (z << 3 & 224) |
      select_if((x = (o = (x * 33050 >> 8) + o) + -17685) >> 9,
                select_if(0, 31, o < 17685),
                x < 16384);
    (e + 4)[0]:byte =
      (x = 
         select_if(
           (y = 
              (x = 
                 (o = (m + 1)[0]:ubyte * 19077 >> 8) -
                 ((p = (k = (z = p + (d + k << 1) >> 3) + f) >> 17) * 13320 >> 8) +
                 ((k = k >> 1 & 255) * 6419 >> 8)) +
              8708) >>
           6,
           select_if(0, 255, x < -8708),
           y < 16384)) >>
      5 |
      (select_if((y = (p = (p * 26149 >> 8) + o) + -14234) >> 6,
                 select_if(0, 248, p < 14234),
                 y < 16384) &
       248);
    (e + 5)[0]:byte =
      (x << 3 & 224) |
      select_if((e = (k = (k * 33050 >> 8) + o) + -17685) >> 9,
                select_if(0, 31, k < 17685),
                e < 16384);
    if (eqz(b)) goto B_e;
    k = h + c;
    (k + 2)[0]:byte =
      (select_if(
         (x = 
            (p = (e = n[0] * 19077 >> 8) + ((o = (l = z + l) >> 17) * 26149 >> 8)) +
            -14234) >>
         6,
         select_if(0, 248, p < 14234),
         x < 16384) &
       248) |
      (o = 
         select_if(
           (p = 
              (o = e - ((l = l >> 1 & 255) * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >>
           6,
           select_if(0, 255, o < -8708),
           p < 16384)) >>
      5;
    (k + 3)[0]:byte =
      (o << 3 & 224) |
      select_if((l = (e = e + (l * 33050 >> 8)) + -17685) >> 9,
                select_if(0, 31, e < 17685),
                l < 16384);
    (k + 4)[0]:byte =
      (select_if((x = (p = (e = (n + 1)[0]:ubyte * 19077 >> 8) +
                           ((o = (l = w + d) >> 17) * 26149 >> 8)) +
                      -14234) >>
                 6,
                 select_if(0, 248, p < 14234),
                 x < 16384) &
       248) |
      (o = 
         select_if(
           (p = 
              (o = e - ((l = l >> 1 & 255) * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >>
           6,
           select_if(0, 255, o < -8708),
           p < 16384)) >>
      5;
    (k + 5)[0]:byte =
      (o << 3 & 224) |
      select_if((e = (k = e + (l * 33050 >> 8)) + -17685) >> 9,
                select_if(0, 31, k < 17685),
                e < 16384);
    label B_e:
    n = n + 2;
    m = m + 2;
    c = c + 4;
    k = f;
    l = d;
    if (r != (j = j + 1)) continue L_d;
  }
  label B_b:
  if (i & 1) goto B_f;
  k = g + (n = q << 1);
  k.a =
    (select_if(
       (c = (l = (j = (a + q)[0]:ubyte * 19077 >> 8) +
                 ((e = (m = d + f * 3 + 131074) >> 18) * 26149 >> 8)) +
            -14234) >>
       6,
       select_if(0, 248, l < 14234),
       c < 16384) &
     248) |
    (e = 
       select_if(
         (l = 
            (e = j - ((m = m >> 2 & 255) * 6419 >> 8) + (e * 13320 >> 8)) + 8708) >>
         6,
         select_if(0, 255, e < -8708),
         l < 16384)) >>
    5;
  k.b =
    (e << 3 & 224) |
    select_if((m = (j = j + (m * 33050 >> 8)) + -17685) >> 9,
              select_if(0, 31, j < 17685),
              m < 16384);
  if (eqz(b)) goto B_f;
  k = h + n;
  k.a =
    (select_if(
       (l = (e = (j = (b + q)[0]:ubyte * 19077 >> 8) +
                 ((m = (f = f + d * 3 + 131074) >> 18) * 26149 >> 8)) +
            -14234) >>
       6,
       select_if(0, 248, e < 14234),
       l < 16384) &
     248) |
    (m = 
       select_if(
         (e = 
            (m = j - ((f = f >> 2 & 255) * 6419 >> 8) + (m * 13320 >> 8)) + 8708) >>
         6,
         select_if(0, 255, m < -8708),
         e < 16384)) >>
    5;
  k.b =
    (m << 3 & 224) |
    select_if((f = (j = j + (f * 33050 >> 8)) + -17685) >> 9,
              select_if(0, 31, j < 17685),
              f < 16384);
  label B_f:
}

function UpsampleBgrLinePair_C(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte }, h:{ a:byte, b:byte, c:byte }, i:int) {
  var j:int;
  var k:int;
  var l:ubyte_ptr;
  var m:ubyte_ptr;
  var n:{ a:byte, b:byte, c:byte }
  var o:int;
  var p:int;
  var w:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  g.c =
    select_if(
      (p = 
         (o = 
            ((m = 
                (l = (j = d[0] << 16 | c[0]) * 3 + (k = f[0] << 16 | e[0]) + 131074) >>
                18) *
             26149 >>
             8) +
            (n = a[0] * 19077 >> 8)) +
         -14234) >>
      6,
      select_if(0, 255, o < 14234),
      p < 16384);
  g.a =
    select_if(
      (p = (o = ((l = l >> 2 & 255) * 33050 >> 8) + n) + -17685) >> 6,
      select_if(0, 255, o < 17685),
      p < 16384);
  g.b =
    select_if(
      (l = (n = n - (m * 13320 >> 8) + (l * 6419 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      l < 16384);
  if (eqz(b)) goto B_a;
  h.c =
    select_if(
      (p = (o = (n = b[0] * 19077 >> 8) +
                ((m = (l = j + k * 3 + 131074) >> 18) * 26149 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, o < 14234),
      p < 16384);
  h.a =
    select_if(
      (p = (o = n + ((l = l >> 2 & 255) * 33050 >> 8)) + -17685) >> 6,
      select_if(0, 255, o < 17685),
      p < 16384);
  h.b =
    select_if(
      (l = (n = n - (l * 6419 >> 8) + (m * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      l < 16384);
  label B_a:
  var q:int = i + -1;
  if (i >= 3) goto B_c;
  d = k;
  e = j;
  goto B_b;
  label B_c:
  n = q >> 1;
  var r:int = select_if(n, 1, n > 1);
  m = b + 1;
  l = a + 1;
  var s:int = c + 1;
  var t:int = d + 1;
  var u:int = e + 1;
  var v:int = f + 1;
  c = 0;
  n = 0;
  loop L_d {
    f = g + c;
    (f + 5)[0]:byte =
      select_if(
        (aa = 
           (z = 
              ((y = 
                  (x = 
                     (w = (p = k + j + (e = (t + n)[0]:ubyte << 16 | (s + n)[0]:ubyte) +
                               (d = (v + n)[0]:ubyte << 16 | (u + n)[0]:ubyte) +
                               524296) +
                          (e + k << 1) >>
                          3) +
                     j) >>
                  17) *
               26149 >>
               8) +
              (o = l[0] * 19077 >> 8)) +
           -14234) >>
        6,
        select_if(0, 255, z < 14234),
        aa < 16384);
    (f + 3)[0]:byte =
      select_if(
        (aa = (z = ((x = x >> 1 & 255) * 33050 >> 8) + o) + -17685) >> 6,
        select_if(0, 255, z < 17685),
        aa < 16384);
    (f + 4)[0]:byte =
      select_if(
        (x = (o = o - (y * 13320 >> 8) + (x * 6419 >> 8)) + 8708) >> 6,
        select_if(0, 255, o < -8708),
        x < 16384);
    (f + 8)[0]:byte =
      select_if(
        (y = 
           (x = 
              ((p = (o = (z = p + (d + j << 1) >> 3) + e) >> 17) * 26149 >> 8) +
              (j = (l + 1)[0]:ubyte * 19077 >> 8)) +
           -14234) >>
        6,
        select_if(0, 255, x < 14234),
        y < 16384);
    (f + 7)[0]:byte =
      select_if(
        (x = 
           (p = j - (p * 13320 >> 8) + ((o = o >> 1 & 255) * 6419 >> 8)) + 8708) >>
        6,
        select_if(0, 255, p < -8708),
        x < 16384);
    (f + 6)[0]:byte =
      select_if((j = (f = (o * 33050 >> 8) + j) + -17685) >> 6,
                select_if(0, 255, f < 17685),
                j < 16384);
    if (eqz(b)) goto B_e;
    f = h + c;
    (f + 5)[0]:byte =
      select_if(
        (x = 
           (p = (j = m[0] * 19077 >> 8) + ((o = (k = z + k) >> 17) * 26149 >> 8)) +
           -14234) >>
        6,
        select_if(0, 255, p < 14234),
        x < 16384);
    (f + 3)[0]:byte =
      select_if(
        (x = (p = j + ((k = k >> 1 & 255) * 33050 >> 8)) + -17685) >> 6,
        select_if(0, 255, p < 17685),
        x < 16384);
    (f + 4)[0]:byte =
      select_if(
        (k = (j = j - (k * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, j < -8708),
        k < 16384);
    (f + 8)[0]:byte =
      select_if((x = (p = (j = (m + 1)[0]:ubyte * 19077 >> 8) +
                          ((o = (k = w + d) >> 17) * 26149 >> 8)) +
                     -14234) >>
                6,
                select_if(0, 255, p < 14234),
                x < 16384);
    (f + 7)[0]:byte =
      select_if(
        (p = 
           (o = j - ((k = k >> 1 & 255) * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >>
        6,
        select_if(0, 255, o < -8708),
        p < 16384);
    (f + 6)[0]:byte =
      select_if((j = (f = j + (k * 33050 >> 8)) + -17685) >> 6,
                select_if(0, 255, f < 17685),
                j < 16384);
    label B_e:
    m = m + 2;
    c = c + 6;
    l = l + 2;
    j = e;
    k = d;
    if (r != (n = n + 1)) continue L_d;
  }
  label B_b:
  if (i & 1) goto B_f;
  n = g + (m = q * 3);
  n.c =
    select_if(
      (c = (k = (f = (a + q)[0]:ubyte * 19077 >> 8) +
                ((l = (j = d + e * 3 + 131074) >> 18) * 26149 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, k < 14234),
      c < 16384);
  n.a =
    select_if(
      (c = (k = f + ((j = j >> 2 & 255) * 33050 >> 8)) + -17685) >> 6,
      select_if(0, 255, k < 17685),
      c < 16384);
  n.b =
    select_if(
      (j = (f = f - (j * 6419 >> 8) + (l * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, f < -8708),
      j < 16384);
  if (eqz(b)) goto B_f;
  n = h + m;
  n.c =
    select_if(
      (k = (l = (f = (b + q)[0]:ubyte * 19077 >> 8) +
                ((e = (j = e + d * 3 + 131074) >> 18) * 26149 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, l < 14234),
      k < 16384);
  n.a =
    select_if(
      (k = (l = f + ((j = j >> 2 & 255) * 33050 >> 8)) + -17685) >> 6,
      select_if(0, 255, l < 17685),
      k < 16384);
  n.b =
    select_if(
      (j = (f = f - (j * 6419 >> 8) + (e * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, f < -8708),
      j < 16384);
  label B_f:
}

function UpsampleRgbLinePair_C(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte }, h:{ a:byte, b:byte, c:byte }, i:int) {
  var j:int;
  var k:int;
  var l:ubyte_ptr;
  var m:ubyte_ptr;
  var n:{ a:byte, b:byte, c:byte }
  var o:int;
  var p:int;
  var w:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  g.a =
    select_if(
      (p = 
         (o = 
            ((m = 
                (l = (j = d[0] << 16 | c[0]) * 3 + (k = f[0] << 16 | e[0]) + 131074) >>
                18) *
             26149 >>
             8) +
            (n = a[0] * 19077 >> 8)) +
         -14234) >>
      6,
      select_if(0, 255, o < 14234),
      p < 16384);
  g.c =
    select_if(
      (p = (o = ((l = l >> 2 & 255) * 33050 >> 8) + n) + -17685) >> 6,
      select_if(0, 255, o < 17685),
      p < 16384);
  g.b =
    select_if(
      (l = (n = n - (m * 13320 >> 8) + (l * 6419 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      l < 16384);
  if (eqz(b)) goto B_a;
  h.a =
    select_if(
      (p = (o = (n = b[0] * 19077 >> 8) +
                ((m = (l = j + k * 3 + 131074) >> 18) * 26149 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, o < 14234),
      p < 16384);
  h.c =
    select_if(
      (p = (o = n + ((l = l >> 2 & 255) * 33050 >> 8)) + -17685) >> 6,
      select_if(0, 255, o < 17685),
      p < 16384);
  h.b =
    select_if(
      (l = (n = n - (l * 6419 >> 8) + (m * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      l < 16384);
  label B_a:
  var q:int = i + -1;
  if (i >= 3) goto B_c;
  d = k;
  e = j;
  goto B_b;
  label B_c:
  n = q >> 1;
  var r:int = select_if(n, 1, n > 1);
  m = b + 1;
  l = a + 1;
  var s:int = c + 1;
  var t:int = d + 1;
  var u:int = e + 1;
  var v:int = f + 1;
  c = 0;
  n = 0;
  loop L_d {
    f = g + c;
    (f + 3)[0]:byte =
      select_if(
        (aa = 
           (z = 
              ((y = 
                  (x = 
                     (w = (p = k + j + (e = (t + n)[0]:ubyte << 16 | (s + n)[0]:ubyte) +
                               (d = (v + n)[0]:ubyte << 16 | (u + n)[0]:ubyte) +
                               524296) +
                          (e + k << 1) >>
                          3) +
                     j) >>
                  17) *
               26149 >>
               8) +
              (o = l[0] * 19077 >> 8)) +
           -14234) >>
        6,
        select_if(0, 255, z < 14234),
        aa < 16384);
    (f + 5)[0]:byte =
      select_if(
        (aa = (z = ((x = x >> 1 & 255) * 33050 >> 8) + o) + -17685) >> 6,
        select_if(0, 255, z < 17685),
        aa < 16384);
    (f + 4)[0]:byte =
      select_if(
        (x = (o = o - (y * 13320 >> 8) + (x * 6419 >> 8)) + 8708) >> 6,
        select_if(0, 255, o < -8708),
        x < 16384);
    (f + 8)[0]:byte =
      select_if(
        (y = 
           (x = 
              ((p = (o = (z = p + (d + j << 1) >> 3) + e) >> 1 & 255) * 33050 >> 8) +
              (j = (l + 1)[0]:ubyte * 19077 >> 8)) +
           -17685) >>
        6,
        select_if(0, 255, x < 17685),
        y < 16384);
    (f + 7)[0]:byte =
      select_if(
        (x = (p = j - ((o = o >> 17) * 13320 >> 8) + (p * 6419 >> 8)) + 8708) >>
        6,
        select_if(0, 255, p < -8708),
        x < 16384);
    (f + 6)[0]:byte =
      select_if((j = (f = (o * 26149 >> 8) + j) + -14234) >> 6,
                select_if(0, 255, f < 14234),
                j < 16384);
    if (eqz(b)) goto B_e;
    f = h + c;
    (f + 3)[0]:byte =
      select_if(
        (x = 
           (p = (j = m[0] * 19077 >> 8) + ((o = (k = z + k) >> 17) * 26149 >> 8)) +
           -14234) >>
        6,
        select_if(0, 255, p < 14234),
        x < 16384);
    (f + 5)[0]:byte =
      select_if(
        (x = (p = j + ((k = k >> 1 & 255) * 33050 >> 8)) + -17685) >> 6,
        select_if(0, 255, p < 17685),
        x < 16384);
    (f + 4)[0]:byte =
      select_if(
        (k = (j = j - (k * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, j < -8708),
        k < 16384);
    (f + 8)[0]:byte =
      select_if((x = (p = (j = (m + 1)[0]:ubyte * 19077 >> 8) +
                          ((o = (k = w + d) >> 1 & 255) * 33050 >> 8)) +
                     -17685) >>
                6,
                select_if(0, 255, p < 17685),
                x < 16384);
    (f + 7)[0]:byte =
      select_if(
        (p = (o = j - (o * 6419 >> 8) + ((k = k >> 17) * 13320 >> 8)) + 8708) >>
        6,
        select_if(0, 255, o < -8708),
        p < 16384);
    (f + 6)[0]:byte =
      select_if((j = (f = j + (k * 26149 >> 8)) + -14234) >> 6,
                select_if(0, 255, f < 14234),
                j < 16384);
    label B_e:
    m = m + 2;
    c = c + 6;
    l = l + 2;
    j = e;
    k = d;
    if (r != (n = n + 1)) continue L_d;
  }
  label B_b:
  if (i & 1) goto B_f;
  n = g + (m = q * 3);
  n.a =
    select_if(
      (c = (k = (f = (a + q)[0]:ubyte * 19077 >> 8) +
                ((l = (j = d + e * 3 + 131074) >> 18) * 26149 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, k < 14234),
      c < 16384);
  n.c =
    select_if(
      (c = (k = f + ((j = j >> 2 & 255) * 33050 >> 8)) + -17685) >> 6,
      select_if(0, 255, k < 17685),
      c < 16384);
  n.b =
    select_if(
      (j = (f = f - (j * 6419 >> 8) + (l * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, f < -8708),
      j < 16384);
  if (eqz(b)) goto B_f;
  n = h + m;
  n.a =
    select_if(
      (k = (l = (f = (b + q)[0]:ubyte * 19077 >> 8) +
                ((e = (j = e + d * 3 + 131074) >> 18) * 26149 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, l < 14234),
      k < 16384);
  n.c =
    select_if(
      (k = (l = f + ((j = j >> 2 & 255) * 33050 >> 8)) + -17685) >> 6,
      select_if(0, 255, l < 17685),
      k < 16384);
  n.b =
    select_if(
      (j = (f = f - (j * 6419 >> 8) + (e * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, f < -8708),
      j < 16384);
  label B_f:
}

function WebPInitUpsamplers() {
  var a:int = data[2]:int;
  if (a == data[8]:int) goto B_a;
  0[265060]:int = 125;
  0[265059]:int = 126;
  0[265055]:int = 125;
  0[265053]:int = 126;
  0[265062]:int = 127;
  0[265061]:int = 128;
  0[265058]:int = 129;
  0[265057]:int = 127;
  0[265056]:int = 128;
  0[265054]:int = 130;
  0[265052]:int = 131;
  if (eqz(a)) goto B_b;
  if (eqz(call_indirect(0, a))) goto B_c;
  WebPInitUpsamplersSSE2();
  label B_c:
  if (eqz(call_indirect(3, data[2]:int))) goto B_b;
  WebPInitUpsamplersSSE41();
  label B_b:
  data[8]:int = data[2]:int;
  label B_a:
}

function WebPYuv444ToRgba_C(a:int, b:int, c:int, d:byte_ptr, e:int) {
  var g:int;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:int;
  var ia:int;
  var ja:byte_ptr;
  var ka:byte_ptr;
  var la:byte_ptr;
  var ma:byte_ptr;
  var na:byte_ptr;
  var oa:byte_ptr;
  var pa:byte_ptr;
  var qa:byte_ptr;
  var ra:byte_ptr;
  var sa:byte_ptr;
  var ta:byte_ptr;
  var ua:byte_ptr;
  var va:byte_ptr;
  if (e < 1) goto B_a;
  var f:int = 0;
  if (e < 16) goto B_b;
  f = 0;
  if (a + e > d & (g = d + (e << 2)) > a) goto B_b;
  f = 0;
  if (b + e > d & g > b) goto B_b;
  f = 0;
  if (c + e > d & g > c) goto B_b;
  var h:simd = V128;
  var i:simd = V128;
  var j:simd = V128;
  var k:simd = V128;
  f = e & -16;
  var l:int = f;
  var m:simd_ptr@1 = c;
  var n:simd_ptr@1 = b;
  var o:simd_ptr@1 = a;
  loop L_c {
    g = d + SimdLaneOp(p = k i32x4_shl 2);
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        g,
        q = 
          ((v128_bitselect(
              (y = 
                 (w = 
                    (((r = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(q = m[0]))) i32x4_mul
                      (s = V128)) i32x4_shr_u
                     8) i32x4_add
                    (v = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(t = o[0])) i32x4_mul
                        (u = V128)) i32x4_shr_u
                       8)) i32x4_add
                 (x = V128)) i32x4_shr_u
              6,
              v128_bitselect(z = V128, aa = V128, w i32x4_lt_u (ba = V128)),
              y i32x4_lt_u (w = V128)) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ea = 
                 (da = 
                    (((ca = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                      s) i32x4_shr_u
                     8) i32x4_add
                    (y = (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(SimdShuffleOp(t, aa))) i32x4_mul
                          u) i32x4_shr_u
                         8)) i32x4_add
                 x) i32x4_shr_u
              6,
              v128_bitselect(z, aa, da i32x4_lt_u ba),
              ea i32x4_lt_u w) v128_and
            aa)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ga = 
                 (ea = 
                    (((fa = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                      s) i32x4_shr_u
                     8) i32x4_add
                    (da = (i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(t, aa))) i32x4_mul
                           u) i32x4_shr_u
                          8)) i32x4_add
                 x) i32x4_shr_u
              6,
              v128_bitselect(z, aa, ea i32x4_lt_u ba),
              ga i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (s = 
                 (q = 
                    (((ga = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                      s) i32x4_shr_u
                     8) i32x4_add
                    (ea = (i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(t, aa))) i32x4_mul
                           u) i32x4_shr_u
                          8)) i32x4_add
                 x) i32x4_shr_u
              6,
              v128_bitselect(z, aa, q i32x4_lt_u ba),
              s i32x4_lt_u w) v128_and
            aa))),
      SimdStoreLane(ha = d + SimdLaneOp(p), q),
      SimdStoreLane(ia = d + SimdLaneOp(p), q),
      SimdStoreLane(ja = d + SimdLaneOp(p), q),
      SimdStoreLane(ka = d + SimdLaneOp(p = j i32x4_shl 2), q),
      SimdStoreLane(la = d + SimdLaneOp(p), q),
      SimdStoreLane(ma = d + SimdLaneOp(p), q),
      SimdStoreLane(na = d + SimdLaneOp(p), q),
      SimdStoreLane(oa = d + SimdLaneOp(p = i i32x4_shl 2), q),
      SimdStoreLane(pa = d + SimdLaneOp(p), q),
      SimdStoreLane(qa = d + SimdLaneOp(p), q),
      SimdStoreLane(ra = d + SimdLaneOp(p), q),
      SimdStoreLane(sa = d + SimdLaneOp(p = h i32x4_shl 2), q),
      SimdStoreLane(ta = d + SimdLaneOp(p), q),
      SimdStoreLane(ua = d + SimdLaneOp(p), q),
      SimdStoreLane(va = d + SimdLaneOp(p), q),
      SimdStoreLane(
        g,
        q = 
          ((v128_bitselect(
              (r = 
                 (ba = 
                    v i32x4_sub
                    ((((x = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(q = n[0]))) i32x4_mul
                       (p = V128)) i32x4_shr_u
                      8) i32x4_add
                     ((r i32x4_mul (s = V128)) i32x4_shr_u 8))) i32x4_add
                 (t = V128)) i32x4_shr_u
              6,
              v128_bitselect(z, aa, ba i32x4_lt_s (u = V128)),
              r i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ca = 
                 (r = 
                    y i32x4_sub
                    ((((ba = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                       p) i32x4_shr_u
                      8) i32x4_add
                     ((ca i32x4_mul s) i32x4_shr_u 8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(z, aa, r i32x4_lt_s u),
              ca i32x4_lt_u w) v128_and
            aa)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (fa = 
                 (ca = 
                    da i32x4_sub
                    ((((r = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                       p) i32x4_shr_u
                      8) i32x4_add
                     ((fa i32x4_mul s) i32x4_shr_u 8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(z, aa, ca i32x4_lt_s u),
              fa i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (p = 
                 (q = 
                    ea i32x4_sub
                    ((((ca = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                       p) i32x4_shr_u
                      8) i32x4_add
                     ((ga i32x4_mul s) i32x4_shr_u 8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(z, aa, q i32x4_lt_s u),
              p i32x4_lt_u w) v128_and
            aa))),
      SimdStoreLane(ha, q),
      SimdStoreLane(ia, q),
      SimdStoreLane(ja, q),
      SimdStoreLane(ka, q),
      SimdStoreLane(la, q),
      SimdStoreLane(ma, q),
      SimdStoreLane(na, q),
      SimdStoreLane(oa, q),
      SimdStoreLane(pa, q),
      SimdStoreLane(qa, q),
      SimdStoreLane(ra, q),
      SimdStoreLane(sa, q),
      SimdStoreLane(ta, q),
      SimdStoreLane(ua, q),
      SimdStoreLane(va, q),
      SimdStoreLane(
        g,
        aa = 
          ((v128_bitselect(
              (u = 
                 (t = ((x i32x4_mul (q = V128)) i32x4_shr_u 8) i32x4_add v) i32x4_add
                 (p = V128)) i32x4_shr_u
              6,
              v128_bitselect(z, aa, t i32x4_lt_u (s = V128)),
              u i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (u = (t = ((ba i32x4_mul q) i32x4_shr_u 8) i32x4_add y) i32x4_add p) i32x4_shr_u
              6,
              v128_bitselect(z, aa, t i32x4_lt_u s),
              u i32x4_lt_u w) v128_and
            aa)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (u = (t = ((r i32x4_mul q) i32x4_shr_u 8) i32x4_add da) i32x4_add p) i32x4_shr_u
              6,
              v128_bitselect(z, aa, t i32x4_lt_u s),
              u i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (p = (q = ((ca i32x4_mul q) i32x4_shr_u 8) i32x4_add ea) i32x4_add p) i32x4_shr_u
              6,
              v128_bitselect(z, aa, q i32x4_lt_u s),
              p i32x4_lt_u w) v128_and
            aa))),
      SimdStoreLane(ha, aa),
      SimdStoreLane(ia, aa),
      SimdStoreLane(ja, aa),
      SimdStoreLane(ka, aa),
      SimdStoreLane(la, aa),
      SimdStoreLane(ma, aa),
      SimdStoreLane(na, aa),
      SimdStoreLane(oa, aa),
      SimdStoreLane(pa, aa),
      SimdStoreLane(qa, aa),
      SimdStoreLane(ra, aa),
      SimdStoreLane(sa, aa),
      SimdStoreLane(ta, aa),
      SimdStoreLane(ua, aa),
      SimdStoreLane(va, aa);
    g[3]:byte = 255;
    ha[3]:byte = 255;
    ia[3]:byte = 255;
    ja[3] = 255;
    ka[3] = 255;
    la[3] = 255;
    ma[3] = 255;
    na[3] = 255;
    oa[3] = 255;
    pa[3] = 255;
    qa[3] = 255;
    ra[3] = 255;
    sa[3] = 255;
    ta[3] = 255;
    ua[3] = 255;
    va[3] = 255;
    k = k i32x4_add (aa = V128);
    m = m + 16;
    n = n + 16;
    o = o + 16;
    j = j i32x4_add aa;
    i = i i32x4_add aa;
    h = h i32x4_add aa;
    if (l = l + -16) continue L_c;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
  }
  if (f == e) goto B_a;
  label B_b:
  g = a + f;
  ha = b + f;
  ia = c + f;
  ma = e - f;
  d = d + (f << 2);
  loop L_d {
    ja = ia[0]:ubyte;
    ka = ha[0]:ubyte;
    la = g[0]:ubyte;
    (d + 3)[0]:byte = 255;
    (d + 2)[0]:byte =
      select_if(
        (oa = (na = (ka * 33050 >> 8) + (la = la * 19077 >> 8)) + -17685) >>
        6,
        select_if(0, 255, na < 17685),
        oa < 16384);
    d[0] =
      select_if((oa = (na = (ja * 26149 >> 8) + la) + -14234) >> 6,
                select_if(0, 255, na < 14234),
                oa < 16384);
    (d + 1)[0]:byte =
      select_if(
        (ka = (ja = la - (ka * 6419 >> 8) + (ja * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, ja < -8708),
        ka < 16384);
    d = d + 4;
    g = g + 1;
    ha = ha + 1;
    ia = ia + 1;
    ma = ma + -1;
    if (ma) continue L_d;
  }
  label B_a:
}

function WebPYuv444ToBgra_C(a:int, b:int, c:int, d:byte_ptr, e:int) {
  var g:int;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:int;
  var ia:int;
  var ja:byte_ptr;
  var ka:byte_ptr;
  var la:byte_ptr;
  var ma:byte_ptr;
  var na:byte_ptr;
  var oa:byte_ptr;
  var pa:byte_ptr;
  var qa:byte_ptr;
  var ra:byte_ptr;
  var sa:byte_ptr;
  var ta:byte_ptr;
  var ua:byte_ptr;
  var va:byte_ptr;
  if (e < 1) goto B_a;
  var f:int = 0;
  if (e < 16) goto B_b;
  f = 0;
  if (a + e > d & (g = d + (e << 2)) > a) goto B_b;
  f = 0;
  if (b + e > d & g > b) goto B_b;
  f = 0;
  if (c + e > d & g > c) goto B_b;
  var h:simd = V128;
  var i:simd = V128;
  var j:simd = V128;
  var k:simd = V128;
  f = e & -16;
  var l:int = f;
  var m:simd_ptr@1 = c;
  var n:simd_ptr@1 = b;
  var o:simd_ptr@1 = a;
  loop L_c {
    g = d + SimdLaneOp(p = k i32x4_shl 2);
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        g,
        q = 
          ((v128_bitselect(
              (y = 
                 (w = 
                    (((r = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(q = n[0]))) i32x4_mul
                      (s = V128)) i32x4_shr_u
                     8) i32x4_add
                    (v = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(t = o[0])) i32x4_mul
                        (u = V128)) i32x4_shr_u
                       8)) i32x4_add
                 (x = V128)) i32x4_shr_u
              6,
              v128_bitselect(z = V128, aa = V128, w i32x4_lt_u (ba = V128)),
              y i32x4_lt_u (w = V128)) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ea = 
                 (da = 
                    (((ca = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                      s) i32x4_shr_u
                     8) i32x4_add
                    (y = (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(SimdShuffleOp(t, aa))) i32x4_mul
                          u) i32x4_shr_u
                         8)) i32x4_add
                 x) i32x4_shr_u
              6,
              v128_bitselect(z, aa, da i32x4_lt_u ba),
              ea i32x4_lt_u w) v128_and
            aa)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ga = 
                 (ea = 
                    (((fa = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                      s) i32x4_shr_u
                     8) i32x4_add
                    (da = (i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(t, aa))) i32x4_mul
                           u) i32x4_shr_u
                          8)) i32x4_add
                 x) i32x4_shr_u
              6,
              v128_bitselect(z, aa, ea i32x4_lt_u ba),
              ga i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (s = 
                 (q = 
                    (((ga = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                      s) i32x4_shr_u
                     8) i32x4_add
                    (ea = (i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(t, aa))) i32x4_mul
                           u) i32x4_shr_u
                          8)) i32x4_add
                 x) i32x4_shr_u
              6,
              v128_bitselect(z, aa, q i32x4_lt_u ba),
              s i32x4_lt_u w) v128_and
            aa))),
      SimdStoreLane(ha = d + SimdLaneOp(p), q),
      SimdStoreLane(ia = d + SimdLaneOp(p), q),
      SimdStoreLane(ja = d + SimdLaneOp(p), q),
      SimdStoreLane(ka = d + SimdLaneOp(p = j i32x4_shl 2), q),
      SimdStoreLane(la = d + SimdLaneOp(p), q),
      SimdStoreLane(ma = d + SimdLaneOp(p), q),
      SimdStoreLane(na = d + SimdLaneOp(p), q),
      SimdStoreLane(oa = d + SimdLaneOp(p = i i32x4_shl 2), q),
      SimdStoreLane(pa = d + SimdLaneOp(p), q),
      SimdStoreLane(qa = d + SimdLaneOp(p), q),
      SimdStoreLane(ra = d + SimdLaneOp(p), q),
      SimdStoreLane(sa = d + SimdLaneOp(p = h i32x4_shl 2), q),
      SimdStoreLane(ta = d + SimdLaneOp(p), q),
      SimdStoreLane(ua = d + SimdLaneOp(p), q),
      SimdStoreLane(va = d + SimdLaneOp(p), q),
      SimdStoreLane(
        g,
        q = 
          ((v128_bitselect(
              (r = 
                 (ba = 
                    v i32x4_sub
                    (((r i32x4_mul (q = V128)) i32x4_shr_u 8) i32x4_add
                     (((x = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(p = m[0]))) i32x4_mul
                       (s = V128)) i32x4_shr_u
                      8))) i32x4_add
                 (t = V128)) i32x4_shr_u
              6,
              v128_bitselect(z, aa, ba i32x4_lt_s (u = V128)),
              r i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ca = 
                 (r = 
                    y i32x4_sub
                    (((ca i32x4_mul q) i32x4_shr_u 8) i32x4_add
                     (((ba = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(p, aa)))) i32x4_mul
                       s) i32x4_shr_u
                      8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(z, aa, r i32x4_lt_s u),
              ca i32x4_lt_u w) v128_and
            aa)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (fa = 
                 (ca = 
                    da i32x4_sub
                    (((fa i32x4_mul q) i32x4_shr_u 8) i32x4_add
                     (((r = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(p, aa)))) i32x4_mul
                       s) i32x4_shr_u
                      8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(z, aa, ca i32x4_lt_s u),
              fa i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (p = 
                 (q = 
                    ea i32x4_sub
                    (((ga i32x4_mul q) i32x4_shr_u 8) i32x4_add
                     (((ca = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(p, aa)))) i32x4_mul
                       s) i32x4_shr_u
                      8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(z, aa, q i32x4_lt_s u),
              p i32x4_lt_u w) v128_and
            aa))),
      SimdStoreLane(ha, q),
      SimdStoreLane(ia, q),
      SimdStoreLane(ja, q),
      SimdStoreLane(ka, q),
      SimdStoreLane(la, q),
      SimdStoreLane(ma, q),
      SimdStoreLane(na, q),
      SimdStoreLane(oa, q),
      SimdStoreLane(pa, q),
      SimdStoreLane(qa, q),
      SimdStoreLane(ra, q),
      SimdStoreLane(sa, q),
      SimdStoreLane(ta, q),
      SimdStoreLane(ua, q),
      SimdStoreLane(va, q),
      SimdStoreLane(
        g,
        aa = 
          ((v128_bitselect(
              (u = 
                 (t = ((x i32x4_mul (q = V128)) i32x4_shr_u 8) i32x4_add v) i32x4_add
                 (p = V128)) i32x4_shr_u
              6,
              v128_bitselect(z, aa, t i32x4_lt_u (s = V128)),
              u i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (u = (t = ((ba i32x4_mul q) i32x4_shr_u 8) i32x4_add y) i32x4_add p) i32x4_shr_u
              6,
              v128_bitselect(z, aa, t i32x4_lt_u s),
              u i32x4_lt_u w) v128_and
            aa)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (u = (t = ((r i32x4_mul q) i32x4_shr_u 8) i32x4_add da) i32x4_add p) i32x4_shr_u
              6,
              v128_bitselect(z, aa, t i32x4_lt_u s),
              u i32x4_lt_u w) v128_and
            aa) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (p = (q = ((ca i32x4_mul q) i32x4_shr_u 8) i32x4_add ea) i32x4_add p) i32x4_shr_u
              6,
              v128_bitselect(z, aa, q i32x4_lt_u s),
              p i32x4_lt_u w) v128_and
            aa))),
      SimdStoreLane(ha, aa),
      SimdStoreLane(ia, aa),
      SimdStoreLane(ja, aa),
      SimdStoreLane(ka, aa),
      SimdStoreLane(la, aa),
      SimdStoreLane(ma, aa),
      SimdStoreLane(na, aa),
      SimdStoreLane(oa, aa),
      SimdStoreLane(pa, aa),
      SimdStoreLane(qa, aa),
      SimdStoreLane(ra, aa),
      SimdStoreLane(sa, aa),
      SimdStoreLane(ta, aa),
      SimdStoreLane(ua, aa),
      SimdStoreLane(va, aa);
    g[3]:byte = 255;
    ha[3]:byte = 255;
    ia[3]:byte = 255;
    ja[3] = 255;
    ka[3] = 255;
    la[3] = 255;
    ma[3] = 255;
    na[3] = 255;
    oa[3] = 255;
    pa[3] = 255;
    qa[3] = 255;
    ra[3] = 255;
    sa[3] = 255;
    ta[3] = 255;
    ua[3] = 255;
    va[3] = 255;
    k = k i32x4_add (aa = V128);
    m = m + 16;
    n = n + 16;
    o = o + 16;
    j = j i32x4_add aa;
    i = i i32x4_add aa;
    h = h i32x4_add aa;
    if (l = l + -16) continue L_c;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
  }
  if (f == e) goto B_a;
  label B_b:
  g = a + f;
  ha = b + f;
  ia = c + f;
  ma = e - f;
  d = d + (f << 2);
  loop L_d {
    ja = ha[0]:ubyte;
    ka = ia[0]:ubyte;
    la = g[0]:ubyte;
    (d + 3)[0]:byte = 255;
    (d + 2)[0]:byte =
      select_if(
        (oa = (na = (ka * 26149 >> 8) + (la = la * 19077 >> 8)) + -14234) >>
        6,
        select_if(0, 255, na < 14234),
        oa < 16384);
    d[0] =
      select_if((oa = (na = (ja * 33050 >> 8) + la) + -17685) >> 6,
                select_if(0, 255, na < 17685),
                oa < 16384);
    (d + 1)[0]:byte =
      select_if(
        (ka = (ja = la - (ja * 6419 >> 8) + (ka * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, ja < -8708),
        ka < 16384);
    d = d + 4;
    g = g + 1;
    ha = ha + 1;
    ia = ia + 1;
    ma = ma + -1;
    if (ma) continue L_d;
  }
  label B_a:
}

function WebPYuv444ToRgb_C(a:int, b:int, c:int, d:byte_ptr, e:int) {
  var g:simd_ptr@1;
  var o:simd;
  var p:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:int;
  var ja:int;
  var ka:int;
  var la:int;
  var ma:int;
  var na:int;
  var oa:int;
  var pa:int;
  var qa:int;
  var ra:int;
  var sa:int;
  var ta:int;
  var ua:int;
  var va:int;
  var wa:int;
  var q:int;
  var m:simd_ptr@1;
  var n:simd_ptr@1;
  if (e < 1) goto B_a;
  var f:int = 0;
  if (e < 16) goto B_b;
  f = 0;
  if (a + e > d & (g = d + e * 3) > a) goto B_b;
  f = 0;
  if (b + e > d & g > b) goto B_b;
  f = 0;
  if (c + e > d & g > c) goto B_b;
  var h:simd = V128;
  var i:simd = V128;
  var j:simd = V128;
  var k:simd = V128;
  f = e & -16;
  var l:int = f;
  g = c;
  m = b;
  n = a;
  loop L_c {
    q = d + SimdLaneOp(p = k i32x4_mul (o = V128));
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        q,
        r = 
          ((v128_bitselect(
              (z = 
                 (x = 
                    (((s = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(r = g[0]))) i32x4_mul
                      (t = V128)) i32x4_shr_u
                     8) i32x4_add
                    (w = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(u = n[0])) i32x4_mul
                        (v = V128)) i32x4_shr_u
                       8)) i32x4_add
                 (y = V128)) i32x4_shr_u
              6,
              v128_bitselect(aa = V128, ba = V128, x i32x4_lt_u (ca = V128)),
              z i32x4_lt_u (x = V128)) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (fa = 
                 (ea = 
                    (((da = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(r, ba)))) i32x4_mul
                      t) i32x4_shr_u
                     8) i32x4_add
                    (z = (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(SimdShuffleOp(u, ba))) i32x4_mul
                          v) i32x4_shr_u
                         8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, ea i32x4_lt_u ca),
              fa i32x4_lt_u x) v128_and
            ba)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ha = 
                 (ga = 
                    (((fa = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(r, ba)))) i32x4_mul
                      t) i32x4_shr_u
                     8) i32x4_add
                    (ea = (i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(u, ba))) i32x4_mul
                           v) i32x4_shr_u
                          8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, ga i32x4_lt_u ca),
              ha i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (t = 
                 (r = 
                    (((ga = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(r, ba)))) i32x4_mul
                      t) i32x4_shr_u
                     8) i32x4_add
                    (v = (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(SimdShuffleOp(u, ba))) i32x4_mul
                          v) i32x4_shr_u
                         8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, r i32x4_lt_u ca),
              t i32x4_lt_u x) v128_and
            ba))),
      SimdStoreLane(ia = d + SimdLaneOp(p), r),
      SimdStoreLane(ja = d + SimdLaneOp(p), r),
      SimdStoreLane(ka = d + SimdLaneOp(p), r),
      SimdStoreLane(la = d + SimdLaneOp(p = j i32x4_mul o), r),
      SimdStoreLane(ma = d + SimdLaneOp(p), r),
      SimdStoreLane(na = d + SimdLaneOp(p), r),
      SimdStoreLane(oa = d + SimdLaneOp(p), r),
      SimdStoreLane(pa = d + SimdLaneOp(p = i i32x4_mul o), r),
      SimdStoreLane(qa = d + SimdLaneOp(p), r),
      SimdStoreLane(ra = d + SimdLaneOp(p), r),
      SimdStoreLane(sa = d + SimdLaneOp(p), r),
      SimdStoreLane(ta = d + SimdLaneOp(o = h i32x4_mul o), r),
      SimdStoreLane(ua = d + SimdLaneOp(o), r),
      SimdStoreLane(va = d + SimdLaneOp(o), r),
      SimdStoreLane(wa = d + SimdLaneOp(o), r),
      SimdStoreLane(
        q,
        r = 
          ((v128_bitselect(
              (s = 
                 (ca = 
                    w i32x4_sub
                    ((((y = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(r = m[0]))) i32x4_mul
                       (o = V128)) i32x4_shr_u
                      8) i32x4_add
                     ((s i32x4_mul (p = V128)) i32x4_shr_u 8))) i32x4_add
                 (t = V128)) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, ca i32x4_lt_s (u = V128)),
              s i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (da = 
                 (s = 
                    z i32x4_sub
                    ((((ca = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(r, ba)))) i32x4_mul
                       o) i32x4_shr_u
                      8) i32x4_add
                     ((da i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, s i32x4_lt_s u),
              da i32x4_lt_u x) v128_and
            ba)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (fa = 
                 (da = 
                    ea i32x4_sub
                    ((((s = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(r, ba)))) i32x4_mul
                       o) i32x4_shr_u
                      8) i32x4_add
                     ((fa i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, da i32x4_lt_s u),
              fa i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (o = 
                 (r = 
                    v i32x4_sub
                    ((((da = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(r, ba)))) i32x4_mul
                       o) i32x4_shr_u
                      8) i32x4_add
                     ((ga i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, r i32x4_lt_s u),
              o i32x4_lt_u x) v128_and
            ba))),
      SimdStoreLane(ia, r),
      SimdStoreLane(ja, r),
      SimdStoreLane(ka, r),
      SimdStoreLane(la, r),
      SimdStoreLane(ma, r),
      SimdStoreLane(na, r),
      SimdStoreLane(oa, r),
      SimdStoreLane(pa, r),
      SimdStoreLane(qa, r),
      SimdStoreLane(ra, r),
      SimdStoreLane(sa, r),
      SimdStoreLane(ta, r),
      SimdStoreLane(ua, r),
      SimdStoreLane(va, r),
      SimdStoreLane(wa, r),
      SimdStoreLane(
        q,
        ba = 
          ((v128_bitselect(
              (u = 
                 (t = ((y i32x4_mul (r = V128)) i32x4_shr_u 8) i32x4_add w) i32x4_add
                 (o = V128)) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, t i32x4_lt_u (p = V128)),
              u i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (u = (t = ((ca i32x4_mul r) i32x4_shr_u 8) i32x4_add z) i32x4_add o) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, t i32x4_lt_u p),
              u i32x4_lt_u x) v128_and
            ba)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (u = (t = ((s i32x4_mul r) i32x4_shr_u 8) i32x4_add ea) i32x4_add o) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, t i32x4_lt_u p),
              u i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (o = (r = ((da i32x4_mul r) i32x4_shr_u 8) i32x4_add v) i32x4_add o) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, r i32x4_lt_u p),
              o i32x4_lt_u x) v128_and
            ba))),
      SimdStoreLane(ia, ba),
      SimdStoreLane(ja, ba),
      SimdStoreLane(ka, ba),
      SimdStoreLane(la, ba),
      SimdStoreLane(ma, ba),
      SimdStoreLane(na, ba),
      SimdStoreLane(oa, ba),
      SimdStoreLane(pa, ba),
      SimdStoreLane(qa, ba),
      SimdStoreLane(ra, ba),
      SimdStoreLane(sa, ba),
      SimdStoreLane(ta, ba),
      SimdStoreLane(ua, ba),
      SimdStoreLane(va, ba),
      SimdStoreLane(wa, ba);
    k = k i32x4_add (ba = V128);
    g = g + 16;
    m = m + 16;
    n = n + 16;
    j = j i32x4_add ba;
    i = i i32x4_add ba;
    h = h i32x4_add ba;
    if (l = l + -16) continue L_c;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
  }
  if (f == e) goto B_a;
  label B_b:
  d = d + f * 3;
  loop L_d {
    g = (c + f)[0]:ubyte;
    (d + 2)[0]:byte =
      select_if((ia = (q = ((n = (b + f)[0]:ubyte) * 33050 >> 8) +
                           (m = (a + f)[0]:ubyte * 19077 >> 8)) +
                      -17685) >>
                6,
                select_if(0, 255, q < 17685),
                ia < 16384);
    d[0] =
      select_if((ia = (q = (g * 26149 >> 8) + m) + -14234) >> 6,
                select_if(0, 255, q < 14234),
                ia < 16384);
    (d + 1)[0]:byte =
      select_if(
        (m = (g = m - (n * 6419 >> 8) + (g * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, g < -8708),
        m < 16384);
    a = a + 1;
    b = b + 1;
    c = c + 1;
    d = d + 3;
    if (f != (e = e + -1)) continue L_d;
  }
  label B_a:
}

function WebPYuv444ToBgr_C(a:int, b:int, c:int, d:byte_ptr, e:int) {
  var g:simd_ptr@1;
  var o:simd;
  var p:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:int;
  var ja:int;
  var ka:int;
  var la:int;
  var ma:int;
  var na:int;
  var oa:int;
  var pa:int;
  var qa:int;
  var ra:int;
  var sa:int;
  var ta:int;
  var ua:int;
  var va:int;
  var wa:int;
  var q:int;
  var m:simd_ptr@1;
  var n:simd_ptr@1;
  if (e < 1) goto B_a;
  var f:int = 0;
  if (e < 16) goto B_b;
  f = 0;
  if (a + e > d & (g = d + e * 3) > a) goto B_b;
  f = 0;
  if (b + e > d & g > b) goto B_b;
  f = 0;
  if (c + e > d & g > c) goto B_b;
  var h:simd = V128;
  var i:simd = V128;
  var j:simd = V128;
  var k:simd = V128;
  f = e & -16;
  var l:int = f;
  g = c;
  m = b;
  n = a;
  loop L_c {
    q = d + SimdLaneOp(p = k i32x4_mul (o = V128));
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        q,
        r = 
          ((v128_bitselect(
              (z = 
                 (x = 
                    (((s = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(r = m[0]))) i32x4_mul
                      (t = V128)) i32x4_shr_u
                     8) i32x4_add
                    (w = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(u = n[0])) i32x4_mul
                        (v = V128)) i32x4_shr_u
                       8)) i32x4_add
                 (y = V128)) i32x4_shr_u
              6,
              v128_bitselect(aa = V128, ba = V128, x i32x4_lt_u (ca = V128)),
              z i32x4_lt_u (x = V128)) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (fa = 
                 (ea = 
                    (((da = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(r, ba)))) i32x4_mul
                      t) i32x4_shr_u
                     8) i32x4_add
                    (z = (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(SimdShuffleOp(u, ba))) i32x4_mul
                          v) i32x4_shr_u
                         8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, ea i32x4_lt_u ca),
              fa i32x4_lt_u x) v128_and
            ba)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ha = 
                 (ga = 
                    (((fa = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(r, ba)))) i32x4_mul
                      t) i32x4_shr_u
                     8) i32x4_add
                    (ea = (i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(u, ba))) i32x4_mul
                           v) i32x4_shr_u
                          8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, ga i32x4_lt_u ca),
              ha i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (t = 
                 (r = 
                    (((ga = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(r, ba)))) i32x4_mul
                      t) i32x4_shr_u
                     8) i32x4_add
                    (v = (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(SimdShuffleOp(u, ba))) i32x4_mul
                          v) i32x4_shr_u
                         8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, r i32x4_lt_u ca),
              t i32x4_lt_u x) v128_and
            ba))),
      SimdStoreLane(ia = d + SimdLaneOp(p), r),
      SimdStoreLane(ja = d + SimdLaneOp(p), r),
      SimdStoreLane(ka = d + SimdLaneOp(p), r),
      SimdStoreLane(la = d + SimdLaneOp(p = j i32x4_mul o), r),
      SimdStoreLane(ma = d + SimdLaneOp(p), r),
      SimdStoreLane(na = d + SimdLaneOp(p), r),
      SimdStoreLane(oa = d + SimdLaneOp(p), r),
      SimdStoreLane(pa = d + SimdLaneOp(p = i i32x4_mul o), r),
      SimdStoreLane(qa = d + SimdLaneOp(p), r),
      SimdStoreLane(ra = d + SimdLaneOp(p), r),
      SimdStoreLane(sa = d + SimdLaneOp(p), r),
      SimdStoreLane(ta = d + SimdLaneOp(o = h i32x4_mul o), r),
      SimdStoreLane(ua = d + SimdLaneOp(o), r),
      SimdStoreLane(va = d + SimdLaneOp(o), r),
      SimdStoreLane(wa = d + SimdLaneOp(o), r),
      SimdStoreLane(
        q,
        r = 
          ((v128_bitselect(
              (s = 
                 (ca = 
                    w i32x4_sub
                    (((s i32x4_mul (r = V128)) i32x4_shr_u 8) i32x4_add
                     (((y = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = g[0]))) i32x4_mul
                       (p = V128)) i32x4_shr_u
                      8))) i32x4_add
                 (t = V128)) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, ca i32x4_lt_s (u = V128)),
              s i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (da = 
                 (s = 
                    z i32x4_sub
                    (((da i32x4_mul r) i32x4_shr_u 8) i32x4_add
                     (((ca = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(o, ba)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, s i32x4_lt_s u),
              da i32x4_lt_u x) v128_and
            ba)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (fa = 
                 (da = 
                    ea i32x4_sub
                    (((fa i32x4_mul r) i32x4_shr_u 8) i32x4_add
                     (((s = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, ba)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, da i32x4_lt_s u),
              fa i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (o = 
                 (r = 
                    v i32x4_sub
                    (((ga i32x4_mul r) i32x4_shr_u 8) i32x4_add
                     (((da = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(o, ba)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 t) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, r i32x4_lt_s u),
              o i32x4_lt_u x) v128_and
            ba))),
      SimdStoreLane(ia, r),
      SimdStoreLane(ja, r),
      SimdStoreLane(ka, r),
      SimdStoreLane(la, r),
      SimdStoreLane(ma, r),
      SimdStoreLane(na, r),
      SimdStoreLane(oa, r),
      SimdStoreLane(pa, r),
      SimdStoreLane(qa, r),
      SimdStoreLane(ra, r),
      SimdStoreLane(sa, r),
      SimdStoreLane(ta, r),
      SimdStoreLane(ua, r),
      SimdStoreLane(va, r),
      SimdStoreLane(wa, r),
      SimdStoreLane(
        q,
        ba = 
          ((v128_bitselect(
              (u = 
                 (t = ((y i32x4_mul (r = V128)) i32x4_shr_u 8) i32x4_add w) i32x4_add
                 (o = V128)) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, t i32x4_lt_u (p = V128)),
              u i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (u = (t = ((ca i32x4_mul r) i32x4_shr_u 8) i32x4_add z) i32x4_add o) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, t i32x4_lt_u p),
              u i32x4_lt_u x) v128_and
            ba)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (u = (t = ((s i32x4_mul r) i32x4_shr_u 8) i32x4_add ea) i32x4_add o) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, t i32x4_lt_u p),
              u i32x4_lt_u x) v128_and
            ba) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (o = (r = ((da i32x4_mul r) i32x4_shr_u 8) i32x4_add v) i32x4_add o) i32x4_shr_u
              6,
              v128_bitselect(aa, ba, r i32x4_lt_u p),
              o i32x4_lt_u x) v128_and
            ba))),
      SimdStoreLane(ia, ba),
      SimdStoreLane(ja, ba),
      SimdStoreLane(ka, ba),
      SimdStoreLane(la, ba),
      SimdStoreLane(ma, ba),
      SimdStoreLane(na, ba),
      SimdStoreLane(oa, ba),
      SimdStoreLane(pa, ba),
      SimdStoreLane(qa, ba),
      SimdStoreLane(ra, ba),
      SimdStoreLane(sa, ba),
      SimdStoreLane(ta, ba),
      SimdStoreLane(ua, ba),
      SimdStoreLane(va, ba),
      SimdStoreLane(wa, ba);
    k = k i32x4_add (ba = V128);
    g = g + 16;
    m = m + 16;
    n = n + 16;
    j = j i32x4_add ba;
    i = i i32x4_add ba;
    h = h i32x4_add ba;
    if (l = l + -16) continue L_c;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
  }
  if (f == e) goto B_a;
  label B_b:
  d = d + f * 3;
  loop L_d {
    g = (b + f)[0]:ubyte;
    (d + 2)[0]:byte =
      select_if((ia = (q = ((n = (c + f)[0]:ubyte) * 26149 >> 8) +
                           (m = (a + f)[0]:ubyte * 19077 >> 8)) +
                      -14234) >>
                6,
                select_if(0, 255, q < 14234),
                ia < 16384);
    d[0] =
      select_if((ia = (q = (g * 33050 >> 8) + m) + -17685) >> 6,
                select_if(0, 255, q < 17685),
                ia < 16384);
    (d + 1)[0]:byte =
      select_if(
        (m = (g = m - (g * 6419 >> 8) + (n * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, g < -8708),
        m < 16384);
    a = a + 1;
    b = b + 1;
    c = c + 1;
    d = d + 3;
    if (f != (e = e + -1)) continue L_d;
  }
  label B_a:
}

function WebPYuv444ToArgb_C(a:int, b:int, c:int, d:byte_ptr, e:int) {
  var g:int;
  var p:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:simd;
  var na:simd;
  var oa:simd;
  var pa:simd;
  var qa:simd;
  var ra:simd;
  var sa:simd;
  var ta:simd;
  var ua:simd;
  var va:simd;
  var r:int;
  var q:int;
  var t:byte_ptr;
  var u:byte_ptr;
  var w:byte_ptr;
  var x:byte_ptr;
  var s:byte_ptr;
  var v:byte_ptr;
  if (e < 1) goto B_a;
  var f:int = 0;
  if (e < 16) goto B_b;
  f = 0;
  if (a + e > d & (g = d + (e << 2)) > a) goto B_b;
  f = 0;
  if (b + e > d & g > b) goto B_b;
  f = 0;
  if (c + e > d & g > c) goto B_b;
  var h:simd = V128;
  var i:simd = V128;
  var j:simd = V128;
  var k:simd = V128;
  f = e & -16;
  var l:int = f;
  var m:simd_ptr@1 = c;
  var n:simd_ptr@1 = b;
  var o:simd_ptr@1 = a;
  loop L_c {
    g = d + SimdLaneOp(p = k i32x4_shl 2);
    g[0]:byte = 255;
    q = d + SimdLaneOp(p);
    q[0]:byte = 255;
    r = d + SimdLaneOp(p);
    r[0]:byte = 255;
    s = d + SimdLaneOp(p);
    s[0] = 255;
    t = d + SimdLaneOp(p = j i32x4_shl 2);
    t[0] = 255;
    u = d + SimdLaneOp(p);
    u[0] = 255;
    v = d + SimdLaneOp(p);
    v[0] = 255;
    w = d + SimdLaneOp(p);
    w[0] = 255;
    x = d + SimdLaneOp(p = i i32x4_shl 2);
    x[0] = 255;
    var y:byte_ptr = d + SimdLaneOp(p);
    y[0] = 255;
    var z:byte_ptr = d + SimdLaneOp(p);
    z[0] = 255;
    var aa:byte_ptr = d + SimdLaneOp(p);
    aa[0] = 255;
    var ba:byte_ptr = d + SimdLaneOp(p = h i32x4_shl 2);
    ba[0] = 255;
    var ca:byte_ptr = d + SimdLaneOp(p);
    ca[0] = 255;
    var da:byte_ptr = d + SimdLaneOp(p);
    da[0] = 255;
    var ea:byte_ptr = d + SimdLaneOp(p);
    ea[0] = 255;
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        g,
        fa = 
          ((v128_bitselect(
              (na = 
                 (la = 
                    (((ga = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(fa = m[0]))) i32x4_mul
                      (ha = V128)) i32x4_shr_u
                     8) i32x4_add
                    (ka = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(ia = o[0])) i32x4_mul
                        (ja = V128)) i32x4_shr_u
                       8)) i32x4_add
                 (ma = V128)) i32x4_shr_u
              6,
              v128_bitselect(oa = V128, p = V128, la i32x4_lt_u (pa = V128)),
              na i32x4_lt_u (la = V128)) v128_and
            p) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (sa = 
                 (ra = 
                    (((qa = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(fa, p)))) i32x4_mul
                      ha) i32x4_shr_u
                     8) i32x4_add
                    (na = (i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(ia, p))) i32x4_mul
                           ja) i32x4_shr_u
                          8)) i32x4_add
                 ma) i32x4_shr_u
              6,
              v128_bitselect(oa, p, ra i32x4_lt_u pa),
              sa i32x4_lt_u la) v128_and
            p)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ua = 
                 (sa = 
                    (((ta = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(fa, p)))) i32x4_mul
                      ha) i32x4_shr_u
                     8) i32x4_add
                    (ra = (i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(ia, p))) i32x4_mul
                           ja) i32x4_shr_u
                          8)) i32x4_add
                 ma) i32x4_shr_u
              6,
              v128_bitselect(oa, p, sa i32x4_lt_u pa),
              ua i32x4_lt_u la) v128_and
            p) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ha = 
                 (fa = 
                    (((ua = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(fa, p)))) i32x4_mul
                      ha) i32x4_shr_u
                     8) i32x4_add
                    (sa = (i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(ia, p))) i32x4_mul
                           ja) i32x4_shr_u
                          8)) i32x4_add
                 ma) i32x4_shr_u
              6,
              v128_bitselect(oa, p, fa i32x4_lt_u pa),
              ha i32x4_lt_u la) v128_and
            p))),
      SimdStoreLane(q, fa),
      SimdStoreLane(r, fa),
      SimdStoreLane(s, fa),
      SimdStoreLane(t, fa),
      SimdStoreLane(u, fa),
      SimdStoreLane(v, fa),
      SimdStoreLane(w, fa),
      SimdStoreLane(x, fa),
      SimdStoreLane(y, fa),
      SimdStoreLane(z, fa),
      SimdStoreLane(aa, fa),
      SimdStoreLane(ba, fa),
      SimdStoreLane(ca, fa),
      SimdStoreLane(da, fa),
      SimdStoreLane(ea, fa),
      SimdStoreLane(
        g,
        fa = 
          ((v128_bitselect(
              (va = 
                 (ga = 
                    ka i32x4_sub
                    ((((pa = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(fa = n[0]))) i32x4_mul
                       (ha = V128)) i32x4_shr_u
                      8) i32x4_add
                     ((ga i32x4_mul (ia = V128)) i32x4_shr_u 8))) i32x4_add
                 (ja = V128)) i32x4_shr_u
              6,
              v128_bitselect(oa, p, ga i32x4_lt_s (ma = V128)),
              va i32x4_lt_u la) v128_and
            p) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (va = 
                 (qa = 
                    na i32x4_sub
                    ((((ga = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(fa, p)))) i32x4_mul
                       ha) i32x4_shr_u
                      8) i32x4_add
                     ((qa i32x4_mul ia) i32x4_shr_u 8))) i32x4_add
                 ja) i32x4_shr_u
              6,
              v128_bitselect(oa, p, qa i32x4_lt_s ma),
              va i32x4_lt_u la) v128_and
            p)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (va = 
                 (ta = 
                    ra i32x4_sub
                    ((((qa = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(fa, p)))) i32x4_mul
                       ha) i32x4_shr_u
                      8) i32x4_add
                     ((ta i32x4_mul ia) i32x4_shr_u 8))) i32x4_add
                 ja) i32x4_shr_u
              6,
              v128_bitselect(oa, p, ta i32x4_lt_s ma),
              va i32x4_lt_u la) v128_and
            p) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ha = 
                 (fa = 
                    sa i32x4_sub
                    ((((ta = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(fa, p)))) i32x4_mul
                       ha) i32x4_shr_u
                      8) i32x4_add
                     ((ua i32x4_mul ia) i32x4_shr_u 8))) i32x4_add
                 ja) i32x4_shr_u
              6,
              v128_bitselect(oa, p, fa i32x4_lt_s ma),
              ha i32x4_lt_u la) v128_and
            p))),
      SimdStoreLane(q, fa),
      SimdStoreLane(r, fa),
      SimdStoreLane(s, fa),
      SimdStoreLane(t, fa),
      SimdStoreLane(u, fa),
      SimdStoreLane(v, fa),
      SimdStoreLane(w, fa),
      SimdStoreLane(x, fa),
      SimdStoreLane(y, fa),
      SimdStoreLane(z, fa),
      SimdStoreLane(aa, fa),
      SimdStoreLane(ba, fa),
      SimdStoreLane(ca, fa),
      SimdStoreLane(da, fa),
      SimdStoreLane(ea, fa),
      SimdStoreLane(
        g,
        p = 
          ((v128_bitselect(
              (ma = 
                 (ja = ((pa i32x4_mul (fa = V128)) i32x4_shr_u 8) i32x4_add ka) i32x4_add
                 (ha = V128)) i32x4_shr_u
              6,
              v128_bitselect(oa, p, ja i32x4_lt_u (ia = V128)),
              ma i32x4_lt_u la) v128_and
            p) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ma = 
                 (ja = ((ga i32x4_mul fa) i32x4_shr_u 8) i32x4_add na) i32x4_add ha) i32x4_shr_u
              6,
              v128_bitselect(oa, p, ja i32x4_lt_u ia),
              ma i32x4_lt_u la) v128_and
            p)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ma = 
                 (ja = ((qa i32x4_mul fa) i32x4_shr_u 8) i32x4_add ra) i32x4_add ha) i32x4_shr_u
              6,
              v128_bitselect(oa, p, ja i32x4_lt_u ia),
              ma i32x4_lt_u la) v128_and
            p) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ha = 
                 (fa = ((ta i32x4_mul fa) i32x4_shr_u 8) i32x4_add sa) i32x4_add ha) i32x4_shr_u
              6,
              v128_bitselect(oa, p, fa i32x4_lt_u ia),
              ha i32x4_lt_u la) v128_and
            p))),
      SimdStoreLane(q, p),
      SimdStoreLane(r, p),
      SimdStoreLane(s, p),
      SimdStoreLane(t, p),
      SimdStoreLane(u, p),
      SimdStoreLane(v, p),
      SimdStoreLane(w, p),
      SimdStoreLane(x, p),
      SimdStoreLane(y, p),
      SimdStoreLane(z, p),
      SimdStoreLane(aa, p),
      SimdStoreLane(ba, p),
      SimdStoreLane(ca, p),
      SimdStoreLane(da, p),
      SimdStoreLane(ea, p);
    k = k i32x4_add (p = V128);
    m = m + 16;
    n = n + 16;
    o = o + 16;
    j = j i32x4_add p;
    i = i i32x4_add p;
    h = h i32x4_add p;
    if (l = l + -16) continue L_c;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
  }
  if (f == e) goto B_a;
  label B_b:
  g = a + f;
  q = b + f;
  r = c + f;
  v = e - f;
  d = d + (f << 2);
  loop L_d {
    s = r[0]:ubyte;
    t = q[0]:ubyte;
    u = g[0]:ubyte;
    d[0] = 255;
    (d + 3)[0]:byte =
      select_if(
        (x = (w = (t * 33050 >> 8) + (u = u * 19077 >> 8)) + -17685) >> 6,
        select_if(0, 255, w < 17685),
        x < 16384);
    (d + 1)[0]:byte =
      select_if((x = (w = (s * 26149 >> 8) + u) + -14234) >> 6,
                select_if(0, 255, w < 14234),
                x < 16384);
    (d + 2)[0]:byte =
      select_if(
        (t = (s = u - (t * 6419 >> 8) + (s * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, s < -8708),
        t < 16384);
    d = d + 4;
    g = g + 1;
    q = q + 1;
    r = r + 1;
    v = v + -1;
    if (v) continue L_d;
  }
  label B_a:
}

function WebPYuv444ToRgba4444_C(a:int, b:int, c:int, d:byte_ptr, e:int) {
  var g:int;
  var o:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:simd;
  var na:simd;
  var oa:int;
  var pa:int;
  var qa:int;
  var ra:int;
  var sa:int;
  var ta:int;
  var ua:int;
  var va:int;
  var wa:int;
  var xa:int;
  var ya:int;
  var za:int;
  var ab:int;
  var bb:int;
  var cb:int;
  var n:int;
  var m:int;
  var l:int;
  var p:int;
  if (e < 1) goto B_a;
  var f:int = 0;
  if (e < 16) goto B_b;
  f = 0;
  if (a + e > d & (g = d + (e << 1)) > a) goto B_b;
  f = 0;
  if (b + e > d & g > b) goto B_b;
  f = 0;
  if (c + e > d & g > c) goto B_b;
  var h:simd = V128;
  var i:simd = V128;
  var j:simd = V128;
  var k:simd = V128;
  f = e & -16;
  l = f;
  g = c;
  m = b;
  n = a;
  loop L_c {
    p = d + SimdLaneOp(o = k i32x4_shl 1);
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31 = 
      SimdStoreLane(
        p,
        q = 
          ((((v128_bitselect(
                (y = 
                   (w = 
                      (((r = 
                           i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(q = g[0]:simd@1))) i32x4_mul
                        (s = V128)) i32x4_shr_u
                       8) i32x4_add
                      (v = 
                         (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(t = n[0]:simd@1)) i32x4_mul
                          (u = V128)) i32x4_shr_u
                         8)) i32x4_add
                   (x = V128)) i32x4_shr_u
                6,
                v128_bitselect(z = V128, aa = V128, w i32x4_lt_u (ba = V128)),
                y i32x4_lt_u (w = V128)) v128_and
              aa) v128_or
             v128_bitselect(
               (ga = 
                  (r = 
                     v i32x4_sub
                     ((((ca = 
                           i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(y = m[0]:simd@1))) i32x4_mul
                        (da = V128)) i32x4_shr_u
                       8) i32x4_add
                      ((r i32x4_mul (ea = V128)) i32x4_shr_u 8))) i32x4_add
                  (fa = V128)) i32x4_shr_u
               10,
               v128_bitselect(z, ha = V128, r i32x4_lt_s (ia = V128)),
               ga i32x4_lt_u w)) v128_and
            (r = V128)) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (la = 
                   (ka = 
                      (((ja = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(q, q)))) i32x4_mul
                        s) i32x4_shr_u
                       8) i32x4_add
                      (ga = (i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(t, q))) i32x4_mul
                             u) i32x4_shr_u
                            8)) i32x4_add
                   x) i32x4_shr_u
                6,
                v128_bitselect(z, aa, ka i32x4_lt_u ba),
                la i32x4_lt_u w) v128_and
              aa) v128_or
             v128_bitselect(
               (la = 
                  (ja = 
                     ga i32x4_sub
                     ((((ka = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(y, q)))) i32x4_mul
                        da) i32x4_shr_u
                       8) i32x4_add
                      ((ja i32x4_mul ea) i32x4_shr_u 8))) i32x4_add
                  fa) i32x4_shr_u
               10,
               v128_bitselect(z, ha, ja i32x4_lt_s ia),
               la i32x4_lt_u w)) v128_and
            r)) i8x16_narrow_i16x8_u
          ((((v128_bitselect(
                (na = 
                   (ma = 
                      (((la = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(q, q)))) i32x4_mul
                        s) i32x4_shr_u
                       8) i32x4_add
                      (ja = (i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(t, q))) i32x4_mul
                             u) i32x4_shr_u
                            8)) i32x4_add
                   x) i32x4_shr_u
                6,
                v128_bitselect(z, aa, ma i32x4_lt_u ba),
                na i32x4_lt_u w) v128_and
              aa) v128_or
             v128_bitselect(
               (na = 
                  (la = 
                     ja i32x4_sub
                     ((((ma = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(y, q)))) i32x4_mul
                        da) i32x4_shr_u
                       8) i32x4_add
                      ((la i32x4_mul ea) i32x4_shr_u 8))) i32x4_add
                  fa) i32x4_shr_u
               10,
               v128_bitselect(z, ha, la i32x4_lt_s ia),
               na i32x4_lt_u w)) v128_and
            r) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (u = 
                   (s = 
                      (((q = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(q, q)))) i32x4_mul
                        s) i32x4_shr_u
                       8) i32x4_add
                      (t = (i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(t, q))) i32x4_mul
                            u) i32x4_shr_u
                           8)) i32x4_add
                   x) i32x4_shr_u
                6,
                v128_bitselect(z, aa, s i32x4_lt_u ba),
                u i32x4_lt_u w) v128_and
              aa) v128_or
             v128_bitselect(
               (s = 
                  (q = 
                     t i32x4_sub
                     ((((u = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(y, q)))) i32x4_mul
                        da) i32x4_shr_u
                       8) i32x4_add
                      ((q i32x4_mul ea) i32x4_shr_u 8))) i32x4_add
                  fa) i32x4_shr_u
               10,
               v128_bitselect(z, ha, q i32x4_lt_s ia),
               s i32x4_lt_u w)) v128_and
            r))),
      SimdStoreLane(oa = d + SimdLaneOp(o), q),
      SimdStoreLane(pa = d + SimdLaneOp(o), q),
      SimdStoreLane(qa = d + SimdLaneOp(o), q),
      SimdStoreLane(ra = d + SimdLaneOp(o = j i32x4_shl 1), q),
      SimdStoreLane(sa = d + SimdLaneOp(o), q),
      SimdStoreLane(ta = d + SimdLaneOp(o), q),
      SimdStoreLane(ua = d + SimdLaneOp(o), q),
      SimdStoreLane(va = d + SimdLaneOp(o = i i32x4_shl 1), q),
      SimdStoreLane(wa = d + SimdLaneOp(o), q),
      SimdStoreLane(xa = d + SimdLaneOp(o), q),
      SimdStoreLane(ya = d + SimdLaneOp(o), q),
      SimdStoreLane(za = d + SimdLaneOp(o = h i32x4_shl 1), q),
      SimdStoreLane(ab = d + SimdLaneOp(o), q),
      SimdStoreLane(bb = d + SimdLaneOp(o), q),
      SimdStoreLane(cb = d + SimdLaneOp(o), q),
      SimdStoreLane(
        p,
        q = 
          (((v128_bitselect(
               (ba = 
                  (x = ((ca i32x4_mul (q = V128)) i32x4_shr_u 8) i32x4_add v) i32x4_add
                  (o = V128)) i32x4_shr_u
               6,
               v128_bitselect(z, aa, x i32x4_lt_u (s = V128)),
               ba i32x4_lt_u w) v128_and
             r) i16x8_narrow_i32x4_u
            (v128_bitselect(
               (ba = (x = ((ka i32x4_mul q) i32x4_shr_u 8) i32x4_add ga) i32x4_add o) i32x4_shr_u
               6,
               v128_bitselect(z, aa, x i32x4_lt_u s),
               ba i32x4_lt_u w) v128_and
             r)) i8x16_narrow_i16x8_u
           ((v128_bitselect(
               (ba = (x = ((ma i32x4_mul q) i32x4_shr_u 8) i32x4_add ja) i32x4_add o) i32x4_shr_u
               6,
               v128_bitselect(z, aa, x i32x4_lt_u s),
               ba i32x4_lt_u w) v128_and
             r) i16x8_narrow_i32x4_u
            (v128_bitselect(
               (o = (q = ((u i32x4_mul q) i32x4_shr_u 8) i32x4_add t) i32x4_add o) i32x4_shr_u
               6,
               v128_bitselect(z, aa, q i32x4_lt_u s),
               o i32x4_lt_u w) v128_and
             r))) v128_or
          V128),
      SimdStoreLane(oa, q),
      SimdStoreLane(pa, q),
      SimdStoreLane(qa, q),
      SimdStoreLane(ra, q),
      SimdStoreLane(sa, q),
      SimdStoreLane(ta, q),
      SimdStoreLane(ua, q),
      SimdStoreLane(va, q),
      SimdStoreLane(wa, q),
      SimdStoreLane(xa, q),
      SimdStoreLane(ya, q),
      SimdStoreLane(za, q),
      SimdStoreLane(ab, q),
      SimdStoreLane(bb, q),
      SimdStoreLane(cb, q);
    k = k i32x4_add (q = V128);
    g = g + 16;
    m = m + 16;
    n = n + 16;
    j = j i32x4_add q;
    i = i i32x4_add q;
    h = h i32x4_add q;
    if (l = l + -16) continue L_c;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
  }
  if (f == e) goto B_a;
  label B_b:
  g = a + f;
  m = b + f;
  n = c + f;
  oa = e - f;
  d = d + (f << 1);
  loop L_d {
    l = n[0]:ubyte;
    (d + 1)[0]:byte =
      select_if(
        (ra = 
           (qa = ((pa = m[0]:ubyte) * 33050 >> 8) + (p = g[0]:ubyte * 19077 >> 8)) +
           -17685) >>
        6,
        select_if(0, 240, qa < 17685),
        ra < 16384) |
      15;
    d[0] =
      (select_if((ra = (qa = (l * 26149 >> 8) + p) + -14234) >> 6,
                 select_if(0, 240, qa < 14234),
                 ra < 16384) &
       240) |
      select_if(
        (p = (l = p - (pa * 6419 >> 8) + (l * 13320 >> 8)) + 8708) >> 10,
        select_if(0, 15, l < -8708),
        p < 16384);
    d = d + 2;
    g = g + 1;
    m = m + 1;
    n = n + 1;
    oa = oa + -1;
    if (oa) continue L_d;
  }
  label B_a:
}

function WebPYuv444ToRgb565_C(a:int, b:int, c:int, d:byte_ptr, e:int) {
  var g:int;
  var o:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:simd;
  var na:simd;
  var oa:simd;
  var pa:int;
  var qa:int;
  var ra:int;
  var sa:int;
  var ta:int;
  var ua:int;
  var va:int;
  var wa:int;
  var xa:int;
  var ya:int;
  var za:int;
  var ab:int;
  var bb:int;
  var cb:int;
  var db:int;
  var n:int;
  var l:int;
  var m:int;
  var p:int;
  if (e < 1) goto B_a;
  var f:int = 0;
  if (e < 16) goto B_b;
  f = 0;
  if (a + e > d & (g = d + (e << 1)) > a) goto B_b;
  f = 0;
  if (b + e > d & g > b) goto B_b;
  f = 0;
  if (c + e > d & g > c) goto B_b;
  var h:simd = V128;
  var i:simd = V128;
  var j:simd = V128;
  var k:simd = V128;
  f = e & -16;
  l = f;
  g = c;
  m = b;
  n = a;
  loop L_c {
    p = d + SimdLaneOp(o = k i32x4_shl 1);
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31 = 
      SimdStoreLane(
        p,
        aa = 
          ((((v128_bitselect(
                (y = 
                   (w = 
                      (((r = 
                           i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(q = g[0]:simd@1))) i32x4_mul
                        (s = V128)) i32x4_shr_u
                       8) i32x4_add
                      (v = 
                         (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(t = n[0]:simd@1)) i32x4_mul
                          (u = V128)) i32x4_shr_u
                         8)) i32x4_add
                   (x = V128)) i32x4_shr_u
                6,
                v128_bitselect(z = V128, aa = V128, w i32x4_lt_u (ba = V128)),
                y i32x4_lt_u (w = V128)) v128_and
              aa) v128_or
             ((ja = 
                 v128_bitselect(
                   (ha = 
                      (fa = 
                         v i32x4_sub
                         ((((ca = 
                               i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(y = m[0]:simd@1))) i32x4_mul
                            (da = V128)) i32x4_shr_u
                           8) i32x4_add
                          ((r i32x4_mul (ea = V128)) i32x4_shr_u 8))) i32x4_add
                      (ga = V128)) i32x4_shr_u
                   6,
                   v128_bitselect(z, r = V128, fa i32x4_lt_s (ia = V128)),
                   ha i32x4_lt_u w)) i32x4_shr_u
              5)) v128_and
            r) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (la = 
                   (ka = 
                      (((ha = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                        s) i32x4_shr_u
                       8) i32x4_add
                      (fa = (i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(t, aa))) i32x4_mul
                             u) i32x4_shr_u
                            8)) i32x4_add
                   x) i32x4_shr_u
                6,
                v128_bitselect(z, aa, ka i32x4_lt_u ba),
                la i32x4_lt_u w) v128_and
              aa) v128_or
             ((la = 
                 v128_bitselect(
                   (la = 
                      (ha = 
                         fa i32x4_sub
                         ((((ka = i32x4_extend_low_i16x8_u(
                                    i16x8_extend_low_i8x16_u(SimdShuffleOp(y, aa)))) i32x4_mul
                            da) i32x4_shr_u
                           8) i32x4_add
                          ((ha i32x4_mul ea) i32x4_shr_u 8))) i32x4_add
                      ga) i32x4_shr_u
                   6,
                   v128_bitselect(z, r, ha i32x4_lt_s ia),
                   la i32x4_lt_u w)) i32x4_shr_u
              5)) v128_and
            r)) i8x16_narrow_i16x8_u
          ((((v128_bitselect(
                (oa = 
                   (na = 
                      (((ma = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                        s) i32x4_shr_u
                       8) i32x4_add
                      (ha = (i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(t, aa))) i32x4_mul
                             u) i32x4_shr_u
                            8)) i32x4_add
                   x) i32x4_shr_u
                6,
                v128_bitselect(z, aa, na i32x4_lt_u ba),
                oa i32x4_lt_u w) v128_and
              aa) v128_or
             ((ma = 
                 v128_bitselect(
                   (oa = 
                      (ma = 
                         ha i32x4_sub
                         ((((na = i32x4_extend_low_i16x8_u(
                                    i16x8_extend_low_i8x16_u(SimdShuffleOp(y, aa)))) i32x4_mul
                            da) i32x4_shr_u
                           8) i32x4_add
                          ((ma i32x4_mul ea) i32x4_shr_u 8))) i32x4_add
                      ga) i32x4_shr_u
                   6,
                   v128_bitselect(z, r, ma i32x4_lt_s ia),
                   oa i32x4_lt_u w)) i32x4_shr_u
              5)) v128_and
            r) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (t = 
                   (s = 
                      (((q = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(q, aa)))) i32x4_mul
                        s) i32x4_shr_u
                       8) i32x4_add
                      (u = (i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(t, aa))) i32x4_mul
                            u) i32x4_shr_u
                           8)) i32x4_add
                   x) i32x4_shr_u
                6,
                v128_bitselect(z, aa, s i32x4_lt_u ba),
                t i32x4_lt_u w) v128_and
              aa) v128_or
             ((ba = 
                 v128_bitselect(
                   (q = 
                      (aa = 
                         u i32x4_sub
                         ((((x = i32x4_extend_low_i16x8_u(
                                   i16x8_extend_low_i8x16_u(SimdShuffleOp(y, aa)))) i32x4_mul
                            da) i32x4_shr_u
                           8) i32x4_add
                          ((q i32x4_mul ea) i32x4_shr_u 8))) i32x4_add
                      ga) i32x4_shr_u
                   6,
                   v128_bitselect(z, r, aa i32x4_lt_s ia),
                   q i32x4_lt_u w)) i32x4_shr_u
              5)) v128_and
            r))),
      SimdStoreLane(pa = d + SimdLaneOp(o), aa),
      SimdStoreLane(qa = d + SimdLaneOp(o), aa),
      SimdStoreLane(ra = d + SimdLaneOp(o), aa),
      SimdStoreLane(sa = d + SimdLaneOp(o = j i32x4_shl 1), aa),
      SimdStoreLane(ta = d + SimdLaneOp(o), aa),
      SimdStoreLane(ua = d + SimdLaneOp(o), aa),
      SimdStoreLane(va = d + SimdLaneOp(o), aa),
      SimdStoreLane(wa = d + SimdLaneOp(o = i i32x4_shl 1), aa),
      SimdStoreLane(xa = d + SimdLaneOp(o), aa),
      SimdStoreLane(ya = d + SimdLaneOp(o), aa),
      SimdStoreLane(za = d + SimdLaneOp(o), aa),
      SimdStoreLane(ab = d + SimdLaneOp(o = h i32x4_shl 1), aa),
      SimdStoreLane(bb = d + SimdLaneOp(o), aa),
      SimdStoreLane(cb = d + SimdLaneOp(o), aa),
      SimdStoreLane(db = d + SimdLaneOp(o), aa),
      SimdStoreLane(
        p,
        aa = 
          (((((ja i32x4_shl 3) v128_and (aa = V128)) v128_or
             v128_bitselect(
               (da = 
                  (y = ((ca i32x4_mul (o = V128)) i32x4_shr_u 8) i32x4_add v) i32x4_add
                  (q = V128)) i32x4_shr_u
               9,
               v128_bitselect(z, s = V128, y i32x4_lt_u (t = V128)),
               da i32x4_lt_u w)) v128_and
            r) i16x8_narrow_i32x4_u
           ((((la i32x4_shl 3) v128_and aa) v128_or
             v128_bitselect(
               (da = (y = ((ka i32x4_mul o) i32x4_shr_u 8) i32x4_add fa) i32x4_add q) i32x4_shr_u
               9,
               v128_bitselect(z, s, y i32x4_lt_u t),
               da i32x4_lt_u w)) v128_and
            r)) i8x16_narrow_i16x8_u
          (((((ma i32x4_shl 3) v128_and aa) v128_or
             v128_bitselect(
               (da = (y = ((na i32x4_mul o) i32x4_shr_u 8) i32x4_add ha) i32x4_add q) i32x4_shr_u
               9,
               v128_bitselect(z, s, y i32x4_lt_u t),
               da i32x4_lt_u w)) v128_and
            r) i16x8_narrow_i32x4_u
           ((((ba i32x4_shl 3) v128_and aa) v128_or
             v128_bitselect(
               (o = (aa = ((x i32x4_mul o) i32x4_shr_u 8) i32x4_add u) i32x4_add q) i32x4_shr_u
               9,
               v128_bitselect(z, s, aa i32x4_lt_u t),
               o i32x4_lt_u w)) v128_and
            r))),
      SimdStoreLane(pa, aa),
      SimdStoreLane(qa, aa),
      SimdStoreLane(ra, aa),
      SimdStoreLane(sa, aa),
      SimdStoreLane(ta, aa),
      SimdStoreLane(ua, aa),
      SimdStoreLane(va, aa),
      SimdStoreLane(wa, aa),
      SimdStoreLane(xa, aa),
      SimdStoreLane(ya, aa),
      SimdStoreLane(za, aa),
      SimdStoreLane(ab, aa),
      SimdStoreLane(bb, aa),
      SimdStoreLane(cb, aa),
      SimdStoreLane(db, aa);
    k = k i32x4_add (aa = V128);
    g = g + 16;
    m = m + 16;
    n = n + 16;
    j = j i32x4_add aa;
    i = i i32x4_add aa;
    h = h i32x4_add aa;
    if (l = l + -16) continue L_c;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
  }
  if (f == e) goto B_a;
  label B_b:
  g = a + f;
  m = b + f;
  n = c + f;
  p = e - f;
  d = d + (f << 1);
  loop L_d {
    d[0] =
      (select_if(
         (ra = 
            (qa = ((pa = n[0]:ubyte) * 26149 >> 8) + (l = g[0]:ubyte * 19077 >> 8)) +
            -14234) >>
         6,
         select_if(0, 248, qa < 14234),
         ra < 16384) &
       248) |
      (pa = 
         select_if(
           (ra = 
              (pa = l - ((qa = m[0]:ubyte) * 6419 >> 8) + (pa * 13320 >> 8)) + 8708) >>
           6,
           select_if(0, 255, pa < -8708),
           ra < 16384)) >>
      5;
    (d + 1)[0]:byte =
      (pa << 3 & 224) |
      select_if((pa = (l = (qa * 33050 >> 8) + l) + -17685) >> 9,
                select_if(0, 31, l < 17685),
                pa < 16384);
    d = d + 2;
    g = g + 1;
    m = m + 1;
    n = n + 1;
    p = p + -1;
    if (p) continue L_d;
  }
  label B_a:
}

function WebPInitYUV444Converters() {
  var a:int = data[2]:int;
  if (a == data[7]:int) goto B_a;
  0[265071]:int = 132;
  0[265069]:int = 133;
  0[265078]:int = 134;
  0[265077]:int = 135;
  0[265076]:int = 132;
  0[265075]:int = 133;
  0[265074]:int = 136;
  0[265073]:int = 134;
  0[265072]:int = 135;
  0[265070]:int = 137;
  0[265068]:int = 138;
  if (eqz(a)) goto B_b;
  if (eqz(call_indirect(0, a))) goto B_c;
  WebPInitYUV444ConvertersSSE2();
  label B_c:
  if (eqz(call_indirect(3, data[2]:int))) goto B_b;
  WebPInitYUV444ConvertersSSE41();
  label B_b:
  data[7]:int = data[2]:int;
  label B_a:
}

function WebPSamplerProcessPlane(a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int) {
  var m:int;
  var n:int;
  if (i < 1) goto B_a;
  var k:int = i & 1;
  if (i == 1) goto B_b;
  var l:int = i & -2;
  i = 0;
  loop L_c {
    call_indirect(a, m = c + i, n = d + i, f, h, j);
    a = a + b;
    call_indirect(a, m, n, f = f + g, h, j);
    i = i + e;
    f = f + g;
    a = a + b;
    l = l + -2;
    if (l) continue L_c;
  }
  d = d + i;
  c = c + i;
  label B_b:
  if (eqz(k)) goto B_a;
  call_indirect(a, c, d, f, h, j);
  label B_a:
}

function WebPInitSamplers() {
  var a:int = data[2]:int;
  if (a == data[9]:int) goto B_a;
  0[265094]:int = 139;
  0[265093]:int = 140;
  0[265092]:int = 141;
  0[265091]:int = 142;
  0[265090]:int = 143;
  0[265089]:int = 139;
  0[265088]:int = 140;
  0[265087]:int = 141;
  0[265086]:int = 144;
  0[265085]:int = 142;
  0[265084]:int = 145;
  if (eqz(a)) goto B_b;
  if (eqz(call_indirect(0, a))) goto B_c;
  WebPInitSamplersSSE2();
  label B_c:
  if (eqz(call_indirect(3, data[2]:int))) goto B_b;
  WebPInitSamplersSSE41();
  label B_b:
  data[9]:int = data[2]:int;
  label B_a:
}

function YuvToRgba4444Row(a:ubyte_ptr, b:int, c:int, d:{ a:byte, b:byte }, e:int) {
  var j:int;
  var k:int;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:simd;
  var na:simd;
  var l:ubyte_ptr;
  var i:ubyte_ptr;
  var m:int;
  var f:byte_ptr;
  var g:{ a:ubyte, b:ubyte }
  f = e << 1;
  g = f & -4;
  if (eqz(g)) goto B_a;
  var h:int = d + g;
  g = f + -4;
  if (g < 60) goto B_d;
  f = f + -4;
  i = f >> 2;
  if ((i << 1) + a + 2 > d & (f = (f & -4) + d + 4) > a) goto B_d;
  if (b + (i = i + 1) > d & f > b) goto B_d;
  if (c + i > d & f > c) goto B_d;
  l = c + (k = (j = (g >> 2) + 1) & 2147483632);
  i = b + k;
  f = d + (k << 2);
  g = a + (k << 1);
  m = k;
  loop L_e {
    var n:simd = c[0]:simd@1;
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31 = 
      SimdStoreLane(
        d + 61,
        o = 
          (((v128_bitselect(
               (v = 
                  (t = 
                     (((p = 
                          i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = b[0]:simd@1))) i32x4_mul
                       (q = V128)) i32x4_shr_u
                      8) i32x4_add
                     (s = 
                        (i32x4_extend_low_i16x8_u(
                           i16x8_extend_low_i8x16_u(
                             SimdLoadLane(a + 6,
                                          SimdLoadLane(a + 4, SimdLoadLane(a + 2, LoadSplat(a)))))) i32x4_mul
                         (r = V128)) i32x4_shr_u
                        8)) i32x4_add
                  (u = V128)) i32x4_shr_u
               6,
               v128_bitselect(w = V128, x = V128, t i32x4_lt_u (y = V128)),
               v i32x4_lt_u (t = V128)) v128_and
             (v = V128)) i16x8_narrow_i32x4_u
            (v128_bitselect(
               (ca = 
                  (ba = 
                     (((z = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, w)))) i32x4_mul
                       q) i32x4_shr_u
                      8) i32x4_add
                     (aa = 
                        (i32x4_extend_low_i16x8_u(
                           i16x8_extend_low_i8x16_u(
                             SimdLoadLane(
                               a + 14,
                               SimdLoadLane(a + 12, SimdLoadLane(a + 10, LoadSplat(a + 8)))))) i32x4_mul
                         r) i32x4_shr_u
                        8)) i32x4_add
                  u) i32x4_shr_u
               6,
               v128_bitselect(w, x, ba i32x4_lt_u y),
               ca i32x4_lt_u t) v128_and
             v)) i8x16_narrow_i16x8_u
           ((v128_bitselect(
               (ca = 
                  (ba = 
                     (((da = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(o, w)))) i32x4_mul
                       q) i32x4_shr_u
                      8) i32x4_add
                     (ea = 
                        (i32x4_extend_low_i16x8_u(
                           i16x8_extend_low_i8x16_u(
                             SimdLoadLane(
                               a + 22,
                               SimdLoadLane(a + 20, SimdLoadLane(a + 18, LoadSplat(a + 16)))))) i32x4_mul
                         r) i32x4_shr_u
                        8)) i32x4_add
                  u) i32x4_shr_u
               6,
               v128_bitselect(w, x, ba i32x4_lt_u y),
               ca i32x4_lt_u t) v128_and
             v) i16x8_narrow_i32x4_u
            (v128_bitselect(
               (ba = 
                  (o = 
                     (((fa = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(o, w)))) i32x4_mul
                       q) i32x4_shr_u
                      8) i32x4_add
                     (ga = 
                        (i32x4_extend_low_i16x8_u(
                           i16x8_extend_low_i8x16_u(
                             SimdLoadLane(
                               a + 30,
                               SimdLoadLane(a + 28, SimdLoadLane(a + 26, LoadSplat(a + 24)))))) i32x4_mul
                         r) i32x4_shr_u
                        8)) i32x4_add
                  u) i32x4_shr_u
               6,
               v128_bitselect(w, x, o i32x4_lt_u y),
               ba i32x4_lt_u t) v128_and
             v))) v128_or
          (ha = V128)),
      SimdStoreLane(d + 57, o),
      SimdStoreLane(d + 53, o),
      SimdStoreLane(d + 49, o),
      SimdStoreLane(d + 45, o),
      SimdStoreLane(d + 41, o),
      SimdStoreLane(d + 37, o),
      SimdStoreLane(d + 33, o),
      SimdStoreLane(d + 29, o),
      SimdStoreLane(d + 25, o),
      SimdStoreLane(d + 21, o),
      SimdStoreLane(d + 17, o),
      SimdStoreLane(d + 13, o),
      SimdStoreLane(d + 9, o),
      SimdStoreLane(d + 5, o),
      SimdStoreLane(d + 1, o),
      SimdStoreLane(
        d + 60,
        o = 
          ((((v128_bitselect(
                (ja = 
                   (ia = 
                      (((o = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n))) i32x4_mul
                        (ba = V128)) i32x4_shr_u
                       8) i32x4_add
                      s) i32x4_add
                   (ca = V128)) i32x4_shr_u
                6,
                v128_bitselect(w, x, ia i32x4_lt_u (ka = V128)),
                ja i32x4_lt_u t) v128_and
              x) v128_or
             v128_bitselect(
               (la = (o = s i32x4_sub
                          (((p i32x4_mul (ia = V128)) i32x4_shr_u 8) i32x4_add
                           ((o i32x4_mul (p = V128)) i32x4_shr_u 8))) i32x4_add
                     (s = V128)) i32x4_shr_u
               10,
               v128_bitselect(w, ja = V128, o i32x4_lt_s (ma = V128)),
               la i32x4_lt_u t)) v128_and
            v) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (na = 
                   (la = 
                      (((o = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, w)))) i32x4_mul
                        ba) i32x4_shr_u
                       8) i32x4_add
                      aa) i32x4_add
                   ca) i32x4_shr_u
                6,
                v128_bitselect(w, x, la i32x4_lt_u ka),
                na i32x4_lt_u t) v128_and
              x) v128_or
             v128_bitselect(
               (aa = (o = aa i32x4_sub
                          (((z i32x4_mul ia) i32x4_shr_u 8) i32x4_add
                           ((o i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                     s) i32x4_shr_u
               10,
               v128_bitselect(w, ja, o i32x4_lt_s ma),
               aa i32x4_lt_u t)) v128_and
            v)) i8x16_narrow_i16x8_u
          ((((v128_bitselect(
                (z = 
                   (aa = 
                      (((o = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, w)))) i32x4_mul
                        ba) i32x4_shr_u
                       8) i32x4_add
                      ea) i32x4_add
                   ca) i32x4_shr_u
                6,
                v128_bitselect(w, x, aa i32x4_lt_u ka),
                z i32x4_lt_u t) v128_and
              x) v128_or
             v128_bitselect(
               (aa = (o = ea i32x4_sub
                          (((da i32x4_mul ia) i32x4_shr_u 8) i32x4_add
                           ((o i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                     s) i32x4_shr_u
               10,
               v128_bitselect(w, ja, o i32x4_lt_s ma),
               aa i32x4_lt_u t)) v128_and
            v) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (aa = 
                   (n = 
                      (((o = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, w)))) i32x4_mul
                        ba) i32x4_shr_u
                       8) i32x4_add
                      ga) i32x4_add
                   ca) i32x4_shr_u
                6,
                v128_bitselect(w, x, n i32x4_lt_u ka),
                aa i32x4_lt_u t) v128_and
              x) v128_or
             v128_bitselect((n = (o = ga i32x4_sub
                                      (((fa i32x4_mul ia) i32x4_shr_u 8) i32x4_add
                                       ((o i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                                 s) i32x4_shr_u
                            10,
                            v128_bitselect(w, ja, o i32x4_lt_s ma),
                            n i32x4_lt_u t)) v128_and
            v))),
      SimdStoreLane(d + 56, o),
      SimdStoreLane(d + 52, o),
      SimdStoreLane(d + 48, o),
      SimdStoreLane(d + 44, o),
      SimdStoreLane(d + 40, o),
      SimdStoreLane(d + 36, o),
      SimdStoreLane(d + 32, o),
      SimdStoreLane(d + 28, o),
      SimdStoreLane(d + 24, o),
      SimdStoreLane(d + 20, o),
      SimdStoreLane(d + 16, o),
      SimdStoreLane(d + 12, o),
      SimdStoreLane(d + 8, o),
      SimdStoreLane(d + 4, o),
      SimdStoreLane(d, o);
    n = c[0]:simd@1;
    let t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63 = 
      SimdStoreLane(
        d + 63,
        o = 
          (((v128_bitselect(
               (ga = 
                  (ea = 
                     (((z = 
                          i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = b[0]:simd@1))) i32x4_mul
                       q) i32x4_shr_u
                      8) i32x4_add
                     (aa = 
                        (i32x4_extend_low_i16x8_u(
                           i16x8_extend_low_i8x16_u(
                             SimdLoadLane(
                               a + 7,
                               SimdLoadLane(a + 5, SimdLoadLane(a + 3, LoadSplat(a + 1)))))) i32x4_mul
                         r) i32x4_shr_u
                        8)) i32x4_add
                  u) i32x4_shr_u
               6,
               v128_bitselect(w, x, ea i32x4_lt_u y),
               ga i32x4_lt_u t) v128_and
             v) i16x8_narrow_i32x4_u
            (v128_bitselect(
               (fa = 
                  (ga = 
                     (((da = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(o, w)))) i32x4_mul
                       q) i32x4_shr_u
                      8) i32x4_add
                     (ea = 
                        (i32x4_extend_low_i16x8_u(
                           i16x8_extend_low_i8x16_u(
                             SimdLoadLane(
                               a + 15,
                               SimdLoadLane(a + 13, SimdLoadLane(a + 11, LoadSplat(a + 9)))))) i32x4_mul
                         r) i32x4_shr_u
                        8)) i32x4_add
                  u) i32x4_shr_u
               6,
               v128_bitselect(w, x, ga i32x4_lt_u y),
               fa i32x4_lt_u t) v128_and
             v)) i8x16_narrow_i16x8_u
           ((v128_bitselect(
               (na = 
                  (la = 
                     (((fa = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(o, w)))) i32x4_mul
                       q) i32x4_shr_u
                      8) i32x4_add
                     (ga = 
                        (i32x4_extend_low_i16x8_u(
                           i16x8_extend_low_i8x16_u(
                             SimdLoadLane(
                               a + 23,
                               SimdLoadLane(a + 21, SimdLoadLane(a + 19, LoadSplat(a + 17)))))) i32x4_mul
                         r) i32x4_shr_u
                        8)) i32x4_add
                  u) i32x4_shr_u
               6,
               v128_bitselect(w, x, la i32x4_lt_u y),
               na i32x4_lt_u t) v128_and
             v) i16x8_narrow_i32x4_u
            (v128_bitselect(
               (r = 
                  (o = 
                     (((la = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(o, w)))) i32x4_mul
                       q) i32x4_shr_u
                      8) i32x4_add
                     (q = 
                        (i32x4_extend_low_i16x8_u(
                           i16x8_extend_low_i8x16_u(
                             SimdLoadLane(
                               a + 31,
                               SimdLoadLane(a + 29, SimdLoadLane(a + 27, LoadSplat(a + 25)))))) i32x4_mul
                         r) i32x4_shr_u
                        8)) i32x4_add
                  u) i32x4_shr_u
               6,
               v128_bitselect(w, x, o i32x4_lt_u y),
               r i32x4_lt_u t) v128_and
             v))) v128_or
          ha),
      SimdStoreLane(d + 59, o),
      SimdStoreLane(d + 55, o),
      SimdStoreLane(d + 51, o),
      SimdStoreLane(d + 47, o),
      SimdStoreLane(d + 43, o),
      SimdStoreLane(d + 39, o),
      SimdStoreLane(d + 35, o),
      SimdStoreLane(d + 31, o),
      SimdStoreLane(d + 27, o),
      SimdStoreLane(d + 23, o),
      SimdStoreLane(d + 19, o),
      SimdStoreLane(d + 15, o),
      SimdStoreLane(d + 11, o),
      SimdStoreLane(d + 7, o),
      SimdStoreLane(d + 3, o),
      SimdStoreLane(
        d + 62,
        w = 
          ((((v128_bitselect(
                (u = 
                   (r = 
                      (((o = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n))) i32x4_mul
                        ba) i32x4_shr_u
                       8) i32x4_add
                      aa) i32x4_add
                   ca) i32x4_shr_u
                6,
                v128_bitselect(w, x, r i32x4_lt_u ka),
                u i32x4_lt_u t) v128_and
              x) v128_or
             v128_bitselect((r = (o = aa i32x4_sub
                                      (((z i32x4_mul ia) i32x4_shr_u 8) i32x4_add
                                       ((o i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                                 s) i32x4_shr_u
                            10,
                            v128_bitselect(w, ja, o i32x4_lt_s ma),
                            r i32x4_lt_u t)) v128_and
            v) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (u = 
                   (r = 
                      (((o = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, w)))) i32x4_mul
                        ba) i32x4_shr_u
                       8) i32x4_add
                      ea) i32x4_add
                   ca) i32x4_shr_u
                6,
                v128_bitselect(w, x, r i32x4_lt_u ka),
                u i32x4_lt_u t) v128_and
              x) v128_or
             v128_bitselect((r = (o = ea i32x4_sub
                                      (((da i32x4_mul ia) i32x4_shr_u 8) i32x4_add
                                       ((o i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                                 s) i32x4_shr_u
                            10,
                            v128_bitselect(w, ja, o i32x4_lt_s ma),
                            r i32x4_lt_u t)) v128_and
            v)) i8x16_narrow_i16x8_u
          ((((v128_bitselect(
                (u = 
                   (r = 
                      (((o = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, w)))) i32x4_mul
                        ba) i32x4_shr_u
                       8) i32x4_add
                      ga) i32x4_add
                   ca) i32x4_shr_u
                6,
                v128_bitselect(w, x, r i32x4_lt_u ka),
                u i32x4_lt_u t) v128_and
              x) v128_or
             v128_bitselect((r = (o = ga i32x4_sub
                                      (((fa i32x4_mul ia) i32x4_shr_u 8) i32x4_add
                                       ((o i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                                 s) i32x4_shr_u
                            10,
                            v128_bitselect(w, ja, o i32x4_lt_s ma),
                            r i32x4_lt_u t)) v128_and
            v) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (u = 
                   (r = 
                      (((o = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, w)))) i32x4_mul
                        ba) i32x4_shr_u
                       8) i32x4_add
                      q) i32x4_add
                   ca) i32x4_shr_u
                6,
                v128_bitselect(w, x, r i32x4_lt_u ka),
                u i32x4_lt_u t) v128_and
              x) v128_or
             v128_bitselect((o = (x = q i32x4_sub
                                      (((la i32x4_mul ia) i32x4_shr_u 8) i32x4_add
                                       ((o i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                                 s) i32x4_shr_u
                            10,
                            v128_bitselect(w, ja, x i32x4_lt_s ma),
                            o i32x4_lt_u t)) v128_and
            v))),
      SimdStoreLane(d + 58, w),
      SimdStoreLane(d + 54, w),
      SimdStoreLane(d + 50, w),
      SimdStoreLane(d + 46, w),
      SimdStoreLane(d + 42, w),
      SimdStoreLane(d + 38, w),
      SimdStoreLane(d + 34, w),
      SimdStoreLane(d + 30, w),
      SimdStoreLane(d + 26, w),
      SimdStoreLane(d + 22, w),
      SimdStoreLane(d + 18, w),
      SimdStoreLane(d + 14, w),
      SimdStoreLane(d + 10, w),
      SimdStoreLane(d + 6, w),
      SimdStoreLane(d + 2, w);
    a = a + 32;
    b = b + 16;
    d = d + 64;
    c = c + 16;
    if (m = m + -16) continue L_e;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
    t48;
    t49;
    t50;
    t51;
    t52;
    t53;
    t54;
    t55;
    t56;
    t57;
    t58;
    t59;
    t60;
    t61;
    t62;
    t63;
  }
  if (j == k) goto B_b;
  goto B_c;
  label B_d:
  g = a;
  i = b;
  f = d;
  l = c;
  label B_c:
  loop L_f {
    d = l[0];
    f[1] =
      select_if(
        (m = (c = ((b = i[0]) * 33050 >> 8) + (a = g.a * 19077 >> 8)) + -17685) >>
        6,
        select_if(0, 240, c < 17685),
        m < 16384) |
      15;
    f[0] =
      (select_if((m = (c = (d * 26149 >> 8) + a) + -14234) >> 6,
                 select_if(0, 240, c < 14234),
                 m < 16384) &
       240) |
      select_if(
        (a = (d = a - (b * 6419 >> 8) + (d * 13320 >> 8)) + 8708) >> 10,
        select_if(0, 15, d < -8708),
        a < 16384);
    d = l[0];
    f[3] =
      select_if(
        (m = (c = ((b = i[0]) * 33050 >> 8) + (a = g.b * 19077 >> 8)) + -17685) >>
        6,
        select_if(0, 240, c < 17685),
        m < 16384) |
      15;
    (f + 2)[0]:byte =
      (select_if((m = (c = (d * 26149 >> 8) + a) + -14234) >> 6,
                 select_if(0, 240, c < 14234),
                 m < 16384) &
       240) |
      select_if(
        (a = (d = a - (b * 6419 >> 8) + (d * 13320 >> 8)) + 8708) >> 10,
        select_if(0, 15, d < -8708),
        a < 16384);
    l = l + 1;
    i = i + 1;
    g = g + 2;
    f = f + 4;
    if (f != h) continue L_f;
  }
  label B_b:
  c = l;
  d = h;
  b = i;
  a = g;
  label B_a:
  if (eqz(e & 1)) goto B_g;
  f = c[0]:ubyte;
  d.b =
    select_if(
      (l = (i = ((g = b[0]:ubyte) * 33050 >> 8) + (a = a[0] * 19077 >> 8)) +
           -17685) >>
      6,
      select_if(0, 240, i < 17685),
      l < 16384) |
    15;
  d.a =
    (select_if((l = (i = (f * 26149 >> 8) + a) + -14234) >> 6,
               select_if(0, 240, i < 14234),
               l < 16384) &
     240) |
    select_if(
      (f = (a = a - (g * 6419 >> 8) + (f * 13320 >> 8)) + 8708) >> 10,
      select_if(0, 15, a < -8708),
      f < 16384);
  label B_g:
}

function YuvToArgbRow(a:ubyte_ptr, b:int, c:int, d:{ a:byte, b:byte, c:byte, d:byte }, e:int) {
  var j:int;
  var k:int;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var l:ubyte_ptr;
  var i:ubyte_ptr;
  var m:int;
  var g:{ a:ubyte, b:ubyte }
  var f:byte_ptr;
  f = e << 2;
  g = f & -8;
  if (eqz(g)) goto B_a;
  var h:int = d + g;
  g = f + -8;
  if (g < 120) goto B_d;
  f = f + -8;
  i = f >> 3;
  if ((i << 1) + a + 2 > d & (f = (f & -8) + d + 8) > a) goto B_d;
  if (b + (i = i + 1) > d & f > b) goto B_d;
  if (c + i > d & f > c) goto B_d;
  l = c + (k = (j = (g >> 3) + 1) & 1073741808);
  i = b + k;
  f = d + (k << 3);
  g = a + (k << 1);
  m = k;
  loop L_e {
    var n:simd = 
      SimdLoadLane(
        a + 14,
        SimdLoadLane(a + 12, SimdLoadLane(a + 10, LoadSplat(a + 8))));
    var o:simd = 
      SimdLoadLane(a + 6,
                   SimdLoadLane(a + 4, SimdLoadLane(a + 2, LoadSplat(a))));
    var p:simd = 
      SimdLoadLane(
        a + 22,
        SimdLoadLane(a + 20, SimdLoadLane(a + 18, LoadSplat(a + 16))));
    var q:simd = 
      SimdLoadLane(
        a + 30,
        SimdLoadLane(a + 28, SimdLoadLane(a + 26, LoadSplat(a + 24))));
    var r:simd = b[0]:simd@1;
    var s:simd = c[0]:simd@1;
    (d + 120)[0]:byte = 255;
    (d + 112)[0]:byte = 255;
    (d + 104)[0]:byte = 255;
    (d + 96)[0]:byte = 255;
    (d + 88)[0]:byte = 255;
    (d + 80)[0]:byte = 255;
    (d + 72)[0]:byte = 255;
    (d + 64)[0]:byte = 255;
    (d + 56)[0]:byte = 255;
    (d + 48)[0]:byte = 255;
    (d + 40)[0]:byte = 255;
    (d + 32)[0]:byte = 255;
    (d + 24)[0]:byte = 255;
    (d + 16)[0]:byte = 255;
    (d + 8)[0]:byte = 255;
    d.a = 255;
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        d + 121,
        s = 
          ((v128_bitselect(
              (z = 
                 (x = 
                    (((t = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(s))) i32x4_mul
                      (u = V128)) i32x4_shr_u
                     8) i32x4_add
                    (w = (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o)) i32x4_mul
                          (v = V128)) i32x4_shr_u
                         8)) i32x4_add
                 (y = V128)) i32x4_shr_u
              6,
              v128_bitselect(aa = V128, o = V128, x i32x4_lt_u (ba = V128)),
              z i32x4_lt_u (x = V128)) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (da = 
                 (n = 
                    (((z = i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(s, o)))) i32x4_mul
                      u) i32x4_shr_u
                     8) i32x4_add
                    (ca = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n)) i32x4_mul v) i32x4_shr_u
                       8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, o, n i32x4_lt_u ba),
              da i32x4_lt_u x) v128_and
            o)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (p = 
                 (n = 
                    (((ea = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(s, o)))) i32x4_mul
                      u) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(p)) i32x4_mul v) i32x4_shr_u
                       8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, o, n i32x4_lt_u ba),
              p i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (n = 
                 (s = 
                    (((fa = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(s, o)))) i32x4_mul
                      u) i32x4_shr_u
                     8) i32x4_add
                    (ga = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(q)) i32x4_mul v) i32x4_shr_u
                       8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u ba),
              n i32x4_lt_u x) v128_and
            o))),
      SimdStoreLane(d + 113, s),
      SimdStoreLane(d + 105, s),
      SimdStoreLane(d + 97, s),
      SimdStoreLane(d + 89, s),
      SimdStoreLane(d + 81, s),
      SimdStoreLane(d + 73, s),
      SimdStoreLane(d + 65, s),
      SimdStoreLane(d + 57, s),
      SimdStoreLane(d + 49, s),
      SimdStoreLane(d + 41, s),
      SimdStoreLane(d + 33, s),
      SimdStoreLane(d + 25, s),
      SimdStoreLane(d + 17, s),
      SimdStoreLane(d + 9, s),
      SimdStoreLane(d + 1, s),
      SimdStoreLane(
        d + 122,
        s = 
          ((v128_bitselect(
              (ia = 
                 (s = 
                    w i32x4_sub
                    ((((ha = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(r))) i32x4_mul
                       (n = V128)) i32x4_shr_u
                      8) i32x4_add
                     ((t i32x4_mul (p = V128)) i32x4_shr_u 8))) i32x4_add
                 (q = V128)) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_s (t = V128)),
              ia i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (z = 
                 (s = 
                    ca i32x4_sub
                    ((((ia = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(r, o)))) i32x4_mul
                       n) i32x4_shr_u
                      8) i32x4_add
                     ((z i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 q) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_s t),
              z i32x4_lt_u x) v128_and
            o)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (z = 
                 (s = 
                    da i32x4_sub
                    ((((ja = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(r, o)))) i32x4_mul
                       n) i32x4_shr_u
                      8) i32x4_add
                     ((ea i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 q) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_s t),
              z i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (r = 
                 (s = 
                    ga i32x4_sub
                    ((((ea = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(r, o)))) i32x4_mul
                       n) i32x4_shr_u
                      8) i32x4_add
                     ((fa i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 q) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_s t),
              r i32x4_lt_u x) v128_and
            o))),
      SimdStoreLane(d + 114, s),
      SimdStoreLane(d + 106, s),
      SimdStoreLane(d + 98, s),
      SimdStoreLane(d + 90, s),
      SimdStoreLane(d + 82, s),
      SimdStoreLane(d + 74, s),
      SimdStoreLane(d + 66, s),
      SimdStoreLane(d + 58, s),
      SimdStoreLane(d + 50, s),
      SimdStoreLane(d + 42, s),
      SimdStoreLane(d + 34, s),
      SimdStoreLane(d + 26, s),
      SimdStoreLane(d + 18, s),
      SimdStoreLane(d + 10, s),
      SimdStoreLane(d + 2, s),
      SimdStoreLane(
        d + 123,
        s = 
          ((v128_bitselect(
              (fa = 
                 (s = ((ha i32x4_mul (r = V128)) i32x4_shr_u 8) i32x4_add w) i32x4_add
                 (w = V128)) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u (z = V128)),
              fa i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ca = (s = ((ia i32x4_mul r) i32x4_shr_u 8) i32x4_add ca) i32x4_add w) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u z),
              ca i32x4_lt_u x) v128_and
            o)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ca = (s = ((ja i32x4_mul r) i32x4_shr_u 8) i32x4_add da) i32x4_add w) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u z),
              ca i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ca = (s = ((ea i32x4_mul r) i32x4_shr_u 8) i32x4_add ga) i32x4_add w) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u z),
              ca i32x4_lt_u x) v128_and
            o))),
      SimdStoreLane(d + 115, s),
      SimdStoreLane(d + 107, s),
      SimdStoreLane(d + 99, s),
      SimdStoreLane(d + 91, s),
      SimdStoreLane(d + 83, s),
      SimdStoreLane(d + 75, s),
      SimdStoreLane(d + 67, s),
      SimdStoreLane(d + 59, s),
      SimdStoreLane(d + 51, s),
      SimdStoreLane(d + 43, s),
      SimdStoreLane(d + 35, s),
      SimdStoreLane(d + 27, s),
      SimdStoreLane(d + 19, s),
      SimdStoreLane(d + 11, s),
      SimdStoreLane(d + 3, s);
    da = SimdLoadLane(
           a + 7,
           SimdLoadLane(a + 5, SimdLoadLane(a + 3, LoadSplat(a + 1))));
    ga = SimdLoadLane(
           a + 15,
           SimdLoadLane(a + 13, SimdLoadLane(a + 11, LoadSplat(a + 9))));
    ea = SimdLoadLane(
           a + 23,
           SimdLoadLane(a + 21, SimdLoadLane(a + 19, LoadSplat(a + 17))));
    fa = SimdLoadLane(
           a + 31,
           SimdLoadLane(a + 29, SimdLoadLane(a + 27, LoadSplat(a + 25))));
    ca = b[0]:simd@1;
    s = c[0]:simd@1;
    (d + 124)[0]:byte = 255;
    (d + 116)[0]:byte = 255;
    (d + 108)[0]:byte = 255;
    (d + 100)[0]:byte = 255;
    (d + 92)[0]:byte = 255;
    (d + 84)[0]:byte = 255;
    (d + 76)[0]:byte = 255;
    (d + 68)[0]:byte = 255;
    (d + 60)[0]:byte = 255;
    (d + 52)[0]:byte = 255;
    (d + 44)[0]:byte = 255;
    (d + 36)[0]:byte = 255;
    (d + 28)[0]:byte = 255;
    (d + 20)[0]:byte = 255;
    (d + 12)[0]:byte = 255;
    (d + 4)[0]:byte = 255;
    let t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95 = 
      SimdStoreLane(
        d + 125,
        s = 
          ((v128_bitselect(
              (ja = 
                 (ia = 
                    (((ha = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(s))) i32x4_mul
                      u) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(da)) i32x4_mul v) i32x4_shr_u
                       8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, o, ia i32x4_lt_u ba),
              ja i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ka = 
                 (ja = 
                    (((ia = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(s, o)))) i32x4_mul
                      u) i32x4_shr_u
                     8) i32x4_add
                    (ga = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(ga)) i32x4_mul v) i32x4_shr_u
                       8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, o, ja i32x4_lt_u ba),
              ka i32x4_lt_u x) v128_and
            o)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (la = 
                 (ka = 
                    (((ja = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(s, o)))) i32x4_mul
                      u) i32x4_shr_u
                     8) i32x4_add
                    (ea = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(ea)) i32x4_mul v) i32x4_shr_u
                       8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, o, ka i32x4_lt_u ba),
              la i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (v = 
                 (s = 
                    (((ka = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(s, o)))) i32x4_mul
                      u) i32x4_shr_u
                     8) i32x4_add
                    (u = 
                       (i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(fa)) i32x4_mul v) i32x4_shr_u
                       8)) i32x4_add
                 y) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u ba),
              v i32x4_lt_u x) v128_and
            o))),
      SimdStoreLane(d + 117, s),
      SimdStoreLane(d + 109, s),
      SimdStoreLane(d + 101, s),
      SimdStoreLane(d + 93, s),
      SimdStoreLane(d + 85, s),
      SimdStoreLane(d + 77, s),
      SimdStoreLane(d + 69, s),
      SimdStoreLane(d + 61, s),
      SimdStoreLane(d + 53, s),
      SimdStoreLane(d + 45, s),
      SimdStoreLane(d + 37, s),
      SimdStoreLane(d + 29, s),
      SimdStoreLane(d + 21, s),
      SimdStoreLane(d + 13, s),
      SimdStoreLane(d + 5, s),
      SimdStoreLane(
        d + 126,
        s = 
          ((v128_bitselect(
              (y = 
                 (s = 
                    da i32x4_sub
                    ((((v = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(ca))) i32x4_mul
                       n) i32x4_shr_u
                      8) i32x4_add
                     ((ha i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 q) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_s t),
              y i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ba = 
                 (s = 
                    ga i32x4_sub
                    ((((y = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(ca, o)))) i32x4_mul
                       n) i32x4_shr_u
                      8) i32x4_add
                     ((ia i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 q) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_s t),
              ba i32x4_lt_u x) v128_and
            o)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (fa = 
                 (s = 
                    ea i32x4_sub
                    ((((ba = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(ca, o)))) i32x4_mul
                       n) i32x4_shr_u
                      8) i32x4_add
                     ((ja i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 q) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_s t),
              fa i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (n = 
                 (s = 
                    u i32x4_sub
                    ((((ca = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(ca, o)))) i32x4_mul
                       n) i32x4_shr_u
                      8) i32x4_add
                     ((ka i32x4_mul p) i32x4_shr_u 8))) i32x4_add
                 q) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_s t),
              n i32x4_lt_u x) v128_and
            o))),
      SimdStoreLane(d + 118, s),
      SimdStoreLane(d + 110, s),
      SimdStoreLane(d + 102, s),
      SimdStoreLane(d + 94, s),
      SimdStoreLane(d + 86, s),
      SimdStoreLane(d + 78, s),
      SimdStoreLane(d + 70, s),
      SimdStoreLane(d + 62, s),
      SimdStoreLane(d + 54, s),
      SimdStoreLane(d + 46, s),
      SimdStoreLane(d + 38, s),
      SimdStoreLane(d + 30, s),
      SimdStoreLane(d + 22, s),
      SimdStoreLane(d + 14, s),
      SimdStoreLane(d + 6, s),
      SimdStoreLane(
        d + 127,
        o = 
          ((v128_bitselect(
              (v = (s = ((v i32x4_mul r) i32x4_shr_u 8) i32x4_add da) i32x4_add w) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u z),
              v i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (v = (s = ((y i32x4_mul r) i32x4_shr_u 8) i32x4_add ga) i32x4_add w) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u z),
              v i32x4_lt_u x) v128_and
            o)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (v = (s = ((ba i32x4_mul r) i32x4_shr_u 8) i32x4_add ea) i32x4_add w) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u z),
              v i32x4_lt_u x) v128_and
            o) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (u = (s = ((ca i32x4_mul r) i32x4_shr_u 8) i32x4_add u) i32x4_add w) i32x4_shr_u
              6,
              v128_bitselect(aa, o, s i32x4_lt_u z),
              u i32x4_lt_u x) v128_and
            o))),
      SimdStoreLane(d + 119, o),
      SimdStoreLane(d + 111, o),
      SimdStoreLane(d + 103, o),
      SimdStoreLane(d + 95, o),
      SimdStoreLane(d + 87, o),
      SimdStoreLane(d + 79, o),
      SimdStoreLane(d + 71, o),
      SimdStoreLane(d + 63, o),
      SimdStoreLane(d + 55, o),
      SimdStoreLane(d + 47, o),
      SimdStoreLane(d + 39, o),
      SimdStoreLane(d + 31, o),
      SimdStoreLane(d + 23, o),
      SimdStoreLane(d + 15, o),
      SimdStoreLane(d + 7, o);
    a = a + 32;
    b = b + 16;
    d = d + 128;
    c = c + 16;
    if (m = m + -16) continue L_e;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
    t48;
    t49;
    t50;
    t51;
    t52;
    t53;
    t54;
    t55;
    t56;
    t57;
    t58;
    t59;
    t60;
    t61;
    t62;
    t63;
    t64;
    t65;
    t66;
    t67;
    t68;
    t69;
    t70;
    t71;
    t72;
    t73;
    t74;
    t75;
    t76;
    t77;
    t78;
    t79;
    t80;
    t81;
    t82;
    t83;
    t84;
    t85;
    t86;
    t87;
    t88;
    t89;
    t90;
    t91;
    t92;
    t93;
    t94;
    t95;
  }
  if (j == k) goto B_b;
  goto B_c;
  label B_d:
  g = a;
  i = b;
  f = d;
  l = c;
  label B_c:
  loop L_f {
    d = l[0];
    a = i[0];
    b = g.a;
    f[0] = 255;
    f[3] =
      select_if(
        (m = (c = (a * 33050 >> 8) + (b = b * 19077 >> 8)) + -17685) >> 6,
        select_if(0, 255, c < 17685),
        m < 16384);
    (f + 1)[0]:byte =
      select_if((m = (c = (d * 26149 >> 8) + b) + -14234) >> 6,
                select_if(0, 255, c < 14234),
                m < 16384);
    f[2] =
      select_if(
        (a = (d = b - (a * 6419 >> 8) + (d * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    d = l[0];
    a = i[0];
    b = g.b;
    f[4] = 255;
    f[7] =
      select_if(
        (m = (c = (a * 33050 >> 8) + (b = b * 19077 >> 8)) + -17685) >> 6,
        select_if(0, 255, c < 17685),
        m < 16384);
    (f + 5)[0]:byte =
      select_if((m = (c = (d * 26149 >> 8) + b) + -14234) >> 6,
                select_if(0, 255, c < 14234),
                m < 16384);
    f[6] =
      select_if(
        (a = (d = b - (a * 6419 >> 8) + (d * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    l = l + 1;
    i = i + 1;
    g = g + 2;
    f = f + 8;
    if (f != h) continue L_f;
  }
  label B_b:
  c = l;
  d = h;
  b = i;
  a = g;
  label B_a:
  if (eqz(e & 1)) goto B_g;
  f = c[0]:ubyte;
  g = b[0]:ubyte;
  a = a[0];
  d.a = 255;
  d.d =
    select_if(
      (l = (i = (g * 33050 >> 8) + (a = a * 19077 >> 8)) + -17685) >> 6,
      select_if(0, 255, i < 17685),
      l < 16384);
  d.b =
    select_if((l = (i = (f * 26149 >> 8) + a) + -14234) >> 6,
              select_if(0, 255, i < 14234),
              l < 16384);
  d.c =
    select_if(
      (a = (f = a - (g * 6419 >> 8) + (f * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, f < -8708),
      a < 16384);
  label B_g:
}

function YuvToBgraRow(a:ubyte_ptr, b:int, c:int, d:{ a:byte, b:byte, c:byte, d:byte }, e:int) {
  var j:int;
  var k:int;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var i:ubyte_ptr;
  var l:ubyte_ptr;
  var m:int;
  var g:{ a:ubyte, b:ubyte }
  var f:byte_ptr;
  f = e << 2;
  g = f & -8;
  if (eqz(g)) goto B_a;
  var h:int = d + g;
  g = f + -8;
  if (g < 120) goto B_d;
  f = f + -8;
  i = f >> 3;
  if ((i << 1) + a + 2 > d & (f = (f & -8) + d + 8) > a) goto B_d;
  if (b + (i = i + 1) > d & f > b) goto B_d;
  if (c + i > d & f > c) goto B_d;
  l = c + (k = (j = (g >> 3) + 1) & 1073741808);
  i = b + k;
  f = d + (k << 3);
  g = a + (k << 1);
  m = k;
  loop L_e {
    var n:simd = c[0]:simd@1;
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        d + 120,
        o = 
          ((v128_bitselect(
              (v = 
                 (t = 
                    (((p = 
                         i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = b[0]:simd@1))) i32x4_mul
                      (q = V128)) i32x4_shr_u
                     8) i32x4_add
                    (s = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(a + 6,
                                         SimdLoadLane(a + 4, SimdLoadLane(a + 2, LoadSplat(a)))))) i32x4_mul
                        (r = V128)) i32x4_shr_u
                       8)) i32x4_add
                 (u = V128)) i32x4_shr_u
              6,
              v128_bitselect(w = V128, x = V128, t i32x4_lt_u (y = V128)),
              v i32x4_lt_u (t = V128)) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ba = 
                 (v = 
                    (((z = i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (aa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 14,
                              SimdLoadLane(a + 12, SimdLoadLane(a + 10, LoadSplat(a + 8)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, v i32x4_lt_u y),
              ba i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ba = 
                 (v = 
                    (((ca = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 22,
                              SimdLoadLane(a + 20, SimdLoadLane(a + 18, LoadSplat(a + 16)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, v i32x4_lt_u y),
              ba i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (v = 
                 (o = 
                    (((ea = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (fa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 30,
                              SimdLoadLane(a + 28, SimdLoadLane(a + 26, LoadSplat(a + 24)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u y),
              v i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 112, o),
      SimdStoreLane(d + 104, o),
      SimdStoreLane(d + 96, o),
      SimdStoreLane(d + 88, o),
      SimdStoreLane(d + 80, o),
      SimdStoreLane(d + 72, o),
      SimdStoreLane(d + 64, o),
      SimdStoreLane(d + 56, o),
      SimdStoreLane(d + 48, o),
      SimdStoreLane(d + 40, o),
      SimdStoreLane(d + 32, o),
      SimdStoreLane(d + 24, o),
      SimdStoreLane(d + 16, o),
      SimdStoreLane(d + 8, o),
      SimdStoreLane(d, o),
      SimdStoreLane(
        d + 121,
        o = 
          ((v128_bitselect(
              (ha = 
                 (o = 
                    s i32x4_sub
                    (((p i32x4_mul (v = V128)) i32x4_shr_u 8) i32x4_add
                     (((ga = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n))) i32x4_mul
                       (p = V128)) i32x4_shr_u
                      8))) i32x4_add
                 (ba = V128)) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s (ia = V128)),
              ha i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (z = 
                 (o = 
                    aa i32x4_sub
                    (((z i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((ha = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              z i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (z = 
                 (o = 
                    da i32x4_sub
                    (((ca i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((ca = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              z i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (n = 
                 (o = 
                    fa i32x4_sub
                    (((ea i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((ea = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              n i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 113, o),
      SimdStoreLane(d + 105, o),
      SimdStoreLane(d + 97, o),
      SimdStoreLane(d + 89, o),
      SimdStoreLane(d + 81, o),
      SimdStoreLane(d + 73, o),
      SimdStoreLane(d + 65, o),
      SimdStoreLane(d + 57, o),
      SimdStoreLane(d + 49, o),
      SimdStoreLane(d + 41, o),
      SimdStoreLane(d + 33, o),
      SimdStoreLane(d + 25, o),
      SimdStoreLane(d + 17, o),
      SimdStoreLane(d + 9, o),
      SimdStoreLane(d + 1, o),
      SimdStoreLane(
        d + 122,
        o = 
          ((v128_bitselect(
              (ga = 
                 (o = ((ga i32x4_mul (n = V128)) i32x4_shr_u 8) i32x4_add s) i32x4_add
                 (s = V128)) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u (z = V128)),
              ga i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (aa = (o = ((ha i32x4_mul n) i32x4_shr_u 8) i32x4_add aa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (aa = (o = ((ca i32x4_mul n) i32x4_shr_u 8) i32x4_add da) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (aa = (o = ((ea i32x4_mul n) i32x4_shr_u 8) i32x4_add fa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 114, o),
      SimdStoreLane(d + 106, o),
      SimdStoreLane(d + 98, o),
      SimdStoreLane(d + 90, o),
      SimdStoreLane(d + 82, o),
      SimdStoreLane(d + 74, o),
      SimdStoreLane(d + 66, o),
      SimdStoreLane(d + 58, o),
      SimdStoreLane(d + 50, o),
      SimdStoreLane(d + 42, o),
      SimdStoreLane(d + 34, o),
      SimdStoreLane(d + 26, o),
      SimdStoreLane(d + 18, o),
      SimdStoreLane(d + 10, o),
      SimdStoreLane(d + 2, o);
    (d + 123)[0]:byte = 255;
    (d + 115)[0]:byte = 255;
    (d + 107)[0]:byte = 255;
    (d + 99)[0]:byte = 255;
    (d + 91)[0]:byte = 255;
    (d + 83)[0]:byte = 255;
    (d + 75)[0]:byte = 255;
    (d + 67)[0]:byte = 255;
    (d + 59)[0]:byte = 255;
    (d + 51)[0]:byte = 255;
    (d + 43)[0]:byte = 255;
    (d + 35)[0]:byte = 255;
    (d + 27)[0]:byte = 255;
    (d + 19)[0]:byte = 255;
    (d + 11)[0]:byte = 255;
    (d + 3)[0]:byte = 255;
    aa = c[0]:simd@1;
    let t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95 = 
      SimdStoreLane(
        d + 124,
        o = 
          ((v128_bitselect(
              (ca = 
                 (fa = 
                    (((ea = 
                         i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = b[0]:simd@1))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 7,
                              SimdLoadLane(a + 5, SimdLoadLane(a + 3, LoadSplat(a + 1)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, fa i32x4_lt_u y),
              ca i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ha = 
                 (ca = 
                    (((ga = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (fa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 15,
                              SimdLoadLane(a + 13, SimdLoadLane(a + 11, LoadSplat(a + 9)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, ca i32x4_lt_u y),
              ha i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ka = 
                 (ja = 
                    (((ha = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (ca = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 23,
                              SimdLoadLane(a + 21, SimdLoadLane(a + 19, LoadSplat(a + 17)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, ja i32x4_lt_u y),
              ka i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (r = 
                 (o = 
                    (((ja = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (q = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 31,
                              SimdLoadLane(a + 29, SimdLoadLane(a + 27, LoadSplat(a + 25)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u y),
              r i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 116, o),
      SimdStoreLane(d + 108, o),
      SimdStoreLane(d + 100, o),
      SimdStoreLane(d + 92, o),
      SimdStoreLane(d + 84, o),
      SimdStoreLane(d + 76, o),
      SimdStoreLane(d + 68, o),
      SimdStoreLane(d + 60, o),
      SimdStoreLane(d + 52, o),
      SimdStoreLane(d + 44, o),
      SimdStoreLane(d + 36, o),
      SimdStoreLane(d + 28, o),
      SimdStoreLane(d + 20, o),
      SimdStoreLane(d + 12, o),
      SimdStoreLane(d + 4, o),
      SimdStoreLane(
        d + 125,
        o = 
          ((v128_bitselect(
              (u = 
                 (o = 
                    da i32x4_sub
                    (((ea i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((r = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(aa))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              u i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (y = 
                 (o = 
                    fa i32x4_sub
                    (((ga i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((u = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              y i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ea = 
                 (o = 
                    ca i32x4_sub
                    (((ha i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((y = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              ea i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (p = 
                 (o = 
                    q i32x4_sub
                    (((ja i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((v = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              p i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 117, o),
      SimdStoreLane(d + 109, o),
      SimdStoreLane(d + 101, o),
      SimdStoreLane(d + 93, o),
      SimdStoreLane(d + 85, o),
      SimdStoreLane(d + 77, o),
      SimdStoreLane(d + 69, o),
      SimdStoreLane(d + 61, o),
      SimdStoreLane(d + 53, o),
      SimdStoreLane(d + 45, o),
      SimdStoreLane(d + 37, o),
      SimdStoreLane(d + 29, o),
      SimdStoreLane(d + 21, o),
      SimdStoreLane(d + 13, o),
      SimdStoreLane(d + 5, o),
      SimdStoreLane(
        d + 126,
        x = 
          ((v128_bitselect(
              (r = (o = ((r i32x4_mul n) i32x4_shr_u 8) i32x4_add da) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (r = (o = ((u i32x4_mul n) i32x4_shr_u 8) i32x4_add fa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (r = (o = ((y i32x4_mul n) i32x4_shr_u 8) i32x4_add ca) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (q = (o = ((v i32x4_mul n) i32x4_shr_u 8) i32x4_add q) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              q i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 118, x),
      SimdStoreLane(d + 110, x),
      SimdStoreLane(d + 102, x),
      SimdStoreLane(d + 94, x),
      SimdStoreLane(d + 86, x),
      SimdStoreLane(d + 78, x),
      SimdStoreLane(d + 70, x),
      SimdStoreLane(d + 62, x),
      SimdStoreLane(d + 54, x),
      SimdStoreLane(d + 46, x),
      SimdStoreLane(d + 38, x),
      SimdStoreLane(d + 30, x),
      SimdStoreLane(d + 22, x),
      SimdStoreLane(d + 14, x),
      SimdStoreLane(d + 6, x);
    (d + 127)[0]:byte = 255;
    (d + 119)[0]:byte = 255;
    (d + 111)[0]:byte = 255;
    (d + 103)[0]:byte = 255;
    (d + 95)[0]:byte = 255;
    (d + 87)[0]:byte = 255;
    (d + 79)[0]:byte = 255;
    (d + 71)[0]:byte = 255;
    (d + 63)[0]:byte = 255;
    (d + 55)[0]:byte = 255;
    (d + 47)[0]:byte = 255;
    (d + 39)[0]:byte = 255;
    (d + 31)[0]:byte = 255;
    (d + 23)[0]:byte = 255;
    (d + 15)[0]:byte = 255;
    (d + 7)[0]:byte = 255;
    a = a + 32;
    b = b + 16;
    d = d + 128;
    c = c + 16;
    if (m = m + -16) continue L_e;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
    t48;
    t49;
    t50;
    t51;
    t52;
    t53;
    t54;
    t55;
    t56;
    t57;
    t58;
    t59;
    t60;
    t61;
    t62;
    t63;
    t64;
    t65;
    t66;
    t67;
    t68;
    t69;
    t70;
    t71;
    t72;
    t73;
    t74;
    t75;
    t76;
    t77;
    t78;
    t79;
    t80;
    t81;
    t82;
    t83;
    t84;
    t85;
    t86;
    t87;
    t88;
    t89;
    t90;
    t91;
    t92;
    t93;
    t94;
    t95;
  }
  if (j == k) goto B_b;
  goto B_c;
  label B_d:
  g = a;
  i = b;
  f = d;
  l = c;
  label B_c:
  loop L_f {
    d = i[0];
    a = l[0];
    b = g.a;
    f[3] = 255;
    f[2] =
      select_if(
        (m = (c = (a * 26149 >> 8) + (b = b * 19077 >> 8)) + -14234) >> 6,
        select_if(0, 255, c < 14234),
        m < 16384);
    f[0] =
      select_if((m = (c = (d * 33050 >> 8) + b) + -17685) >> 6,
                select_if(0, 255, c < 17685),
                m < 16384);
    f[1] =
      select_if(
        (a = (d = b - (d * 6419 >> 8) + (a * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    d = i[0];
    a = l[0];
    b = g.b;
    f[7] = 255;
    f[6] =
      select_if(
        (m = (c = (a * 26149 >> 8) + (b = b * 19077 >> 8)) + -14234) >> 6,
        select_if(0, 255, c < 14234),
        m < 16384);
    (f + 4)[0]:byte =
      select_if((m = (c = (d * 33050 >> 8) + b) + -17685) >> 6,
                select_if(0, 255, c < 17685),
                m < 16384);
    f[5] =
      select_if(
        (a = (d = b - (d * 6419 >> 8) + (a * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    l = l + 1;
    i = i + 1;
    g = g + 2;
    f = f + 8;
    if (f != h) continue L_f;
  }
  label B_b:
  c = l;
  d = h;
  b = i;
  a = g;
  label B_a:
  if (eqz(e & 1)) goto B_g;
  f = b[0]:ubyte;
  g = c[0]:ubyte;
  a = a[0];
  d.d = 255;
  d.c =
    select_if(
      (l = (i = (g * 26149 >> 8) + (a = a * 19077 >> 8)) + -14234) >> 6,
      select_if(0, 255, i < 14234),
      l < 16384);
  d.a =
    select_if((l = (i = (f * 33050 >> 8) + a) + -17685) >> 6,
              select_if(0, 255, i < 17685),
              l < 16384);
  d.b =
    select_if(
      (a = (f = a - (f * 6419 >> 8) + (g * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, f < -8708),
      a < 16384);
  label B_g:
}

function YuvToRgbaRow(a:ubyte_ptr, b:int, c:int, d:{ a:byte, b:byte, c:byte, d:byte }, e:int) {
  var j:int;
  var k:int;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var l:ubyte_ptr;
  var i:ubyte_ptr;
  var m:int;
  var g:{ a:ubyte, b:ubyte }
  var f:byte_ptr;
  f = e << 2;
  g = f & -8;
  if (eqz(g)) goto B_a;
  var h:int = d + g;
  g = f + -8;
  if (g < 120) goto B_d;
  f = f + -8;
  i = f >> 3;
  if ((i << 1) + a + 2 > d & (f = (f & -8) + d + 8) > a) goto B_d;
  if (b + (i = i + 1) > d & f > b) goto B_d;
  if (c + i > d & f > c) goto B_d;
  l = c + (k = (j = (g >> 3) + 1) & 1073741808);
  i = b + k;
  f = d + (k << 3);
  g = a + (k << 1);
  m = k;
  loop L_e {
    var n:simd = b[0]:simd@1;
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        d + 120,
        o = 
          ((v128_bitselect(
              (v = 
                 (t = 
                    (((p = 
                         i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = c[0]:simd@1))) i32x4_mul
                      (q = V128)) i32x4_shr_u
                     8) i32x4_add
                    (s = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(a + 6,
                                         SimdLoadLane(a + 4, SimdLoadLane(a + 2, LoadSplat(a)))))) i32x4_mul
                        (r = V128)) i32x4_shr_u
                       8)) i32x4_add
                 (u = V128)) i32x4_shr_u
              6,
              v128_bitselect(w = V128, x = V128, t i32x4_lt_u (y = V128)),
              v i32x4_lt_u (t = V128)) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ba = 
                 (v = 
                    (((z = i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (aa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 14,
                              SimdLoadLane(a + 12, SimdLoadLane(a + 10, LoadSplat(a + 8)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, v i32x4_lt_u y),
              ba i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ba = 
                 (v = 
                    (((ca = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 22,
                              SimdLoadLane(a + 20, SimdLoadLane(a + 18, LoadSplat(a + 16)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, v i32x4_lt_u y),
              ba i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (v = 
                 (o = 
                    (((ea = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (fa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 30,
                              SimdLoadLane(a + 28, SimdLoadLane(a + 26, LoadSplat(a + 24)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u y),
              v i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 112, o),
      SimdStoreLane(d + 104, o),
      SimdStoreLane(d + 96, o),
      SimdStoreLane(d + 88, o),
      SimdStoreLane(d + 80, o),
      SimdStoreLane(d + 72, o),
      SimdStoreLane(d + 64, o),
      SimdStoreLane(d + 56, o),
      SimdStoreLane(d + 48, o),
      SimdStoreLane(d + 40, o),
      SimdStoreLane(d + 32, o),
      SimdStoreLane(d + 24, o),
      SimdStoreLane(d + 16, o),
      SimdStoreLane(d + 8, o),
      SimdStoreLane(d, o),
      SimdStoreLane(
        d + 121,
        o = 
          ((v128_bitselect(
              (ha = 
                 (o = 
                    s i32x4_sub
                    ((((ga = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n))) i32x4_mul
                       (v = V128)) i32x4_shr_u
                      8) i32x4_add
                     ((p i32x4_mul (ba = V128)) i32x4_shr_u 8))) i32x4_add
                 (p = V128)) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s (ia = V128)),
              ha i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (z = 
                 (o = 
                    aa i32x4_sub
                    ((((ha = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((z i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              z i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (z = 
                 (o = 
                    da i32x4_sub
                    ((((ja = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ca i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              z i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (n = 
                 (o = 
                    fa i32x4_sub
                    ((((ca = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ea i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              n i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 113, o),
      SimdStoreLane(d + 105, o),
      SimdStoreLane(d + 97, o),
      SimdStoreLane(d + 89, o),
      SimdStoreLane(d + 81, o),
      SimdStoreLane(d + 73, o),
      SimdStoreLane(d + 65, o),
      SimdStoreLane(d + 57, o),
      SimdStoreLane(d + 49, o),
      SimdStoreLane(d + 41, o),
      SimdStoreLane(d + 33, o),
      SimdStoreLane(d + 25, o),
      SimdStoreLane(d + 17, o),
      SimdStoreLane(d + 9, o),
      SimdStoreLane(d + 1, o),
      SimdStoreLane(
        d + 122,
        o = 
          ((v128_bitselect(
              (ea = 
                 (o = ((ga i32x4_mul (n = V128)) i32x4_shr_u 8) i32x4_add s) i32x4_add
                 (s = V128)) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u (z = V128)),
              ea i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (aa = (o = ((ha i32x4_mul n) i32x4_shr_u 8) i32x4_add aa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (aa = (o = ((ja i32x4_mul n) i32x4_shr_u 8) i32x4_add da) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (aa = (o = ((ca i32x4_mul n) i32x4_shr_u 8) i32x4_add fa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 114, o),
      SimdStoreLane(d + 106, o),
      SimdStoreLane(d + 98, o),
      SimdStoreLane(d + 90, o),
      SimdStoreLane(d + 82, o),
      SimdStoreLane(d + 74, o),
      SimdStoreLane(d + 66, o),
      SimdStoreLane(d + 58, o),
      SimdStoreLane(d + 50, o),
      SimdStoreLane(d + 42, o),
      SimdStoreLane(d + 34, o),
      SimdStoreLane(d + 26, o),
      SimdStoreLane(d + 18, o),
      SimdStoreLane(d + 10, o),
      SimdStoreLane(d + 2, o);
    (d + 123)[0]:byte = 255;
    (d + 115)[0]:byte = 255;
    (d + 107)[0]:byte = 255;
    (d + 99)[0]:byte = 255;
    (d + 91)[0]:byte = 255;
    (d + 83)[0]:byte = 255;
    (d + 75)[0]:byte = 255;
    (d + 67)[0]:byte = 255;
    (d + 59)[0]:byte = 255;
    (d + 51)[0]:byte = 255;
    (d + 43)[0]:byte = 255;
    (d + 35)[0]:byte = 255;
    (d + 27)[0]:byte = 255;
    (d + 19)[0]:byte = 255;
    (d + 11)[0]:byte = 255;
    (d + 3)[0]:byte = 255;
    aa = b[0]:simd@1;
    let t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95 = 
      SimdStoreLane(
        d + 124,
        o = 
          ((v128_bitselect(
              (ca = 
                 (fa = 
                    (((ea = 
                         i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = c[0]:simd@1))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 7,
                              SimdLoadLane(a + 5, SimdLoadLane(a + 3, LoadSplat(a + 1)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, fa i32x4_lt_u y),
              ca i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ha = 
                 (ca = 
                    (((ga = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (fa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 15,
                              SimdLoadLane(a + 13, SimdLoadLane(a + 11, LoadSplat(a + 9)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, ca i32x4_lt_u y),
              ha i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ka = 
                 (ja = 
                    (((ha = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (ca = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 23,
                              SimdLoadLane(a + 21, SimdLoadLane(a + 19, LoadSplat(a + 17)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, ja i32x4_lt_u y),
              ka i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (r = 
                 (o = 
                    (((ja = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (q = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 31,
                              SimdLoadLane(a + 29, SimdLoadLane(a + 27, LoadSplat(a + 25)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u y),
              r i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 116, o),
      SimdStoreLane(d + 108, o),
      SimdStoreLane(d + 100, o),
      SimdStoreLane(d + 92, o),
      SimdStoreLane(d + 84, o),
      SimdStoreLane(d + 76, o),
      SimdStoreLane(d + 68, o),
      SimdStoreLane(d + 60, o),
      SimdStoreLane(d + 52, o),
      SimdStoreLane(d + 44, o),
      SimdStoreLane(d + 36, o),
      SimdStoreLane(d + 28, o),
      SimdStoreLane(d + 20, o),
      SimdStoreLane(d + 12, o),
      SimdStoreLane(d + 4, o),
      SimdStoreLane(
        d + 125,
        o = 
          ((v128_bitselect(
              (u = 
                 (o = 
                    da i32x4_sub
                    ((((r = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(aa))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ea i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              u i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (y = 
                 (o = 
                    fa i32x4_sub
                    ((((u = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ga i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              y i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ea = 
                 (o = 
                    ca i32x4_sub
                    ((((y = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ha i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              ea i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (v = 
                 (o = 
                    q i32x4_sub
                    ((((aa = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ja i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              v i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 117, o),
      SimdStoreLane(d + 109, o),
      SimdStoreLane(d + 101, o),
      SimdStoreLane(d + 93, o),
      SimdStoreLane(d + 85, o),
      SimdStoreLane(d + 77, o),
      SimdStoreLane(d + 69, o),
      SimdStoreLane(d + 61, o),
      SimdStoreLane(d + 53, o),
      SimdStoreLane(d + 45, o),
      SimdStoreLane(d + 37, o),
      SimdStoreLane(d + 29, o),
      SimdStoreLane(d + 21, o),
      SimdStoreLane(d + 13, o),
      SimdStoreLane(d + 5, o),
      SimdStoreLane(
        d + 126,
        x = 
          ((v128_bitselect(
              (r = (o = ((r i32x4_mul n) i32x4_shr_u 8) i32x4_add da) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (r = (o = ((u i32x4_mul n) i32x4_shr_u 8) i32x4_add fa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (r = (o = ((y i32x4_mul n) i32x4_shr_u 8) i32x4_add ca) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (q = (o = ((aa i32x4_mul n) i32x4_shr_u 8) i32x4_add q) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              q i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 118, x),
      SimdStoreLane(d + 110, x),
      SimdStoreLane(d + 102, x),
      SimdStoreLane(d + 94, x),
      SimdStoreLane(d + 86, x),
      SimdStoreLane(d + 78, x),
      SimdStoreLane(d + 70, x),
      SimdStoreLane(d + 62, x),
      SimdStoreLane(d + 54, x),
      SimdStoreLane(d + 46, x),
      SimdStoreLane(d + 38, x),
      SimdStoreLane(d + 30, x),
      SimdStoreLane(d + 22, x),
      SimdStoreLane(d + 14, x),
      SimdStoreLane(d + 6, x);
    (d + 127)[0]:byte = 255;
    (d + 119)[0]:byte = 255;
    (d + 111)[0]:byte = 255;
    (d + 103)[0]:byte = 255;
    (d + 95)[0]:byte = 255;
    (d + 87)[0]:byte = 255;
    (d + 79)[0]:byte = 255;
    (d + 71)[0]:byte = 255;
    (d + 63)[0]:byte = 255;
    (d + 55)[0]:byte = 255;
    (d + 47)[0]:byte = 255;
    (d + 39)[0]:byte = 255;
    (d + 31)[0]:byte = 255;
    (d + 23)[0]:byte = 255;
    (d + 15)[0]:byte = 255;
    (d + 7)[0]:byte = 255;
    a = a + 32;
    b = b + 16;
    d = d + 128;
    c = c + 16;
    if (m = m + -16) continue L_e;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
    t48;
    t49;
    t50;
    t51;
    t52;
    t53;
    t54;
    t55;
    t56;
    t57;
    t58;
    t59;
    t60;
    t61;
    t62;
    t63;
    t64;
    t65;
    t66;
    t67;
    t68;
    t69;
    t70;
    t71;
    t72;
    t73;
    t74;
    t75;
    t76;
    t77;
    t78;
    t79;
    t80;
    t81;
    t82;
    t83;
    t84;
    t85;
    t86;
    t87;
    t88;
    t89;
    t90;
    t91;
    t92;
    t93;
    t94;
    t95;
  }
  if (j == k) goto B_b;
  goto B_c;
  label B_d:
  g = a;
  i = b;
  f = d;
  l = c;
  label B_c:
  loop L_f {
    d = l[0];
    a = i[0];
    b = g.a;
    f[3] = 255;
    f[2] =
      select_if(
        (m = (c = (a * 33050 >> 8) + (b = b * 19077 >> 8)) + -17685) >> 6,
        select_if(0, 255, c < 17685),
        m < 16384);
    f[0] =
      select_if((m = (c = (d * 26149 >> 8) + b) + -14234) >> 6,
                select_if(0, 255, c < 14234),
                m < 16384);
    f[1] =
      select_if(
        (a = (d = b - (a * 6419 >> 8) + (d * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    d = l[0];
    a = i[0];
    b = g.b;
    f[7] = 255;
    f[6] =
      select_if(
        (m = (c = (a * 33050 >> 8) + (b = b * 19077 >> 8)) + -17685) >> 6,
        select_if(0, 255, c < 17685),
        m < 16384);
    (f + 4)[0]:byte =
      select_if((m = (c = (d * 26149 >> 8) + b) + -14234) >> 6,
                select_if(0, 255, c < 14234),
                m < 16384);
    f[5] =
      select_if(
        (a = (d = b - (a * 6419 >> 8) + (d * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    l = l + 1;
    i = i + 1;
    g = g + 2;
    f = f + 8;
    if (f != h) continue L_f;
  }
  label B_b:
  c = l;
  d = h;
  b = i;
  a = g;
  label B_a:
  if (eqz(e & 1)) goto B_g;
  f = c[0]:ubyte;
  g = b[0]:ubyte;
  a = a[0];
  d.d = 255;
  d.c =
    select_if(
      (l = (i = (g * 33050 >> 8) + (a = a * 19077 >> 8)) + -17685) >> 6,
      select_if(0, 255, i < 17685),
      l < 16384);
  d.a =
    select_if((l = (i = (f * 26149 >> 8) + a) + -14234) >> 6,
              select_if(0, 255, i < 14234),
              l < 16384);
  d.b =
    select_if(
      (a = (f = a - (g * 6419 >> 8) + (f * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, f < -8708),
      a < 16384);
  label B_g:
}

function YuvToRgb565Row(a:ubyte_ptr, b:int, c:int, d:{ a:byte, b:byte }, e:int) {
  var j:int;
  var k:int;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:simd;
  var na:simd;
  var oa:simd;
  var pa:simd;
  var l:ubyte_ptr;
  var i:ubyte_ptr;
  var g:{ a:ubyte, b:ubyte }
  var f:byte_ptr;
  f = e << 1;
  g = f & -4;
  if (eqz(g)) goto B_a;
  var h:int = d + g;
  g = f + -4;
  if (g < 60) goto B_d;
  f = f + -4;
  i = f >> 2;
  if ((i << 1) + a + 2 > d & (f = (f & -4) + d + 4) > a) goto B_d;
  if (b + (i = i + 1) > d & f > b) goto B_d;
  if (c + i > d & f > c) goto B_d;
  l = c + (k = (j = (g >> 2) + 1) & 2147483632);
  i = b + k;
  f = d + (k << 2);
  g = a + (k << 1);
  var m:int = k;
  loop L_e {
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63 = 
      SimdStoreLane(
        d + 60,
        n = 
          ((((v128_bitselect(
                (u = 
                   (s = 
                      (((o = 
                           i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n = c[0]:simd@1))) i32x4_mul
                        (p = V128)) i32x4_shr_u
                       8) i32x4_add
                      (r = 
                         (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(
                              SimdLoadLane(a + 6,
                                           SimdLoadLane(a + 4, SimdLoadLane(a + 2, LoadSplat(a)))))) i32x4_mul
                          (q = V128)) i32x4_shr_u
                         8)) i32x4_add
                   (t = V128)) i32x4_shr_u
                6,
                v128_bitselect(v = V128, w = V128, s i32x4_lt_u (x = V128)),
                u i32x4_lt_u (s = V128)) v128_and
              w) v128_or
             ((ba = 
                 v128_bitselect(
                   (da = 
                      (ba = 
                         r i32x4_sub
                         ((((z = 
                               i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(y = b[0]:simd@1))) i32x4_mul
                            (u = V128)) i32x4_shr_u
                           8) i32x4_add
                          ((o i32x4_mul (aa = V128)) i32x4_shr_u 8))) i32x4_add
                      (ca = V128)) i32x4_shr_u
                   6,
                   v128_bitselect(v, o = V128, ba i32x4_lt_s (ea = V128)),
                   da i32x4_lt_u s)) i32x4_shr_u
              5)) v128_and
            o) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (ha = 
                   (ga = 
                      (((da = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(n, v)))) i32x4_mul
                        p) i32x4_shr_u
                       8) i32x4_add
                      (fa = 
                         (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(
                              SimdLoadLane(
                                a + 14,
                                SimdLoadLane(a + 12, SimdLoadLane(a + 10, LoadSplat(a + 8)))))) i32x4_mul
                          q) i32x4_shr_u
                         8)) i32x4_add
                   t) i32x4_shr_u
                6,
                v128_bitselect(v, w, ga i32x4_lt_u x),
                ha i32x4_lt_u s) v128_and
              w) v128_or
             ((ja = 
                 v128_bitselect(
                   (ga = 
                      (da = 
                         fa i32x4_sub
                         ((((ia = i32x4_extend_low_i16x8_u(
                                    i16x8_extend_low_i8x16_u(SimdShuffleOp(y, v)))) i32x4_mul
                            u) i32x4_shr_u
                           8) i32x4_add
                          ((da i32x4_mul aa) i32x4_shr_u 8))) i32x4_add
                      ca) i32x4_shr_u
                   6,
                   v128_bitselect(v, o, da i32x4_lt_s ea),
                   ga i32x4_lt_u s)) i32x4_shr_u
              5)) v128_and
            o)) i8x16_narrow_i16x8_u
          ((((v128_bitselect(
                (ka = 
                   (ha = 
                      (((da = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(n, v)))) i32x4_mul
                        p) i32x4_shr_u
                       8) i32x4_add
                      (ga = 
                         (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(
                              SimdLoadLane(
                                a + 22,
                                SimdLoadLane(a + 20, SimdLoadLane(a + 18, LoadSplat(a + 16)))))) i32x4_mul
                          q) i32x4_shr_u
                         8)) i32x4_add
                   t) i32x4_shr_u
                6,
                v128_bitselect(v, w, ha i32x4_lt_u x),
                ka i32x4_lt_u s) v128_and
              w) v128_or
             ((la = 
                 v128_bitselect(
                   (ha = 
                      (da = 
                         ga i32x4_sub
                         ((((ka = i32x4_extend_low_i16x8_u(
                                    i16x8_extend_low_i8x16_u(SimdShuffleOp(y, v)))) i32x4_mul
                            u) i32x4_shr_u
                           8) i32x4_add
                          ((da i32x4_mul aa) i32x4_shr_u 8))) i32x4_add
                      ca) i32x4_shr_u
                   6,
                   v128_bitselect(v, o, da i32x4_lt_s ea),
                   ha i32x4_lt_u s)) i32x4_shr_u
              5)) v128_and
            o) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (ma = 
                   (da = 
                      (((n = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, v)))) i32x4_mul
                        p) i32x4_shr_u
                       8) i32x4_add
                      (ha = 
                         (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(
                              SimdLoadLane(
                                a + 30,
                                SimdLoadLane(a + 28, SimdLoadLane(a + 26, LoadSplat(a + 24)))))) i32x4_mul
                          q) i32x4_shr_u
                         8)) i32x4_add
                   t) i32x4_shr_u
                6,
                v128_bitselect(v, w, da i32x4_lt_u x),
                ma i32x4_lt_u s) v128_and
              w) v128_or
             ((na = 
                 v128_bitselect(
                   (y = 
                      (n = 
                         ha i32x4_sub
                         ((((ma = i32x4_extend_low_i16x8_u(
                                    i16x8_extend_low_i8x16_u(SimdShuffleOp(y, v)))) i32x4_mul
                            u) i32x4_shr_u
                           8) i32x4_add
                          ((n i32x4_mul aa) i32x4_shr_u 8))) i32x4_add
                      ca) i32x4_shr_u
                   6,
                   v128_bitselect(v, o, n i32x4_lt_s ea),
                   y i32x4_lt_u s)) i32x4_shr_u
              5)) v128_and
            o))),
      SimdStoreLane(d + 56, n),
      SimdStoreLane(d + 52, n),
      SimdStoreLane(d + 48, n),
      SimdStoreLane(d + 44, n),
      SimdStoreLane(d + 40, n),
      SimdStoreLane(d + 36, n),
      SimdStoreLane(d + 32, n),
      SimdStoreLane(d + 28, n),
      SimdStoreLane(d + 24, n),
      SimdStoreLane(d + 20, n),
      SimdStoreLane(d + 16, n),
      SimdStoreLane(d + 12, n),
      SimdStoreLane(d + 8, n),
      SimdStoreLane(d + 4, n),
      SimdStoreLane(d, n),
      SimdStoreLane(
        d + 61,
        n = 
          (((((ba i32x4_shl 3) v128_and (y = V128)) v128_or
             v128_bitselect(
               (oa = 
                  (n = ((z i32x4_mul (ba = V128)) i32x4_shr_u 8) i32x4_add r) i32x4_add
                  (r = V128)) i32x4_shr_u
               9,
               v128_bitselect(v, z = V128, n i32x4_lt_u (da = V128)),
               oa i32x4_lt_u s)) v128_and
            o) i16x8_narrow_i32x4_u
           ((((ja i32x4_shl 3) v128_and y) v128_or
             v128_bitselect(
               (fa = (n = ((ia i32x4_mul ba) i32x4_shr_u 8) i32x4_add fa) i32x4_add r) i32x4_shr_u
               9,
               v128_bitselect(v, z, n i32x4_lt_u da),
               fa i32x4_lt_u s)) v128_and
            o)) i8x16_narrow_i16x8_u
          (((((la i32x4_shl 3) v128_and y) v128_or
             v128_bitselect(
               (fa = (n = ((ka i32x4_mul ba) i32x4_shr_u 8) i32x4_add ga) i32x4_add r) i32x4_shr_u
               9,
               v128_bitselect(v, z, n i32x4_lt_u da),
               fa i32x4_lt_u s)) v128_and
            o) i16x8_narrow_i32x4_u
           ((((na i32x4_shl 3) v128_and y) v128_or
             v128_bitselect(
               (fa = (n = ((ma i32x4_mul ba) i32x4_shr_u 8) i32x4_add ha) i32x4_add r) i32x4_shr_u
               9,
               v128_bitselect(v, z, n i32x4_lt_u da),
               fa i32x4_lt_u s)) v128_and
            o))),
      SimdStoreLane(d + 57, n),
      SimdStoreLane(d + 53, n),
      SimdStoreLane(d + 49, n),
      SimdStoreLane(d + 45, n),
      SimdStoreLane(d + 41, n),
      SimdStoreLane(d + 37, n),
      SimdStoreLane(d + 33, n),
      SimdStoreLane(d + 29, n),
      SimdStoreLane(d + 25, n),
      SimdStoreLane(d + 21, n),
      SimdStoreLane(d + 17, n),
      SimdStoreLane(d + 13, n),
      SimdStoreLane(d + 9, n),
      SimdStoreLane(d + 5, n),
      SimdStoreLane(d + 1, n),
      SimdStoreLane(
        d + 62,
        w = 
          ((((v128_bitselect(
                (ia = 
                   (fa = 
                      (((ha = 
                           i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n = c[0]:simd@1))) i32x4_mul
                        p) i32x4_shr_u
                       8) i32x4_add
                      (ga = 
                         (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(
                              SimdLoadLane(
                                a + 7,
                                SimdLoadLane(a + 5, SimdLoadLane(a + 3, LoadSplat(a + 1)))))) i32x4_mul
                          q) i32x4_shr_u
                         8)) i32x4_add
                   t) i32x4_shr_u
                6,
                v128_bitselect(v, w, fa i32x4_lt_u x),
                ia i32x4_lt_u s) v128_and
              w) v128_or
             ((ka = 
                 v128_bitselect(
                   (ia = 
                      (ha = 
                         ga i32x4_sub
                         ((((ja = 
                               i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(fa = b[0]:simd@1))) i32x4_mul
                            u) i32x4_shr_u
                           8) i32x4_add
                          ((ha i32x4_mul aa) i32x4_shr_u 8))) i32x4_add
                      ca) i32x4_shr_u
                   6,
                   v128_bitselect(v, o, ha i32x4_lt_s ea),
                   ia i32x4_lt_u s)) i32x4_shr_u
              5)) v128_and
            o) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (ma = 
                   (la = 
                      (((ia = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(n, v)))) i32x4_mul
                        p) i32x4_shr_u
                       8) i32x4_add
                      (ha = 
                         (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(
                              SimdLoadLane(
                                a + 15,
                                SimdLoadLane(a + 13, SimdLoadLane(a + 11, LoadSplat(a + 9)))))) i32x4_mul
                          q) i32x4_shr_u
                         8)) i32x4_add
                   t) i32x4_shr_u
                6,
                v128_bitselect(v, w, la i32x4_lt_u x),
                ma i32x4_lt_u s) v128_and
              w) v128_or
             ((ma = 
                 v128_bitselect(
                   (ma = 
                      (ia = 
                         ha i32x4_sub
                         ((((la = i32x4_extend_low_i16x8_u(
                                    i16x8_extend_low_i8x16_u(SimdShuffleOp(fa, v)))) i32x4_mul
                            u) i32x4_shr_u
                           8) i32x4_add
                          ((ia i32x4_mul aa) i32x4_shr_u 8))) i32x4_add
                      ca) i32x4_shr_u
                   6,
                   v128_bitselect(v, o, ia i32x4_lt_s ea),
                   ma i32x4_lt_u s)) i32x4_shr_u
              5)) v128_and
            o)) i8x16_narrow_i16x8_u
          ((((v128_bitselect(
                (pa = 
                   (oa = 
                      (((na = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(n, v)))) i32x4_mul
                        p) i32x4_shr_u
                       8) i32x4_add
                      (ia = 
                         (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(
                              SimdLoadLane(
                                a + 23,
                                SimdLoadLane(a + 21, SimdLoadLane(a + 19, LoadSplat(a + 17)))))) i32x4_mul
                          q) i32x4_shr_u
                         8)) i32x4_add
                   t) i32x4_shr_u
                6,
                v128_bitselect(v, w, oa i32x4_lt_u x),
                pa i32x4_lt_u s) v128_and
              w) v128_or
             ((na = 
                 v128_bitselect(
                   (pa = 
                      (na = 
                         ia i32x4_sub
                         ((((oa = i32x4_extend_low_i16x8_u(
                                    i16x8_extend_low_i8x16_u(SimdShuffleOp(fa, v)))) i32x4_mul
                            u) i32x4_shr_u
                           8) i32x4_add
                          ((na i32x4_mul aa) i32x4_shr_u 8))) i32x4_add
                      ca) i32x4_shr_u
                   6,
                   v128_bitselect(v, o, na i32x4_lt_s ea),
                   pa i32x4_lt_u s)) i32x4_shr_u
              5)) v128_and
            o) i16x8_narrow_i32x4_u
           (((v128_bitselect(
                (q = 
                   (p = 
                      (((pa = i32x4_extend_low_i16x8_u(
                                i16x8_extend_low_i8x16_u(SimdShuffleOp(n, v)))) i32x4_mul
                        p) i32x4_shr_u
                       8) i32x4_add
                      (n = 
                         (i32x4_extend_low_i16x8_u(
                            i16x8_extend_low_i8x16_u(
                              SimdLoadLane(
                                a + 31,
                                SimdLoadLane(a + 29, SimdLoadLane(a + 27, LoadSplat(a + 25)))))) i32x4_mul
                          q) i32x4_shr_u
                         8)) i32x4_add
                   t) i32x4_shr_u
                6,
                v128_bitselect(v, w, p i32x4_lt_u x),
                q i32x4_lt_u s) v128_and
              w) v128_or
             ((q = 
                 v128_bitselect(
                   (q = 
                      (w = 
                         n i32x4_sub
                         ((((p = i32x4_extend_low_i16x8_u(
                                   i16x8_extend_low_i8x16_u(SimdShuffleOp(fa, v)))) i32x4_mul
                            u) i32x4_shr_u
                           8) i32x4_add
                          ((pa i32x4_mul aa) i32x4_shr_u 8))) i32x4_add
                      ca) i32x4_shr_u
                   6,
                   v128_bitselect(v, o, w i32x4_lt_s ea),
                   q i32x4_lt_u s)) i32x4_shr_u
              5)) v128_and
            o))),
      SimdStoreLane(d + 58, w),
      SimdStoreLane(d + 54, w),
      SimdStoreLane(d + 50, w),
      SimdStoreLane(d + 46, w),
      SimdStoreLane(d + 42, w),
      SimdStoreLane(d + 38, w),
      SimdStoreLane(d + 34, w),
      SimdStoreLane(d + 30, w),
      SimdStoreLane(d + 26, w),
      SimdStoreLane(d + 22, w),
      SimdStoreLane(d + 18, w),
      SimdStoreLane(d + 14, w),
      SimdStoreLane(d + 10, w),
      SimdStoreLane(d + 6, w),
      SimdStoreLane(d + 2, w),
      SimdStoreLane(
        d + 63,
        v = 
          (((((ka i32x4_shl 3) v128_and y) v128_or
             v128_bitselect(
               (t = (w = ((ja i32x4_mul ba) i32x4_shr_u 8) i32x4_add ga) i32x4_add r) i32x4_shr_u
               9,
               v128_bitselect(v, z, w i32x4_lt_u da),
               t i32x4_lt_u s)) v128_and
            o) i16x8_narrow_i32x4_u
           ((((ma i32x4_shl 3) v128_and y) v128_or
             v128_bitselect(
               (t = (w = ((la i32x4_mul ba) i32x4_shr_u 8) i32x4_add ha) i32x4_add r) i32x4_shr_u
               9,
               v128_bitselect(v, z, w i32x4_lt_u da),
               t i32x4_lt_u s)) v128_and
            o)) i8x16_narrow_i16x8_u
          (((((na i32x4_shl 3) v128_and y) v128_or
             v128_bitselect(
               (t = (w = ((oa i32x4_mul ba) i32x4_shr_u 8) i32x4_add ia) i32x4_add r) i32x4_shr_u
               9,
               v128_bitselect(v, z, w i32x4_lt_u da),
               t i32x4_lt_u s)) v128_and
            o) i16x8_narrow_i32x4_u
           ((((q i32x4_shl 3) v128_and y) v128_or
             v128_bitselect(
               (n = (w = ((p i32x4_mul ba) i32x4_shr_u 8) i32x4_add n) i32x4_add r) i32x4_shr_u
               9,
               v128_bitselect(v, z, w i32x4_lt_u da),
               n i32x4_lt_u s)) v128_and
            o))),
      SimdStoreLane(d + 59, v),
      SimdStoreLane(d + 55, v),
      SimdStoreLane(d + 51, v),
      SimdStoreLane(d + 47, v),
      SimdStoreLane(d + 43, v),
      SimdStoreLane(d + 39, v),
      SimdStoreLane(d + 35, v),
      SimdStoreLane(d + 31, v),
      SimdStoreLane(d + 27, v),
      SimdStoreLane(d + 23, v),
      SimdStoreLane(d + 19, v),
      SimdStoreLane(d + 15, v),
      SimdStoreLane(d + 11, v),
      SimdStoreLane(d + 7, v),
      SimdStoreLane(d + 3, v);
    a = a + 32;
    b = b + 16;
    d = d + 64;
    c = c + 16;
    if (m = m + -16) continue L_e;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
    t48;
    t49;
    t50;
    t51;
    t52;
    t53;
    t54;
    t55;
    t56;
    t57;
    t58;
    t59;
    t60;
    t61;
    t62;
    t63;
  }
  if (j == k) goto B_b;
  goto B_c;
  label B_d:
  g = a;
  i = b;
  f = d;
  l = c;
  label B_c:
  loop L_f {
    f[0] =
      (select_if(
         (c = (b = ((a = l[0]) * 26149 >> 8) + (d = g.a * 19077 >> 8)) + -14234) >>
         6,
         select_if(0, 248, b < 14234),
         c < 16384) &
       248) |
      (a = 
         select_if(
           (c = (a = d - ((b = i[0]) * 6419 >> 8) + (a * 13320 >> 8)) + 8708) >>
           6,
           select_if(0, 255, a < -8708),
           c < 16384)) >>
      5;
    f[1] =
      (a << 3 & 224) |
      select_if((a = (d = (b * 33050 >> 8) + d) + -17685) >> 9,
                select_if(0, 31, d < 17685),
                a < 16384);
    (f + 2)[0]:byte =
      (select_if(
         (c = (b = ((a = l[0]) * 26149 >> 8) + (d = g.b * 19077 >> 8)) + -14234) >>
         6,
         select_if(0, 248, b < 14234),
         c < 16384) &
       248) |
      (a = 
         select_if(
           (c = (a = d - ((b = i[0]) * 6419 >> 8) + (a * 13320 >> 8)) + 8708) >>
           6,
           select_if(0, 255, a < -8708),
           c < 16384)) >>
      5;
    f[3] =
      (a << 3 & 224) |
      select_if((a = (d = (b * 33050 >> 8) + d) + -17685) >> 9,
                select_if(0, 31, d < 17685),
                a < 16384);
    l = l + 1;
    i = i + 1;
    g = g + 2;
    f = f + 4;
    if (f != h) continue L_f;
  }
  label B_b:
  c = l;
  d = h;
  b = i;
  a = g;
  label B_a:
  if (eqz(e & 1)) goto B_g;
  d.a =
    (select_if(
       (i = (g = ((f = c[0]:ubyte) * 26149 >> 8) + (a = a[0] * 19077 >> 8)) +
            -14234) >>
       6,
       select_if(0, 248, g < 14234),
       i < 16384) &
     248) |
    (f = 
       select_if(
         (i = 
            (f = a - ((g = b[0]:ubyte) * 6419 >> 8) + (f * 13320 >> 8)) + 8708) >>
         6,
         select_if(0, 255, f < -8708),
         i < 16384)) >>
    5;
  d.b =
    (f << 3 & 224) |
    select_if((f = (a = (g * 33050 >> 8) + a) + -17685) >> 9,
              select_if(0, 31, a < 17685),
              f < 16384);
  label B_g:
}

function YuvToBgrRow(a:ubyte_ptr, b:int, c:int, d:{ a:byte, b:byte, c:byte }, e:int) {
  var i:{ a:ubyte, b:ubyte }
  var j:int;
  var k:int;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var l:ubyte_ptr;
  var m:int;
  var h:ubyte_ptr;
  var f:byte_ptr;
  f = e & -2;
  if (eqz(f)) goto B_a;
  var g:int = d + (f = f * 3);
  f = f + -6;
  h = f / 6;
  if (f < 90) goto B_d;
  f = f / 6;
  if ((f << 1) + a + 2 > d & (i = f * 6 + d + 6) > a) goto B_d;
  if (b + (f = f + 1) > d & i > b) goto B_d;
  if (c + f > d & i > c) goto B_d;
  l = c + (k = (j = h + 1) & 2147483632);
  h = b + k;
  f = d + k * 6;
  i = a + (k << 1);
  m = k;
  loop L_e {
    var n:simd = c[0]:simd@1;
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        d + 90,
        o = 
          ((v128_bitselect(
              (v = 
                 (t = 
                    (((p = 
                         i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = b[0]:simd@1))) i32x4_mul
                      (q = V128)) i32x4_shr_u
                     8) i32x4_add
                    (s = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(a + 6,
                                         SimdLoadLane(a + 4, SimdLoadLane(a + 2, LoadSplat(a)))))) i32x4_mul
                        (r = V128)) i32x4_shr_u
                       8)) i32x4_add
                 (u = V128)) i32x4_shr_u
              6,
              v128_bitselect(w = V128, x = V128, t i32x4_lt_u (y = V128)),
              v i32x4_lt_u (t = V128)) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ba = 
                 (v = 
                    (((z = i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (aa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 14,
                              SimdLoadLane(a + 12, SimdLoadLane(a + 10, LoadSplat(a + 8)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, v i32x4_lt_u y),
              ba i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ba = 
                 (v = 
                    (((ca = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 22,
                              SimdLoadLane(a + 20, SimdLoadLane(a + 18, LoadSplat(a + 16)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, v i32x4_lt_u y),
              ba i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (v = 
                 (o = 
                    (((ea = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (fa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 30,
                              SimdLoadLane(a + 28, SimdLoadLane(a + 26, LoadSplat(a + 24)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u y),
              v i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 84, o),
      SimdStoreLane(d + 78, o),
      SimdStoreLane(d + 72, o),
      SimdStoreLane(d + 66, o),
      SimdStoreLane(d + 60, o),
      SimdStoreLane(d + 54, o),
      SimdStoreLane(d + 48, o),
      SimdStoreLane(d + 42, o),
      SimdStoreLane(d + 36, o),
      SimdStoreLane(d + 30, o),
      SimdStoreLane(d + 24, o),
      SimdStoreLane(d + 18, o),
      SimdStoreLane(d + 12, o),
      SimdStoreLane(d + 6, o),
      SimdStoreLane(d, o),
      SimdStoreLane(
        d + 91,
        o = 
          ((v128_bitselect(
              (ha = 
                 (o = 
                    s i32x4_sub
                    (((p i32x4_mul (v = V128)) i32x4_shr_u 8) i32x4_add
                     (((ga = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n))) i32x4_mul
                       (p = V128)) i32x4_shr_u
                      8))) i32x4_add
                 (ba = V128)) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s (ia = V128)),
              ha i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (z = 
                 (o = 
                    aa i32x4_sub
                    (((z i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((ha = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              z i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (z = 
                 (o = 
                    da i32x4_sub
                    (((ca i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((ca = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              z i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (n = 
                 (o = 
                    fa i32x4_sub
                    (((ea i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((ea = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              n i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 85, o),
      SimdStoreLane(d + 79, o),
      SimdStoreLane(d + 73, o),
      SimdStoreLane(d + 67, o),
      SimdStoreLane(d + 61, o),
      SimdStoreLane(d + 55, o),
      SimdStoreLane(d + 49, o),
      SimdStoreLane(d + 43, o),
      SimdStoreLane(d + 37, o),
      SimdStoreLane(d + 31, o),
      SimdStoreLane(d + 25, o),
      SimdStoreLane(d + 19, o),
      SimdStoreLane(d + 13, o),
      SimdStoreLane(d + 7, o),
      SimdStoreLane(d + 1, o),
      SimdStoreLane(
        d + 92,
        o = 
          ((v128_bitselect(
              (ga = 
                 (o = ((ga i32x4_mul (n = V128)) i32x4_shr_u 8) i32x4_add s) i32x4_add
                 (s = V128)) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u (z = V128)),
              ga i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (aa = (o = ((ha i32x4_mul n) i32x4_shr_u 8) i32x4_add aa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (aa = (o = ((ca i32x4_mul n) i32x4_shr_u 8) i32x4_add da) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (aa = (o = ((ea i32x4_mul n) i32x4_shr_u 8) i32x4_add fa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 86, o),
      SimdStoreLane(d + 80, o),
      SimdStoreLane(d + 74, o),
      SimdStoreLane(d + 68, o),
      SimdStoreLane(d + 62, o),
      SimdStoreLane(d + 56, o),
      SimdStoreLane(d + 50, o),
      SimdStoreLane(d + 44, o),
      SimdStoreLane(d + 38, o),
      SimdStoreLane(d + 32, o),
      SimdStoreLane(d + 26, o),
      SimdStoreLane(d + 20, o),
      SimdStoreLane(d + 14, o),
      SimdStoreLane(d + 8, o),
      SimdStoreLane(d + 2, o);
    aa = c[0]:simd@1;
    let t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95 = 
      SimdStoreLane(
        d + 93,
        o = 
          ((v128_bitselect(
              (ca = 
                 (fa = 
                    (((ea = 
                         i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = b[0]:simd@1))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 7,
                              SimdLoadLane(a + 5, SimdLoadLane(a + 3, LoadSplat(a + 1)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, fa i32x4_lt_u y),
              ca i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ha = 
                 (ca = 
                    (((ga = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (fa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 15,
                              SimdLoadLane(a + 13, SimdLoadLane(a + 11, LoadSplat(a + 9)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, ca i32x4_lt_u y),
              ha i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ka = 
                 (ja = 
                    (((ha = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (ca = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 23,
                              SimdLoadLane(a + 21, SimdLoadLane(a + 19, LoadSplat(a + 17)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, ja i32x4_lt_u y),
              ka i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (r = 
                 (o = 
                    (((ja = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (q = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 31,
                              SimdLoadLane(a + 29, SimdLoadLane(a + 27, LoadSplat(a + 25)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u y),
              r i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 87, o),
      SimdStoreLane(d + 81, o),
      SimdStoreLane(d + 75, o),
      SimdStoreLane(d + 69, o),
      SimdStoreLane(d + 63, o),
      SimdStoreLane(d + 57, o),
      SimdStoreLane(d + 51, o),
      SimdStoreLane(d + 45, o),
      SimdStoreLane(d + 39, o),
      SimdStoreLane(d + 33, o),
      SimdStoreLane(d + 27, o),
      SimdStoreLane(d + 21, o),
      SimdStoreLane(d + 15, o),
      SimdStoreLane(d + 9, o),
      SimdStoreLane(d + 3, o),
      SimdStoreLane(
        d + 94,
        o = 
          ((v128_bitselect(
              (u = 
                 (o = 
                    da i32x4_sub
                    (((ea i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((r = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(aa))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              u i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (y = 
                 (o = 
                    fa i32x4_sub
                    (((ga i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((u = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              y i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ea = 
                 (o = 
                    ca i32x4_sub
                    (((ha i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((y = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              ea i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (p = 
                 (o = 
                    q i32x4_sub
                    (((ja i32x4_mul v) i32x4_shr_u 8) i32x4_add
                     (((v = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       p) i32x4_shr_u
                      8))) i32x4_add
                 ba) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              p i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 88, o),
      SimdStoreLane(d + 82, o),
      SimdStoreLane(d + 76, o),
      SimdStoreLane(d + 70, o),
      SimdStoreLane(d + 64, o),
      SimdStoreLane(d + 58, o),
      SimdStoreLane(d + 52, o),
      SimdStoreLane(d + 46, o),
      SimdStoreLane(d + 40, o),
      SimdStoreLane(d + 34, o),
      SimdStoreLane(d + 28, o),
      SimdStoreLane(d + 22, o),
      SimdStoreLane(d + 16, o),
      SimdStoreLane(d + 10, o),
      SimdStoreLane(d + 4, o),
      SimdStoreLane(
        d + 95,
        x = 
          ((v128_bitselect(
              (r = (o = ((r i32x4_mul n) i32x4_shr_u 8) i32x4_add da) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (r = (o = ((u i32x4_mul n) i32x4_shr_u 8) i32x4_add fa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (r = (o = ((y i32x4_mul n) i32x4_shr_u 8) i32x4_add ca) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (q = (o = ((v i32x4_mul n) i32x4_shr_u 8) i32x4_add q) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              q i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 89, x),
      SimdStoreLane(d + 83, x),
      SimdStoreLane(d + 77, x),
      SimdStoreLane(d + 71, x),
      SimdStoreLane(d + 65, x),
      SimdStoreLane(d + 59, x),
      SimdStoreLane(d + 53, x),
      SimdStoreLane(d + 47, x),
      SimdStoreLane(d + 41, x),
      SimdStoreLane(d + 35, x),
      SimdStoreLane(d + 29, x),
      SimdStoreLane(d + 23, x),
      SimdStoreLane(d + 17, x),
      SimdStoreLane(d + 11, x),
      SimdStoreLane(d + 5, x);
    a = a + 32;
    b = b + 16;
    d = d + 96;
    c = c + 16;
    if (m = m + -16) continue L_e;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
    t48;
    t49;
    t50;
    t51;
    t52;
    t53;
    t54;
    t55;
    t56;
    t57;
    t58;
    t59;
    t60;
    t61;
    t62;
    t63;
    t64;
    t65;
    t66;
    t67;
    t68;
    t69;
    t70;
    t71;
    t72;
    t73;
    t74;
    t75;
    t76;
    t77;
    t78;
    t79;
    t80;
    t81;
    t82;
    t83;
    t84;
    t85;
    t86;
    t87;
    t88;
    t89;
    t90;
    t91;
    t92;
    t93;
    t94;
    t95;
  }
  if (j == k) goto B_b;
  goto B_c;
  label B_d:
  i = a;
  h = b;
  f = d;
  l = c;
  label B_c:
  loop L_f {
    d = h[0];
    f[2] =
      select_if(
        (m = (c = ((b = l[0]) * 26149 >> 8) + (a = i.a * 19077 >> 8)) + -14234) >>
        6,
        select_if(0, 255, c < 14234),
        m < 16384);
    f[0] =
      select_if((m = (c = (d * 33050 >> 8) + a) + -17685) >> 6,
                select_if(0, 255, c < 17685),
                m < 16384);
    f[1] =
      select_if(
        (a = (d = a - (d * 6419 >> 8) + (b * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    d = h[0];
    f[5] =
      select_if(
        (m = (c = ((b = l[0]) * 26149 >> 8) + (a = i.b * 19077 >> 8)) + -14234) >>
        6,
        select_if(0, 255, c < 14234),
        m < 16384);
    (f + 3)[0]:byte =
      select_if((m = (c = (d * 33050 >> 8) + a) + -17685) >> 6,
                select_if(0, 255, c < 17685),
                m < 16384);
    f[4] =
      select_if(
        (a = (d = a - (d * 6419 >> 8) + (b * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    l = l + 1;
    h = h + 1;
    i = i + 2;
    f = f + 6;
    if (f != g) continue L_f;
  }
  label B_b:
  c = l;
  d = g;
  b = h;
  a = i;
  label B_a:
  if (eqz(e & 1)) goto B_g;
  f = b[0]:ubyte;
  d.c =
    select_if(
      (l = (h = ((i = c[0]:ubyte) * 26149 >> 8) + (a = a[0] * 19077 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, h < 14234),
      l < 16384);
  d.a =
    select_if((l = (h = (f * 33050 >> 8) + a) + -17685) >> 6,
              select_if(0, 255, h < 17685),
              l < 16384);
  d.b =
    select_if(
      (f = (a = a - (f * 6419 >> 8) + (i * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, a < -8708),
      f < 16384);
  label B_g:
}

function YuvToRgbRow(a:ubyte_ptr, b:int, c:int, d:{ a:byte, b:byte, c:byte }, e:int) {
  var i:{ a:ubyte, b:ubyte }
  var j:int;
  var k:int;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var l:ubyte_ptr;
  var m:int;
  var h:ubyte_ptr;
  var f:byte_ptr;
  f = e & -2;
  if (eqz(f)) goto B_a;
  var g:int = d + (f = f * 3);
  f = f + -6;
  h = f / 6;
  if (f < 90) goto B_d;
  f = f / 6;
  if ((f << 1) + a + 2 > d & (i = f * 6 + d + 6) > a) goto B_d;
  if (b + (f = f + 1) > d & i > b) goto B_d;
  if (c + f > d & i > c) goto B_d;
  l = c + (k = (j = h + 1) & 2147483632);
  h = b + k;
  f = d + k * 6;
  i = a + (k << 1);
  m = k;
  loop L_e {
    var n:simd = b[0]:simd@1;
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47 = 
      SimdStoreLane(
        d + 90,
        o = 
          ((v128_bitselect(
              (v = 
                 (t = 
                    (((p = 
                         i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = c[0]:simd@1))) i32x4_mul
                      (q = V128)) i32x4_shr_u
                     8) i32x4_add
                    (s = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(a + 6,
                                         SimdLoadLane(a + 4, SimdLoadLane(a + 2, LoadSplat(a)))))) i32x4_mul
                        (r = V128)) i32x4_shr_u
                       8)) i32x4_add
                 (u = V128)) i32x4_shr_u
              6,
              v128_bitselect(w = V128, x = V128, t i32x4_lt_u (y = V128)),
              v i32x4_lt_u (t = V128)) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ba = 
                 (v = 
                    (((z = i32x4_extend_low_i16x8_u(
                             i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (aa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 14,
                              SimdLoadLane(a + 12, SimdLoadLane(a + 10, LoadSplat(a + 8)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, v i32x4_lt_u y),
              ba i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ba = 
                 (v = 
                    (((ca = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 22,
                              SimdLoadLane(a + 20, SimdLoadLane(a + 18, LoadSplat(a + 16)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, v i32x4_lt_u y),
              ba i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (v = 
                 (o = 
                    (((ea = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (fa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 30,
                              SimdLoadLane(a + 28, SimdLoadLane(a + 26, LoadSplat(a + 24)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u y),
              v i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 84, o),
      SimdStoreLane(d + 78, o),
      SimdStoreLane(d + 72, o),
      SimdStoreLane(d + 66, o),
      SimdStoreLane(d + 60, o),
      SimdStoreLane(d + 54, o),
      SimdStoreLane(d + 48, o),
      SimdStoreLane(d + 42, o),
      SimdStoreLane(d + 36, o),
      SimdStoreLane(d + 30, o),
      SimdStoreLane(d + 24, o),
      SimdStoreLane(d + 18, o),
      SimdStoreLane(d + 12, o),
      SimdStoreLane(d + 6, o),
      SimdStoreLane(d, o),
      SimdStoreLane(
        d + 91,
        o = 
          ((v128_bitselect(
              (ha = 
                 (o = 
                    s i32x4_sub
                    ((((ga = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n))) i32x4_mul
                       (v = V128)) i32x4_shr_u
                      8) i32x4_add
                     ((p i32x4_mul (ba = V128)) i32x4_shr_u 8))) i32x4_add
                 (p = V128)) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s (ia = V128)),
              ha i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (z = 
                 (o = 
                    aa i32x4_sub
                    ((((ha = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((z i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              z i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (z = 
                 (o = 
                    da i32x4_sub
                    ((((ja = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ca i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              z i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (n = 
                 (o = 
                    fa i32x4_sub
                    ((((ca = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(n, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ea i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              n i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 85, o),
      SimdStoreLane(d + 79, o),
      SimdStoreLane(d + 73, o),
      SimdStoreLane(d + 67, o),
      SimdStoreLane(d + 61, o),
      SimdStoreLane(d + 55, o),
      SimdStoreLane(d + 49, o),
      SimdStoreLane(d + 43, o),
      SimdStoreLane(d + 37, o),
      SimdStoreLane(d + 31, o),
      SimdStoreLane(d + 25, o),
      SimdStoreLane(d + 19, o),
      SimdStoreLane(d + 13, o),
      SimdStoreLane(d + 7, o),
      SimdStoreLane(d + 1, o),
      SimdStoreLane(
        d + 92,
        o = 
          ((v128_bitselect(
              (ea = 
                 (o = ((ga i32x4_mul (n = V128)) i32x4_shr_u 8) i32x4_add s) i32x4_add
                 (s = V128)) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u (z = V128)),
              ea i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (aa = (o = ((ha i32x4_mul n) i32x4_shr_u 8) i32x4_add aa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (aa = (o = ((ja i32x4_mul n) i32x4_shr_u 8) i32x4_add da) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (aa = (o = ((ca i32x4_mul n) i32x4_shr_u 8) i32x4_add fa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              aa i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 86, o),
      SimdStoreLane(d + 80, o),
      SimdStoreLane(d + 74, o),
      SimdStoreLane(d + 68, o),
      SimdStoreLane(d + 62, o),
      SimdStoreLane(d + 56, o),
      SimdStoreLane(d + 50, o),
      SimdStoreLane(d + 44, o),
      SimdStoreLane(d + 38, o),
      SimdStoreLane(d + 32, o),
      SimdStoreLane(d + 26, o),
      SimdStoreLane(d + 20, o),
      SimdStoreLane(d + 14, o),
      SimdStoreLane(d + 8, o),
      SimdStoreLane(d + 2, o);
    aa = b[0]:simd@1;
    let t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95 = 
      SimdStoreLane(
        d + 93,
        o = 
          ((v128_bitselect(
              (ca = 
                 (fa = 
                    (((ea = 
                         i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(o = c[0]:simd@1))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (da = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 7,
                              SimdLoadLane(a + 5, SimdLoadLane(a + 3, LoadSplat(a + 1)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, fa i32x4_lt_u y),
              ca i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (ha = 
                 (ca = 
                    (((ga = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (fa = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 15,
                              SimdLoadLane(a + 13, SimdLoadLane(a + 11, LoadSplat(a + 9)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, ca i32x4_lt_u y),
              ha i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ka = 
                 (ja = 
                    (((ha = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (ca = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 23,
                              SimdLoadLane(a + 21, SimdLoadLane(a + 19, LoadSplat(a + 17)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, ja i32x4_lt_u y),
              ka i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (r = 
                 (o = 
                    (((ja = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(o, x)))) i32x4_mul
                      q) i32x4_shr_u
                     8) i32x4_add
                    (q = 
                       (i32x4_extend_low_i16x8_u(
                          i16x8_extend_low_i8x16_u(
                            SimdLoadLane(
                              a + 31,
                              SimdLoadLane(a + 29, SimdLoadLane(a + 27, LoadSplat(a + 25)))))) i32x4_mul
                        r) i32x4_shr_u
                       8)) i32x4_add
                 u) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u y),
              r i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 87, o),
      SimdStoreLane(d + 81, o),
      SimdStoreLane(d + 75, o),
      SimdStoreLane(d + 69, o),
      SimdStoreLane(d + 63, o),
      SimdStoreLane(d + 57, o),
      SimdStoreLane(d + 51, o),
      SimdStoreLane(d + 45, o),
      SimdStoreLane(d + 39, o),
      SimdStoreLane(d + 33, o),
      SimdStoreLane(d + 27, o),
      SimdStoreLane(d + 21, o),
      SimdStoreLane(d + 15, o),
      SimdStoreLane(d + 9, o),
      SimdStoreLane(d + 3, o),
      SimdStoreLane(
        d + 94,
        o = 
          ((v128_bitselect(
              (u = 
                 (o = 
                    da i32x4_sub
                    ((((r = i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(aa))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ea i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              u i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (y = 
                 (o = 
                    fa i32x4_sub
                    ((((u = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ga i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              y i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (ea = 
                 (o = 
                    ca i32x4_sub
                    ((((y = i32x4_extend_low_i16x8_u(
                              i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ha i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              ea i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (v = 
                 (o = 
                    q i32x4_sub
                    ((((aa = i32x4_extend_low_i16x8_u(
                               i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, x)))) i32x4_mul
                       v) i32x4_shr_u
                      8) i32x4_add
                     ((ja i32x4_mul ba) i32x4_shr_u 8))) i32x4_add
                 p) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_s ia),
              v i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 88, o),
      SimdStoreLane(d + 82, o),
      SimdStoreLane(d + 76, o),
      SimdStoreLane(d + 70, o),
      SimdStoreLane(d + 64, o),
      SimdStoreLane(d + 58, o),
      SimdStoreLane(d + 52, o),
      SimdStoreLane(d + 46, o),
      SimdStoreLane(d + 40, o),
      SimdStoreLane(d + 34, o),
      SimdStoreLane(d + 28, o),
      SimdStoreLane(d + 22, o),
      SimdStoreLane(d + 16, o),
      SimdStoreLane(d + 10, o),
      SimdStoreLane(d + 4, o),
      SimdStoreLane(
        d + 95,
        x = 
          ((v128_bitselect(
              (r = (o = ((r i32x4_mul n) i32x4_shr_u 8) i32x4_add da) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (r = (o = ((u i32x4_mul n) i32x4_shr_u 8) i32x4_add fa) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x)) i8x16_narrow_i16x8_u
          ((v128_bitselect(
              (r = (o = ((y i32x4_mul n) i32x4_shr_u 8) i32x4_add ca) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              r i32x4_lt_u t) v128_and
            x) i16x8_narrow_i32x4_u
           (v128_bitselect(
              (q = (o = ((aa i32x4_mul n) i32x4_shr_u 8) i32x4_add q) i32x4_add s) i32x4_shr_u
              6,
              v128_bitselect(w, x, o i32x4_lt_u z),
              q i32x4_lt_u t) v128_and
            x))),
      SimdStoreLane(d + 89, x),
      SimdStoreLane(d + 83, x),
      SimdStoreLane(d + 77, x),
      SimdStoreLane(d + 71, x),
      SimdStoreLane(d + 65, x),
      SimdStoreLane(d + 59, x),
      SimdStoreLane(d + 53, x),
      SimdStoreLane(d + 47, x),
      SimdStoreLane(d + 41, x),
      SimdStoreLane(d + 35, x),
      SimdStoreLane(d + 29, x),
      SimdStoreLane(d + 23, x),
      SimdStoreLane(d + 17, x),
      SimdStoreLane(d + 11, x),
      SimdStoreLane(d + 5, x);
    a = a + 32;
    b = b + 16;
    d = d + 96;
    c = c + 16;
    if (m = m + -16) continue L_e;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
    t16;
    t17;
    t18;
    t19;
    t20;
    t21;
    t22;
    t23;
    t24;
    t25;
    t26;
    t27;
    t28;
    t29;
    t30;
    t31;
    t32;
    t33;
    t34;
    t35;
    t36;
    t37;
    t38;
    t39;
    t40;
    t41;
    t42;
    t43;
    t44;
    t45;
    t46;
    t47;
    t48;
    t49;
    t50;
    t51;
    t52;
    t53;
    t54;
    t55;
    t56;
    t57;
    t58;
    t59;
    t60;
    t61;
    t62;
    t63;
    t64;
    t65;
    t66;
    t67;
    t68;
    t69;
    t70;
    t71;
    t72;
    t73;
    t74;
    t75;
    t76;
    t77;
    t78;
    t79;
    t80;
    t81;
    t82;
    t83;
    t84;
    t85;
    t86;
    t87;
    t88;
    t89;
    t90;
    t91;
    t92;
    t93;
    t94;
    t95;
  }
  if (j == k) goto B_b;
  goto B_c;
  label B_d:
  i = a;
  h = b;
  f = d;
  l = c;
  label B_c:
  loop L_f {
    d = l[0];
    f[2] =
      select_if(
        (m = (c = ((b = h[0]) * 33050 >> 8) + (a = i.a * 19077 >> 8)) + -17685) >>
        6,
        select_if(0, 255, c < 17685),
        m < 16384);
    f[0] =
      select_if((m = (c = (d * 26149 >> 8) + a) + -14234) >> 6,
                select_if(0, 255, c < 14234),
                m < 16384);
    f[1] =
      select_if(
        (a = (d = a - (b * 6419 >> 8) + (d * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    d = l[0];
    f[5] =
      select_if(
        (m = (c = ((b = h[0]) * 33050 >> 8) + (a = i.b * 19077 >> 8)) + -17685) >>
        6,
        select_if(0, 255, c < 17685),
        m < 16384);
    (f + 3)[0]:byte =
      select_if((m = (c = (d * 26149 >> 8) + a) + -14234) >> 6,
                select_if(0, 255, c < 14234),
                m < 16384);
    f[4] =
      select_if(
        (a = (d = a - (b * 6419 >> 8) + (d * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, d < -8708),
        a < 16384);
    l = l + 1;
    h = h + 1;
    i = i + 2;
    f = f + 6;
    if (f != g) continue L_f;
  }
  label B_b:
  c = l;
  d = g;
  b = h;
  a = i;
  label B_a:
  if (eqz(e & 1)) goto B_g;
  f = c[0]:ubyte;
  d.c =
    select_if(
      (l = (h = ((i = b[0]:ubyte) * 33050 >> 8) + (a = a[0] * 19077 >> 8)) +
           -17685) >>
      6,
      select_if(0, 255, h < 17685),
      l < 16384);
  d.a =
    select_if((l = (h = (f * 26149 >> 8) + a) + -14234) >> 6,
              select_if(0, 255, h < 14234),
              l < 16384);
  d.b =
    select_if(
      (f = (a = a - (i * 6419 >> 8) + (f * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, a < -8708),
      f < 16384);
  label B_g:
}

function WebPConvertARGBToUV_C(a:int, b:int, c:int, d:int, e:int) {
  var l:int;
  var n:int;
  var g:int;
  var i:int;
  var j:int;
  var k:int;
  var f:int = 0;
  if (d < 2) goto B_a;
  g = a;
  f = d >> 1;
  var h:int = f;
  i = b;
  j = c;
  loop L_b {
    k = (g + 4)[0]:int;
    var m:int = (k >> 15 & 510) + ((l = g[0]:int) >> 15 & 510);
    l = m * 28800 + (n = (k >> 7 & 510) + (l >> 7 & 510)) * -24116 +
        (k = (k << 1 & 510) + (l << 1 & 510)) * -4684 +
        33685504 >>
        18;
    k = m * -9719 + n * -19081 + k * 28800 + 33685504 >> 18;
    if (eqz(e)) goto B_d;
    i[0]:byte = k;
    j[0]:byte = l;
    goto B_c;
    label B_d:
    i[0]:byte = k + i[0]:ubyte + 1 >> 1;
    j[0]:byte = l + j[0]:ubyte + 1 >> 1;
    label B_c:
    g = g + 8;
    i = i + 1;
    j = j + 1;
    h = h + -1;
    if (h) continue L_b;
  }
  label B_a:
  if (eqz(d & 1)) goto B_e;
  g = (a + (f << 3))[0]:int;
  i = g >> 14 & 1020;
  k = i * 28800 + (j = g >> 6 & 1020) * -24116 +
      (g = g << 2 & 1020) * -4684 +
      33685504 >>
      18;
  g = i * -9719 + j * -19081 + g * 28800 + 33685504 >> 18;
  if (eqz(e)) goto B_f;
  (b + f)[0]:byte = g;
  (c + f)[0]:byte = k;
  return ;
  label B_f:
  i = b + f;
  i[0]:byte = g + i[0]:ubyte + 1 >> 1;
  g = c + f;
  g[0]:byte = k + g[0]:ubyte + 1 >> 1;
  label B_e:
}

function WebPConvertRGBA32ToUV_C(a:byte_ptr, b:int, c:int, d:int) {
  var f:ushort_ptr;
  var h:int;
  var g:byte_ptr;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var i:int;
  if (d < 1) goto B_a;
  var e:int = 0;
  if (d >= 8) goto B_c;
  f = a;
  goto B_b;
  label B_c:
  g = c + d;
  if (eqz(g > b & (f = b + d) > c)) goto B_d;
  f = a;
  goto B_b;
  label B_d:
  h = (d << 3) + a + -2;
  if (eqz(h > b & f > a)) goto B_e;
  f = a;
  goto B_b;
  label B_e:
  if (eqz(h > c & g > a)) goto B_f;
  f = a;
  goto B_b;
  label B_f:
  f = a + ((e = d & -8) << 3);
  i = e;
  g = c;
  h = b;
  loop L_g {
    let t0, t1 = 
      SimdStoreLane(
        g,
        SimdShuffleOp(
          v128_bitselect(
            (r = 
               (p = 
                  (((j = 
                       i32x4_extend_low_i16x8_u(
                         SimdLoadLane(
                           a + 26,
                           SimdLoadLane(a + 18, SimdLoadLane(a + 10, LoadSplat(a + 2)))))) i32x4_mul
                    (k = V128)) i32x4_add
                   ((l = 
                       i32x4_extend_low_i16x8_u(
                         SimdLoadLane(a + 24,
                                      SimdLoadLane(a + 16, SimdLoadLane(a + 8, LoadSplat(a)))))) i32x4_mul
                    (m = V128))) i32x4_add
                  ((n = 
                      i32x4_extend_low_i16x8_u(
                        SimdLoadLane(
                          a + 28,
                          SimdLoadLane(a + 20, SimdLoadLane(a + 12, LoadSplat(a + 4)))))) i32x4_mul
                   (o = V128))) i32x4_add
               (q = V128)) i32x4_shr_u
            18,
            v128_bitselect(s = V128, t = V128, p i32x4_lt_s s),
            r i32x4_lt_u (p = V128)),
          v128_bitselect(
            (v = 
               (o = 
                  (((r = 
                       i32x4_extend_low_i16x8_u(
                         SimdLoadLane(
                           a + 58,
                           SimdLoadLane(a + 50, SimdLoadLane(a + 42, LoadSplat(a + 34)))))) i32x4_mul
                    k) i32x4_add
                   ((k = 
                       i32x4_extend_low_i16x8_u(
                         SimdLoadLane(
                           a + 56,
                           SimdLoadLane(a + 48, SimdLoadLane(a + 40, LoadSplat(a + 32)))))) i32x4_mul
                    m)) i32x4_add
                  ((u = 
                      i32x4_extend_low_i16x8_u(
                        SimdLoadLane(
                          a + 60,
                          SimdLoadLane(a + 52, SimdLoadLane(a + 44, LoadSplat(a + 36)))))) i32x4_mul
                   o)) i32x4_add
               q) i32x4_shr_u
            18,
            v128_bitselect(s, t, o i32x4_lt_s s),
            v i32x4_lt_u p))),
      SimdStoreLane(
        h,
        SimdShuffleOp(
          v128_bitselect(
            (n = 
               (l = 
                  ((j i32x4_mul (o = V128)) i32x4_add (l i32x4_mul (j = V128))) i32x4_add
                  (n i32x4_mul m)) i32x4_add
               q) i32x4_shr_u
            18,
            v128_bitselect(s, t, l i32x4_lt_s s),
            n i32x4_lt_u p),
          v128_bitselect(
            (q = 
               (m = 
                  ((r i32x4_mul o) i32x4_add (k i32x4_mul j)) i32x4_add (u i32x4_mul m)) i32x4_add
               q) i32x4_shr_u
            18,
            v128_bitselect(s, t, m i32x4_lt_s s),
            q i32x4_lt_u p)));
    a = a + 64;
    g = g + 8;
    h = h + 8;
    if (i = i + -8) continue L_g;
    t0;
    t1;
  }
  if (e == d) goto B_a;
  label B_b:
  a = b + e;
  g = c + e;
  h = d - e;
  loop L_h {
    a[0] =
      select_if(
        (c = (b = (i = (f + 2)[0]:ushort) * -19081 + (d = f[0]) * -9719 +
                  (e = (f + 4)[0]:ushort) * 28800) +
             33685504) >>
        18,
        select_if(-33685504, 255, b < -33685504),
        c < 67108864);
    g[0] =
      select_if(
        (d = (i = i * -24116 + d * 28800 + e * -4684) + 33685504) >> 18,
        select_if(-33685504, 255, i < -33685504),
        d < 67108864);
    f = f + 8;
    a = a + 1;
    g = g + 1;
    h = h + -1;
    if (h) continue L_h;
  }
  label B_a:
}

function WebPInitConvertARGBToYUV() {
  var a:int = data[2]:int;
  if (a == data[10]:int) goto B_a;
  0[265101]:int = 146;
  0[265100]:int = 147;
  0[265097]:int = 148;
  0[265098]:int = 149;
  0[265099]:int = 150;
  if (eqz(a)) goto B_b;
  if (eqz(call_indirect(0, a))) goto B_c;
  WebPInitConvertARGBToYUVSSE2();
  label B_c:
  if (eqz(call_indirect(3, data[2]:int))) goto B_b;
  WebPInitConvertARGBToYUVSSE41();
  label B_b:
  data[10]:int = data[2]:int;
  label B_a:
}

function ConvertARGBToY_C(a:int, b:int, c:int) {
  var h:simd;
  var i:simd;
  var f:byte_ptr;
  var g:int;
  var e:int;
  if (c < 1) goto B_a;
  var d:int = 0;
  if (c < 4) goto B_b;
  if (a + (c << 2) <= b) goto B_c;
  if (b + c > a) goto B_b;
  label B_c:
  d = c & -4;
  e = d;
  f = b;
  g = a;
  loop L_d {
    let t0 = 
      SimdStoreLane(
        f,
        SimdShuffleOp(
          ((((((h = g[0]:simd@4) v128_and (i = V128)) i32x4_mul V128) i32x4_add
             (((h i32x4_shr_u 16) v128_and i) i32x4_mul V128)) i32x4_add
            (((h i32x4_shr_u 8) v128_and i) i32x4_mul V128)) i32x4_add
           V128) i32x4_shr_u
          16,
          h));
    f = f + 4;
    g = g + 16;
    if (e = e + -4) continue L_d;
    t0;
  }
  if (d == c) goto B_a;
  label B_b:
  f = b + d;
  c = c - d;
  g = a + (d << 2);
  loop L_e {
    f[0] =
      ((e = g[0]:int) & 255) * 6420 + (e >> 16 & 255) * 16839 +
      (e >> 8 & 255) * 33059 +
      1081344 >>
      16;
    g = g + 4;
    f = f + 1;
    c = c + -1;
    if (c) continue L_e;
  }
  label B_a:
}

function ConvertRGB24ToY_C(a:byte_ptr, b:int, c:int) {
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var e:{ a:ubyte, b:ubyte, c:ubyte, d:ubyte, e:ubyte, f:ubyte }
  var g:simd_ptr@1;
  if (c < 1) goto B_a;
  var d:int = 0;
  if (c >= 16) goto B_c;
  e = a;
  goto B_b;
  label B_c:
  if (a + c * 3 <= b) goto B_d;
  if (b + c <= a) goto B_d;
  e = a;
  goto B_b;
  label B_d:
  e = a + (d = c & -16) * 3;
  var f:int = d;
  g = b;
  loop L_e {
    g[0] =
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(a + 9,
                              SimdLoadLane(a + 6, SimdLoadLane(a + 3, LoadSplat(a)))))) i32x4_mul
             (h = V128)) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 10,
                   SimdLoadLane(a + 7, SimdLoadLane(a + 4, LoadSplat(a + 1)))))) i32x4_mul
             (i = V128))) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 11,
                  SimdLoadLane(a + 8, SimdLoadLane(a + 5, LoadSplat(a + 2)))))) i32x4_mul
            (j = V128))) i32x4_add
          (k = V128)) i32x4_shr_u
         16) v128_and
        (l = V128)) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 21,
                   SimdLoadLane(a + 18, SimdLoadLane(a + 15, LoadSplat(a + 12)))))) i32x4_mul
             h) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 22,
                   SimdLoadLane(a + 19, SimdLoadLane(a + 16, LoadSplat(a + 13)))))) i32x4_mul
             i)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 23,
                  SimdLoadLane(a + 20, SimdLoadLane(a + 17, LoadSplat(a + 14)))))) i32x4_mul
            j)) i32x4_add
          k) i32x4_shr_u
         16) v128_and
        l)) i8x16_narrow_i16x8_u
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 33,
                   SimdLoadLane(a + 30, SimdLoadLane(a + 27, LoadSplat(a + 24)))))) i32x4_mul
             h) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 34,
                   SimdLoadLane(a + 31, SimdLoadLane(a + 28, LoadSplat(a + 25)))))) i32x4_mul
             i)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 35,
                  SimdLoadLane(a + 32, SimdLoadLane(a + 29, LoadSplat(a + 26)))))) i32x4_mul
            j)) i32x4_add
          k) i32x4_shr_u
         16) v128_and
        l) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 45,
                   SimdLoadLane(a + 42, SimdLoadLane(a + 39, LoadSplat(a + 36)))))) i32x4_mul
             h) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 46,
                   SimdLoadLane(a + 43, SimdLoadLane(a + 40, LoadSplat(a + 37)))))) i32x4_mul
             i)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 47,
                  SimdLoadLane(a + 44, SimdLoadLane(a + 41, LoadSplat(a + 38)))))) i32x4_mul
            j)) i32x4_add
          k) i32x4_shr_u
         16) v128_and
        l));
    a = a + 48;
    g = g + 16;
    f = f + -16;
    if (f) continue L_e;
  }
  if (d == c) goto B_a;
  label B_b:
  a = d ^ -1;
  if (eqz(c & 1)) goto B_f;
  (b + d)[0]:byte =
    e.a * 16839 + e.b * 33059 + e.c * 6420 + 1081344 >> 16;
  e = e + 3;
  d = d | 1;
  label B_f:
  if (a == 0 - c) goto B_a;
  a = b + d;
  g = c - d;
  loop L_g {
    a[0] = e.a * 16839 + e.b * 33059 + e.c * 6420 + 1081344 >> 16;
    (a + 1)[0]:byte =
      e.d * 16839 + e.e * 33059 + e.f * 6420 + 1081344 >> 16;
    a = a + 2;
    e = e + 6;
    g = g + -2;
    if (g) continue L_g;
  }
  label B_a:
}

function ConvertBGR24ToY_C(a:byte_ptr, b:int, c:int) {
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var e:{ a:ubyte, b:ubyte, c:ubyte, d:ubyte, e:ubyte, f:ubyte }
  var g:simd_ptr@1;
  if (c < 1) goto B_a;
  var d:int = 0;
  if (c >= 16) goto B_c;
  e = a;
  goto B_b;
  label B_c:
  if (a + c * 3 <= b) goto B_d;
  if (b + c <= a) goto B_d;
  e = a;
  goto B_b;
  label B_d:
  e = a + (d = c & -16) * 3;
  var f:int = d;
  g = b;
  loop L_e {
    g[0] =
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 11,
                   SimdLoadLane(a + 8, SimdLoadLane(a + 5, LoadSplat(a + 2)))))) i32x4_mul
             (h = V128)) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 10,
                   SimdLoadLane(a + 7, SimdLoadLane(a + 4, LoadSplat(a + 1)))))) i32x4_mul
             (i = V128))) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(a + 9,
                             SimdLoadLane(a + 6, SimdLoadLane(a + 3, LoadSplat(a)))))) i32x4_mul
            (j = V128))) i32x4_add
          (k = V128)) i32x4_shr_u
         16) v128_and
        (l = V128)) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 23,
                   SimdLoadLane(a + 20, SimdLoadLane(a + 17, LoadSplat(a + 14)))))) i32x4_mul
             h) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 22,
                   SimdLoadLane(a + 19, SimdLoadLane(a + 16, LoadSplat(a + 13)))))) i32x4_mul
             i)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 21,
                  SimdLoadLane(a + 18, SimdLoadLane(a + 15, LoadSplat(a + 12)))))) i32x4_mul
            j)) i32x4_add
          k) i32x4_shr_u
         16) v128_and
        l)) i8x16_narrow_i16x8_u
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 35,
                   SimdLoadLane(a + 32, SimdLoadLane(a + 29, LoadSplat(a + 26)))))) i32x4_mul
             h) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 34,
                   SimdLoadLane(a + 31, SimdLoadLane(a + 28, LoadSplat(a + 25)))))) i32x4_mul
             i)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 33,
                  SimdLoadLane(a + 30, SimdLoadLane(a + 27, LoadSplat(a + 24)))))) i32x4_mul
            j)) i32x4_add
          k) i32x4_shr_u
         16) v128_and
        l) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 47,
                   SimdLoadLane(a + 44, SimdLoadLane(a + 41, LoadSplat(a + 38)))))) i32x4_mul
             h) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 46,
                   SimdLoadLane(a + 43, SimdLoadLane(a + 40, LoadSplat(a + 37)))))) i32x4_mul
             i)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 45,
                  SimdLoadLane(a + 42, SimdLoadLane(a + 39, LoadSplat(a + 36)))))) i32x4_mul
            j)) i32x4_add
          k) i32x4_shr_u
         16) v128_and
        l));
    a = a + 48;
    g = g + 16;
    f = f + -16;
    if (f) continue L_e;
  }
  if (d == c) goto B_a;
  label B_b:
  a = d ^ -1;
  if (eqz(c & 1)) goto B_f;
  (b + d)[0]:byte =
    e.c * 16839 + e.b * 33059 + e.a * 6420 + 1081344 >> 16;
  e = e + 3;
  d = d | 1;
  label B_f:
  if (a == 0 - c) goto B_a;
  a = b + d;
  g = c - d;
  loop L_g {
    a[0] = e.c * 16839 + e.b * 33059 + e.a * 6420 + 1081344 >> 16;
    (a + 1)[0]:byte =
      e.f * 16839 + e.e * 33059 + e.d * 6420 + 1081344 >> 16;
    a = a + 2;
    e = e + 6;
    g = g + -2;
    if (g) continue L_g;
  }
  label B_a:
}

function WebPInitAlphaProcessingSSE2() {
  0[264919]:int = 151;
  0[264918]:int = 152;
  0[264920]:int = 153;
  0[264922]:int = 154;
  0[264923]:int = 155;
  0[264924]:int = 156;
  0[264925]:int = 157;
  0[264927]:int = 158;
  0[264928]:int = 159;
  0[264929]:int = 160;
}

function MultRow_SSE2(a:int, b:int, c:int, d:int) {
  var h:simd;
  var i:simd;
  var f:int;
  var e:int = 0;
  if (d) goto B_a;
  if (c < 8) goto B_a;
  f = 0;
  loop L_b {
    var g:int = a + f;
    let t0 = 
      SimdStoreLane(
        g,
        SimdShuffleOp(
          i32x4_extend_low_i16x8_u(
            h = (SimdShuffleOp(LoadZero(b + f), h = V128) i16x8_mul
                 SimdShuffleOp(LoadZero(g), h)) i16x8_add
                V128) i32x4_mul
          (i = V128),
          i32x4_extend_high_i16x8_u(h) i32x4_mul i) i8x16_narrow_i16x8_u
        V128);
    g = f + 16;
    f = e = f + 8;
    if (g <= c) continue L_b;
    t0;
  }
  label B_a:
  f = c - e;
  if (f < 1) goto B_c;
  WebPMultRow_C(a + e, b + e, f, d);
  label B_c:
}

function MultARGBRow_SSE2(a:int, b:int, c:int) {
  var g:simd;
  var h:simd;
  var i:int;
  var f:int;
  var d:int = 0;
  if (c) goto B_a;
  if (b < 2) goto B_a;
  var e:int = 0;
  f = a;
  loop L_b {
    let t0 = 
      SimdStoreLane(
        f,
        SimdShuffleOp(
          i32x4_extend_low_i16x8_u(
            g = 
              (SimdShuffleOp(
                 g = 
                   SimdShuffleOp((h = SimdShuffleOp(LoadZero(f), g = V128)) v128_or V128,
                                 g),
                 g) i16x8_mul
               h) i16x8_add
              V128) i32x4_mul
          (h = V128),
          i32x4_extend_high_i16x8_u(g) i32x4_mul h) i8x16_narrow_i16x8_u
        V128);
    f = f + 8;
    i = e + 4;
    e = d = e + 2;
    if (i <= b) continue L_b;
    t0;
  }
  label B_a:
  f = b - d;
  if (f < 1) goto B_c;
  WebPMultARGBRow_C(a + (d << 2), f, c);
  label B_c:
}

function ApplyAlphaMultiply_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var k:int;
  var j:ubyte_ptr;
  var i:int;
  var q:int;
  if (d < 1) goto B_a;
  var f:int = a + select_if(0, 3, b);
  var g:int = a + (b != 0);
  var h:int = c < 4;
  loop L_b {
    if (b) goto B_d;
    i = 0;
    if (h) goto B_c;
    j = 0;
    k = a;
    loop L_e {
      k[0]:simd@1 =
        (SimdShuffleOp(
           i32x4_extend_low_i16x8_u(
             p = 
               SimdShuffleOp(
                 p = 
                   SimdShuffleOp(
                     (n = SimdShuffleOp(l = k[0]:simd@1, m = V128)) v128_or (o = V128),
                     m),
                 p) i16x8_mul
               n) i32x4_mul
           (n = V128),
           i32x4_extend_high_i16x8_u(p) i32x4_mul n) i16x8_shr_u
         7) i8x16_narrow_i16x8_u
        (SimdShuffleOp(
           i32x4_extend_low_i16x8_u(
             m = SimdShuffleOp(
                   m = SimdShuffleOp((l = SimdShuffleOp(l, m)) v128_or o, m),
                   m) i16x8_mul
                 l) i32x4_mul
           n,
           i32x4_extend_high_i16x8_u(m) i32x4_mul n) i16x8_shr_u
         7);
      k = k + 16;
      q = j + 8;
      i = j + 4;
      j = i;
      if (q <= c) continue L_e;
      goto B_c;
    }
    label B_d:
    i = 0;
    if (h) goto B_c;
    j = 0;
    k = a;
    loop L_f {
      k[0]:simd@1 =
        (SimdShuffleOp(
           i32x4_extend_low_i16x8_u(
             p = 
               SimdShuffleOp(
                 p = 
                   SimdShuffleOp(
                     (n = SimdShuffleOp(l = k[0]:simd@1, m = V128)) v128_or (o = V128),
                     m),
                 p) i16x8_mul
               n) i32x4_mul
           (n = V128),
           i32x4_extend_high_i16x8_u(p) i32x4_mul n) i16x8_shr_u
         7) i8x16_narrow_i16x8_u
        (SimdShuffleOp(
           i32x4_extend_low_i16x8_u(
             m = SimdShuffleOp(
                   m = SimdShuffleOp((l = SimdShuffleOp(l, m)) v128_or o, m),
                   m) i16x8_mul
                 l) i32x4_mul
           n,
           i32x4_extend_high_i16x8_u(m) i32x4_mul n) i16x8_shr_u
         7);
      k = k + 16;
      q = j + 8;
      i = j + 4;
      j = i;
      if (q <= c) continue L_f;
    }
    label B_c:
    if (c <= i) goto B_g;
    q = c - i;
    j = f + (k = i << 2);
    k = g + k;
    loop L_h {
      i = j[0];
      if (i == 255) goto B_i;
      k[0]:byte = (i = i * 32897) * k[0]:ubyte >> 23;
      var r:int = k + 1;
      r[0]:byte = i * r[0]:ubyte >> 23;
      r = k + 2;
      r[0]:byte = i * r[0]:ubyte >> 23;
      label B_i:
      j = j + 4;
      k = k + 4;
      q = q + -1;
      if (q) continue L_h;
    }
    label B_g:
    f = f + e;
    g = g + e;
    a = a + e;
    k = d > 1;
    d = d + -1;
    if (k) continue L_b;
  }
  label B_a:
}

function DispatchAlpha_SSE2(a:int, b:int, c:int, d:int, e:int, f:int):int {
  var o:simd;
  var l:int;
  var p:simd;
  var q:simd;
  var r:simd;
  var g:simd;
  var h:int;
  var t:int;
  var m:int;
  var n:simd_ptr@1;
  if (d >= 1) goto B_b;
  g = V128;
  h = 255;
  goto B_a;
  label B_b:
  g = V128;
  var i:int = 0;
  h = 255;
  var j:int = c + -1 & -8;
  var k:int = j < 1;
  loop L_c {
    if (eqz(k)) goto B_e;
    l = 0;
    goto B_d;
    label B_e:
    l = 0;
    m = e;
    loop L_f {
      n = m + 16;
      n[0] =
        (n[0] v128_and (o = V128)) v128_or
        SimdShuffleOp(r = SimdShuffleOp(p = LoadZero(a + l), q = V128), q);
      m[0]:simd@1 = (m[0]:simd@1 v128_and o) v128_or SimdShuffleOp(r, q);
      m = m + 32;
      g = g v128_and p;
      l = l + 8;
      if (l < j) continue L_f;
    }
    label B_d:
    if (c <= l) goto B_g;
    var s:int = c - l;
    if (s < 4) goto B_h;
    m = a + l;
    r = SimdLaneOp(V128, h);
    p = i32x4_splat(l) i32x4_add V128;
    l = l + (t = s & -4);
    n = t;
    loop L_i {
      let t0, t1, t2, t3 = 
        SimdStoreLane(e + SimdLaneOp(o = p i32x4_shl 2), q = LoadZero(m)),
        SimdStoreLane(e + SimdLaneOp(o), q),
        SimdStoreLane(e + SimdLaneOp(o), q),
        SimdStoreLane(e + SimdLaneOp(o), q);
      m = m + 4;
      p = p i32x4_add V128;
      r = r v128_and i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(q));
      if (n = n + -4) continue L_i;
      t0;
      t1;
      t2;
      t3;
    }
    q = r v128_and SimdShuffleOp(r, q);
    h = SimdLaneOp(q v128_and SimdShuffleOp(q, q));
    if (s == t) goto B_g;
    label B_h:
    m = e + (l << 2);
    loop L_j {
      m[0]:byte = (n = (a + l)[0]:ubyte);
      m = m + 4;
      h = h & n;
      if (c != (l = l + 1)) continue L_j;
    }
    label B_g:
    e = e + f;
    a = a + b;
    i = i + 1;
    if (i != d) continue L_c;
  }
  label B_a:
  return (i8x16_bitmask(g i8x16_eq V128) & h) != 255;
}

function DispatchAlphaToGreen_SSE2(a:int, b:int, c:int, d:int, e:int, f:int) {
  var l:simd;
  var m:simd;
  var n:simd;
  var q:int;
  if (d < 1) goto B_a;
  var g:int = f << 2;
  var h:int = 0;
  var i:int = c & -16;
  var j:int = i < 1;
  loop L_b {
    var k:int = 0;
    if (j) goto B_c;
    k = 0;
    f = e;
    loop L_d {
      (f + 48)[0]:simd@1 =
        SimdShuffleOp(n = SimdShuffleOp(l = V128, m = (a + k)[0]:simd@1), l);
      (f + 32)[0]:simd@1 = SimdShuffleOp(n, l);
      (f + 16)[0]:simd@1 = SimdShuffleOp(m = SimdShuffleOp(l, m), l);
      f[0]:simd@1 = SimdShuffleOp(m, l);
      f = f + 64;
      k = k + 16;
      if (k < i) continue L_d;
    }
    label B_c:
    if (c <= k) goto B_e;
    var o:int = c - k;
    if (o < 4) goto B_f;
    f = a + k;
    var p:simd_ptr@4 = e + (k << 2);
    k = k + (q = o & -4);
    var r:int = q;
    loop L_g {
      p[0] =
        i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(LoadZero(f))) i32x4_shl
        8;
      p = p + 16;
      f = f + 4;
      r = r + -4;
      if (r) continue L_g;
    }
    if (o == q) goto B_e;
    label B_f:
    f = e + (k << 2);
    loop L_h {
      f[0]:int = (a + k)[0]:ubyte << 8;
      f = f + 4;
      if (c != (k = k + 1)) continue L_h;
    }
    label B_e:
    e = e + g;
    a = a + b;
    h = h + 1;
    if (h != d) continue L_b;
  }
  label B_a:
}

function ExtractAlpha_SSE2(a:int, b:int, c:int, d:int, e:int, f:int):int {
  var q:simd;
  var r:simd;
  var g:simd;
  var p:int;
  var h:int;
  var t:int;
  if (d >= 1) goto B_b;
  g = V128;
  h = 255;
  goto B_a;
  label B_b:
  var i:int = c + -1 & -8;
  var j:int = i + -1;
  var k:int = (j >> 3) + 1;
  var l:int = k & 1073741822;
  var m:int = k & 1;
  g = V128;
  var n:int = 0;
  h = 255;
  var o:int = j == 7;
  loop L_c {
    if (i >= 1) goto B_e;
    j = 0;
    goto B_d;
    label B_e:
    j = 0;
    if (eqz(o)) goto B_g;
    k = a;
    goto B_f;
    label B_g:
    j = 0;
    p = l;
    k = a;
    loop L_h {
      (e + j)[0]:simd =
        SimdShuffleOp(
          r = (r = (k[0]:simd@1 v128_and (q = V128)) i16x8_narrow_i32x4_s
                   ((k + 16)[0]:simd@1 v128_and q)) i8x16_narrow_i16x8_u
              r,
          q = (q = ((k + 32)[0]:simd@1 v128_and q) i16x8_narrow_i32x4_s
                   ((k + 48)[0]:simd@1 v128_and q)) i8x16_narrow_i16x8_u
              q);
      g = (g v128_and r) v128_and q;
      k = k + 64;
      j = j + 16;
      p = p + -2;
      if (p) continue L_h;
    }
    label B_f:
    if (eqz(m)) goto B_d;
    let t0 = 
      SimdStoreLane(
        e + j,
        q = (q = (k[0]:simd@1 v128_and (q = V128)) i16x8_narrow_i32x4_s
                 (k[16]:simd@1 v128_and q)) i8x16_narrow_i16x8_u
            q);
    g = g v128_and q;
    j = j + 8;
    t0;
    label B_d:
    if (c <= j) goto B_i;
    p = c - j;
    if (p < 4) goto B_j;
    k = e + j;
    var s:simd = SimdLaneOp(V128, h);
    r = i32x4_splat(j) i32x4_add V128;
    j = j + (t = p & -4);
    h = t;
    loop L_k {
      let t1 = 
        SimdStoreLane(
          k,
          q = 
            SimdLoadLane(
              a + SimdLaneOp(q = r i32x4_shl 2),
              SimdLoadLane(
                a + SimdLaneOp(q),
                SimdLoadLane(a + SimdLaneOp(q), LoadSplat(a + SimdLaneOp(q))))));
      s = s v128_and i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(q));
      k = k + 4;
      r = r i32x4_add V128;
      if (h = h + -4) continue L_k;
      t1;
    }
    q = s v128_and SimdShuffleOp(s, q);
    h = SimdLaneOp(q v128_and SimdShuffleOp(q, q));
    if (p == t) goto B_i;
    label B_j:
    k = a + (j << 2);
    loop L_l {
      (e + j)[0]:byte = (p = k[0]:ubyte);
      k = k + 4;
      h = h & p;
      if (c != (j = j + 1)) continue L_l;
    }
    label B_i:
    e = e + f;
    a = a + b;
    n = n + 1;
    if (n != d) continue L_c;
  }
  label B_a:
  return (i8x16_bitmask(g i8x16_eq V128) & h) == 255;
}

function ExtractGreen_SSE2(a:int, b:int, c:int) {
  var g:simd;
  var i:int;
  var j:int;
  var f:int;
  var h:int;
  var d:int = 0;
  var e:int = a;
  if (c < 16) goto B_a;
  f = 0;
  e = a;
  loop L_b {
    (b + f)[0]:simd@1 =
      (((e[0]:simd@1 i32x4_shr_u 8) v128_and (g = V128)) i16x8_narrow_i32x4_s
       (((e + 16)[0]:simd@1 i32x4_shr_u 8) v128_and g)) i8x16_narrow_i16x8_u
      ((((e + 32)[0]:simd@1 i32x4_shr_u 8) v128_and g) i16x8_narrow_i32x4_s
       (((e + 48)[0]:simd@1 i32x4_shr_u 8) v128_and g));
    e = e + 64;
    h = f + 32;
    d = f + 16;
    f = d;
    if (h <= c) continue L_b;
  }
  label B_a:
  i = d | 8;
  if (i <= c) goto B_d;
  i = d;
  goto B_c;
  label B_d:
  SimdStoreLane(
    b + d,
    (g = 
       ((e[0]:simd@1 i32x4_shr_u 8) v128_and (g = V128)) i16x8_narrow_i32x4_s
       ((e[16]:simd@1 i32x4_shr_u 8) v128_and g)) i8x16_narrow_i16x8_u
    g);
  label B_c:
  if (c <= i) goto B_e;
  d = c - i;
  if (d < 4) goto B_f;
  e = b + i;
  f = a + (i << 2);
  i = i + (j = d & -4);
  h = j;
  loop L_g {
    let t0 = 
      SimdStoreLane(e, SimdShuffleOp(f[0]:simd@4 i32x4_shr_u 8, g));
    e = e + 4;
    f = f + 16;
    if (h = h + -4) continue L_g;
    t0;
  }
  if (d == j) goto B_e;
  label B_f:
  e = b + i;
  h = c - i;
  f = a + (i << 2);
  loop L_h {
    e[0]:byte = f[0]:int >> 8;
    f = f + 4;
    e = e + 1;
    h = h + -1;
    if (h) continue L_h;
  }
  label B_e:
}

function HasAlpha8b_SSE2(a:int, b:int):int {
  var d:int;
  var e:simd_ptr@1;
  var c:ubyte_ptr = 0;
  loop L_d {
    d = c + 16;
    if (d <= b) goto B_e;
    e = 0;
    if (b <= c) goto B_a;
    d = b - c;
    c = a + c;
    goto B_c;
    label B_e:
    e = a + c;
    c = d;
    if (i8x16_bitmask(e[0] i8x16_eq V128) == 65535) continue L_d;
    goto B_b;
  }
  label B_c:
  loop L_f {
    if (c[0] != 255) goto B_b;
    c = c + 1;
    d = d + -1;
    if (eqz(d)) goto B_a;
    continue L_f;
  }
  label B_b:
  e = 1;
  label B_a:
  return e;
}

function HasAlpha32b_SSE2(a:int, b:int):int {
  var e:simd_ptr@1;
  var f:simd;
  var d:int;
  var c:int = (b << 2) + -3;
  b = 0;
  loop L_c {
    d = b + 64;
    if (d <= c) goto B_d;
    loop L_f {
      d = b + 32;
      if (d <= c) goto B_g;
      e = 0;
      if (b > c) goto B_a;
      goto B_e;
      label B_g:
      e = a + b;
      b = d;
      f = 
        (e[0] v128_and (f = V128)) i16x8_narrow_i32x4_s (e[16] v128_and f);
      if (
        i8x16_bitmask((f i8x16_narrow_i16x8_u f) i8x16_eq V128) == 65535) continue L_f;
      goto B_b;
    }
    label B_e:
    loop L_h {
      if ((a + b)[0]:ubyte != 255) goto B_b;
      b = b + 4;
      if (b > c) goto B_a;
      continue L_h;
    }
    label B_d:
    e = a + b;
    b = d;
    if (
      i8x16_bitmask(
        (((e[0] v128_and (f = V128)) i16x8_narrow_i32x4_s (e[16] v128_and f)) i8x16_narrow_i16x8_u
         ((e[32] v128_and f) i16x8_narrow_i32x4_s
          ((e + 48)[0]:simd@1 v128_and f))) i8x16_eq
        V128) ==
      65535) continue L_c;
  }
  label B_b:
  e = 1;
  label B_a:
  return e;
}

function AlphaReplace_SSE2(a:int, b:int, c:int) {
  var i:simd;
  var j:simd;
  var g:int;
  var f:simd;
  var k:simd_ptr@1;
  var d:int = 8;
  var e:int = 0;
  if (b < 8) goto B_a;
  f = i32x4_splat(c);
  e = b + -8;
  g = (e >> 3) + 1;
  var h:int = g & 1;
  if (e >= 8) goto B_c;
  e = 0;
  goto B_b;
  label B_c:
  g = g & 1073741822;
  d = 8;
  e = a;
  loop L_d {
    e[0]:simd@1 =
      v128_bitselect(f, i = e[0]:simd@1, i i32x4_lt_u (j = V128));
    k = e + 16;
    k[0] = v128_bitselect(f, i = k[0], i i32x4_lt_u j);
    k = e + 32;
    k[0] = v128_bitselect(f, i = k[0], i i32x4_lt_u j);
    k = e + 48;
    k[0] = v128_bitselect(f, i = k[0], i i32x4_lt_u j);
    e = e + 64;
    d = d + 16;
    g = g + -2;
    if (g) continue L_d;
  }
  e = d + -8;
  label B_b:
  if (eqz(h)) goto B_a;
  e = a + (e << 2);
  e[16]:simd@1 =
    v128_bitselect(f, j = e[16]:simd@1, j i32x4_lt_u (i = V128));
  e[0]:simd@1 = v128_bitselect(f, j = e[0]:simd@1, j i32x4_lt_u i);
  e = d;
  label B_a:
  if (b <= e) goto B_e;
  g = b - e;
  if (g >= 4) goto B_g;
  g = e;
  goto B_f;
  label B_g:
  d = a + (e << 2);
  g = e + g - (k = b & 3);
  loop L_h {
    f = d[0]:simd@4 i32x4_lt_u V128;
    if (eqz(SimdLaneOp(f) & 1)) goto B_i;
    d[0]:int = c;
    label B_i:
    if (eqz(SimdLaneOp(f) & 1)) goto B_j;
    (a + (e << 2 | 4))[0]:int = c;
    label B_j:
    if (eqz(SimdLaneOp(f) & 1)) goto B_k;
    (a + (e << 2 | 8))[0]:int = c;
    label B_k:
    if (eqz(SimdLaneOp(f) & 1)) goto B_l;
    (a + (e << 2 | 12))[0]:int = c;
    label B_l:
    d = d + 16;
    if (g != (e = e + 4)) continue L_h;
  }
  if (eqz(k)) goto B_e;
  label B_f:
  d = b - g;
  e = a + (g << 2);
  loop L_m {
    if (e[0]:int > 16777215) goto B_n;
    e[0]:int = c;
    label B_n:
    e = e + 4;
    d = d + -1;
    if (d) continue L_m;
  }
  label B_e:
}

function VP8DspInitSSE2() {
  0[264964]:int = 161;
  0[264959]:int = 162;
  0[264965]:int = 163;
  0[264966]:int = 164;
  0[264967]:int = 165;
  0[264968]:int = 166;
  0[264969]:int = 167;
  0[264970]:int = 168;
  0[264971]:int = 169;
  0[264972]:int = 170;
  0[264973]:int = 171;
  0[264974]:int = 172;
  0[264975]:int = 173;
  1059760[7]:int = 174;
  1059760[6]:int = 175;
  1059760[5]:int = 176;
  1059760[4]:int = 177;
  1059760[2]:int = 178;
  1059760[1]:int = 179;
  1059728[6]:int = 180;
  1059728[5]:int = 181;
  1059728[4]:int = 182;
  1059728[3]:int = 183;
  1059728[2]:int = 184;
  1059728[1]:int = 185;
  0[264932]:int = 186;
  0[264952]:int = 187;
  1059808[1]:int = 188;
  1059808[2]:int = 189;
  1059808[4]:int = 190;
  1059808[5]:int = 191;
  1059808[6]:int = 192;
}

function VFilter16_SSE2(a:simd_ptr@1, b:int, c:int, d:int, e:int) {
  var f:simd_ptr@1;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:int;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:int;
  var o:simd_ptr@1;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  (a + b * -3)[0]:simd@1 =
    (((g = ((f = a - (b << 2)) + b)[0]:simd@1) v128_xor (h = V128)) i8x16_add_sat_s
     (y = 
        ((x = 
            (p = 
               SimdShuffleOp(
                 i32x4_extend_low_i16x8_s(
                   p = 
                     SimdShuffleOp(
                       i = V128,
                       k = 
                         ((s = 
                             i i8x16_eq
                             (((((m = 
                                    ((k = (f + (j = b * 3))[0]:simd@1) i8x16_sub_sat_u (l = a[0])) v128_or
                                    (l i8x16_sub_sat_u k)) i8x16_add_sat_u
                                 m) i8x16_add_sat_u
                                (((((m = (f + (n = b << 1))[0]:simd@1) i8x16_sub_sat_u
                                    (p = (o = a + b)[0])) v128_or
                                   (p i8x16_sub_sat_u m)) i16x8_shr_u
                                  1) v128_and
                                 V128)) i8x16_sub_sat_u
                               i8x16_splat(c)) v128_or
                              (((((((q = (m i8x16_sub_sat_u k) v128_or (k i8x16_sub_sat_u m)) i8x16_max_u
                                    (((r = f[0]) i8x16_sub_sat_u g) v128_or (g i8x16_sub_sat_u r))) i8x16_max_u
                                   ((g i8x16_sub_sat_u m) v128_or (m i8x16_sub_sat_u g))) i8x16_max_u
                                  (r = (p i8x16_sub_sat_u l) v128_or (l i8x16_sub_sat_u p))) i8x16_max_u
                                 (((s = (a + j)[0]:simd@1) i8x16_sub_sat_u (g = (f = a + n)[0])) v128_or
                                  (g i8x16_sub_sat_u s))) i8x16_max_u
                                ((g i8x16_sub_sat_u p) v128_or (p i8x16_sub_sat_u g))) i8x16_sub_sat_u
                               i8x16_splat(d)))) v128_and
                          (w = 
                             (k = (l = l v128_xor h) i8x16_sub_sat_s (t = k v128_xor h)) i8x16_add_sat_s
                             (k i8x16_add_sat_s
                              (k i8x16_add_sat_s
                               ((u = m v128_xor h) i8x16_sub_sat_s (v = p v128_xor h)))))) v128_and
                         (q = i i8x16_eq ((q i8x16_max_u r) i8x16_sub_sat_u i8x16_splat(e))))) i32x4_mul
                 (m = V128),
                 i32x4_extend_high_i16x8_s(p) i32x4_mul m)) i16x8_add
            (r = V128)) i16x8_shr_s
         7) i8x16_narrow_i16x8_s
        ((r = 
            (k = SimdShuffleOp(
                   i32x4_extend_low_i16x8_s(k = SimdShuffleOp(i, k)) i32x4_mul m,
                   i32x4_extend_high_i16x8_s(k) i32x4_mul m)) i16x8_add
            r) i16x8_shr_s
         7))) v128_xor
    (m = V128);
  (a - n)[0]:simd@1 =
    (u i8x16_add_sat_s
     (z = ((x = x i16x8_add p) i16x8_shr_s 7) i8x16_narrow_i16x8_s
          ((r = r i16x8_add k) i16x8_shr_s 7))) v128_xor
    m;
  (a - b)[0]:simd@1 =
    ((t i8x16_add_sat_s
      ((SimdShuffleOp(
          i,
          s = (q = (w v128_andnot q) v128_and s) i8x16_add_sat_s V128) i16x8_shr_s
        11) i8x16_narrow_i16x8_s
       (SimdShuffleOp(i, s) i16x8_shr_s 11))) i8x16_add_sat_s
     (p = ((x i16x8_add p) i16x8_shr_s 7) i8x16_narrow_i16x8_s
          ((r i16x8_add k) i16x8_shr_s 7))) v128_xor
    m;
  a[0] =
    ((l i8x16_sub_sat_s
      ((SimdShuffleOp(i, k = q i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
       (SimdShuffleOp(i, k) i16x8_shr_s 11))) i8x16_sub_sat_s
     p) v128_xor
    m;
  o[0] = (v i8x16_sub_sat_s z) v128_xor m;
  f[0] = ((g v128_xor h) i8x16_sub_sat_s y) v128_xor m;
}

function Transform_SSE2(a:int, b:int, c:int) {
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var o:simd;
  var d:simd = LoadZero(a);
  var e:simd = LoadZero(a);
  var f:simd = LoadZero(a);
  var g:simd = LoadZero(a);
  if (eqz(c)) goto B_a;
  d = SimdShuffleOp(d, LoadZero(a));
  e = SimdShuffleOp(e, LoadZero(a));
  f = SimdShuffleOp(f, LoadZero(a));
  g = SimdShuffleOp(g, LoadZero(a));
  label B_a:
  var n:simd = 
    ((f i16x8_add d) i16x8_add
     SimdShuffleOp((h = i32x4_extend_low_i16x8_s(d)) i32x4_mul (i = V128),
                   (j = i32x4_extend_high_i16x8_s(d)) i32x4_mul i)) i16x8_add
    SimdShuffleOp((k = i32x4_extend_low_i16x8_s(f)) i32x4_mul (l = V128),
                  (m = i32x4_extend_high_i16x8_s(f)) i32x4_mul l);
  var p:simd = n i16x8_add (o = g i16x8_add e);
  g = 
    SimdShuffleOp(
      p,
      e = (d = (SimdShuffleOp(k i32x4_mul i, m i32x4_mul i) i16x8_sub
                SimdShuffleOp(h i32x4_mul l, j i32x4_mul l)) i16x8_add
               (f i16x8_sub d)) i16x8_add
          (f = g i16x8_sub e));
  j = 
    SimdShuffleOp(g,
                  h = SimdShuffleOp(d = f i16x8_sub d, f = o i16x8_sub n));
  d = 
    SimdShuffleOp(
      j,
      k = SimdShuffleOp(e = SimdShuffleOp(p, e), f = SimdShuffleOp(d, f)));
  p = 
    ((d i16x8_add
      (f = SimdShuffleOp(g = SimdShuffleOp(g, h), e = SimdShuffleOp(e, f)))) i16x8_add
     SimdShuffleOp((h = i32x4_extend_low_i16x8_s(f)) i32x4_mul l,
                   (m = i32x4_extend_high_i16x8_s(f)) i32x4_mul l)) i16x8_add
    SimdShuffleOp((n = i32x4_extend_low_i16x8_s(d)) i32x4_mul i,
                  (o = i32x4_extend_high_i16x8_s(d)) i32x4_mul i);
  k = (p i16x8_add
       (j = (e = SimdShuffleOp(g, e) i16x8_add V128) i16x8_add
            (g = SimdShuffleOp(j, k)))) i16x8_shr_s
      3;
  f = 
    SimdShuffleOp(
      k,
      d = ((i = (SimdShuffleOp(h i32x4_mul i, m i32x4_mul i) i16x8_sub
                 SimdShuffleOp(n i32x4_mul l, o i32x4_mul l)) i16x8_add
                (f i16x8_sub d)) i16x8_add
           (l = e i16x8_sub g)) i16x8_shr_s
          3);
  g = 
    SimdShuffleOp(f,
                  e = SimdShuffleOp(i = (l i16x8_sub i) i16x8_shr_s 3,
                                    l = (j i16x8_sub p) i16x8_shr_s 3));
  h = 
    SimdShuffleOp(
      g,
      l = SimdShuffleOp(d = SimdShuffleOp(k, d), i = SimdShuffleOp(i, l)));
  l = SimdShuffleOp(g, l);
  f = SimdShuffleOp(f, e);
  d = SimdShuffleOp(f, i = SimdShuffleOp(d, i));
  f = SimdShuffleOp(f, i);
  if (eqz(c)) goto B_c;
  e = LoadZero(b);
  g = LoadZero(b);
  j = LoadZero(b);
  k = LoadZero(b);
  goto B_b;
  label B_c:
  e = LoadZero(b);
  g = LoadZero(b);
  j = LoadZero(b);
  k = LoadZero(b);
  label B_b:
  e = SimdShuffleOp(e, i = V128) i16x8_add h;
  e = e i8x16_narrow_i16x8_u e;
  l = SimdShuffleOp(g, i) i16x8_add l;
  l = l i8x16_narrow_i16x8_u l;
  d = SimdShuffleOp(j, i) i16x8_add d;
  d = d i8x16_narrow_i16x8_u d;
  i = SimdShuffleOp(k, i) i16x8_add f;
  i = i i8x16_narrow_i16x8_u i;
  if (eqz(c)) goto B_d;
  SimdStoreLane(b, e);
  SimdStoreLane(b, l);
  SimdStoreLane(b, d);
  SimdStoreLane(b, i);
  return ;
  label B_d:
  SimdStoreLane(b, e);
  SimdStoreLane(b, l);
  SimdStoreLane(b, d);
  SimdStoreLane(b, i);
}

function HFilter16_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var k:simd;
  var l:int;
  var m:int;
  var n:int;
  var o:int;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:int;
  var t:int;
  var u:int;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:int;
  var aa:int;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:simd;
  var f:int = a + -4;
  SimdStoreLane(
    f,
    da = 
      SimdShuffleOp(
        la = 
          SimdShuffleOp(
            y = 
              SimdShuffleOp(
                k = 
                  SimdShuffleOp(
                    r = 
                      SimdShuffleOp(
                        q = 
                          SimdShuffleOp(
                            k = SimdLoadLane(
                                  f + (g = b * 6),
                                  SimdLoadLane(f + (h = b << 1),
                                               SimdLoadLane(j = f + (i = b << 2), LoadSplat(f)))),
                            p = 
                              SimdLoadLane(
                                f + (l = b * 7),
                                SimdLoadLane(f + (m = b * 3),
                                             SimdLoadLane(f + (n = b * 5), LoadSplat(o = f + b))))),
                        k = SimdShuffleOp(k, p)),
                    q = SimdShuffleOp(q, k)),
                p = 
                  SimdShuffleOp(
                    x = 
                      SimdShuffleOp(
                        w = 
                          SimdShuffleOp(
                            p = SimdLoadLane(
                                  (f = f + (s = b << 3)) + g,
                                  SimdLoadLane(f + h, SimdLoadLane(t = f + i, LoadSplat(f)))),
                            v = SimdLoadLane(
                                  f + l,
                                  SimdLoadLane(f + m, SimdLoadLane(f + n, LoadSplat(u = f + b))))),
                        p = SimdShuffleOp(p, v)),
                    w = SimdShuffleOp(w, p))),
            ka = 
              (((v = SimdShuffleOp(k, p)) v128_xor (p = V128)) i8x16_add_sat_s
               (ia = 
                  ((ja = 
                      (r = 
                         SimdShuffleOp(
                           i32x4_extend_low_i16x8_s(
                             r = 
                               SimdShuffleOp(
                                 k = V128,
                                 ga = 
                                   ((ca = 
                                       k i8x16_eq
                                       (((((ha = 
                                              ((w = SimdShuffleOp(q = SimdShuffleOp(r, q), r = SimdShuffleOp(x, w))) i8x16_sub_sat_u
                                               (x = 
                                                  SimdShuffleOp(
                                                    da = 
                                                      SimdShuffleOp(
                                                        ba = 
                                                          SimdShuffleOp(
                                                            ca = 
                                                              SimdShuffleOp(
                                                                x = SimdLoadLane(
                                                                      a + g,
                                                                      SimdLoadLane(a + h, SimdLoadLane(z = a + i, LoadSplat(a)))),
                                                                ba = 
                                                                  SimdLoadLane(
                                                                    a + l,
                                                                    SimdLoadLane(a + m, SimdLoadLane(a + n, LoadSplat(aa = a + b))))),
                                                            x = SimdShuffleOp(x, ba)),
                                                        ca = SimdShuffleOp(ca, x)),
                                                    ga = 
                                                      SimdShuffleOp(
                                                        ea = 
                                                          SimdShuffleOp(
                                                            fa = 
                                                              SimdShuffleOp(
                                                                x = SimdLoadLane(
                                                                      (s = a + s) + g,
                                                                      SimdLoadLane(s + h, SimdLoadLane(g = s + i, LoadSplat(s)))),
                                                                ea = 
                                                                  SimdLoadLane(
                                                                    s + l,
                                                                    SimdLoadLane(s + m, SimdLoadLane(s + n, LoadSplat(h = s + b))))),
                                                            x = SimdShuffleOp(x, ea)),
                                                        fa = SimdShuffleOp(fa, x))))) v128_or
                                              (x i8x16_sub_sat_u w)) i8x16_add_sat_u
                                           ha) i8x16_add_sat_u
                                          (((((q = SimdShuffleOp(q, r)) i8x16_sub_sat_u (r = SimdShuffleOp(da, ga))) v128_or
                                             (r i8x16_sub_sat_u q)) i16x8_shr_u
                                            1) v128_and
                                           V128)) i8x16_sub_sat_u
                                         i8x16_splat(c)) v128_or
                                        (((((((da = (q i8x16_sub_sat_u w) v128_or (w i8x16_sub_sat_u q)) i8x16_max_u
                                              ((y i8x16_sub_sat_u v) v128_or (v i8x16_sub_sat_u y))) i8x16_max_u
                                             ((v i8x16_sub_sat_u q) v128_or (q i8x16_sub_sat_u v))) i8x16_max_u
                                            (ga = (r i8x16_sub_sat_u x) v128_or (x i8x16_sub_sat_u r))) i8x16_max_u
                                           (((ba = 
                                                SimdShuffleOp(v = SimdShuffleOp(ba, ca), ca = SimdShuffleOp(ea, fa))) i8x16_sub_sat_u
                                             (v = SimdShuffleOp(v, ca))) v128_or
                                            (v i8x16_sub_sat_u ba))) i8x16_max_u
                                          ((v i8x16_sub_sat_u r) v128_or (r i8x16_sub_sat_u v))) i8x16_sub_sat_u
                                         i8x16_splat(d)))) v128_and
                                    (w = 
                                       (w = (x = x v128_xor p) i8x16_sub_sat_s (ea = w v128_xor p)) i8x16_add_sat_s
                                       (w i8x16_add_sat_s
                                        (w i8x16_add_sat_s
                                         ((fa = q v128_xor p) i8x16_sub_sat_s (ha = r v128_xor p)))))) v128_and
                                   (da = k i8x16_eq ((da i8x16_max_u ga) i8x16_sub_sat_u i8x16_splat(e))))) i32x4_mul
                           (q = V128),
                           i32x4_extend_high_i16x8_s(r) i32x4_mul q)) i16x8_add
                      (ia = V128)) i16x8_shr_s
                   7) i8x16_narrow_i16x8_s
                  ((ga = 
                      (q = 
                         SimdShuffleOp(
                           i32x4_extend_low_i16x8_s(ga = SimdShuffleOp(k, ga)) i32x4_mul q,
                           i32x4_extend_high_i16x8_s(ga) i32x4_mul q)) i16x8_add
                      ia) i16x8_shr_s
                   7))) v128_xor
              p),
        ca = 
          SimdShuffleOp(
            fa = 
              (fa i8x16_add_sat_s
               (ma = ((ja = ja i16x8_add r) i16x8_shr_s 7) i8x16_narrow_i16x8_s
                     ((ga = ga i16x8_add q) i16x8_shr_s 7))) v128_xor
              p,
            r = 
              ((ea i8x16_add_sat_s
                ((SimdShuffleOp(
                    k,
                    ca = (w = (w v128_andnot da) v128_and ca) i8x16_add_sat_s V128) i16x8_shr_s
                  11) i8x16_narrow_i16x8_s
                 (SimdShuffleOp(k, ca) i16x8_shr_s 11))) i8x16_add_sat_s
               (q = ((ja i16x8_add r) i16x8_shr_s 7) i8x16_narrow_i16x8_s
                    ((ga i16x8_add q) i16x8_shr_s 7))) v128_xor
              p)));
  SimdStoreLane(o, da = SimdShuffleOp(k, da));
  SimdStoreLane(i = o + b, da = SimdShuffleOp(k, da));
  SimdStoreLane(i + b, SimdShuffleOp(k, da));
  SimdStoreLane(j, ca = SimdShuffleOp(la, ca));
  SimdStoreLane(i = j + b, ca = SimdShuffleOp(k, ca));
  SimdStoreLane(i = i + b, ca = SimdShuffleOp(k, ca));
  SimdStoreLane(i + b, SimdShuffleOp(k, ca));
  SimdStoreLane(
    f,
    ca = 
      SimdShuffleOp(y = SimdShuffleOp(y, ka), r = SimdShuffleOp(fa, r)));
  SimdStoreLane(u, ca = SimdShuffleOp(k, ca));
  SimdStoreLane(f = u + b, ca = SimdShuffleOp(k, ca));
  SimdStoreLane(f + b, SimdShuffleOp(k, ca));
  SimdStoreLane(t, r = SimdShuffleOp(y, r));
  SimdStoreLane(f = t + b, r = SimdShuffleOp(k, r));
  SimdStoreLane(f = f + b, r = SimdShuffleOp(k, r));
  SimdStoreLane(
    a,
    y = 
      SimdShuffleOp(
        x = 
          SimdShuffleOp(
            q = 
              ((x i8x16_sub_sat_s
                ((SimdShuffleOp(k, w = w i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
                 (SimdShuffleOp(k, w) i16x8_shr_s 11))) i8x16_sub_sat_s
               q) v128_xor
              p,
            w = (ha i8x16_sub_sat_s ma) v128_xor p),
        v = 
          SimdShuffleOp(p = ((v v128_xor p) i8x16_sub_sat_s ia) v128_xor p, ba)));
  SimdStoreLane(f + b, SimdShuffleOp(k, r));
  SimdStoreLane(aa, r = SimdShuffleOp(k, y));
  SimdStoreLane(a = aa + b, r = SimdShuffleOp(k, r));
  SimdStoreLane(a + b, SimdShuffleOp(k, r));
  SimdStoreLane(z, r = SimdShuffleOp(x, v));
  SimdStoreLane(a = z + b, r = SimdShuffleOp(k, r));
  SimdStoreLane(a = a + b, r = SimdShuffleOp(k, r));
  SimdStoreLane(a + b, SimdShuffleOp(k, r));
  SimdStoreLane(
    s,
    r = SimdShuffleOp(q = SimdShuffleOp(q, w), p = SimdShuffleOp(p, ba)));
  SimdStoreLane(h, r = SimdShuffleOp(k, r));
  SimdStoreLane(a = h + b, r = SimdShuffleOp(k, r));
  SimdStoreLane(a + b, SimdShuffleOp(k, r));
  SimdStoreLane(g, p = SimdShuffleOp(q, p));
  SimdStoreLane(a = g + b, p = SimdShuffleOp(k, p));
  SimdStoreLane(a = a + b, p = SimdShuffleOp(k, p));
  SimdStoreLane(a + b, SimdShuffleOp(k, p));
}

function VFilter8_SSE2(a:int, b:int, c:int, d:int, e:int, f:int) {
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:int;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:int;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  SimdStoreLane(
    a + (g = c * -3),
    ca = 
      (((k = SimdShuffleOp(LoadZero((i = a - (h = c << 2)) + c),
                           LoadZero((j = b - h) + c))) v128_xor
        (l = V128)) i8x16_add_sat_s
       (ba = 
          ((aa = 
              (k = 
                 SimdShuffleOp(
                   i32x4_extend_low_i16x8_s(
                     k = 
                       SimdShuffleOp(
                         m = V128,
                         p = 
                           ((t = 
                               m i8x16_eq
                               ((((((((q = 
                                         ((n = SimdShuffleOp(LoadZero(i + (h = c << 1)), LoadZero(j + h))) i8x16_sub_sat_u
                                          (p = SimdShuffleOp(LoadZero(i + (o = c * 3)), LoadZero(j + o)))) v128_or
                                         (p i8x16_sub_sat_u n)) i8x16_max_u
                                      (((r = SimdShuffleOp(LoadZero(i), LoadZero(j))) i8x16_sub_sat_u k) v128_or
                                       (k i8x16_sub_sat_u r))) i8x16_max_u
                                     ((k i8x16_sub_sat_u n) v128_or (n i8x16_sub_sat_u k))) i8x16_max_u
                                    (s = 
                                       ((k = SimdShuffleOp(LoadZero(i = a + c), LoadZero(j = b + c))) i8x16_sub_sat_u
                                        (r = SimdShuffleOp(LoadZero(a), LoadZero(b)))) v128_or
                                       (r i8x16_sub_sat_u k))) i8x16_max_u
                                   (((t = SimdShuffleOp(LoadZero(a + o), LoadZero(b + o))) i8x16_sub_sat_u
                                     (v = SimdShuffleOp(LoadZero(o = a + h), LoadZero(u = b + h)))) v128_or
                                    (v i8x16_sub_sat_u t))) i8x16_max_u
                                  ((v i8x16_sub_sat_u k) v128_or (k i8x16_sub_sat_u v))) i8x16_sub_sat_u
                                 i8x16_splat(e)) v128_or
                                ((((t = (p i8x16_sub_sat_u r) v128_or (r i8x16_sub_sat_u p)) i8x16_add_sat_u
                                   t) i8x16_add_sat_u
                                  ((((n i8x16_sub_sat_u k) v128_or (k i8x16_sub_sat_u n)) i16x8_shr_u 1) v128_and
                                   V128)) i8x16_sub_sat_u
                                 i8x16_splat(d)))) v128_and
                            (z = 
                               (p = (r = r v128_xor l) i8x16_sub_sat_s (w = p v128_xor l)) i8x16_add_sat_s
                               (p i8x16_add_sat_s
                                (p i8x16_add_sat_s
                                 ((x = n v128_xor l) i8x16_sub_sat_s (y = k v128_xor l)))))) v128_and
                           (q = m i8x16_eq ((q i8x16_max_u s) i8x16_sub_sat_u i8x16_splat(f))))) i32x4_mul
                   (n = V128),
                   i32x4_extend_high_i16x8_s(k) i32x4_mul n)) i16x8_add
              (s = V128)) i16x8_shr_s
           7) i8x16_narrow_i16x8_s
          ((s = 
              (p = SimdShuffleOp(
                     i32x4_extend_low_i16x8_s(p = SimdShuffleOp(m, p)) i32x4_mul n,
                     i32x4_extend_high_i16x8_s(p) i32x4_mul n)) i16x8_add
              s) i16x8_shr_s
           7))) v128_xor
      (n = V128));
  SimdStoreLane(b + g, SimdShuffleOp(m, ca));
  SimdStoreLane(
    a - h,
    x = (x i8x16_add_sat_s
         (ca = ((aa = aa i16x8_add k) i16x8_shr_s 7) i8x16_narrow_i16x8_s
               ((s = s i16x8_add p) i16x8_shr_s 7))) v128_xor
        n);
  SimdStoreLane(b - h, SimdShuffleOp(m, x));
  SimdStoreLane(
    a - c,
    p = 
      ((w i8x16_add_sat_s
        ((SimdShuffleOp(
            m,
            t = (q = (z v128_andnot q) v128_and t) i8x16_add_sat_s V128) i16x8_shr_s
          11) i8x16_narrow_i16x8_s
         (SimdShuffleOp(m, t) i16x8_shr_s 11))) i8x16_add_sat_s
       (k = ((aa i16x8_add k) i16x8_shr_s 7) i8x16_narrow_i16x8_s
            ((s i16x8_add p) i16x8_shr_s 7))) v128_xor
      n);
  SimdStoreLane(b - c, SimdShuffleOp(m, p));
  SimdStoreLane(
    a,
    k = 
      ((r i8x16_sub_sat_s
        ((SimdShuffleOp(m, p = q i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
         (SimdShuffleOp(m, p) i16x8_shr_s 11))) i8x16_sub_sat_s
       k) v128_xor
      n);
  SimdStoreLane(b, SimdShuffleOp(m, k));
  SimdStoreLane(i, k = (y i8x16_sub_sat_s ca) v128_xor n);
  SimdStoreLane(j, SimdShuffleOp(m, k));
  SimdStoreLane(o, n = ((v v128_xor l) i8x16_sub_sat_s ba) v128_xor n);
  SimdStoreLane(u, SimdShuffleOp(m, n));
}

function HFilter8_SSE2(a:int, b:int, c:int, d:int, e:int, f:int) {
  var h:int;
  var i:int;
  var j:int;
  var k:int;
  var l:simd;
  var m:int;
  var n:int;
  var o:int;
  var p:int;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:int;
  var u:int;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:int;
  var aa:int;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:simd;
  var g:int = a + -4;
  SimdStoreLane(
    g,
    da = 
      SimdShuffleOp(
        la = 
          SimdShuffleOp(
            y = 
              SimdShuffleOp(
                l = 
                  SimdShuffleOp(
                    s = 
                      SimdShuffleOp(
                        r = 
                          SimdShuffleOp(
                            l = SimdLoadLane(
                                  g + (h = c * 6),
                                  SimdLoadLane(g + (i = c << 1),
                                               SimdLoadLane(k = g + (j = c << 2), LoadSplat(g)))),
                            q = 
                              SimdLoadLane(
                                g + (m = c * 7),
                                SimdLoadLane(g + (n = c * 3),
                                             SimdLoadLane(g + (o = c * 5), LoadSplat(p = g + c))))),
                        l = SimdShuffleOp(l, q)),
                    r = SimdShuffleOp(r, l)),
                q = 
                  SimdShuffleOp(
                    x = 
                      SimdShuffleOp(
                        w = 
                          SimdShuffleOp(
                            q = SimdLoadLane(
                                  (g = b + -4) + h,
                                  SimdLoadLane(g + i, SimdLoadLane(t = g + j, LoadSplat(g)))),
                            v = SimdLoadLane(
                                  g + m,
                                  SimdLoadLane(g + n, SimdLoadLane(g + o, LoadSplat(u = g + c))))),
                        q = SimdShuffleOp(q, v)),
                    w = SimdShuffleOp(w, q))),
            ka = 
              (((v = SimdShuffleOp(l, q)) v128_xor (q = V128)) i8x16_add_sat_s
               (ia = 
                  ((ja = 
                      (s = 
                         SimdShuffleOp(
                           i32x4_extend_low_i16x8_s(
                             s = 
                               SimdShuffleOp(
                                 l = V128,
                                 ga = 
                                   ((ca = 
                                       l i8x16_eq
                                       (((((ha = 
                                              ((w = SimdShuffleOp(r = SimdShuffleOp(s, r), s = SimdShuffleOp(x, w))) i8x16_sub_sat_u
                                               (x = 
                                                  SimdShuffleOp(
                                                    da = 
                                                      SimdShuffleOp(
                                                        ba = 
                                                          SimdShuffleOp(
                                                            ca = 
                                                              SimdShuffleOp(
                                                                x = SimdLoadLane(
                                                                      a + h,
                                                                      SimdLoadLane(a + i, SimdLoadLane(z = a + j, LoadSplat(a)))),
                                                                ba = 
                                                                  SimdLoadLane(
                                                                    a + m,
                                                                    SimdLoadLane(a + n, SimdLoadLane(a + o, LoadSplat(aa = a + c))))),
                                                            x = SimdShuffleOp(x, ba)),
                                                        ca = SimdShuffleOp(ca, x)),
                                                    ga = 
                                                      SimdShuffleOp(
                                                        ea = 
                                                          SimdShuffleOp(
                                                            fa = 
                                                              SimdShuffleOp(
                                                                x = SimdLoadLane(
                                                                      b + h,
                                                                      SimdLoadLane(b + i, SimdLoadLane(h = b + j, LoadSplat(b)))),
                                                                ea = 
                                                                  SimdLoadLane(
                                                                    b + m,
                                                                    SimdLoadLane(b + n, SimdLoadLane(b + o, LoadSplat(i = b + c))))),
                                                            x = SimdShuffleOp(x, ea)),
                                                        fa = SimdShuffleOp(fa, x))))) v128_or
                                              (x i8x16_sub_sat_u w)) i8x16_add_sat_u
                                           ha) i8x16_add_sat_u
                                          (((((r = SimdShuffleOp(r, s)) i8x16_sub_sat_u (s = SimdShuffleOp(da, ga))) v128_or
                                             (s i8x16_sub_sat_u r)) i16x8_shr_u
                                            1) v128_and
                                           V128)) i8x16_sub_sat_u
                                         i8x16_splat(d)) v128_or
                                        (((((((da = (r i8x16_sub_sat_u w) v128_or (w i8x16_sub_sat_u r)) i8x16_max_u
                                              ((y i8x16_sub_sat_u v) v128_or (v i8x16_sub_sat_u y))) i8x16_max_u
                                             ((v i8x16_sub_sat_u r) v128_or (r i8x16_sub_sat_u v))) i8x16_max_u
                                            (ga = (s i8x16_sub_sat_u x) v128_or (x i8x16_sub_sat_u s))) i8x16_max_u
                                           (((ba = 
                                                SimdShuffleOp(v = SimdShuffleOp(ba, ca), ca = SimdShuffleOp(ea, fa))) i8x16_sub_sat_u
                                             (v = SimdShuffleOp(v, ca))) v128_or
                                            (v i8x16_sub_sat_u ba))) i8x16_max_u
                                          ((v i8x16_sub_sat_u s) v128_or (s i8x16_sub_sat_u v))) i8x16_sub_sat_u
                                         i8x16_splat(e)))) v128_and
                                    (w = 
                                       (w = (x = x v128_xor q) i8x16_sub_sat_s (ea = w v128_xor q)) i8x16_add_sat_s
                                       (w i8x16_add_sat_s
                                        (w i8x16_add_sat_s
                                         ((fa = r v128_xor q) i8x16_sub_sat_s (ha = s v128_xor q)))))) v128_and
                                   (da = l i8x16_eq ((da i8x16_max_u ga) i8x16_sub_sat_u i8x16_splat(f))))) i32x4_mul
                           (r = V128),
                           i32x4_extend_high_i16x8_s(s) i32x4_mul r)) i16x8_add
                      (ia = V128)) i16x8_shr_s
                   7) i8x16_narrow_i16x8_s
                  ((ga = 
                      (r = 
                         SimdShuffleOp(
                           i32x4_extend_low_i16x8_s(ga = SimdShuffleOp(l, ga)) i32x4_mul r,
                           i32x4_extend_high_i16x8_s(ga) i32x4_mul r)) i16x8_add
                      ia) i16x8_shr_s
                   7))) v128_xor
              q),
        ca = 
          SimdShuffleOp(
            fa = 
              (fa i8x16_add_sat_s
               (ma = ((ja = ja i16x8_add s) i16x8_shr_s 7) i8x16_narrow_i16x8_s
                     ((ga = ga i16x8_add r) i16x8_shr_s 7))) v128_xor
              q,
            s = 
              ((ea i8x16_add_sat_s
                ((SimdShuffleOp(
                    l,
                    ca = (w = (w v128_andnot da) v128_and ca) i8x16_add_sat_s V128) i16x8_shr_s
                  11) i8x16_narrow_i16x8_s
                 (SimdShuffleOp(l, ca) i16x8_shr_s 11))) i8x16_add_sat_s
               (r = ((ja i16x8_add s) i16x8_shr_s 7) i8x16_narrow_i16x8_s
                    ((ga i16x8_add r) i16x8_shr_s 7))) v128_xor
              q)));
  SimdStoreLane(p, da = SimdShuffleOp(l, da));
  SimdStoreLane(j = p + c, da = SimdShuffleOp(l, da));
  SimdStoreLane(j + c, SimdShuffleOp(l, da));
  SimdStoreLane(k, ca = SimdShuffleOp(la, ca));
  SimdStoreLane(j = k + c, ca = SimdShuffleOp(l, ca));
  SimdStoreLane(j = j + c, ca = SimdShuffleOp(l, ca));
  SimdStoreLane(j + c, SimdShuffleOp(l, ca));
  SimdStoreLane(
    g,
    ca = 
      SimdShuffleOp(y = SimdShuffleOp(y, ka), s = SimdShuffleOp(fa, s)));
  SimdStoreLane(u, ca = SimdShuffleOp(l, ca));
  SimdStoreLane(g = u + c, ca = SimdShuffleOp(l, ca));
  SimdStoreLane(g + c, SimdShuffleOp(l, ca));
  SimdStoreLane(t, s = SimdShuffleOp(y, s));
  SimdStoreLane(g = t + c, s = SimdShuffleOp(l, s));
  SimdStoreLane(g = g + c, s = SimdShuffleOp(l, s));
  SimdStoreLane(g + c, SimdShuffleOp(l, s));
  SimdStoreLane(
    a,
    x = 
      SimdShuffleOp(
        w = 
          SimdShuffleOp(
            r = 
              ((x i8x16_sub_sat_s
                ((SimdShuffleOp(l, s = w i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
                 (SimdShuffleOp(l, s) i16x8_shr_s 11))) i8x16_sub_sat_s
               r) v128_xor
              q,
            s = (ha i8x16_sub_sat_s ma) v128_xor q),
        v = 
          SimdShuffleOp(q = ((v v128_xor q) i8x16_sub_sat_s ia) v128_xor q, ba)));
  SimdStoreLane(aa, x = SimdShuffleOp(l, x));
  SimdStoreLane(a = aa + c, x = SimdShuffleOp(l, x));
  SimdStoreLane(a + c, SimdShuffleOp(l, x));
  SimdStoreLane(z, v = SimdShuffleOp(w, v));
  SimdStoreLane(a = z + c, v = SimdShuffleOp(l, v));
  SimdStoreLane(a = a + c, v = SimdShuffleOp(l, v));
  SimdStoreLane(a + c, SimdShuffleOp(l, v));
  SimdStoreLane(
    b,
    s = SimdShuffleOp(r = SimdShuffleOp(r, s), q = SimdShuffleOp(q, ba)));
  SimdStoreLane(i, s = SimdShuffleOp(l, s));
  SimdStoreLane(b = i + c, s = SimdShuffleOp(l, s));
  SimdStoreLane(b + c, SimdShuffleOp(l, s));
  SimdStoreLane(h, q = SimdShuffleOp(r, q));
  SimdStoreLane(b = h + c, q = SimdShuffleOp(l, q));
  SimdStoreLane(b = b + c, q = SimdShuffleOp(l, q));
  SimdStoreLane(b + c, SimdShuffleOp(l, q));
}

function VFilter16i_SSE2(a:simd_ptr@1, b:simd_ptr@1, c:simd_ptr@1, d:int, e:int) {
  var k:int;
  var m:int;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var f:int = b * 6;
  var g:int = b * 7;
  var h:int = b * 5;
  var i:int = b << 2;
  var j:simd = (a + b)[0]:simd@1;
  var l:simd = (a + (k = b * 3))[0]:simd@1;
  var n:simd = (a + (m = b << 1))[0]:simd@1;
  var o:simd = i8x16_splat(e);
  var p:simd = i8x16_splat(c);
  var q:simd = i8x16_splat(d);
  var r:simd = a[0];
  e = 4;
  loop L_a {
    (a + m)[0]:simd@1 =
      ((t = n v128_xor (s = V128)) i8x16_add_sat_s
       (s = 
          v128_bitselect(
            (((t = 
                 (SimdShuffleOp(
                    u = V128,
                    v = 
                      (j = 
                         v128_bitselect(
                           ((v128_bitselect(
                               u,
                               t i8x16_sub_sat_s (w = (v = (c = a + h)[0]) v128_xor s),
                               z = 
                                 u i8x16_eq
                                 (((x = (n i8x16_sub_sat_u l) v128_or (l i8x16_sub_sat_u n)) i8x16_max_u
                                   (y = ((t = (b = a + i)[0]) i8x16_sub_sat_u v) v128_or
                                        (v i8x16_sub_sat_u t))) i8x16_sub_sat_u
                                  o)) i8x16_add_sat_s
                             (ca = (aa = t v128_xor s) i8x16_sub_sat_s (ba = l v128_xor s))) i8x16_add_sat_s
                            ca) i8x16_add_sat_s
                           ca,
                           u,
                           u i8x16_eq
                           (((((l = (l i8x16_sub_sat_u t) v128_or (t i8x16_sub_sat_u l)) i8x16_add_sat_u
                               l) i8x16_add_sat_u
                              ((((n i8x16_sub_sat_u v) v128_or (v i8x16_sub_sat_u n)) i16x8_shr_u 1) v128_and
                               V128)) i8x16_sub_sat_u
                             p) v128_or
                            ((((((x i8x16_max_u ((r i8x16_sub_sat_u j) v128_or (j i8x16_sub_sat_u r))) i8x16_max_u
                                 ((j i8x16_sub_sat_u n) v128_or (n i8x16_sub_sat_u j))) i8x16_max_u
                                (((n = (a + f)[0]:simd@1) i8x16_sub_sat_u (l = (a + g)[0]:simd@1)) v128_or
                                 (l i8x16_sub_sat_u n))) i8x16_max_u
                               y) i8x16_max_u
                              ((v i8x16_sub_sat_u n) v128_or (n i8x16_sub_sat_u v))) i8x16_sub_sat_u
                             q)))) i8x16_add_sat_s
                      V128) i16x8_shr_s
                  11) i8x16_narrow_i16x8_s
                 (SimdShuffleOp(u, v) i16x8_shr_s 11)) v128_xor
              s) i8x16_avgr_u
             u) i8x16_add
            V128,
            u,
            z))) v128_xor
      (v = V128);
    (a + k)[0]:simd@1 =
      (ba i8x16_add_sat_s
       ((SimdShuffleOp(u, j = j i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
        (SimdShuffleOp(u, j) i16x8_shr_s 11))) v128_xor
      v;
    b[0] = (r = (aa i8x16_sub_sat_s t) v128_xor v);
    c[0] = (j = (w i8x16_sub_sat_s s) v128_xor v);
    a = b;
    l = l;
    n = n;
    e = e + -1;
    if (e > 1) continue L_a;
  }
}

function HFilter16i_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var f:int;
  var g:int;
  var h:int;
  var j:int;
  var k:int;
  var l:int;
  var m:simd;
  var p:int;
  var q:int;
  var r:simd;
  var s:simd;
  var t:simd;
  var fa:int;
  var ga:int;
  var ha:int;
  var ia:int;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:int;
  var na:int;
  var oa:int;
  var pa:int;
  var qa:int;
  var ra:int;
  var sa:int;
  var ta:int;
  var ua:simd;
  var va:simd;
  var wa:simd;
  var xa:simd;
  var ya:simd;
  var za:simd;
  var ab:simd;
  var bb:simd;
  var i:simd = 
    SimdLoadLane(
      a + (f = b * 6),
      SimdLoadLane(a + (g = b << 1),
                   SimdLoadLane(a + (h = b << 2), LoadSplat(a))));
  var n:simd = 
    SimdShuffleOp(
      i,
      m = SimdLoadLane(
            a + (j = b * 7),
            SimdLoadLane(a + (k = b * 3),
                         SimdLoadLane(a + (l = b * 5), LoadSplat(a + b)))));
  var o:simd = SimdShuffleOp(n, i = SimdShuffleOp(i, m));
  m = SimdShuffleOp(o, i = SimdShuffleOp(n, i));
  r = 
    SimdShuffleOp(
      m,
      s = 
        SimdShuffleOp(
          t = 
            SimdShuffleOp(
              s = 
                SimdShuffleOp(
                  n = 
                    SimdLoadLane((q = a + (p = b << 3)) + f,
                                 SimdLoadLane(q + g, SimdLoadLane(q + h, LoadSplat(q)))),
                  r = SimdLoadLane(
                        q + j,
                        SimdLoadLane(q + k, SimdLoadLane(q + l, LoadSplat(q + b))))),
              n = SimdShuffleOp(n, r)),
          n = SimdShuffleOp(s, n)));
  m = SimdShuffleOp(m, s);
  i = SimdShuffleOp(o, i);
  s = SimdShuffleOp(i, n = SimdShuffleOp(t, n));
  var u:simd = SimdShuffleOp(i, n);
  var v:int = b * 9;
  var w:int = b * 10;
  var x:int = b * 11;
  var y:int = b * 12;
  var z:int = b * 13;
  var aa:int = b * 14;
  var ba:int = b * 15;
  var ca:simd = i8x16_splat(e);
  var da:simd = i8x16_splat(c);
  var ea:simd = i8x16_splat(d);
  q = 4;
  loop L_a {
    let t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15 = 
      SimdStoreLane(
        a,
        ka = 
          SimdShuffleOp(
            o = 
              SimdShuffleOp(
                ja = 
                  ((t = m v128_xor (n = V128)) i8x16_add_sat_s
                   (t = 
                      v128_bitselect(
                        (((s = 
                             (SimdShuffleOp(
                                i = V128,
                                s = 
                                  (o = 
                                     v128_bitselect(
                                       ((v128_bitselect(
                                           i,
                                           t i8x16_sub_sat_s
                                           (xa = 
                                              (o = 
                                                 SimdShuffleOp(
                                                   ja = 
                                                     SimdShuffleOp(
                                                       la = 
                                                         SimdShuffleOp(
                                                           ka = 
                                                             SimdShuffleOp(
                                                               o = SimdLoadLane(
                                                                     (e = a + f) + 4,
                                                                     SimdLoadLane((c = a + g) + 4,
                                                                                  SimdLoadLane((d = a + h) + 4, LoadSplat(a)))),
                                                               ja = 
                                                                 SimdLoadLane(
                                                                   (fa = a + j) + 4,
                                                                   SimdLoadLane(
                                                                     (ga = a + k) + 4,
                                                                     SimdLoadLane((ha = a + l) + 4, LoadSplat((ia = a + b) + 4))))),
                                                           o = SimdShuffleOp(o, ja)),
                                                       ka = SimdShuffleOp(ka, o)),
                                                   wa = 
                                                     SimdShuffleOp(
                                                       ua = 
                                                         SimdShuffleOp(
                                                           va = 
                                                             SimdShuffleOp(
                                                               o = SimdLoadLane(
                                                                     (ma = a + aa) + 4,
                                                                     SimdLoadLane(
                                                                       (na = a + w) + 4,
                                                                       SimdLoadLane((oa = a + y) + 4, LoadSplat((pa = a + p) + 4)))),
                                                               ua = 
                                                                 SimdLoadLane(
                                                                   (qa = a + ba) + 4,
                                                                   SimdLoadLane(
                                                                     (ra = a + x) + 4,
                                                                     SimdLoadLane((sa = a + z) + 4, LoadSplat((ta = a + v) + 4))))),
                                                           o = SimdShuffleOp(o, ua)),
                                                       va = SimdShuffleOp(va, o)))) v128_xor
                                              n),
                                           za = 
                                             i i8x16_eq
                                             (((ya = (m i8x16_sub_sat_u r) v128_or (r i8x16_sub_sat_u m)) i8x16_max_u
                                               (wa = ((t = SimdShuffleOp(ja, wa)) i8x16_sub_sat_u o) v128_or
                                                     (o i8x16_sub_sat_u t))) i8x16_sub_sat_u
                                              ca)) i8x16_add_sat_s
                                         (ja = (ab = t v128_xor n) i8x16_sub_sat_s (bb = r v128_xor n))) i8x16_add_sat_s
                                        ja) i8x16_add_sat_s
                                       ja,
                                       i,
                                       i i8x16_eq
                                       (((((r = (r i8x16_sub_sat_u t) v128_or (t i8x16_sub_sat_u r)) i8x16_add_sat_u
                                           r) i8x16_add_sat_u
                                          ((((m i8x16_sub_sat_u o) v128_or (o i8x16_sub_sat_u m)) i16x8_shr_u 1) v128_and
                                           V128)) i8x16_sub_sat_u
                                         da) v128_or
                                        ((((((ya i8x16_max_u ((u i8x16_sub_sat_u s) v128_or (s i8x16_sub_sat_u u))) i8x16_max_u
                                             ((s i8x16_sub_sat_u m) v128_or (m i8x16_sub_sat_u s))) i8x16_max_u
                                            (((m = 
                                                 SimdShuffleOp(r = SimdShuffleOp(la, ka), s = SimdShuffleOp(ua, va))) i8x16_sub_sat_u
                                              (r = SimdShuffleOp(r, s))) v128_or
                                             (r i8x16_sub_sat_u m))) i8x16_max_u
                                           wa) i8x16_max_u
                                          ((o i8x16_sub_sat_u m) v128_or (m i8x16_sub_sat_u o))) i8x16_sub_sat_u
                                         ea)))) i8x16_add_sat_s
                                  V128) i16x8_shr_s
                              11) i8x16_narrow_i16x8_s
                             (SimdShuffleOp(i, s) i16x8_shr_s 11)) v128_xor
                          n) i8x16_avgr_u
                         i) i8x16_add
                        V128,
                        i,
                        za))) v128_xor
                  n,
                n = 
                  (bb i8x16_add_sat_s
                   ((SimdShuffleOp(i, o = o i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
                    (SimdShuffleOp(i, o) i16x8_shr_s 11))) v128_xor
                  n),
            t = SimdShuffleOp(u = (ab i8x16_sub_sat_s s) v128_xor (s = V128),
                              s = (xa i8x16_sub_sat_s t) v128_xor s))),
      SimdStoreLane(ia + 2, ka = SimdShuffleOp(i, ka)),
      SimdStoreLane(c + 2, ka = SimdShuffleOp(i, ka)),
      SimdStoreLane(ga + 2, SimdShuffleOp(i, ka)),
      SimdStoreLane(d + 2, o = SimdShuffleOp(o, t)),
      SimdStoreLane(ha + 2, o = SimdShuffleOp(i, o)),
      SimdStoreLane(e + 2, o = SimdShuffleOp(i, o)),
      SimdStoreLane(fa + 2, SimdShuffleOp(i, o)),
      SimdStoreLane(
        pa + 2,
        t = SimdShuffleOp(n = SimdShuffleOp(ja, n), o = SimdShuffleOp(u, s))),
      SimdStoreLane(ta + 2, t = SimdShuffleOp(i, t)),
      SimdStoreLane(na + 2, t = SimdShuffleOp(i, t)),
      SimdStoreLane(ra + 2, SimdShuffleOp(i, t)),
      SimdStoreLane(oa + 2, n = SimdShuffleOp(n, o)),
      SimdStoreLane(sa + 2, n = SimdShuffleOp(i, n)),
      SimdStoreLane(ma + 2, n = SimdShuffleOp(i, n)),
      SimdStoreLane(qa + 2, SimdShuffleOp(i, n));
    a = a + 4;
    r = r;
    m = m;
    if ((q = q + -1) > 1) continue L_a;
    t0;
    t1;
    t2;
    t3;
    t4;
    t5;
    t6;
    t7;
    t8;
    t9;
    t10;
    t11;
    t12;
    t13;
    t14;
    t15;
  }
}

function VFilter8i_SSE2(a:int, b:int, c:int, d:int, e:int, f:int) {
  var g:int;
  var i:int;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:int;
  var o:int;
  var p:simd;
  var q:simd;
  var r:int;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var h:int = a + (g = c << 2);
  SimdStoreLane(
    h - (i = c << 1),
    t = 
      ((l = (j = SimdShuffleOp(LoadZero(a + i), LoadZero(b + i))) v128_xor
            (k = V128)) i8x16_add_sat_s
       (k = 
          v128_bitselect(
            (((l = 
                 (SimdShuffleOp(
                    m = V128,
                    j = 
                      (p = 
                         v128_bitselect(
                           ((v128_bitselect(
                               m,
                               l i8x16_sub_sat_s
                               (q = 
                                  (p = SimdShuffleOp(LoadZero(n = h + c), LoadZero(o = (g = b + g) + c))) v128_xor
                                  k),
                               v = 
                                 m i8x16_eq
                                 (((s = 
                                      (j i8x16_sub_sat_u
                                       (l = SimdShuffleOp(LoadZero(a + (r = c * 3)), LoadZero(b + r)))) v128_or
                                      (l i8x16_sub_sat_u j)) i8x16_max_u
                                   (u = 
                                      (p i8x16_sub_sat_u (t = SimdShuffleOp(LoadZero(h), LoadZero(g)))) v128_or
                                      (t i8x16_sub_sat_u p))) i8x16_sub_sat_u
                                  i8x16_splat(f))) i8x16_add_sat_s
                             (y = (w = t v128_xor k) i8x16_sub_sat_s (x = l v128_xor k))) i8x16_add_sat_s
                            y) i8x16_add_sat_s
                           y,
                           m,
                           m i8x16_eq
                           (((((((s i8x16_max_u
                                  (((z = SimdShuffleOp(LoadZero(a), LoadZero(b))) i8x16_sub_sat_u
                                    (y = SimdShuffleOp(LoadZero(a + c), LoadZero(b + c)))) v128_or
                                   (y i8x16_sub_sat_u z))) i8x16_max_u
                                 ((y i8x16_sub_sat_u j) v128_or (j i8x16_sub_sat_u y))) i8x16_max_u
                                u) i8x16_max_u
                               (((s = SimdShuffleOp(LoadZero(h + r), LoadZero(g + r))) i8x16_sub_sat_u
                                 (y = SimdShuffleOp(LoadZero(h + i), LoadZero(g + i)))) v128_or
                                (y i8x16_sub_sat_u s))) i8x16_max_u
                              ((y i8x16_sub_sat_u p) v128_or (p i8x16_sub_sat_u y))) i8x16_sub_sat_u
                             i8x16_splat(e)) v128_or
                            ((((l = (l i8x16_sub_sat_u t) v128_or (t i8x16_sub_sat_u l)) i8x16_add_sat_u
                               l) i8x16_add_sat_u
                              ((((j i8x16_sub_sat_u p) v128_or (p i8x16_sub_sat_u j)) i16x8_shr_u 1) v128_and
                               V128)) i8x16_sub_sat_u
                             i8x16_splat(d))))) i8x16_add_sat_s
                      V128) i16x8_shr_s
                  11) i8x16_narrow_i16x8_s
                 (SimdShuffleOp(m, j) i16x8_shr_s 11)) v128_xor
              k) i8x16_avgr_u
             m) i8x16_add
            V128,
            m,
            v))) v128_xor
      (j = V128));
  SimdStoreLane(g - i, SimdShuffleOp(m, t));
  SimdStoreLane(
    h - c,
    p = 
      (x i8x16_add_sat_s
       ((SimdShuffleOp(m, p = p i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
        (SimdShuffleOp(m, p) i16x8_shr_s 11))) v128_xor
      j);
  SimdStoreLane(g - c, SimdShuffleOp(m, p));
  SimdStoreLane(h, p = (w i8x16_sub_sat_s l) v128_xor j);
  SimdStoreLane(g, SimdShuffleOp(m, p));
  SimdStoreLane(n, j = (q i8x16_sub_sat_s k) v128_xor j);
  SimdStoreLane(o, SimdShuffleOp(m, j));
}

function HFilter8i_SSE2(a:int, b:int, c:int, d:int, e:int, f:int) {
  var g:int;
  var h:int;
  var i:int;
  var j:simd;
  var k:int;
  var l:int;
  var m:int;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:int;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  SimdStoreLane(
    a,
    p = 
      SimdShuffleOp(
        v = 
          SimdShuffleOp(
            u = 
              ((v = 
                  (o = 
                     SimdShuffleOp(
                       r = 
                         SimdShuffleOp(
                           p = 
                             SimdShuffleOp(
                               o = 
                                 SimdShuffleOp(
                                   j = SimdLoadLane(
                                         a + (g = c * 6),
                                         SimdLoadLane(a + (h = c << 1),
                                                      SimdLoadLane(a + (i = c << 2), LoadSplat(a)))),
                                   n = SimdLoadLane(
                                         a + (k = c * 7),
                                         SimdLoadLane(a + (l = c * 3),
                                                      SimdLoadLane(a + (m = c * 5), LoadSplat(a + c))))),
                               j = SimdShuffleOp(j, n)),
                           q = SimdShuffleOp(o, j)),
                       u = 
                         SimdShuffleOp(
                           s = 
                             SimdShuffleOp(
                               o = 
                                 SimdShuffleOp(
                                   j = 
                                     SimdLoadLane(b + g,
                                                  SimdLoadLane(b + h, SimdLoadLane(b + i, LoadSplat(b)))),
                                   n = SimdLoadLane(
                                         b + k,
                                         SimdLoadLane(b + l, SimdLoadLane(b + m, LoadSplat(b + c))))),
                               j = SimdShuffleOp(j, n)),
                           t = SimdShuffleOp(o, j)))) v128_xor
                  (n = V128)) i8x16_add_sat_s
               (r = 
                  v128_bitselect(
                    (((x = 
                         (SimdShuffleOp(
                            j = V128,
                            x = 
                              (o = 
                                 v128_bitselect(
                                   ((v128_bitselect(
                                       j,
                                       v i8x16_sub_sat_s
                                       (ea = 
                                          (x = 
                                             SimdShuffleOp(
                                               aa = 
                                                 SimdShuffleOp(
                                                   y = 
                                                     SimdShuffleOp(
                                                       z = 
                                                         SimdShuffleOp(
                                                           x = 
                                                             SimdLoadLane((w = a + 4) + g,
                                                                          SimdLoadLane(w + h, SimdLoadLane(w + i, LoadSplat(a)))),
                                                           y = SimdLoadLane(
                                                                 w + k,
                                                                 SimdLoadLane(w + l, SimdLoadLane(w + m, LoadSplat(w + c))))),
                                                       x = SimdShuffleOp(x, y)),
                                                   z = SimdShuffleOp(z, x)),
                                               da = 
                                                 SimdShuffleOp(
                                                   ba = 
                                                     SimdShuffleOp(
                                                       ca = 
                                                         SimdShuffleOp(
                                                           x = 
                                                             SimdLoadLane((w = b + 4) + g,
                                                                          SimdLoadLane(w + h, SimdLoadLane(w + i, LoadSplat(b)))),
                                                           ba = SimdLoadLane(
                                                                  w + k,
                                                                  SimdLoadLane(w + l, SimdLoadLane(w + m, LoadSplat(w + c))))),
                                                       x = SimdShuffleOp(x, ba)),
                                                   ca = SimdShuffleOp(ca, x)))) v128_xor
                                          n),
                                       da = j i8x16_eq
                                            (((fa = (o i8x16_sub_sat_u (r = SimdShuffleOp(r, u))) v128_or
                                                    (r i8x16_sub_sat_u o)) i8x16_max_u
                                              (aa = (x i8x16_sub_sat_u (u = SimdShuffleOp(aa, da))) v128_or
                                                    (u i8x16_sub_sat_u x))) i8x16_sub_sat_u
                                             i8x16_splat(f))) i8x16_add_sat_s
                                     (v = (ga = u v128_xor n) i8x16_sub_sat_s (ha = r v128_xor n))) i8x16_add_sat_s
                                    v) i8x16_add_sat_s
                                   v,
                                   j,
                                   j i8x16_eq
                                   (((((r = (r i8x16_sub_sat_u u) v128_or (u i8x16_sub_sat_u r)) i8x16_add_sat_u
                                       r) i8x16_add_sat_u
                                      ((((o i8x16_sub_sat_u x) v128_or (x i8x16_sub_sat_u o)) i16x8_shr_u 1) v128_and
                                       V128)) i8x16_sub_sat_u
                                     i8x16_splat(d)) v128_or
                                    ((((((fa i8x16_max_u
                                          (((v = SimdShuffleOp(r = SimdShuffleOp(p, q), u = SimdShuffleOp(s, t))) i8x16_sub_sat_u
                                            (r = SimdShuffleOp(r, u))) v128_or
                                           (r i8x16_sub_sat_u v))) i8x16_max_u
                                         ((r i8x16_sub_sat_u o) v128_or (o i8x16_sub_sat_u r))) i8x16_max_u
                                        aa) i8x16_max_u
                                       (((u = SimdShuffleOp(o = SimdShuffleOp(y, z), r = SimdShuffleOp(ba, ca))) i8x16_sub_sat_u
                                         (o = SimdShuffleOp(o, r))) v128_or
                                        (o i8x16_sub_sat_u u))) i8x16_max_u
                                      ((o i8x16_sub_sat_u x) v128_or (x i8x16_sub_sat_u o))) i8x16_sub_sat_u
                                     i8x16_splat(e))))) i8x16_add_sat_s
                              V128) i16x8_shr_s
                          11) i8x16_narrow_i16x8_s
                         (SimdShuffleOp(j, x) i16x8_shr_s 11)) v128_xor
                      n) i8x16_avgr_u
                     j) i8x16_add
                    V128,
                    j,
                    da))) v128_xor
              n,
            o = 
              (ha i8x16_add_sat_s
               ((SimdShuffleOp(j, o = o i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
                (SimdShuffleOp(j, o) i16x8_shr_s 11))) v128_xor
              n),
        r = SimdShuffleOp(x = (ga i8x16_sub_sat_s x) v128_xor n,
                          n = (ea i8x16_sub_sat_s r) v128_xor n)));
  SimdStoreLane(w = (a = a + 2) + c, p = SimdShuffleOp(j, p));
  SimdStoreLane(w = w + c, p = SimdShuffleOp(j, p));
  SimdStoreLane(w + c, SimdShuffleOp(j, p));
  SimdStoreLane(a = a + i, r = SimdShuffleOp(v, r));
  SimdStoreLane(a = a + c, r = SimdShuffleOp(j, r));
  SimdStoreLane(a = a + c, r = SimdShuffleOp(j, r));
  SimdStoreLane(a + c, SimdShuffleOp(j, r));
  SimdStoreLane(
    b,
    x = SimdShuffleOp(o = SimdShuffleOp(u, o), n = SimdShuffleOp(x, n)));
  SimdStoreLane(a = (b = b + 2) + c, x = SimdShuffleOp(j, x));
  SimdStoreLane(a = a + c, x = SimdShuffleOp(j, x));
  SimdStoreLane(a + c, SimdShuffleOp(j, x));
  SimdStoreLane(b = b + i, n = SimdShuffleOp(o, n));
  SimdStoreLane(b = b + c, n = SimdShuffleOp(j, n));
  SimdStoreLane(b = b + c, n = SimdShuffleOp(j, n));
  SimdStoreLane(b + c, SimdShuffleOp(j, n));
}

function SimpleVFilter16_SSE2(a:simd_ptr@1, b:int, c:int) {
  var e:simd;
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var d:simd_ptr@1 = a - b;
  d[0] =
    ((g = (e = d[0]) v128_xor (f = V128)) i8x16_add_sat_s
     ((SimdShuffleOp(
         h = V128,
         e = 
           (f = 
              v128_bitselect(
                (g = (j = (i = a[0]) v128_xor f) i8x16_sub_sat_s g) i8x16_add_sat_s
                (g i8x16_add_sat_s
                 (g i8x16_add_sat_s
                  (((k = (a - (b << 1))[0]:simd@1) v128_xor f) i8x16_sub_sat_s
                   ((l = (a + b)[0]:simd@1) v128_xor f)))),
                h,
                h i8x16_eq
                ((((f = (e i8x16_sub_sat_u i) v128_or (i i8x16_sub_sat_u e)) i8x16_add_sat_u
                   f) i8x16_add_sat_u
                  ((((k i8x16_sub_sat_u l) v128_or (l i8x16_sub_sat_u k)) i16x8_shr_u 1) v128_and
                   V128)) i8x16_sub_sat_u
                 i8x16_splat(c)))) i8x16_add_sat_s
           V128) i16x8_shr_s
       11) i8x16_narrow_i16x8_s
      (SimdShuffleOp(h, e) i16x8_shr_s 11))) v128_xor
    (e = V128);
  a[0] =
    (j i8x16_sub_sat_s
     ((SimdShuffleOp(h, f = f i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
      (SimdShuffleOp(h, f) i16x8_shr_s 11))) v128_xor
    e;
}

function SimpleHFilter16_SSE2(a:int, b:int, c:int) {
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:simd;
  var i:int;
  var j:int;
  var k:int;
  var l:int;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  a = a + -2;
  SimdStoreLane(
    a,
    s = 
      SimdShuffleOp(
        r = 
          SimdShuffleOp(
            n = 
              SimdShuffleOp(
                h = 
                  SimdShuffleOp(
                    o = 
                      SimdShuffleOp(
                        n = 
                          SimdShuffleOp(
                            h = SimdLoadLane(
                                  a + (d = b * 6),
                                  SimdLoadLane(a + (e = b << 1),
                                               SimdLoadLane(g = a + (f = b << 2), LoadSplat(a)))),
                            m = 
                              SimdLoadLane(
                                a + (i = b * 7),
                                SimdLoadLane(a + (j = b * 3),
                                             SimdLoadLane(a + (k = b * 5), LoadSplat(l = a + b))))),
                        h = SimdShuffleOp(h, m)),
                    p = SimdShuffleOp(n, h)),
                m = 
                  SimdShuffleOp(
                    r = 
                      SimdShuffleOp(
                        q = 
                          SimdShuffleOp(
                            m = SimdLoadLane(
                                  (a = a + (b << 3)) + d,
                                  SimdLoadLane(a + e, SimdLoadLane(d = a + f, LoadSplat(a)))),
                            n = SimdLoadLane(
                                  a + i,
                                  SimdLoadLane(a + j, SimdLoadLane(a + k, LoadSplat(e = a + b))))),
                        m = SimdShuffleOp(m, n)),
                    s = SimdShuffleOp(q, m))),
            p = 
              ((t = (q = SimdShuffleOp(h, m)) v128_xor (m = V128)) i8x16_add_sat_s
               ((SimdShuffleOp(
                   h = V128,
                   p = 
                     (q = 
                        v128_bitselect(
                          (r = 
                             (u = 
                                (p = SimdShuffleOp(o = SimdShuffleOp(o, p), s = SimdShuffleOp(r, s))) v128_xor
                                m) i8x16_sub_sat_s
                             t) i8x16_add_sat_s
                          (r i8x16_add_sat_s
                           (r i8x16_add_sat_s
                            ((n v128_xor m) i8x16_sub_sat_s ((o = SimdShuffleOp(o, s)) v128_xor m)))),
                          h,
                          h i8x16_eq
                          ((((q = (q i8x16_sub_sat_u p) v128_or (p i8x16_sub_sat_u q)) i8x16_add_sat_u
                             q) i8x16_add_sat_u
                            ((((n i8x16_sub_sat_u o) v128_or (o i8x16_sub_sat_u n)) i16x8_shr_u 1) v128_and
                             V128)) i8x16_sub_sat_u
                           i8x16_splat(c)))) i8x16_add_sat_s
                     V128) i16x8_shr_s
                 11) i8x16_narrow_i16x8_s
                (SimdShuffleOp(h, p) i16x8_shr_s 11))) v128_xor
              m),
        q = 
          SimdShuffleOp(
            m = 
              (u i8x16_sub_sat_s
               ((SimdShuffleOp(h, q = q i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
                (SimdShuffleOp(h, q) i16x8_shr_s 11))) v128_xor
              m,
            o)));
  SimdStoreLane(l, s = SimdShuffleOp(h, s));
  SimdStoreLane(l = l + b, s = SimdShuffleOp(h, s));
  SimdStoreLane(l + b, SimdShuffleOp(h, s));
  SimdStoreLane(g, q = SimdShuffleOp(r, q));
  SimdStoreLane(g = g + b, q = SimdShuffleOp(h, q));
  SimdStoreLane(g = g + b, q = SimdShuffleOp(h, q));
  SimdStoreLane(g + b, SimdShuffleOp(h, q));
  SimdStoreLane(
    a,
    o = SimdShuffleOp(n = SimdShuffleOp(n, p), m = SimdShuffleOp(m, o)));
  SimdStoreLane(e, o = SimdShuffleOp(h, o));
  SimdStoreLane(a = e + b, o = SimdShuffleOp(h, o));
  SimdStoreLane(a + b, SimdShuffleOp(h, o));
  SimdStoreLane(d, m = SimdShuffleOp(n, m));
  SimdStoreLane(a = d + b, m = SimdShuffleOp(h, m));
  SimdStoreLane(a = a + b, m = SimdShuffleOp(h, m));
  SimdStoreLane(a + b, SimdShuffleOp(h, m));
}

function SimpleVFilter16i_SSE2(a:simd_ptr@1, b:int, c:simd_ptr@1) {
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var d:int = b << 1;
  var e:int = b * 3;
  var f:int = b * 5;
  var g:int = b << 2;
  var h:simd = i8x16_splat(c);
  b = 4;
  loop L_a {
    c = a + d;
    var i:simd_ptr@1 = a + f;
    var j:simd_ptr@1 = a + e;
    j[0] =
      ((m = (k = j[0]) v128_xor (l = V128)) i8x16_add_sat_s
       ((SimdShuffleOp(
           n = V128,
           k = 
             (l = 
                v128_bitselect(
                  (m = (p = (o = (a = a + g)[0]) v128_xor l) i8x16_sub_sat_s m) i8x16_add_sat_s
                  (m i8x16_add_sat_s
                   (m i8x16_add_sat_s
                    (((q = c[0]) v128_xor l) i8x16_sub_sat_s ((r = i[0]) v128_xor l)))),
                  n,
                  n i8x16_eq
                  ((((l = (k i8x16_sub_sat_u o) v128_or (o i8x16_sub_sat_u k)) i8x16_add_sat_u
                     l) i8x16_add_sat_u
                    ((((q i8x16_sub_sat_u r) v128_or (r i8x16_sub_sat_u q)) i16x8_shr_u 1) v128_and
                     V128)) i8x16_sub_sat_u
                   h))) i8x16_add_sat_s
             V128) i16x8_shr_s
         11) i8x16_narrow_i16x8_s
        (SimdShuffleOp(n, k) i16x8_shr_s 11))) v128_xor
      (k = V128);
    a[0] =
      (p i8x16_sub_sat_s
       ((SimdShuffleOp(n, l = l i8x16_add_sat_s V128) i16x8_shr_s 11) i8x16_narrow_i16x8_s
        (SimdShuffleOp(n, l) i16x8_shr_s 11))) v128_xor
      k;
    b = b + -1;
    if (b > 1) continue L_a;
  }
}

function SimpleHFilter16i_SSE2(a:int, b:int, c:int) {
  SimpleHFilter16_SSE2(a + 4, b, c);
  SimpleHFilter16_SSE2(a + 8, b, c);
  SimpleHFilter16_SSE2(a + 12, b, c);
}

function VL4_SSE2(a:byte_ptr) {
  var b:simd;
  var c:simd;
  var d:simd;
  var e:simd;
  var f:simd;
  var g:simd;
  var h:int;
  let t0, t1, t2, t3 = 
    SimdStoreLane(
      a,
      SimdShuffleOp(
        b = V128,
        e = (c = LoadZero(a + -32)) i8x16_avgr_u (d = SimdShuffleOp(b, c)))),
    SimdStoreLane(
      a,
      SimdShuffleOp(
        b,
        c = 
          (e i8x16_avgr_u (g = (f = SimdShuffleOp(b, c)) i8x16_avgr_u d)) i8x16_sub_sat_u
          (((g v128_xor e) v128_and ((d v128_xor c) v128_or (d v128_xor f))) v128_and
           V128))),
    SimdStoreLane(a, e),
    SimdStoreLane(a, c);
  a[67] = (h = SimdLaneOp(SimdShuffleOp(b, c)));
  a[99] = h >> 8;
  t0;
  t1;
  t2;
  t3;
}

function LD4_SSE2(a:int) {
  var b:long;
  var c:simd;
  var d:simd;
  var e:simd;
  SimdStoreLane(
    a,
    c = 
      (((c = SimdLaneOp(V128, b = (a + -32)[0]:long)) i8x16_avgr_u
        (e = SimdLaneOp(SimdShuffleOp(d = V128, c), i32_wrap_i64(b >> 56L)))) i8x16_sub_sat_u
       ((e v128_xor c) v128_and V128)) i8x16_avgr_u
      SimdShuffleOp(d, c));
  SimdStoreLane(a, SimdShuffleOp(d, c));
  SimdStoreLane(a, SimdShuffleOp(d, c));
  SimdStoreLane(a, SimdShuffleOp(d, c));
}

function VR4_SSE2(a:int) {
  var b:simd;
  var c:ubyte_ptr;
  var d:simd;
  var e:simd;
  var f:simd;
  var g:int;
  var h:simd;
  var i:int;
  let t0, t1, t2 = 
    SimdStoreLane(
      a,
      SimdShuffleOp(
        b = V128,
        f = 
          (d = LoadZero(c = a + -33)) i8x16_avgr_u (e = SimdShuffleOp(b, d)))),
    SimdStoreLane(
      a,
      SimdShuffleOp(
        b,
        d = 
          d i8x16_avgr_u
          (((h = SimdLaneOp(SimdShuffleOp(b, d),
                            (g = c[0]) << 8 | (c = (a + -1)[0]:ubyte))) i8x16_avgr_u
            e) i8x16_sub_sat_u
           ((e v128_xor h) v128_and V128)))),
    SimdStoreLane(a, f);
  a[64]:byte = g + (i = a[31]:ubyte) + (c << 1) + 2 >> 2;
  let t3 = SimdStoreLane(a, d);
  a[96]:byte = c + a[63]:ubyte + (i << 1) + 2 >> 2;
  t0;
  t1;
  t2;
  t3;
}

function RD4_SSE2(a:ubyte_ptr) {
  var b:simd;
  var c:simd;
  var d:simd;
  SimdStoreLane(
    a,
    c = 
      (((d = 
           SimdShuffleOp(
             b = V128,
             c = SimdShuffleOp(b, LoadZero(a + -33)) v128_or
                 SimdLaneOp(
                   V128,
                   ((a[31] << 16 | (a + -1)[0]:ubyte << 24) | a[95]) | a[63] << 8))) i8x16_avgr_u
        c) i8x16_sub_sat_u
       ((d v128_xor c) v128_and V128)) i8x16_avgr_u
      SimdShuffleOp(b, c));
  SimdStoreLane(a, SimdShuffleOp(b, c));
  SimdStoreLane(a, SimdShuffleOp(b, c));
  SimdStoreLane(a, SimdShuffleOp(b, c));
}

function VE4_SSE2(a:int) {
  var b:simd;
  var c:simd;
  var d:simd;
  SimdStoreLane(
    a,
    b = 
      (((b = LoadZero(a + -33)) i8x16_avgr_u (d = SimdShuffleOp(c = V128, b))) i8x16_sub_sat_u
       ((d v128_xor b) v128_and V128)) i8x16_avgr_u
      SimdShuffleOp(c, b));
  SimdStoreLane(a, b);
  SimdStoreLane(a, b);
  SimdStoreLane(a, b);
}

function TM4_SSE2(a:ubyte_ptr) {
  var b:int;
  var c:simd;
  var d:simd;
  SimdStoreLane(
    a,
    (i16x8_splat((a + -1)[0]:ubyte - (b = (a + -33)[0]:ubyte)) i16x8_add
     (c = SimdShuffleOp(LoadZero(a + -32), V128))) i8x16_narrow_i16x8_u
    (d = V128));
  SimdStoreLane(
    a,
    (i16x8_splat(a[31] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
  SimdStoreLane(
    a,
    (i16x8_splat(a[63] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
  SimdStoreLane(
    a,
    (i16x8_splat(a[95] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
}

function DC16NoTopLeft_SSE2(a:simd_ptr@1) {
  var b:simd;
  a[480] = (b = V128);
  a[448] = b;
  a[416] = b;
  a[384] = b;
  a[352] = b;
  a[320] = b;
  a[288] = b;
  a[256] = b;
  a[224] = b;
  a[192] = b;
  a[160] = b;
  a[128] = b;
  a[96] = b;
  a[64] = b;
  a[32] = b;
  a[0] = b;
}

function DC16NoLeft_SSE2(a:simd_ptr@1) {
  var i:simd;
  var b:{ a:simd, b:simd } = stack_pointer - 32;
  var c:simd = (a + -32)[0]:simd@1;
  var d:int = 0;
  var e:int = 1;
  loop L_a {
    var f:int = d << 3;
    var g:int = 0;
    var h:int = 0;
    loop L_b {
      b.b = c;
      h = h + (b + 16 | (f + g & 15))[0]:ubyte;
      g = g + 1;
      if (g != 8) continue L_b;
    }
    b.a = i;
    (b | (d & 1) << 3)[0]:long = i64_extend_i32_u(h) & 65535L;
    g = e & 1;
    e = 0;
    i = b.a;
    d = 1;
    if (g) continue L_a;
  }
  a[480] =
    (c = i8x16_splat(SimdLaneOp(SimdShuffleOp(i, i) i16x8_add i) + 8 >> 4));
  a[448] = c;
  a[416] = c;
  a[384] = c;
  a[352] = c;
  a[320] = c;
  a[288] = c;
  a[256] = c;
  a[224] = c;
  a[192] = c;
  a[160] = c;
  a[128] = c;
  a[96] = c;
  a[64] = c;
  a[32] = c;
  a[0] = c;
}

function DC16NoTop_SSE2(a:int) {
  var b:simd;
  a[480]:simd@1 =
    (b = i8x16_splat(
           (a + -1)[0]:ubyte + a[31]:ubyte + a[63]:ubyte + a[95]:ubyte +
           a[127]:ubyte +
           a[159]:ubyte +
           a[191]:ubyte +
           a[223]:ubyte +
           a[255]:ubyte +
           a[287]:ubyte +
           a[319]:ubyte +
           a[351]:ubyte +
           a[383]:ubyte +
           a[415]:ubyte +
           a[447]:ubyte +
           a[479]:ubyte +
           8 >>
           4));
  a[448]:simd@1 = b;
  a[416]:simd@1 = b;
  a[384]:simd@1 = b;
  a[352]:simd@1 = b;
  a[320]:simd@1 = b;
  a[288]:simd@1 = b;
  a[256]:simd@1 = b;
  a[224]:simd@1 = b;
  a[192]:simd@1 = b;
  a[160]:simd@1 = b;
  a[128]:simd@1 = b;
  a[96]:simd@1 = b;
  a[64]:simd@1 = b;
  a[32]:simd@1 = b;
  a[0]:simd@1 = b;
}

function HE16_SSE2(a:int) {
  a = a + -1;
  var b:int = 17;
  loop L_a {
    (a + 1)[0]:simd@1 = LoadSplat(a);
    a = a + 32;
    b = b + -1;
    if (b > 1) continue L_a;
  }
}

function VE16_SSE2(a:simd_ptr@1) {
  var b:simd;
  a[480] = (b = (a + -32)[0]:simd@1);
  a[448] = b;
  a[416] = b;
  a[384] = b;
  a[352] = b;
  a[320] = b;
  a[288] = b;
  a[256] = b;
  a[224] = b;
  a[192] = b;
  a[160] = b;
  a[128] = b;
  a[96] = b;
  a[64] = b;
  a[32] = b;
  a[0] = b;
}

function TM16_SSE2(a:int) {
  var d:simd;
  var b:ubyte_ptr = a + -33;
  var c:simd = (a + -32)[0]:simd@1;
  var e:simd = SimdShuffleOp(c, d = V128);
  d = SimdShuffleOp(c, d);
  var f:int = 0;
  loop L_a {
    var g:simd_ptr@1 = a + f;
    g[0] =
      ((c = i16x8_splat((g + -1)[0]:ubyte - b[0])) i16x8_add d) i8x16_narrow_i16x8_u
      (c i16x8_add e);
    f = f + 32;
    if (f != 512) continue L_a;
  }
}

function DC16_SSE2(a:int) {
  var i:simd;
  var b:{ a:simd, b:simd } = stack_pointer - 32;
  var c:simd = (a + -32)[0]:simd@1;
  var d:int = 0;
  var e:int = 1;
  loop L_a {
    var f:int = d << 3;
    var g:int = 0;
    var h:int = 0;
    loop L_b {
      b.b = c;
      h = h + (b + 16 | (f + g & 15))[0]:ubyte;
      g = g + 1;
      if (g != 8) continue L_b;
    }
    b.a = i;
    (b | (d & 1) << 3)[0]:long = i64_extend_i32_u(h) & 65535L;
    g = e & 1;
    e = 0;
    i = b.a;
    d = 1;
    if (g) continue L_a;
  }
  a[480]:simd@1 =
    (c = i8x16_splat(
           SimdLaneOp(SimdShuffleOp(i, i) i16x8_add i) +
           (a + -1)[0]:ubyte + a[31]:ubyte + a[63]:ubyte + a[95]:ubyte +
           a[127]:ubyte +
           a[159]:ubyte +
           a[191]:ubyte +
           a[223]:ubyte +
           a[255]:ubyte +
           a[287]:ubyte +
           a[319]:ubyte +
           a[351]:ubyte +
           a[383]:ubyte +
           a[415]:ubyte +
           a[447]:ubyte +
           a[479]:ubyte +
           16 >>
           5));
  a[448]:simd@1 = c;
  a[416]:simd@1 = c;
  a[384]:simd@1 = c;
  a[352]:simd@1 = c;
  a[320]:simd@1 = c;
  a[288]:simd@1 = c;
  a[256]:simd@1 = c;
  a[224]:simd@1 = c;
  a[192]:simd@1 = c;
  a[160]:simd@1 = c;
  a[128]:simd@1 = c;
  a[96]:simd@1 = c;
  a[64]:simd@1 = c;
  a[32]:simd@1 = c;
  a[0]:simd@1 = c;
}

function DC8uv_SSE2(a:ubyte_ptr) {
  var i:simd;
  var b:{ a:simd, b:simd } = stack_pointer - 32;
  var c:simd = LoadZero(a + -32);
  var d:int = 0;
  var e:int = 1;
  loop L_a {
    var f:int = d << 3;
    var g:int = 0;
    var h:int = 0;
    loop L_b {
      b.b = c;
      h = h + (b + 16 | (f + g & 15))[0]:ubyte;
      g = g + 1;
      if (g != 8) continue L_b;
    }
    b.a = i;
    (b | (d & 1) << 3)[0]:long = i64_extend_i32_u(h) & 65535L;
    g = e & 1;
    e = 0;
    i = b.a;
    d = 1;
    if (g) continue L_a;
  }
  SimdStoreLane(
    a,
    c = 
      i8x16_splat(
        SimdLaneOp(i) +
        (a + -1)[0]:ubyte + a[31] + a[63] + a[95] + a[127] + a[159] + a[191] +
        a[223] +
        8 >>
        4));
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
}

function TM8uv_SSE2(a:ubyte_ptr) {
  var b:int;
  var c:simd;
  var d:simd;
  SimdStoreLane(
    a,
    (i16x8_splat((a + -1)[0]:ubyte - (b = (a + -33)[0]:ubyte)) i16x8_add
     (c = SimdShuffleOp(LoadZero(a + -32), V128))) i8x16_narrow_i16x8_u
    (d = V128));
  SimdStoreLane(
    a,
    (i16x8_splat(a[31] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
  SimdStoreLane(
    a,
    (i16x8_splat(a[63] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
  SimdStoreLane(
    a,
    (i16x8_splat(a[95] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
  SimdStoreLane(
    a,
    (i16x8_splat(a[127] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
  SimdStoreLane(
    a,
    (i16x8_splat(a[159] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
  SimdStoreLane(
    a,
    (i16x8_splat(a[191] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
  SimdStoreLane(
    a,
    (i16x8_splat(a[223] - b) i16x8_add c) i8x16_narrow_i16x8_u d);
}

function VE8uv_SSE2(a:long_ptr) {
  var b:long;
  a[28] = (b = (a + -32)[0]:long);
  a[24] = b;
  a[20] = b;
  a[16] = b;
  a[12] = b;
  a[8] = b;
  a[4] = b;
  a[0] = b;
}

function DC8uvNoTop_SSE2(a:ubyte_ptr) {
  var b:simd;
  SimdStoreLane(
    a,
    b = 
      i8x16_splat(
        (a + -1)[0]:ubyte + a[31] + a[63] + a[95] + a[127] + a[159] + a[191] +
        a[223] +
        4 >>
        3));
  SimdStoreLane(a, b);
  SimdStoreLane(a, b);
  SimdStoreLane(a, b);
  SimdStoreLane(a, b);
  SimdStoreLane(a, b);
  SimdStoreLane(a, b);
  SimdStoreLane(a, b);
}

function DC8uvNoLeft_SSE2(a:int) {
  var i:simd;
  var b:{ a:simd, b:simd } = stack_pointer - 32;
  var c:simd = LoadZero(a + -32);
  var d:int = 0;
  var e:int = 1;
  loop L_a {
    var f:int = d << 3;
    var g:int = 0;
    var h:int = 0;
    loop L_b {
      b.b = c;
      h = h + (b + 16 | (f + g & 15))[0]:ubyte;
      g = g + 1;
      if (g != 8) continue L_b;
    }
    b.a = i;
    (b | (d & 1) << 3)[0]:long = i64_extend_i32_u(h) & 65535L;
    g = e & 1;
    e = 0;
    i = b.a;
    d = 1;
    if (g) continue L_a;
  }
  SimdStoreLane(a, c = i8x16_splat(SimdLaneOp(i) + 4 >> 3));
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
  SimdStoreLane(a, c);
}

function DC8uvNoTopLeft_SSE2(a:long_ptr) {
  a[28] = -9187201950435737472L;
  a[24] = -9187201950435737472L;
  a[20] = -9187201950435737472L;
  a[16] = -9187201950435737472L;
  a[12] = -9187201950435737472L;
  a[8] = -9187201950435737472L;
  a[4] = -9187201950435737472L;
  a[0] = -9187201950435737472L;
}

function VP8FiltersInitSSE2() {
  1059936[3]:int = 193;
  1059936[2]:int = 194;
  1059936[1]:int = 195;
  1059920[3]:int = 196;
  1059920[2]:int = 197;
  1059920[1]:int = 198;
}

function GradientUnfilter_SSE2(a:int, b:int, c:int, d:int) {
  var i:simd;
  var j:int;
  var g:ubyte_ptr;
  var f:int;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var u:simd;
  var v:simd;
  var h:simd;
  var w:simd;
  var k:int;
  var e:ubyte_ptr = b[0]:ubyte;
  if (a) goto B_b;
  c[0]:byte = e;
  if (d < 2) goto B_a;
  f = 1;
  if (d < 9) goto B_c;
  a = b + 1;
  g = c + 1;
  h = SimdLaneOp(V128, e);
  f = 0;
  loop L_d {
    let t0 = 
      SimdStoreLane(
        g + f,
        i = 
          SimdShuffleOp(
            i = V128,
            i = 
              SimdShuffleOp(
                i,
                h = SimdShuffleOp(i, h = LoadZero(a + f) i8x16_add h) i8x16_add h) i8x16_add
              h) i8x16_add
          i);
    h = i i64x2_shr_u 56;
    e = f + 17;
    f = j = f + 8;
    if (e <= d) continue L_d;
    t0;
  }
  f = j + 1;
  label B_c:
  if (d <= f) goto B_a;
  g = (f ^ -1) + d;
  e = (f + c + -1)[0]:ubyte;
  a = d - f & 3;
  if (eqz(a)) goto B_e;
  loop L_f {
    (c + f)[0]:byte = (e = e + (b + f)[0]:ubyte);
    f = f + 1;
    a = a + -1;
    if (a) continue L_f;
  }
  label B_e:
  if (g < 3) goto B_a;
  loop L_g {
    a = c + f;
    a[0]:byte = (e = e + (g = b + f)[0]);
    (a + 1)[0]:byte = (e = e + (g + 1)[0]:ubyte);
    (a + 2)[0]:byte = (e = e + (g + 2)[0]:ubyte);
    (a + 3)[0]:byte = (e = e + (g + 3)[0]:ubyte);
    b = b + 4;
    c = c + 4;
    if (f != (d = d + -4)) continue L_g;
    goto B_a;
  }
  label B_b:
  c[0]:byte = (f = a[0]:ubyte + e);
  if (d < 2) goto B_a;
  k = d + -1;
  g = k & -8;
  if (g) goto B_i;
  f = 0;
  goto B_h;
  label B_i:
  j = c + 1;
  var l:int = b + 1;
  var m:simd = SimdLaneOp(V128, f & 255);
  i = V128;
  var t:simd = 
    SimdShuffleOp(
      i,
      s = 
        SimdShuffleOp(
          i,
          r = 
            SimdShuffleOp(
              i,
              q = 
                SimdShuffleOp(
                  i,
                  p = 
                    SimdShuffleOp(i, o = SimdShuffleOp(i, n = SimdShuffleOp(i, V128)))))));
  f = 0;
  loop L_j {
    let t1 = 
      SimdStoreLane(
        j + f,
        (v = ((((h = SimdShuffleOp(LoadZero((e = a + f) + 1), i) i16x8_sub
                     SimdShuffleOp(LoadZero(e), i)) i16x8_add
                m) i8x16_narrow_i16x8_u
               (m = V128)) i8x16_add
              (u = LoadZero(l + f))) v128_and
             V128) v128_or
        (((((((w = 
                 (((h i16x8_add
                    SimdShuffleOp(
                      SimdShuffleOp(
                        i,
                        v = 
                          (((h i16x8_add SimdShuffleOp(SimdShuffleOp(i, v), i)) i8x16_narrow_i16x8_u
                            m) i8x16_add
                           u) v128_and
                          n),
                      i)) i8x16_narrow_i16x8_u
                   m) i8x16_add
                  u) v128_and
                 o) v128_or
              v) v128_or
             (v = 
                (((h i16x8_add SimdShuffleOp(SimdShuffleOp(i, w), i)) i8x16_narrow_i16x8_u
                  m) i8x16_add
                 u) v128_and
                p)) v128_or
            (v = 
               (((h i16x8_add SimdShuffleOp(SimdShuffleOp(i, v), i)) i8x16_narrow_i16x8_u
                 m) i8x16_add
                u) v128_and
               q)) v128_or
           (v = 
              (((h i16x8_add SimdShuffleOp(SimdShuffleOp(i, v), i)) i8x16_narrow_i16x8_u
                m) i8x16_add
               u) v128_and
              r)) v128_or
          (v = 
             (((h i16x8_add SimdShuffleOp(SimdShuffleOp(i, v), i)) i8x16_narrow_i16x8_u
               m) i8x16_add
              u) v128_and
             s)) v128_or
         (h = 
            (((h i16x8_add SimdShuffleOp(SimdShuffleOp(i, v), i)) i8x16_narrow_i16x8_u
              m) i8x16_add
             u) v128_and
            t)));
    m = SimdShuffleOp(i, h);
    if ((f = f + 8) < g) continue L_j;
    t1;
  }
  label B_h:
  if (f >= k) goto B_a;
  e = a + f;
  a = b + (g = f + 1);
  b = c + g;
  d = (f ^ -1) + d;
  f = (c + f)[0]:ubyte;
  loop L_k {
    b[0]:byte =
      (f = 
         a[0]:ubyte +
         select_if(
           f = select_if(f = (c = e + 1)[0]:ubyte + (f & 255) - e[0], 0, f > 0),
           255,
           f < 255));
    a = a + 1;
    b = b + 1;
    e = c;
    d = d + -1;
    if (d) continue L_k;
  }
  label B_a:
}

function VerticalUnfilter_SSE2(a:int, b:ubyte_ptr, c:byte_ptr, d:int) {
  var i:simd;
  var j:int;
  var f:int;
  var g:int;
  var e:int;
  var h:simd;
  var m:int;
  var k:int;
  if (a) goto B_b;
  c[0] = (a = b[0]);
  if (d < 2) goto B_a;
  e = 1;
  if (d < 9) goto B_c;
  f = b + 1;
  g = c + 1;
  h = SimdLaneOp(V128, a);
  e = 0;
  loop L_d {
    let t0 = 
      SimdStoreLane(
        g + e,
        i = 
          SimdShuffleOp(
            i = V128,
            i = 
              SimdShuffleOp(
                i,
                h = SimdShuffleOp(i, h = LoadZero(f + e) i8x16_add h) i8x16_add h) i8x16_add
              h) i8x16_add
          i);
    h = i i64x2_shr_u 56;
    a = e + 17;
    e = j = e + 8;
    if (a <= d) continue L_d;
    t0;
  }
  e = j + 1;
  label B_c:
  if (d <= e) goto B_a;
  g = (e ^ -1) + d;
  a = (e + c + -1)[0]:ubyte;
  f = d - e & 3;
  if (eqz(f)) goto B_e;
  loop L_f {
    (c + e)[0]:byte = (a = a + (b + e)[0]:ubyte);
    e = e + 1;
    f = f + -1;
    if (f) continue L_f;
  }
  label B_e:
  if (g < 3) goto B_a;
  loop L_g {
    f = c + e;
    f[0]:byte = (a = a + (g = b + e)[0]:ubyte);
    (f + 1)[0]:byte = (a = a + (g + 1)[0]:ubyte);
    (f + 2)[0]:byte = (a = a + (g + 2)[0]:ubyte);
    (f + 3)[0]:byte = (a = a + (g + 3)[0]:ubyte);
    b = b + 4;
    c = c + 4;
    if (e != (d = d + -4)) continue L_g;
    goto B_a;
  }
  label B_b:
  e = 0;
  k = d & -32;
  if (k < 1) goto B_h;
  loop L_i {
    f = a + e;
    i = (f + 16)[0]:simd@1;
    g = b + e;
    h = (g + 16)[0]:simd@1;
    j = c + e;
    j[0]:simd@1 = f[0]:simd@1 i8x16_add g[0]:simd@1;
    (j + 16)[0]:simd@1 = i i8x16_add h;
    e = e + 32;
    if (e < k) continue L_i;
  }
  label B_h:
  if (d <= e) goto B_a;
  var l:int = d - e;
  if (l < 16) goto B_j;
  f = e + c;
  if (f - (g = e + b) < 16) goto B_j;
  if (f - (j = e + a) < 16) goto B_j;
  e = e + (m = l & -16);
  k = m;
  loop L_k {
    f[0]:simd@1 = j[0]:simd@1 i8x16_add g[0]:simd@1;
    f = f + 16;
    j = j + 16;
    g = g + 16;
    k = k + -16;
    if (k) continue L_k;
  }
  if (l == m) goto B_a;
  label B_j:
  f = e ^ -1;
  if (eqz(d - e & 1)) goto B_l;
  (c + e)[0]:byte = (a + e)[0]:ubyte + (b + e)[0]:ubyte;
  e = e + 1;
  label B_l:
  if (f == 0 - d) goto B_a;
  loop L_m {
    f = c + e;
    f[0]:byte = (g = a + e)[0]:ubyte + (j = b + e)[0]:ubyte;
    (f + 1)[0]:byte = (g + 1)[0]:ubyte + (j + 1)[0]:ubyte;
    b = b + 2;
    a = a + 2;
    c = c + 2;
    if (e != (d = d + -2)) continue L_m;
  }
  label B_a:
}

function HorizontalUnfilter_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:byte_ptr, d:int) {
  var i:simd;
  var j:int;
  var f:byte_ptr;
  var g:ubyte_ptr;
  var e:int = b[0];
  if (a) goto B_b;
  a = 0;
  goto B_a;
  label B_b:
  a = a[0];
  label B_a:
  c[0] = (e = a + e);
  if (d < 2) goto B_c;
  a = 1;
  if (d < 9) goto B_d;
  f = c + 1;
  g = b + 1;
  var h:simd = SimdLaneOp(V128, e & 255);
  a = 0;
  loop L_e {
    let t0 = 
      SimdStoreLane(
        f + a,
        i = 
          SimdShuffleOp(
            i = V128,
            i = 
              SimdShuffleOp(
                i,
                h = SimdShuffleOp(i, h = LoadZero(g + a) i8x16_add h) i8x16_add h) i8x16_add
              h) i8x16_add
          i);
    h = i i64x2_shr_u 56;
    e = a + 17;
    a = j = a + 8;
    if (e <= d) continue L_e;
    t0;
  }
  a = j + 1;
  label B_d:
  if (d <= a) goto B_c;
  g = (a ^ -1) + d;
  e = (a + c + -1)[0]:ubyte;
  f = d - a & 3;
  if (eqz(f)) goto B_f;
  loop L_g {
    (c + a)[0]:byte = (e = e + (b + a)[0]:ubyte);
    a = a + 1;
    f = f + -1;
    if (f) continue L_g;
  }
  label B_f:
  if (g < 3) goto B_c;
  loop L_h {
    f = c + a;
    f[0] = (e = e + (g = b + a)[0]);
    (f + 1)[0]:byte = (e = e + (g + 1)[0]:ubyte);
    (f + 2)[0]:byte = (e = e + (g + 2)[0]:ubyte);
    (f + 3)[0]:byte = (e = e + (g + 3)[0]:ubyte);
    b = b + 4;
    c = c + 4;
    if (a != (d = d + -4)) continue L_h;
  }
  label B_c:
}

function GradientFilter_SSE2(a:ubyte_ptr, b:int, c:int, d:int, e:byte_ptr) {
  var i:simd_ptr@1;
  var j:simd_ptr@1;
  var o:int;
  var m:simd;
  var n:simd;
  var h:int;
  var k:ubyte_ptr;
  var p:ubyte_ptr;
  var l:ubyte_ptr;
  var z:int;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  e[0] = a[0];
  var f:int = e + 1;
  var g:ubyte_ptr = a + 1;
  h = b + -1;
  i = h & -32;
  if (i >= 1) goto B_b;
  j = 0;
  goto B_a;
  label B_b:
  i = i + -1;
  j = (i >> 5) + 1;
  k = j & 1;
  if (i != 31) goto B_d;
  j = 0;
  goto B_c;
  label B_d:
  l = j & 268435454;
  j = 0;
  loop L_e {
    i = a + j;
    m = i[0];
    n = (i + 1)[0]:simd@1;
    o = e + j;
    (o + 17)[0]:simd@1 = (i + 17)[0]:simd@1 i8x16_sub (i + 16)[0]:simd@1;
    (o + 1)[0]:simd@1 = n i8x16_sub m;
    m = (i + 32)[0]:simd@1;
    n = (i + 33)[0]:simd@1;
    (o + 49)[0]:simd@1 = (i + 49)[0]:simd@1 i8x16_sub (i + 48)[0]:simd@1;
    (o + 33)[0]:simd@1 = n i8x16_sub m;
    j = j + 64;
    l = l + -2;
    if (l) continue L_e;
  }
  label B_c:
  if (eqz(k)) goto B_a;
  i = g + j;
  m = i[0];
  n = (i + -1)[0]:simd@1;
  o = f + j;
  o[16]:simd@1 = i[16] i8x16_sub i[15];
  o[0]:simd@1 = m i8x16_sub n;
  j = j + 32;
  label B_a:
  if (j >= h) goto B_f;
  k = (j ^ -1) + b;
  if (k < 16) goto B_g;
  i = a + j;
  o = j + e + 1;
  if (o >= a + b) goto B_h;
  if (i < e + b) goto B_g;
  label B_h:
  j = j + (p = k & -16);
  l = p;
  loop L_i {
    o[0]:simd@1 = (i + 1)[0]:simd@1 i8x16_sub i[0];
    o = o + 16;
    i = i + 16;
    l = l + -16;
    if (l) continue L_i;
  }
  if (k == p) goto B_f;
  label B_g:
  o = b + -2;
  i = j;
  if (eqz((j ^ -1) + b & 1)) goto B_j;
  (f + j)[0]:byte = (g + j)[0]:ubyte - (a + j)[0]:ubyte;
  i = j + 1;
  label B_j:
  if (o == j) goto B_f;
  j = a;
  o = e;
  f = h;
  loop L_k {
    g = o + i;
    (g + 1)[0]:byte = (k = (l = j + i) + 1)[0] - l[0];
    (g + 2)[0]:byte = (l + 2)[0]:ubyte - k[0];
    j = j + 2;
    o = o + 2;
    if (i != (f = f + -2)) continue L_k;
  }
  label B_f:
  if (c < 2) goto B_l;
  var q:int = b + -1;
  var r:int = d + b;
  var s:int = d + 1;
  k = h & -8;
  var t:int = 0 - d;
  var u:int = 0;
  g = a;
  var v:int = 1;
  var w:byte_ptr = e;
  loop L_m {
    var x:int = w;
    w = x + d;
    w[0] = (g = (p = g) + d)[0] - p[0];
    i = 0;
    if (k < 1) goto B_n;
    o = w + 1;
    l = g + 1;
    f = l + t;
    i = 0;
    loop L_o {
      let t0 = SimdStoreLane(
                 o + i,
                 LoadSplat(l + i) i8x16_sub
                 (((SimdShuffleOp(LoadZero(j = f + i), m = V128) i16x8_add
                    SimdShuffleOp(LoadZero(g + i), m)) i16x8_sub
                   SimdShuffleOp(LoadZero(j + -1), m)) i8x16_narrow_i16x8_u
                  V128));
      if ((i = i + 8) < k) continue L_o;
      t0;
    }
    label B_n:
    if (i >= h) goto B_p;
    var y:int = (i ^ -1) + b;
    if (y < 16) goto B_q;
    l = e + s + (j = u * d) + i;
    if (l < a + (o = r + j) & a + j + d + i < (o = e + o)) goto B_q;
    if (l < a + j + b & (j = p + i) < o) goto B_q;
    o = d + i;
    i = i + (z = y & -16);
    l = z;
    loop L_r {
      (x + o + 1)[0]:simd@1 =
        ((f = p + o) + 1)[0]:simd@1 i8x16_sub
        ((((((i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(m = (j + 1)[0]:simd@1)) i32x4_add
              i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n = f[0]:simd@1))) i32x4_sub
             i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(aa = j[0]))) i32x4_max_s
            (ba = V128)) i32x4_min_s
           (ca = V128)) i16x8_narrow_i32x4_u
          ((((i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(m, m))) i32x4_add
              i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(n, m)))) i32x4_sub
             i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, m)))) i32x4_max_s
            ba) i32x4_min_s
           ca)) i8x16_narrow_i16x8_u
         (((((i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(m, m))) i32x4_add
              i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(n, m)))) i32x4_sub
             i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, m)))) i32x4_max_s
            ba) i32x4_min_s
           ca) i16x8_narrow_i32x4_u
          ((((i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(m, m))) i32x4_add
              i32x4_extend_low_i16x8_u(
                i16x8_extend_low_i8x16_u(SimdShuffleOp(n, m)))) i32x4_sub
             i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(SimdShuffleOp(aa, m)))) i32x4_max_s
            ba) i32x4_min_s
           ca)));
      o = o + 16;
      j = j + 16;
      l = l + -16;
      if (l) continue L_r;
    }
    if (y == z) goto B_p;
    label B_q:
    o = p + i;
    j = d + i;
    i = q - i;
    loop L_s {
      (x + j + 1)[0]:byte =
        ((l = p + j) + 1)[0]:ubyte -
        select_if(
          o = select_if(o = (f = o + 1)[0]:ubyte + l[0] - o[0]:ubyte, 0, o > 0),
          255,
          o < 255);
      j = j + 1;
      o = f;
      i = i + -1;
      if (i) continue L_s;
    }
    label B_p:
    u = u + 1;
    v = v + 1;
    if (v != c) continue L_m;
  }
  label B_l:
}

function VerticalFilter_SSE2(a:ubyte_ptr, b:int, c:int, d:int, e:byte_ptr) {
  var i:simd_ptr@1;
  var j:byte_ptr;
  var o:simd_ptr@1;
  var m:simd;
  var n:simd;
  var h:int;
  var k:int;
  var p:int;
  var l:ubyte_ptr;
  e[0] = a[0];
  var f:ubyte_ptr = e + 1;
  var g:ubyte_ptr = a + 1;
  h = b + -1;
  i = h & -32;
  if (i >= 1) goto B_b;
  j = 0;
  goto B_a;
  label B_b:
  i = i + -1;
  j = (i >> 5) + 1;
  k = j & 1;
  if (i != 31) goto B_d;
  j = 0;
  goto B_c;
  label B_d:
  l = j & 268435454;
  j = 0;
  loop L_e {
    i = a + j;
    m = i[0];
    n = (i + 1)[0]:simd@1;
    o = e + j;
    (o + 17)[0]:simd@1 = (i + 17)[0]:simd@1 i8x16_sub (i + 16)[0]:simd@1;
    (o + 1)[0]:simd@1 = n i8x16_sub m;
    m = (i + 32)[0]:simd@1;
    n = (i + 33)[0]:simd@1;
    (o + 49)[0]:simd@1 = (i + 49)[0]:simd@1 i8x16_sub (i + 48)[0]:simd@1;
    (o + 33)[0]:simd@1 = n i8x16_sub m;
    j = j + 64;
    l = l + -2;
    if (l) continue L_e;
  }
  label B_c:
  if (eqz(k)) goto B_a;
  i = g + j;
  m = i[0];
  n = (i + -1)[0]:simd@1;
  o = f + j;
  o[16] = i[16] i8x16_sub i[15];
  o[0] = m i8x16_sub n;
  j = j + 32;
  label B_a:
  if (j >= h) goto B_f;
  k = (j ^ -1) + b;
  if (k < 16) goto B_g;
  i = a + j;
  o = j + e + 1;
  if (o >= a + b) goto B_h;
  if (i < e + b) goto B_g;
  label B_h:
  j = j + (p = k & -16);
  l = p;
  loop L_i {
    o[0] = (i + 1)[0]:simd@1 i8x16_sub i[0];
    o = o + 16;
    i = i + 16;
    l = l + -16;
    if (l) continue L_i;
  }
  if (k == p) goto B_f;
  label B_g:
  o = b + -2;
  i = j;
  if (eqz((j ^ -1) + b & 1)) goto B_j;
  (f + j)[0]:byte = (g + j)[0]:ubyte - (a + j)[0]:ubyte;
  i = j + 1;
  label B_j:
  if (o == j) goto B_f;
  j = a;
  o = e;
  loop L_k {
    f = o + i;
    (f + 1)[0]:byte = (g = (l = j + i) + 1)[0] - l[0];
    (f + 2)[0]:byte = (l + 2)[0]:ubyte - g[0];
    j = j + 2;
    o = o + 2;
    if (i != (h = h + -2)) continue L_k;
  }
  label B_f:
  if (c < 2) goto B_l;
  var q:int = 0;
  var r:int = 0 - b;
  h = b & -32;
  var s:int = e + d;
  k = s;
  var t:int = a + d;
  p = t;
  l = a;
  var u:int = 1;
  loop L_m {
    f = e;
    e = f + d;
    o = l;
    l = o + d;
    i = 0;
    if (h < 1) goto B_n;
    i = 0;
    loop L_o {
      m = (o + (j = i | 16))[0]:simd@1;
      n = (l + j)[0]:simd@1;
      (e + i)[0]:simd@1 = (l + i)[0]:simd@1 i8x16_sub (o + i)[0]:simd@1;
      (e + j)[0]:simd@1 = n i8x16_sub m;
      i = i + 32;
      if (i < h) continue L_o;
    }
    label B_n:
    if (b <= i) goto B_p;
    var v:int = b - i;
    if (v < 16) goto B_q;
    g = i + s + (j = q * d);
    if (g - i + j + a < 16) goto B_q;
    if (g - i + t + j < 16) goto B_q;
    g = f + d + i;
    var w:int = o + i;
    var x:int = w + d;
    i = i + (f = v & -16);
    j = 0;
    loop L_r {
      (g + j)[0]:simd@1 = (x + j)[0]:simd@1 i8x16_sub (w + j)[0]:simd@1;
      if (f != (j = j + 16)) continue L_r;
    }
    if (v == f) goto B_p;
    label B_q:
    j = i ^ -1;
    if (eqz(b - i & 1)) goto B_s;
    (e + i)[0]:byte = (l + i)[0]:ubyte - (o + i)[0]:ubyte;
    i = i + 1;
    label B_s:
    if (j == r) goto B_p;
    loop L_t {
      j = k + i;
      j[0] = (f = p + i)[0] - (g = o + i)[0];
      (j + 1)[0]:byte = (f + 1)[0]:ubyte - (g + 1)[0]:ubyte;
      if (b != (i = i + 2)) continue L_t;
    }
    label B_p:
    k = k + d;
    p = p + d;
    q = q + 1;
    u = u + 1;
    if (u != c) continue L_m;
  }
  label B_l:
}

function HorizontalFilter_SSE2(a:ubyte_ptr, b:int, c:int, d:int, e:byte_ptr) {
  var i:int;
  var j:ubyte_ptr;
  var p:simd_ptr@1;
  var n:simd;
  var o:simd;
  var h:int;
  var l:ubyte_ptr;
  var k:int;
  var q:byte_ptr;
  var m:ubyte_ptr;
  var ba:int;
  var ca:int;
  e[0] = a[0];
  var f:int = e + 1;
  var g:ubyte_ptr = a + 1;
  h = b + -1;
  i = h & -32;
  if (i >= 1) goto B_b;
  j = 0;
  goto B_a;
  label B_b:
  k = i + -1;
  j = (k >> 5) + 1;
  l = j & 1;
  if (k != 31) goto B_d;
  j = 0;
  goto B_c;
  label B_d:
  m = j & 268435454;
  j = 0;
  loop L_e {
    k = a + j;
    n = k[0]:simd@1;
    o = (k + 1)[0]:simd@1;
    p = e + j;
    (p + 17)[0]:simd@1 = (k + 17)[0]:simd@1 i8x16_sub (k + 16)[0]:simd@1;
    (p + 1)[0]:simd@1 = o i8x16_sub n;
    n = (k + 32)[0]:simd@1;
    o = (k + 33)[0]:simd@1;
    (p + 49)[0]:simd@1 = (k + 49)[0]:simd@1 i8x16_sub (k + 48)[0]:simd@1;
    (p + 33)[0]:simd@1 = o i8x16_sub n;
    j = j + 64;
    m = m + -2;
    if (m) continue L_e;
  }
  label B_c:
  if (eqz(l)) goto B_a;
  k = g + j;
  n = k[0]:simd@1;
  o = (k + -1)[0]:simd@1;
  p = f + j;
  p[16] = k[16]:simd@1 i8x16_sub k[15]:simd@1;
  p[0] = n i8x16_sub o;
  j = j + 32;
  label B_a:
  if (j >= h) goto B_f;
  l = (j ^ -1) + b;
  if (l < 16) goto B_g;
  k = a + j;
  p = j + e + 1;
  if (p >= a + b) goto B_h;
  if (k < e + b) goto B_g;
  label B_h:
  j = j + (q = l & -16);
  m = q;
  loop L_i {
    p[0] = (k + 1)[0]:simd@1 i8x16_sub k[0]:simd@1;
    p = p + 16;
    k = k + 16;
    m = m + -16;
    if (m) continue L_i;
  }
  if (l == q) goto B_f;
  label B_g:
  p = b + -2;
  k = j;
  if (eqz((j ^ -1) + b & 1)) goto B_j;
  (f + j)[0]:byte = (g + j)[0]:ubyte - (a + j)[0]:ubyte;
  k = j + 1;
  label B_j:
  if (p == j) goto B_f;
  j = a;
  p = e;
  f = h;
  loop L_k {
    g = p + k;
    (g + 1)[0]:byte = (l = (m = j + k) + 1)[0] - m[0];
    (g + 2)[0]:byte = (m + 2)[0]:ubyte - l[0];
    j = j + 2;
    p = p + 2;
    if (k != (f = f + -2)) continue L_k;
  }
  label B_f:
  if (c < 2) goto B_l;
  m = e + d;
  f = a + d;
  var r:int = b + -2;
  var s:int = d + b;
  var t:int = d + 1;
  k = i + -1;
  j = (k >> 5) + 1;
  var u:int = j & 268435454;
  var v:int = j & 1;
  var w:int = 0;
  var x:int = k == 31;
  l = a;
  var y:int = 1;
  q = e;
  loop L_m {
    q = q + d;
    q[0] = (l = (k = l) + d)[0] - k[0]:ubyte;
    var z:int = q + 1;
    var aa:int = l + 1;
    j = 0;
    if (i < 1) goto B_n;
    j = 0;
    if (x) goto B_o;
    j = 0;
    g = u;
    loop L_p {
      k = f + j;
      n = k[0]:simd@1;
      o = (k + 1)[0]:simd@1;
      p = m + j;
      (p + 17)[0]:simd@1 = (k + 17)[0]:simd@1 i8x16_sub (k + 16)[0]:simd@1;
      (p + 1)[0]:simd@1 = o i8x16_sub n;
      n = (k + 32)[0]:simd@1;
      o = (k + 33)[0]:simd@1;
      (p + 49)[0]:simd@1 = (k + 49)[0]:simd@1 i8x16_sub (k + 48)[0]:simd@1;
      (p + 33)[0]:simd@1 = o i8x16_sub n;
      j = j + 64;
      g = g + -2;
      if (g) continue L_p;
    }
    label B_o:
    if (eqz(v)) goto B_n;
    k = aa + j;
    n = k[0]:simd@1;
    o = (k + -1)[0]:simd@1;
    p = z + j;
    p[16] = k[16]:simd@1 i8x16_sub k[15]:simd@1;
    p[0] = n i8x16_sub o;
    j = j + 32;
    label B_n:
    if (j >= h) goto B_q;
    ba = (j ^ -1) + b;
    if (ba >= 16) goto B_s;
    g = j;
    goto B_r;
    label B_s:
    if (e + t + (k = w * d) + j >= a + (p = s + k)) goto B_t;
    if (a + k + d + j >= e + p) goto B_t;
    g = j;
    goto B_r;
    label B_t:
    g = j + (ca = ba & -16);
    k = ca;
    loop L_u {
      (m + j + 1)[0]:simd@1 = ((p = f + j) + 1)[0]:simd@1 i8x16_sub p[0];
      j = j + 16;
      k = k + -16;
      if (k) continue L_u;
    }
    if (ba == ca) goto B_q;
    label B_r:
    k = g;
    if (eqz((g ^ -1) + b & 1)) goto B_v;
    (z + g)[0]:byte = (aa + g)[0]:ubyte - (l + g)[0]:ubyte;
    k = g + 1;
    label B_v:
    if (r == g) goto B_q;
    loop L_w {
      p = m + k;
      (p + 1)[0]:byte = (g = (j = f + k) + 1)[0] - j[0];
      (p + 2)[0]:byte = (j + 2)[0]:ubyte - g[0];
      if (h != (k = k + 2)) continue L_w;
    }
    label B_q:
    m = m + d;
    f = f + d;
    w = w + 1;
    y = y + 1;
    if (y != c) continue L_m;
  }
  label B_l:
}

function VP8LDspInitSSE2() {
  1060048[13]:int = 199;
  1060048[12]:int = 200;
  1060048[11]:int = 201;
  1060048[10]:int = 202;
  1060048[9]:int = 203;
  1060048[8]:int = 204;
  1060048[7]:int = 205;
  1060048[6]:int = 206;
  1060048[5]:int = 207;
  1059984[13]:int = 208;
  1059984[12]:int = 209;
  1059984[11]:int = 210;
  1059984[10]:int = 211;
  1059984[9]:int = 212;
  1059984[8]:int = 213;
  1059984[7]:int = 214;
  1059984[6]:int = 215;
  1059984[5]:int = 216;
  1059984[4]:int = 217;
  1059984[3]:int = 218;
  1059984[2]:int = 219;
  1059984[1]:int = 220;
  0[264996]:int = 221;
  0[265044]:int = 222;
  0[264989]:int = 223;
  0[264990]:int = 224;
  0[264991]:int = 225;
  0[264993]:int = 226;
  0[264994]:int = 227;
  0[264992]:int = 228;
}

function Predictor13_SSE2(a:int, b:int):int {
  var c:simd;
  var d:simd = (SimdShuffleOp(LoadZero(b), c = V128) i16x8_add
                SimdShuffleOp(LoadZero(a), c)) i16x8_shr_u
               1;
  c = 
    (((d i16x8_sub (c = SimdShuffleOp(LoadZero(b + -4), c))) i16x8_sub
      d i16x8_lt_s c) i16x8_shr_s
     1) i16x8_add
    d;
  return SimdLaneOp(c i8x16_narrow_i16x8_u c);
}

function Predictor12_SSE2(a:int, b:int):int {
  var c:simd;
  c = (SimdShuffleOp(LoadZero(b), c = V128) i16x8_add
       SimdShuffleOp(LoadZero(a), c)) i16x8_sub
      SimdShuffleOp(LoadZero(b + -4), c);
  return SimdLaneOp(c i8x16_narrow_i16x8_u c);
}

function Predictor11_SSE2(a:int_ptr, b:int_ptr):int {
  var d:simd;
  var e:simd;
  var f:simd;
  var c:int = b[0];
  return 
    select_if(
      c,
      a = a[0],
      SimdLaneOp(
        e = 
          i32x4_extend_low_i16x8_s(
            d = 
              SimdShuffleOp(
                ((d = LoadZero(b + -4)) i8x16_sub_sat_u (f = SimdLaneOp(e = V128, a))) v128_or
                (f i8x16_sub_sat_u d),
                f = V128) i16x8_sub
              SimdShuffleOp((d i8x16_sub_sat_u (e = SimdLaneOp(e, c))) v128_or
                            (e i8x16_sub_sat_u d),
                            f))) +
      SimdLaneOp(e) +
      SimdLaneOp(d) +
      SimdLaneOp(d) <
      1);
}

function Predictor10_SSE2(a:int, b:int):int {
  var c:simd;
  c = (((SimdShuffleOp(LoadZero(b), c = V128) i16x8_add
         SimdShuffleOp(LoadZero(b), c)) i16x8_shr_u
        1) i16x8_add
       ((SimdShuffleOp(LoadZero(b + -4), c) i16x8_add
         SimdShuffleOp(LoadZero(a), c)) i16x8_shr_u
        1)) i16x8_shr_u
      1;
  return SimdLaneOp(c i8x16_narrow_i16x8_u c);
}

function Predictor9_SSE2(a:int, b:int):int {
  var d:simd;
  var c:simd = LoadZero(b);
  return SimdLaneOp((c i8x16_avgr_u (d = LoadZero(b))) i8x16_sub
                    ((d v128_xor c) v128_and V128));
}

function Predictor8_SSE2(a:int, b:int):int {
  var d:simd;
  var c:simd = LoadZero(b + -4);
  return SimdLaneOp((c i8x16_avgr_u (d = LoadZero(b))) i8x16_sub
                    ((d v128_xor c) v128_and V128));
}

function Predictor7_SSE2(a:int, b:int):int {
  var d:simd;
  var c:simd = LoadZero(a);
  return SimdLaneOp((c i8x16_avgr_u (d = LoadZero(b))) i8x16_sub
                    ((d v128_xor c) v128_and V128));
}

function Predictor6_SSE2(a:int, b:int):int {
  var d:simd;
  var c:simd = LoadZero(a);
  return SimdLaneOp((c i8x16_avgr_u (d = LoadZero(b + -4))) i8x16_sub
                    ((d v128_xor c) v128_and V128));
}

function Predictor5_SSE2(a:int, b:int):int {
  var c:simd;
  c = (((SimdShuffleOp(LoadZero(b), c = V128) i16x8_add
         SimdShuffleOp(LoadZero(a), c)) i16x8_shr_u
        1) i16x8_add
       SimdShuffleOp(LoadZero(b), c)) i16x8_shr_u
      1;
  return SimdLaneOp(c i8x16_narrow_i16x8_u c);
}

function PredictorAdd13_SSE2(a:int_ptr, b:int, c:int, d:int_ptr) {
  var f:int;
  var g:simd;
  var h:simd;
  if (c < 1) goto B_a;
  b = b + -4;
  var e:int = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (e = 
         (((b = 
              SimdLaneOp(
                (g = ((((h = (SimdShuffleOp(LoadZero(f = b + 4), g = V128) i16x8_add
                              SimdShuffleOp(SimdLaneOp(V128, e), g)) i16x8_shr_u
                             1) i16x8_sub
                        (g = SimdShuffleOp(LoadZero(b), g))) i16x8_sub
                       h i16x8_lt_s g) i16x8_shr_s
                      1) i16x8_add
                     h) i8x16_narrow_i16x8_u
                g)) &
           -16711936) +
          ((e = a[0]) & -16711936) &
          -16711936) |
         ((b & 16711935) + (e & 16711935) & 16711935));
    a = a + 4;
    d = d + 4;
    b = f;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd12_SSE2(a:int, b:int, c:int, d:int) {
  var g:simd;
  var j:simd_ptr@1;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var f:int;
  var e:int = 0;
  if (c < 4) goto B_a;
  f = -4;
  var h:simd = SimdShuffleOp(LoadZero(d + -4), g = V128);
  var i:int = 0;
  loop L_b {
    (d + f + 4)[0]:simd@4 =
      SimdShuffleOp(
        SimdShuffleOp(
          n = 
            ((h = (m = SimdShuffleOp(k = ((j = b + f) + 4)[0]:simd@1, g) i16x8_sub
                       SimdShuffleOp(l = j[0], g)) i16x8_add
                  h) i8x16_narrow_i16x8_u
             h) i8x16_add
            (h = (a + f + 4)[0]:simd@1),
          m = 
            ((m = SimdShuffleOp(n, g) i16x8_add SimdShuffleOp(g, m)) i8x16_narrow_i16x8_u
             m) i8x16_add
            (h = SimdShuffleOp(g, h))),
        SimdShuffleOp(
          l = 
            ((l = (k = SimdShuffleOp(k, g) i16x8_sub SimdShuffleOp(l, g)) i16x8_add
                  SimdShuffleOp(m, g)) i8x16_narrow_i16x8_u
             l) i8x16_add
            (h = SimdShuffleOp(g, h)),
          h = 
            ((k = SimdShuffleOp(l, g) i16x8_add SimdShuffleOp(g, k)) i8x16_narrow_i16x8_u
             k) i8x16_add
            SimdShuffleOp(g, h)));
    h = SimdShuffleOp(h, g);
    f = f + 16;
    j = i + 8;
    e = i + 4;
    i = e;
    if (j <= c) continue L_b;
  }
  label B_a:
  if (c == e) goto B_c;
  call_indirect(a + (f = e << 2), b + f, c - e, d + f, 1060112[12]:int);
  label B_c:
}

function PredictorAdd11_SSE2(a:int, b:int, c:int, d:int) {
  var j:int;
  var l:simd;
  var u:int;
  var v:simd;
  var t:int;
  var s:int;
  var w:simd;
  var h:simd_ptr@1;
  var e:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd, i:simd, j:simd, k:simd, l:simd, m:simd, n:simd, o:simd, p:simd, q:simd, r:simd } = 
    stack_pointer - 288;
  stack_pointer = e;
  var f:int = 0;
  if (c < 4) goto B_a;
  var g:simd = LoadZero(d + -4);
  h = 0;
  var i:int = 4;
  loop L_b {
    f = i;
    h = b + (j = h << 2);
    var k:simd = (h + -4)[0]:simd@1;
    var m:simd = SimdShuffleOp(k, l = h[0]);
    var n:simd = (a + j)[0]:simd@1;
    var o:simd = SimdShuffleOp(l, l);
    var p:simd = SimdShuffleOp(l, l);
    var q:int = 1;
    var r:int = 0;
    loop L_c {
      s = r << 3;
      h = 0;
      t = 0;
      loop L_d {
        e.q = m;
        e.r = p;
        t = t +
            select_if((i = (e + 272 | (u = s + h & 15))[0]:ubyte) -
                      (u = (e + 256 | u)[0]:ubyte),
                      u - i,
                      i > u);
        h = h + 1;
        if (h != 8) continue L_d;
      }
      e.p = v;
      (e + 240 | (r & 1) << 3)[0]:long = i64_extend_i32_u(t) & 65535L;
      h = q & 1;
      q = 0;
      v = e.p;
      r = 1;
      if (h) continue L_c;
    }
    p = SimdShuffleOp(k, l);
    r = 0;
    q = 1;
    loop L_e {
      s = r << 3;
      h = 0;
      t = 0;
      loop L_f {
        e.n = p;
        e.o = o;
        t = t +
            select_if((i = (e + 224 | (u = s + h & 15))[0]:ubyte) -
                      (u = (e + 208 | u)[0]:ubyte),
                      u - i,
                      i > u);
        h = h + 1;
        if (h != 8) continue L_f;
      }
      e.m = w;
      (e + 192 | (r & 1) << 3)[0]:long = i64_extend_i32_u(t) & 65535L;
      h = q & 1;
      q = 0;
      w = e.m;
      r = 1;
      if (h) continue L_e;
    }
    o = SimdShuffleOp(g, l);
    var x:simd = v i16x8_narrow_i32x4_s w;
    r = 0;
    q = 1;
    loop L_g {
      s = r << 3;
      h = 0;
      t = 0;
      loop L_h {
        e.k = m;
        e.l = o;
        t = t +
            select_if((i = (e + 176 | (u = s + h & 15))[0]:ubyte) -
                      (u = (e + 160 | u)[0]:ubyte),
                      u - i,
                      i > u);
        h = h + 1;
        if (h != 8) continue L_h;
      }
      e.j = p;
      (e + 144 | (r & 1) << 3)[0]:long = i64_extend_i32_u(t) & 65535L;
      h = q & 1;
      q = 0;
      p = e.j;
      r = 1;
      if (h) continue L_g;
    }
    let t0 = 
      SimdStoreLane(d + j,
                    g = n i8x16_add v128_bitselect(g, l, p i32x4_gt_s x));
    m = 
      SimdShuffleOp(k = SimdShuffleOp(v = V128, k), w = SimdShuffleOp(v, l));
    o = SimdShuffleOp(g, w);
    l = SimdShuffleOp(v, x);
    r = 0;
    q = 1;
    loop L_i {
      s = r << 3;
      h = 0;
      t = 0;
      loop L_j {
        e.h = m;
        e.i = o;
        t = t +
            select_if((i = (e + 128 | (u = s + h & 15))[0]:ubyte) -
                      (u = (e + 112 | u)[0]:ubyte),
                      u - i,
                      i > u);
        if ((h = h + 1) != 8) continue L_j;
      }
      e.g = p;
      (e + 96 | (r & 1) << 3)[0]:long = i64_extend_i32_u(t) & 65535L;
      h = q & 1;
      q = 0;
      p = e.g;
      r = 1;
      if (h) continue L_i;
    }
    let t1 = SimdStoreLane(d + (j | 4),
                           g = (n = SimdShuffleOp(v, n)) i8x16_add
                               v128_bitselect(g, w, p i32x4_gt_s l));
    m = SimdShuffleOp(k = SimdShuffleOp(v, k), w = SimdShuffleOp(v, w));
    o = SimdShuffleOp(g, w);
    l = SimdShuffleOp(v, l);
    r = 0;
    q = 1;
    loop L_k {
      s = r << 3;
      h = 0;
      t = 0;
      loop L_l {
        e.e = m;
        e.f = o;
        t = t +
            select_if((i = (e + 80 | (u = s + h & 15))[0]:ubyte) -
                      (u = (e + 64 | u)[0]:ubyte),
                      u - i,
                      i > u);
        if ((h = h + 1) != 8) continue L_l;
      }
      e.d = p;
      (e + 48 | (r & 1) << 3)[0]:long = i64_extend_i32_u(t) & 65535L;
      h = q & 1;
      q = 0;
      p = e.d;
      r = 1;
      if (h) continue L_k;
    }
    let t2 = SimdStoreLane(d + (j | 8),
                           g = (n = SimdShuffleOp(v, n)) i8x16_add
                               v128_bitselect(g, w, p i32x4_gt_s l));
    m = SimdShuffleOp(SimdShuffleOp(v, k), w = SimdShuffleOp(v, w));
    o = SimdShuffleOp(g, w);
    l = SimdShuffleOp(v, l);
    r = 0;
    q = 1;
    loop L_m {
      s = r << 3;
      h = 0;
      t = 0;
      loop L_n {
        e.b = m;
        e.c = o;
        t = t +
            select_if((i = (e + 32 | (u = s + h & 15))[0]:ubyte) -
                      (u = (e + 16 | u)[0]:ubyte),
                      u - i,
                      i > u);
        if ((h = h + 1) != 8) continue L_n;
      }
      e.a = p;
      (e | (r & 1) << 3)[0]:long = i64_extend_i32_u(t) & 65535L;
      h = q & 1;
      q = 0;
      p = e.a;
      r = 1;
      if (h) continue L_m;
    }
    let t3 = 
      SimdStoreLane(
        d + (j | 12),
        g = 
          SimdShuffleOp(v, n) i8x16_add v128_bitselect(g, w, p i32x4_gt_s l));
    h = f;
    if ((i = f + 4) <= c) continue L_b;
    t0;
    t1;
    t2;
    t3;
  }
  label B_a:
  if (c == f) goto B_o;
  call_indirect(a + (h = f << 2), b + h, c - f, d + h, 1060112[11]:int);
  label B_o:
  stack_pointer = e + 288;
}

function PredictorAdd10_SSE2(a:int, b:int, c:int, d:int) {
  var i:simd_ptr@1;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var g:int;
  var e:int = 0;
  if (c < 4) goto B_a;
  var f:simd = LoadZero(d + -4);
  g = 0;
  var h:int = 0;
  loop L_b {
    (d + g)[0]:simd@4 =
      SimdShuffleOp(
        SimdShuffleOp(
          n = 
            (((k = 
                 ((j = (i = b + g)[0]) i8x16_avgr_u (k = (i + 4)[0]:simd@1)) i8x16_sub
                 ((k v128_xor j) v128_and (j = V128))) i8x16_avgr_u
              (f = (f i8x16_avgr_u (l = (i + -4)[0]:simd@1)) i8x16_sub
                   ((l v128_xor f) v128_and j))) i8x16_sub
             ((k v128_xor f) v128_and j)) i8x16_add
            (m = (a + g)[0]:simd@1),
          n = (((k = SimdShuffleOp(f = V128, k)) i8x16_avgr_u
                (n = (n i8x16_avgr_u (l = SimdShuffleOp(f, l))) i8x16_sub
                     ((n v128_xor l) v128_and j))) i8x16_sub
               ((n v128_xor k) v128_and j)) i8x16_add
              (m = SimdShuffleOp(f, m))),
        SimdShuffleOp(
          n = (((k = SimdShuffleOp(f, k)) i8x16_avgr_u
                (n = (n i8x16_avgr_u (l = SimdShuffleOp(f, l))) i8x16_sub
                     ((n v128_xor l) v128_and j))) i8x16_sub
               ((n v128_xor k) v128_and j)) i8x16_add
              (m = SimdShuffleOp(f, m)),
          f = (((k = SimdShuffleOp(f, k)) i8x16_avgr_u
                (l = (n i8x16_avgr_u (l = SimdShuffleOp(f, l))) i8x16_sub
                     ((n v128_xor l) v128_and j))) i8x16_add
               SimdShuffleOp(f, m)) i8x16_sub
              ((l v128_xor k) v128_and j)));
    g = g + 16;
    i = h + 8;
    e = h + 4;
    h = e;
    if (i <= c) continue L_b;
  }
  label B_a:
  if (c == e) goto B_c;
  call_indirect(a + (g = e << 2), b + g, c - e, d + g, 1060112[10]:int);
  label B_c:
}

function PredictorAdd9_SSE2(a:int, b:int, c:int, d:int) {
  var j:simd;
  var k:simd;
  var i:simd_ptr@1;
  var e:int = 0;
  if (c < 4) goto B_a;
  var f:int = 0;
  var g:simd_ptr@1 = d;
  var h:simd_ptr@1 = a;
  i = b;
  loop L_b {
    g[0] =
      (((j = i[0]) i8x16_avgr_u (k = (i + 4)[0]:simd@1)) i8x16_add h[0]) i8x16_sub
      ((j v128_xor k) v128_and V128);
    g = g + 16;
    h = h + 16;
    i = i + 16;
    var l:int = f + 8;
    e = f + 4;
    f = e;
    if (l <= c) continue L_b;
  }
  label B_a:
  if (c == e) goto B_c;
  call_indirect(a + (i = e << 2), b + i, c - e, d + i, 1060112[9]:int);
  label B_c:
}

function PredictorAdd8_SSE2(a:int, b:int, c:int, d:int) {
  var j:simd;
  var k:simd;
  var f:simd_ptr@1;
  var e:int = 0;
  if (c < 4) goto B_a;
  f = b + -4;
  var g:int = 0;
  var h:simd_ptr@1 = d;
  var i:simd_ptr@1 = a;
  loop L_b {
    h[0] =
      (((j = (f + 4)[0]:simd@1) i8x16_avgr_u (k = f[0])) i8x16_add i[0]) i8x16_sub
      ((j v128_xor k) v128_and V128);
    h = h + 16;
    i = i + 16;
    f = f + 16;
    var l:int = g + 8;
    e = g + 4;
    g = e;
    if (l <= c) continue L_b;
  }
  label B_a:
  if (c == e) goto B_c;
  call_indirect(a + (f = e << 2), b + f, c - e, d + f, 1060112[8]:int);
  label B_c:
}

function PredictorAdd7_SSE2(a:int_ptr, b:int, c:int, d:int_ptr) {
  var f:simd;
  var g:simd;
  var h:int;
  if (c < 1) goto B_a;
  var e:int = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (e = 
         (((e = 
              SimdLaneOp(
                ((f = SimdLaneOp(V128, e)) i8x16_avgr_u (g = LoadZero(b))) i8x16_sub
                ((g v128_xor f) v128_and V128))) &
           -16711936) +
          ((h = a[0]) & -16711936) &
          -16711936) |
         ((e & 16711935) + (h & 16711935) & 16711935));
    b = b + 4;
    a = a + 4;
    d = d + 4;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd6_SSE2(a:int_ptr, b:int, c:int, d:int_ptr) {
  var f:simd;
  var g:simd;
  var h:int;
  if (c < 1) goto B_a;
  b = b + -4;
  var e:int = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (e = 
         (((e = 
              SimdLaneOp(
                ((f = SimdLaneOp(V128, e)) i8x16_avgr_u (g = LoadZero(b))) i8x16_sub
                ((g v128_xor f) v128_and V128))) &
           -16711936) +
          ((h = a[0]) & -16711936) &
          -16711936) |
         ((e & 16711935) + (h & 16711935) & 16711935));
    b = b + 4;
    a = a + 4;
    d = d + 4;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd5_SSE2(a:int_ptr, b:int, c:int, d:int_ptr) {
  var f:int;
  var g:simd;
  if (c < 1) goto B_a;
  var e:int = (d + -4)[0]:int;
  loop L_b {
    d[0] =
      (e = 
         (((b = SimdLaneOp(
                  (g = (((SimdShuffleOp(LoadZero(f = b + 4), g = V128) i16x8_add
                          SimdShuffleOp(SimdLaneOp(V128, e), g)) i16x8_shr_u
                         1) i16x8_add
                        SimdShuffleOp(LoadZero(b), g)) i16x8_shr_u
                       1) i8x16_narrow_i16x8_u
                  g)) &
           -16711936) +
          ((e = a[0]) & -16711936) &
          -16711936) |
         ((b & 16711935) + (e & 16711935) & 16711935));
    a = a + 4;
    d = d + 4;
    b = f;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
}

function PredictorAdd4_SSE2(a:int, b:int, c:int, d:int) {
  var j:int;
  var k:simd_ptr@1;
  var e:int = 4;
  var f:int = 0;
  if (c < 4) goto B_a;
  f = c + -4;
  var g:int = (f >> 2) + 1;
  var h:int = g & 1;
  if (f >= 4) goto B_c;
  f = 0;
  goto B_b;
  label B_c:
  g = g & 2147483646;
  e = 4;
  f = 0;
  loop L_d {
    var i:simd_ptr@1 = d + f;
    i[0] = ((j = b + f) + -4)[0]:simd@1 i8x16_add (k = a + f)[0];
    (i + 16)[0]:simd@1 = (j + 12)[0]:simd@1 i8x16_add (k + 16)[0]:simd@1;
    f = f + 32;
    e = e + 8;
    g = g + -2;
    if (g) continue L_d;
  }
  f = e + -4;
  label B_b:
  if (eqz(h)) goto B_a;
  (d + (f = f << 2))[0]:simd@1 =
    (f + b + -4)[0]:simd@1 i8x16_add (a + f)[0]:simd@1;
  f = e;
  label B_a:
  if (c == f) goto B_e;
  call_indirect(a + (e = f << 2), b + e, c - f, d + e, 1060112[4]:int);
  label B_e:
}

function PredictorAdd3_SSE2(a:int, b:int, c:int, d:int) {
  var g:simd_ptr@1;
  var e:int = 4;
  var f:simd_ptr@1 = 0;
  if (c < 4) goto B_a;
  f = c + -4;
  g = (f >> 2) + 1;
  var h:int = g & 1;
  if (f >= 4) goto B_c;
  f = 0;
  goto B_b;
  label B_c:
  var i:simd_ptr@1 = b + 20;
  var j:int = g & 2147483646;
  f = a;
  g = d;
  e = 4;
  loop L_d {
    g[0] = (b + ((e << 2) + -16 | 4))[0]:simd@1 i8x16_add f[0];
    (g + 16)[0]:simd@1 = i[0] i8x16_add (f + 16)[0]:simd@1;
    f = f + 32;
    i = i + 32;
    g = g + 32;
    e = e + 8;
    j = j + -2;
    if (j) continue L_d;
  }
  f = e + -4;
  label B_b:
  if (eqz(h)) goto B_a;
  (d + (f = f << 2))[0]:simd@1 =
    (b + (f | 4))[0]:simd@1 i8x16_add (a + f)[0]:simd@1;
  f = e;
  label B_a:
  if (c == f) goto B_e;
  call_indirect(a + (g = f << 2), b + g, c - f, d + g, 1060112[3]:int);
  label B_e:
}

function PredictorAdd2_SSE2(a:int, b:int, c:int, d:int) {
  var g:simd_ptr@1;
  var e:int = 4;
  var f:simd_ptr@1 = 0;
  if (c < 4) goto B_a;
  f = c + -4;
  g = (f >> 2) + 1;
  var h:int = g & 1;
  if (f >= 4) goto B_c;
  f = 0;
  goto B_b;
  label B_c:
  var i:int = g & 2147483646;
  e = 4;
  f = a;
  g = b;
  var j:simd_ptr@1 = d;
  loop L_d {
    j[0] = g[0] i8x16_add f[0];
    (j + 16)[0]:simd@1 = (g + 16)[0]:simd@1 i8x16_add (f + 16)[0]:simd@1;
    f = f + 32;
    g = g + 32;
    j = j + 32;
    e = e + 8;
    i = i + -2;
    if (i) continue L_d;
  }
  f = e + -4;
  label B_b:
  if (eqz(h)) goto B_a;
  (d + (f = f << 2))[0]:simd@1 =
    (b + f)[0]:simd@1 i8x16_add (a + f)[0]:simd@1;
  f = e;
  label B_a:
  if (c == f) goto B_e;
  call_indirect(a + (g = f << 2), b + g, c - f, d + g, 1060112[2]:int);
  label B_e:
}

function PredictorAdd1_SSE2(a:int, b:int, c:int, d:int) {
  var k:simd;
  var l:simd;
  var g:simd_ptr@1;
  var e:int = 4;
  var f:simd_ptr@1 = 0;
  if (c < 4) goto B_a;
  f = c + -4;
  g = (f >> 2) + 1;
  var h:int = g & 1;
  var i:simd = LoadSplat(d + -4);
  if (f >= 4) goto B_c;
  f = 0;
  goto B_b;
  label B_c:
  var j:int = g & 2147483646;
  e = 4;
  f = a;
  g = d;
  loop L_d {
    g[0] =
      (i = 
         ((l = SimdShuffleOp(k = V128, l = f[0]) i8x16_add l) i8x16_add i) i8x16_add
         SimdShuffleOp(k, l));
    (g + 16)[0]:simd@1 =
      (k = 
         ((l = SimdShuffleOp(k, l = (f + 16)[0]:simd@1) i8x16_add l) i8x16_add
          SimdShuffleOp(i, i)) i8x16_add
         SimdShuffleOp(k, l));
    i = SimdShuffleOp(k, k);
    f = f + 32;
    g = g + 32;
    e = e + 8;
    j = j + -2;
    if (j) continue L_d;
  }
  f = e + -4;
  label B_b:
  if (eqz(h)) goto B_a;
  (d + (f = f << 2))[0]:simd@1 =
    ((l = SimdShuffleOp(k = V128, l = (a + f)[0]:simd@1) i8x16_add l) i8x16_add
     i) i8x16_add
    SimdShuffleOp(k, l);
  f = e;
  label B_a:
  if (c == f) goto B_e;
  call_indirect(a + (g = f << 2), b + g, c - f, d + g, 1060112[1]:int);
  label B_e:
}

function PredictorAdd0_SSE2(a:int, b:int, c:int, d:int) {
  var j:simd_ptr@1;
  var k:simd;
  var e:int = 4;
  var f:int = 0;
  if (c < 4) goto B_a;
  f = c + -4;
  var g:simd_ptr@1 = (f >> 2) + 1;
  var h:int = g & 3;
  if (f >= 12) goto B_c;
  f = 0;
  goto B_b;
  label B_c:
  var i:int = g & 2147483644;
  e = 4;
  f = 0;
  loop L_d {
    g = d + f;
    g[0] = (j = a + f)[0] i8x16_add (k = V128);
    (g + 16)[0]:simd@1 = (j + 16)[0]:simd@1 i8x16_add k;
    (g + 32)[0]:simd@1 = (j + 32)[0]:simd@1 i8x16_add k;
    (g + 48)[0]:simd@1 = (j + 48)[0]:simd@1 i8x16_add k;
    f = f + 64;
    e = e + 16;
    i = i + -4;
    if (i) continue L_d;
  }
  f = e + -4;
  label B_b:
  if (eqz(h)) goto B_a;
  loop L_e {
    (d + (f = f << 2))[0]:simd@1 = (a + f)[0]:simd@1 i8x16_add V128;
    f = e;
    e = f + 4;
    f = f;
    h = h + -1;
    if (h) continue L_e;
  }
  f = e + -4;
  label B_a:
  if (c == f) goto B_f;
  call_indirect(a + (e = f << 2), 0, c - f, d + e, 0[265028]:int);
  label B_f:
}

function TransformColorInverse_SSE2(a:{ a:ubyte, b:ubyte, c:ubyte }, b:int, c:int, d:int) {
  var n:simd;
  var k:int;
  var e:int = 0;
  if (c < 4) goto B_a;
  var f:simd = i32x4_splat(i32_extend16_s(a.a << 8) << 11 |
                           (i32_extend16_s(a.b << 8) >> 5 & 65528));
  var g:simd = i32x4_extend_high_i16x8_s(f);
  var h:simd = i32x4_extend_low_i16x8_s(f);
  f = i32x4_splat(i32_extend16_s(a.c << 8) << 11);
  var i:simd = i32x4_extend_high_i16x8_s(f);
  var j:simd = i32x4_extend_low_i16x8_s(f);
  k = 0;
  var l:simd_ptr@1 = d;
  var m:simd_ptr@1 = b;
  loop L_b {
    l[0] =
      (n = (f = m[0]) v128_and V128) v128_or
      (((SimdShuffleOp(
           i32x4_extend_low_i16x8_s(
             f = (SimdShuffleOp(
                    i32x4_extend_low_i16x8_s(
                      n = SimdShuffleOp(n = SimdShuffleOp(n, V128), n)) i32x4_mul
                    h,
                    i32x4_extend_high_i16x8_s(n) i32x4_mul g) i8x16_add
                  f) i16x8_shl
                 8) i32x4_mul
           j,
           i32x4_extend_high_i16x8_s(f) i32x4_mul i) i32x4_shr_u
         8) i8x16_add
        f) i16x8_shr_u
       8);
    l = l + 16;
    m = m + 16;
    var o:int = k + 8;
    e = k + 4;
    k = e;
    if (o <= c) continue L_b;
  }
  label B_a:
  if (c == e) goto B_c;
  VP8LTransformColorInverse_C(a, b + (k = e << 2), c - e, d + k);
  label B_c:
}

function AddGreenToBlueAndRed_SSE2(a:int, b:int, c:int) {
  var i:simd;
  var j:simd;
  var k:simd;
  var f:simd_ptr@1;
  var d:int = 4;
  var e:simd_ptr@1 = 0;
  if (b < 4) goto B_a;
  e = b + -4;
  f = (e >> 2) + 1;
  var g:int = f & 1;
  if (e >= 4) goto B_c;
  e = 0;
  goto B_b;
  label B_c:
  var h:int = f & 2147483646;
  d = 4;
  e = a;
  f = c;
  loop L_d {
    f[0] =
      SimdShuffleOp(k = SimdShuffleOp((i = e[0]) i16x8_shr_u 8, j = V128), k) i8x16_add
      i;
    (f + 16)[0]:simd@1 =
      SimdShuffleOp(
        j = SimdShuffleOp((i = (e + 16)[0]:simd@1) i16x8_shr_u 8, j),
        j) i8x16_add
      i;
    e = e + 32;
    f = f + 32;
    d = d + 8;
    h = h + -2;
    if (h) continue L_d;
  }
  e = d + -4;
  label B_b:
  if (eqz(g)) goto B_a;
  (c + (e = e << 2))[0]:simd@1 =
    SimdShuffleOp(
      j = SimdShuffleOp((i = (a + e)[0]:simd@1) i16x8_shr_u 8, V128),
      j) i8x16_add
    i;
  e = d;
  label B_a:
  if (b == e) goto B_e;
  VP8LAddGreenToBlueAndRed_C(a + (f = e << 2), b - e, c + f);
  label B_e:
}

function ConvertBGRAToRGB_SSE2(a:simd_ptr@1, b:int, c:simd_ptr@1) {
  var e:simd;
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var d:int;
  if (b >= 32) goto B_b;
  d = b;
  goto B_a;
  label B_b:
  loop L_c {
    (c + 80)[0]:simd@1 =
      ((p = 
          ((o = 
              ((j = 
                  ((t = 
                      ((l = 
                          SimdShuffleOp(
                            h = 
                              SimdShuffleOp(
                                f = 
                                  SimdShuffleOp(g = SimdShuffleOp(e = a[0], f = (a + 16)[0]:simd@1),
                                                e = SimdShuffleOp(e, f)),
                                g = SimdShuffleOp(g, e)),
                            k = 
                              SimdShuffleOp(
                                i = 
                                  SimdShuffleOp(
                                    j = SimdShuffleOp(e = (a + 32)[0]:simd@1, i = (a + 48)[0]:simd@1),
                                    e = SimdShuffleOp(e, i)),
                                j = SimdShuffleOp(j, e)))) v128_and
                       (e = V128)) i8x16_narrow_i16x8_u
                      ((s = 
                          SimdShuffleOp(
                            o = 
                              SimdShuffleOp(
                                n = 
                                  SimdShuffleOp(
                                    o = SimdShuffleOp(m = (a + 64)[0]:simd@1, n = (a + 80)[0]:simd@1),
                                    m = SimdShuffleOp(m, n)),
                                m = SimdShuffleOp(o, m)),
                            r = 
                              SimdShuffleOp(
                                q = 
                                  SimdShuffleOp(
                                    r = SimdShuffleOp(p = (a + 96)[0]:simd@1, q = (a + 112)[0]:simd@1),
                                    p = SimdShuffleOp(p, q)),
                                p = SimdShuffleOp(r, p)))) v128_and
                       e)) i16x8_shr_u
                   8) i8x16_narrow_i16x8_u
                  ((i = 
                      ((f = SimdShuffleOp(SimdShuffleOp(f, g), SimdShuffleOp(i, j))) i16x8_shr_u
                       8) i8x16_narrow_i16x8_u
                      ((g = SimdShuffleOp(SimdShuffleOp(n, m), SimdShuffleOp(q, p))) i16x8_shr_u
                       8)) i16x8_shr_u
                   8)) v128_and
               e) i8x16_narrow_i16x8_u
              ((n = 
                  ((m = ((h = SimdShuffleOp(h, k)) i16x8_shr_u 8) i8x16_narrow_i16x8_u
                        ((k = SimdShuffleOp(o, r)) i16x8_shr_u 8)) i16x8_shr_u
                   8) i8x16_narrow_i16x8_u
                  ((l = (l i16x8_shr_u 8) i8x16_narrow_i16x8_u (s i16x8_shr_u 8)) i16x8_shr_u
                   8)) v128_and
               e)) i16x8_shr_u
           8) i8x16_narrow_i16x8_u
          ((k = 
              ((h = 
                  ((f = (f v128_and e) i8x16_narrow_i16x8_u (g v128_and e)) v128_and e) i8x16_narrow_i16x8_u
                  ((g = (h v128_and e) i8x16_narrow_i16x8_u (k v128_and e)) v128_and e)) i16x8_shr_u
               8) i8x16_narrow_i16x8_u
              ((i = (t v128_and e) i8x16_narrow_i16x8_u (i v128_and e)) i16x8_shr_u
               8)) i16x8_shr_u
           8)) i16x8_shr_u
       8) i8x16_narrow_i16x8_u
      ((m = 
          ((g = 
              ((l = (m v128_and e) i8x16_narrow_i16x8_u (l v128_and e)) i16x8_shr_u
               8) i8x16_narrow_i16x8_u
              ((f = (f i16x8_shr_u 8) i8x16_narrow_i16x8_u (g i16x8_shr_u 8)) i16x8_shr_u
               8)) i16x8_shr_u
           8) i8x16_narrow_i16x8_u
          ((j = (j i16x8_shr_u 8) i8x16_narrow_i16x8_u (n i16x8_shr_u 8)) i16x8_shr_u
           8)) i16x8_shr_u
       8);
    (c + 64)[0]:simd@1 =
      ((g = (g v128_and e) i8x16_narrow_i16x8_u (j v128_and e)) i16x8_shr_u
       8) i8x16_narrow_i16x8_u
      ((i = 
          ((h = (h v128_and e) i8x16_narrow_i16x8_u (i v128_and e)) i16x8_shr_u
           8) i8x16_narrow_i16x8_u
          ((f = (l v128_and e) i8x16_narrow_i16x8_u (f v128_and e)) i16x8_shr_u
           8)) i16x8_shr_u
       8);
    (c + 48)[0]:simd@1 =
      ((f = (h v128_and e) i8x16_narrow_i16x8_u (f v128_and e)) i16x8_shr_u
       8) i8x16_narrow_i16x8_u
      ((h = (o v128_and e) i8x16_narrow_i16x8_u (k v128_and e)) i16x8_shr_u
       8);
    (c + 32)[0]:simd@1 =
      (p v128_and e) i8x16_narrow_i16x8_u (m v128_and e);
    (c + 16)[0]:simd@1 =
      (g v128_and e) i8x16_narrow_i16x8_u (i v128_and e);
    c[0] = (f v128_and e) i8x16_narrow_i16x8_u (h v128_and e);
    c = c + 96;
    a = a + 128;
    var u:int = b > 63;
    d = b + -32;
    b = d;
    if (u) continue L_c;
  }
  label B_a:
  if (d < 1) goto B_d;
  VP8LConvertBGRAToRGB_C(a, d, c);
  label B_d:
}

function ConvertBGRAToRGBA_SSE2(a:simd_ptr@1, b:int, c:simd_ptr@1) {
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var d:int;
  if (b >= 8) goto B_b;
  d = b;
  goto B_a;
  label B_b:
  loop L_c {
    var e:simd = (a + 16)[0]:simd@1;
    c[0] =
      ((f = a[0]) v128_and (g = V128)) v128_or
      SimdShuffleOp(i = SimdShuffleOp(f v128_and (h = V128), f = V128), i);
    (c + 16)[0]:simd@1 =
      (e v128_and g) v128_or
      SimdShuffleOp(e = SimdShuffleOp(e v128_and h, f), e);
    c = c + 32;
    a = a + 32;
    var j:int = b > 15;
    d = b + -8;
    b = d;
    if (j) continue L_c;
  }
  label B_a:
  if (d < 1) goto B_d;
  VP8LConvertBGRAToRGBA_C(a, d, c);
  label B_d:
}

function ConvertBGRAToRGBA4444_SSE2(a:simd_ptr@1, b:int, c:simd_ptr@1) {
  var e:simd;
  var f:simd;
  var g:simd;
  var d:int;
  if (b >= 8) goto B_b;
  d = b;
  goto B_a;
  label B_b:
  loop L_c {
    c[0] =
      SimdShuffleOp(
        e = 
          ((SimdShuffleOp(
              g = 
                SimdShuffleOp(
                  f = 
                    SimdShuffleOp(g = SimdShuffleOp(e = a[0], f = (a + 16)[0]:simd@1),
                                  e = SimdShuffleOp(e, f)),
                  e = SimdShuffleOp(g, e)),
              e = SimdShuffleOp(f, e)) i16x8_shr_u
            4) v128_and
           V128) v128_or
          (SimdShuffleOp(e, g) v128_and V128),
        SimdShuffleOp(V128, e));
    a = a + 32;
    c = c + 16;
    var h:int = b > 15;
    d = b + -8;
    b = d;
    if (h) continue L_c;
  }
  label B_a:
  if (d < 1) goto B_d;
  VP8LConvertBGRAToRGBA4444_C(a, d, c);
  label B_d:
}

function ConvertBGRAToRGB565_SSE2(a:simd_ptr@1, b:int, c:simd_ptr@1) {
  var e:simd;
  var f:simd;
  var g:simd;
  var d:int;
  if (b >= 8) goto B_b;
  d = b;
  goto B_a;
  label B_b:
  loop L_c {
    c[0] =
      SimdShuffleOp(
        (((f = 
             SimdShuffleOp(
               g = 
                 SimdShuffleOp(
                   f = 
                     SimdShuffleOp(g = SimdShuffleOp(e = a[0], f = (a + 16)[0]:simd@1),
                                   e = SimdShuffleOp(e, f)),
                   e = SimdShuffleOp(g, e)),
               e = SimdShuffleOp(f, e))) i16x8_shr_u
          5) v128_and
         V128) v128_or
        (e = SimdShuffleOp(e, g) v128_and V128),
        ((f i16x8_shl 3) v128_and V128) v128_or
        (SimdShuffleOp(V128, e) i16x8_shr_u 3));
    a = a + 32;
    c = c + 16;
    var h:int = b > 15;
    d = b + -8;
    b = d;
    if (h) continue L_c;
  }
  label B_a:
  if (d < 1) goto B_d;
  VP8LConvertBGRAToRGB565_C(a, d, c);
  label B_d:
}

function ConvertBGRAToBGR_SSE2(a:simd_ptr@1, b:int, c:int) {
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:int;
  var d:int;
  if (b >= 9) goto B_b;
  d = c;
  goto B_a;
  label B_b:
  var e:int = c + b * 3;
  loop L_c {
    var f:simd = (a + 16)[0]:simd@1;
    let t0, t1, t2, t3 = 
      SimdStoreLane(
        c,
        g = (((g = a[0]) i64x2_shr_u 8) v128_and (h = V128)) v128_or
            (g v128_and (i = V128))),
      SimdStoreLane(c, SimdShuffleOp(j = V128, g)),
      SimdStoreLane(
        c,
        f = ((f i64x2_shr_u 8) v128_and h) v128_or (f v128_and i)),
      SimdStoreLane(c, SimdShuffleOp(j, f));
    a = a + 32;
    b = b + -8;
    k = c + 50;
    c = d = c + 24;
    if (k <= e) continue L_c;
    t0;
    t1;
    t2;
    t3;
  }
  label B_a:
  if (b < 1) goto B_d;
  VP8LConvertBGRAToBGR_C(a, b, d);
  label B_d:
}

function WebPRescalerDspInitSSE2() {
  0[265046]:int = 229;
  0[265047]:int = 230;
  0[265048]:int = 231;
  0[265049]:int = 232;
}

function RescalerImportRowShrink_SSE2(a:int_ptr, b:int) {
  var c:int;
  var h:simd;
  var m:int;
  var l:simd;
  if (a[2] != 4) goto B_a;
  if (a[9] > (c = a[10]) << 7) goto B_a;
  var d:int = a[13];
  if (d < 1) goto B_b;
  var e:simd_ptr@1 = a[20];
  var f:int = e + (d << 4);
  var g:simd = i16x8_splat(c);
  var i:simd = i32x4_extend_low_i16x8_u(SimdShuffleOp(g, h));
  h = LoadSplat(a);
  var j:simd = i64x2_extend_low_i32x4_u(SimdShuffleOp(h, h));
  h = V128;
  d = 0;
  loop L_c {
    var k:simd = V128;
    d = a[9] + d;
    if (d >= 1) goto B_e;
    l = k;
    goto B_d;
    label B_e:
    loop L_f {
      h = h i16x8_add (l = SimdShuffleOp(LoadZero(b), V128));
      m = b + 4;
      b = m;
      d = d - c;
      if (d > 0) continue L_f;
    }
    b = m;
    label B_d:
    e[0] =
      SimdShuffleOp(h i16x8_mul g,
                    SimdShuffleOp(i32x4_extend_low_i16x8_u(h) i32x4_mul i,
                                  i32x4_extend_high_i16x8_u(h) i32x4_mul i)) i32x4_sub
      (h = 
         SimdShuffleOp(
           (h = i16x8_splat(0 - d)) i16x8_mul l,
           SimdShuffleOp(
             h i32x4_extmul_low_i16x8_u l,
             i32x4_extend_low_i16x8_u(h) i32x4_mul i32x4_extend_high_i16x8_u(l))));
    var n:simd = 
      (i64x2_extend_low_i32x4_u(SimdShuffleOp(h, h)) i64x2_mul j) i64x2_add
      (l = V128);
    h = 
      SimdShuffleOp(
        SimdShuffleOp(n, n),
        SimdShuffleOp(
          h = 
            (i64x2_extend_low_i32x4_u(SimdShuffleOp(h = h i64x2_shr_u 32, h)) i64x2_mul
             j) i64x2_add
            l,
          h)) i16x8_narrow_i32x4_s
      k;
    e = e + 16;
    if (e < f) continue L_c;
  }
  label B_b:
  return ;
  label B_a:
  WebPRescalerImportRowShrink_C(a, b);
}

function RescalerImportRowExpand_SSE2(a:int_ptr, b:int) {
  var f:ubyte_ptr;
  var g:int;
  var i:simd;
  var j:simd;
  var d:int;
  var c:int;
  var k:simd;
  c = a[11];
  if (c < 8) goto B_b;
  d = a[9];
  if (d < 32768) goto B_a;
  label B_b:
  WebPRescalerImportRowExpand_C(a, b);
  return ;
  label B_a:
  var e:simd_ptr@1 = a[20];
  var h:int = e + ((g = (f = a[2]) * a[13]) << 2);
  if (f != 4) goto B_d;
  e[0] =
    (j = SimdShuffleOp(j = SimdShuffleOp(LoadZero(b), i = V128),
                       SimdShuffleOp(i, j))) i32x4_dot_i16x8_s
    i32x4_splat(d);
  if (g < 5) goto B_c;
  c = b + 4;
  e = e + 16;
  b = d;
  loop L_e {
    b = b - a[10];
    if (b > -1) goto B_f;
    j = SimdShuffleOp(LoadZero(c), i);
    j = SimdShuffleOp(j, SimdShuffleOp(i, j));
    b = b + d;
    c = c + 4;
    label B_f:
    e[0] = j i32x4_dot_i16x8_s i32x4_splat(d - b << 16 | b);
    e = e + 16;
    if (e < h) continue L_e;
    goto B_c;
  }
  label B_d:
  let t0 = 
    SimdStoreLane(
      e,
      (j = SimdShuffleOp(LoadZero(b), k = V128)) i32x4_dot_i16x8_s
      SimdLaneOp(i = V128, d));
  if (g < 2) goto B_c;
  g = b + c + -8;
  c = 7;
  f = b + 7;
  e = e + 4;
  b = d;
  loop L_g {
    if ((b = b - a[10]) > -1) goto B_h;
    if (eqz(c = c + -1)) goto B_j;
    j = SimdShuffleOp(k, j);
    goto B_i;
    label B_j:
    if (f > g) goto B_k;
    c = 7;
    j = SimdShuffleOp(LoadZero(f), k);
    f = f + 7;
    goto B_i;
    label B_k:
    c = 1;
    j = SimdLaneOp(SimdShuffleOp(k, j), f[1]);
    f = f + 1;
    label B_i:
    b = b + d;
    label B_h:
    let t1 = 
      SimdStoreLane(e, j i32x4_dot_i16x8_s SimdLaneOp(i, d - b << 16 | b));
    if ((e = e + 4) < h) continue L_g;
    t1;
  }
  t0;
  label B_c:
}

function RescalerExportRowExpand_SSE2(a:int_ptr) {
  var e:byte_ptr;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:int;
  var j:int;
  var o:int;
  var q:long;
  var s:simd;
  var t:simd;
  var u:simd;
  var i:int;
  var b:uint_ptr = a + 16;
  var c:int = a[2] * a[13];
  var d:simd = V128;
  var f:simd = SimdLaneOp(SimdLaneOp(d, e = a[4]), e);
  var g:int = a[20];
  var h:int = a[17];
  e = a[6];
  if (e) goto B_b;
  i = 0;
  if (c < 8) goto B_c;
  f = i64x2_extend_low_i32x4_u(SimdShuffleOp(f, f));
  e = 0;
  j = g;
  loop L_d {
    let t0 = 
      SimdStoreLane(
        h + e,
        (k = 
           ((((i64x2_extend_low_i32x4_u(
                 SimdShuffleOp(k = (d = j[0]:simd@1) i64x2_shr_u 32, k)) i64x2_mul
               f) i64x2_add
              (k = V128)) v128_and
             (l = V128)) v128_or
            (((i64x2_extend_low_i32x4_u(SimdShuffleOp(d, d)) i64x2_mul f) i64x2_add
              k) i64x2_shr_u
             32)) i16x8_narrow_i32x4_s
           ((((i64x2_extend_low_i32x4_u(
                 SimdShuffleOp(m = (d = (j + 16)[0]:simd@1) i64x2_shr_u 32, m)) i64x2_mul
               f) i64x2_add
              k) v128_and
             l) v128_or
            (((i64x2_extend_low_i32x4_u(SimdShuffleOp(d, d)) i64x2_mul f) i64x2_add
              k) i64x2_shr_u
             32))) i8x16_narrow_i16x8_u
        k);
    j = j + 32;
    n = e + 16;
    e = i = e + 8;
    if (n <= c) continue L_d;
    t0;
  }
  label B_c:
  if (c <= i) goto B_a;
  n = c - i;
  if (n < 12) goto B_e;
  e = h + i;
  if (e < g + (c << 2) & g + (i << 2) < (j = h + c)) goto B_e;
  if (e < a + 20 & b < j) goto B_e;
  j = g + (i << 2);
  i = i + (n = n - (o = c & 3));
  f = i64x2_splat(b[0]);
  loop L_f {
    let t1 = 
      SimdStoreLane(
        e,
        v128_bitselect(
          V128,
          SimdShuffleOp(
            l = 
              ((f i64x2_mul i64x2_extend_low_i32x4_u(k = j[0]:simd@4)) i64x2_add
               (d = V128)) i64x2_shr_u
              32,
            k = 
              ((f i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(k, f))) i64x2_add
               d) i64x2_shr_u
              32),
          SimdShuffleOp(SimdShuffleOp(l, k) i32x4_gt_s V128, f)));
    e = e + 4;
    j = j + 16;
    if (n = n + -4) continue L_f;
    t1;
  }
  if (eqz(o)) goto B_a;
  label B_e:
  e = i + 1;
  if (eqz(c - i & 1)) goto B_g;
  (h + i)[0]:byte =
    select_if(-1,
              j = i32_wrap_i64(b[0] * g[i]:uint + 2147483648L >> 32L),
              j > 255);
  i = e;
  label B_g:
  if (c == e) goto B_a;
  e = h + i;
  n = c - i;
  j = g + (i << 2);
  loop L_h {
    e[0] =
      select_if(-1,
                c = i32_wrap_i64(b[0] * j[0]:uint + 2147483648L >> 32L),
                c > 255);
    (e + 1)[0]:byte =
      select_if(
        -1,
        c = i32_wrap_i64(b[0] * (j + 4)[0]:uint + 2147483648L >> 32L),
        c > 255);
    j = j + 8;
    e = e + 2;
    n = n + -2;
    if (n) continue L_h;
    goto B_a;
  }
  label B_b:
  var p:int = a[19];
  o = 0;
  var r:int = 
    0 - (e = i32_wrap_i64(q = (i64_extend_i32_u(0 - e) << 32L) / a[8]));
  if (c < 8) goto B_i;
  k = SimdLaneOp(SimdLaneOp(d, e), e);
  k = i64x2_extend_low_i32x4_u(SimdShuffleOp(k, k));
  d = SimdLaneOp(SimdLaneOp(d, r), r);
  d = i64x2_extend_low_i32x4_u(SimdShuffleOp(d, d));
  l = i64x2_extend_low_i32x4_u(SimdShuffleOp(f, f));
  e = 0;
  j = p;
  n = g;
  loop L_j {
    let t2 = 
      SimdStoreLane(
        h + e,
        (f = 
           ((((i64x2_extend_low_i32x4_u(
                 SimdShuffleOp(
                   t = 
                     (((i64x2_extend_low_i32x4_u(
                          SimdShuffleOp(f = (m = n[0]:simd@1) i64x2_shr_u 32, f)) i64x2_mul
                        d) i64x2_add
                       (i64x2_extend_low_i32x4_u(
                          SimdShuffleOp(f = (s = j[0]:simd@1) i64x2_shr_u 32, f)) i64x2_mul
                        k)) i64x2_add
                      (f = V128)) i64x2_shr_u
                     32,
                   t)) i64x2_mul
               l) i64x2_add
              f) v128_and
             (t = V128)) v128_or
            (((i64x2_extend_low_i32x4_u(
                 SimdShuffleOp(
                   m = 
                     (((i64x2_extend_low_i32x4_u(SimdShuffleOp(m, m)) i64x2_mul d) i64x2_add
                       (i64x2_extend_low_i32x4_u(SimdShuffleOp(s, s)) i64x2_mul k)) i64x2_add
                      f) i64x2_shr_u
                     32,
                   m)) i64x2_mul
               l) i64x2_add
              f) i64x2_shr_u
             32)) i16x8_narrow_i32x4_s
           ((((i64x2_extend_low_i32x4_u(
                 SimdShuffleOp(
                   u = 
                     (((i64x2_extend_low_i32x4_u(
                          SimdShuffleOp(s = (m = (n + 16)[0]:simd@1) i64x2_shr_u 32, s)) i64x2_mul
                        d) i64x2_add
                       (i64x2_extend_low_i32x4_u(
                          SimdShuffleOp(u = (s = (j + 16)[0]:simd@1) i64x2_shr_u 32, u)) i64x2_mul
                        k)) i64x2_add
                      f) i64x2_shr_u
                     32,
                   u)) i64x2_mul
               l) i64x2_add
              f) v128_and
             t) v128_or
            (((i64x2_extend_low_i32x4_u(
                 SimdShuffleOp(
                   m = 
                     (((i64x2_extend_low_i32x4_u(SimdShuffleOp(m, m)) i64x2_mul d) i64x2_add
                       (i64x2_extend_low_i32x4_u(SimdShuffleOp(s, s)) i64x2_mul k)) i64x2_add
                      f) i64x2_shr_u
                     32,
                   m)) i64x2_mul
               l) i64x2_add
              f) i64x2_shr_u
             32))) i8x16_narrow_i16x8_u
        f);
    j = j + 32;
    n = n + 32;
    i = e + 16;
    e = o = e + 8;
    if (i <= c) continue L_j;
    t2;
  }
  label B_i:
  if (c <= o) goto B_a;
  q = q & 4294967295L;
  var v:long = i64_extend_i32_u(r);
  i = c - o;
  if (i < 12) goto B_k;
  e = h + o;
  if (e < g + (n = c << 2) & g + (r = o << 2) < (j = h + c)) goto B_k;
  if (e < p + n & p + r < j) goto B_k;
  if (e < a + 20 & b < j) goto B_k;
  j = p + (n = o << 2);
  n = g + n;
  o = o + (i = i - (a = c & 3));
  k = i64x2_splat(q);
  d = i64x2_splat(v);
  l = i64x2_splat(b[0]);
  loop L_l {
    let t3 = 
      SimdStoreLane(
        e,
        v128_bitselect(
          V128,
          SimdShuffleOp(
            t = 
              ((((((d i64x2_mul i64x2_extend_low_i32x4_u(m = n[0]:simd@4)) i64x2_add
                   (k i64x2_mul i64x2_extend_low_i32x4_u(s = j[0]:simd@4))) i64x2_add
                  (f = V128)) i64x2_shr_u
                 32) i64x2_mul
                l) i64x2_add
               f) i64x2_shr_u
              32,
            f = 
              ((((((d i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(m, f))) i64x2_add
                   (k i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(s, f)))) i64x2_add
                  f) i64x2_shr_u
                 32) i64x2_mul
                l) i64x2_add
               f) i64x2_shr_u
              32),
          SimdShuffleOp(SimdShuffleOp(t, f) i32x4_gt_s V128, f)));
    e = e + 4;
    j = j + 16;
    n = n + 16;
    if (i = i + -4) continue L_l;
    t3;
  }
  if (eqz(a)) goto B_a;
  label B_k:
  e = h + o;
  c = c - o;
  j = g + (n = o << 2);
  n = p + n;
  loop L_m {
    e[0] =
      select_if(
        -1,
        i = i32_wrap_i64(
              (j[0]:uint * v + q * n[0]:uint + 2147483648L >> 32L) * b[0] +
              2147483648L >>
              32L),
        i > 255);
    j = j + 4;
    n = n + 4;
    e = e + 1;
    c = c + -1;
    if (c) continue L_m;
  }
  label B_a:
}

function RescalerExportRowShrink_SSE2(a:int_ptr) {
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var u:simd;
  var v:simd;
  var l:int;
  var x:int;
  var y:int;
  var t:simd_ptr@1;
  var m:int;
  var k:simd;
  var n:simd;
  var j:simd;
  var o:simd;
  var g:int;
  var f:int;
  var w:long;
  var b:int = a + 20;
  var c:int = a[2] * a[13];
  var d:int = a[19];
  var e:int = a[17];
  f = a[6] * a[4];
  if (eqz(f)) goto B_b;
  g = 0;
  var h:int = 0 - f;
  var i:int = a[20];
  if (c < 8) goto B_c;
  j = V128;
  k = SimdLaneOp(SimdLaneOp(j, h), h);
  k = i64x2_extend_low_i32x4_u(SimdShuffleOp(k, k));
  j = SimdLaneOp(SimdLaneOp(j, f = b[0]:int), f);
  j = i64x2_extend_low_i32x4_u(SimdShuffleOp(j, j));
  l = 0;
  m = i;
  f = d;
  loop L_d {
    n = (m + 16)[0]:simd@1;
    o = f[0]:simd@1;
    f[0]:simd@1 =
      ((r = 
          i64x2_extend_low_i32x4_u(
            SimdShuffleOp(q = (p = m[0]:simd@1) i64x2_shr_u 32, q)) i64x2_mul
          k) v128_and
       (q = V128)) v128_or
      (s = 
         (i64x2_extend_low_i32x4_u(SimdShuffleOp(p, p)) i64x2_mul k) i64x2_shr_u
         32);
    t = f + 16;
    p = t[0];
    t[0] =
      ((u = 
          i64x2_extend_low_i32x4_u(SimdShuffleOp(u = n i64x2_shr_u 32, u)) i64x2_mul
          k) v128_and
       q) v128_or
      (v = 
         (i64x2_extend_low_i32x4_u(SimdShuffleOp(n, n)) i64x2_mul k) i64x2_shr_u
         32);
    let t0 = 
      SimdStoreLane(
        e + l,
        (n = 
           ((((i64x2_extend_low_i32x4_u(
                 SimdShuffleOp(n = (o i64x2_shr_u 32) i64x2_sub (r i64x2_shr_u 32), n)) i64x2_mul
               j) i64x2_add
              (n = V128)) v128_and
             q) v128_or
            (((i64x2_extend_low_i32x4_u(SimdShuffleOp(o = o i64x2_sub s, o)) i64x2_mul
               j) i64x2_add
              n) i64x2_shr_u
             32)) i16x8_narrow_i32x4_s
           ((((i64x2_extend_low_i32x4_u(
                 SimdShuffleOp(o = (p i64x2_shr_u 32) i64x2_sub (u i64x2_shr_u 32), o)) i64x2_mul
               j) i64x2_add
              n) v128_and
             q) v128_or
            (((i64x2_extend_low_i32x4_u(SimdShuffleOp(q = p i64x2_sub v, q)) i64x2_mul
               j) i64x2_add
              n) i64x2_shr_u
             32))) i8x16_narrow_i16x8_u
        n);
    m = m + 32;
    f = f + 32;
    t = l + 16;
    l = g = l + 8;
    if (t <= c) continue L_d;
    t0;
  }
  label B_c:
  if (c <= g) goto B_a;
  w = i64_extend_i32_u(h);
  h = c - g;
  if (h < 16) goto B_e;
  l = e + g;
  if (
    l < (m = d + (x = c << 2)) & (t = d + (y = g << 2)) < (f = e + c)) goto B_e;
  if (l < (x = i + x) & (y = i + y) < f) goto B_e;
  if (l < (a = a + 24) & b < f) goto B_e;
  if (t < x & y < m) goto B_e;
  if (t < a & b < m) goto B_e;
  f = d + (m = g << 2);
  m = i + m;
  g = g + (t = h - (a = c & 3));
  k = i64x2_splat(w);
  j = i64x2_splat(b[0]:uint);
  loop L_f {
    n = f[0]:simd@4;
    f[0]:simd@4 =
      (q = 
         SimdShuffleOp(
           (k i64x2_mul i64x2_extend_low_i32x4_u(q = m[0]:simd@4)) i64x2_shr_u
           32,
           (k i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(q, k))) i64x2_shr_u
           32));
    let t1 = 
      SimdStoreLane(
        l,
        v128_bitselect(
          V128,
          SimdShuffleOp(
            o = 
              ((i64x2_extend_low_i32x4_u(n = n i32x4_sub q) i64x2_mul j) i64x2_add
               (q = V128)) i64x2_shr_u
              32,
            n = 
              ((i64x2_extend_low_i32x4_u(SimdShuffleOp(n, k)) i64x2_mul j) i64x2_add
               q) i64x2_shr_u
              32),
          SimdShuffleOp(SimdShuffleOp(o, n) i32x4_gt_s V128, k)));
    l = l + 4;
    f = f + 16;
    m = m + 16;
    if (t = t + -4) continue L_f;
    t1;
  }
  if (eqz(a)) goto B_a;
  label B_e:
  l = e + g;
  c = c - g;
  m = i + (f = g << 2);
  f = d + f;
  loop L_g {
    l[0]:byte =
      select_if(
        -1,
        e = 
          i32_wrap_i64(
            i64_extend_i32_u(f[0]:int - (t = i32_wrap_i64(m[0]:uint * w >> 32L))) *
            b[0]:uint +
            2147483648L >>
            32L),
        e > 255);
    f[0]:int = t;
    m = m + 4;
    f = f + 4;
    l = l + 1;
    c = c + -1;
    if (c) continue L_g;
    goto B_a;
  }
  label B_b:
  g = b[0]:int;
  t = 0;
  if (c < 8) goto B_h;
  k = SimdLaneOp(SimdLaneOp(V128, g), g);
  k = i64x2_extend_low_i32x4_u(SimdShuffleOp(k, k));
  l = 0;
  f = d;
  loop L_i {
    j = f[0]:simd@1;
    f[0]:simd@1 = (q = V128);
    m = f + 16;
    n = m[0]:simd@1;
    m[0]:simd@1 = q;
    let t2 = 
      SimdStoreLane(
        e + l,
        (j = 
           ((((i64x2_extend_low_i32x4_u(SimdShuffleOp(q = j i64x2_shr_u 32, q)) i64x2_mul
               k) i64x2_add
              (q = V128)) v128_and
             (o = V128)) v128_or
            (((i64x2_extend_low_i32x4_u(SimdShuffleOp(j, j)) i64x2_mul k) i64x2_add
              q) i64x2_shr_u
             32)) i16x8_narrow_i32x4_s
           ((((i64x2_extend_low_i32x4_u(SimdShuffleOp(j = n i64x2_shr_u 32, j)) i64x2_mul
               k) i64x2_add
              q) v128_and
             o) v128_or
            (((i64x2_extend_low_i32x4_u(SimdShuffleOp(n, n)) i64x2_mul k) i64x2_add
              q) i64x2_shr_u
             32))) i8x16_narrow_i16x8_u
        j);
    f = f + 32;
    m = l + 16;
    l = t = l + 8;
    if (m <= c) continue L_i;
    t2;
  }
  label B_h:
  if (c <= t) goto B_a;
  w = i64_extend_i32_u(g);
  m = c - t;
  if (m < 8) goto B_j;
  f = d + (t << 2);
  l = e + t;
  if (l >= d + (c << 2)) goto B_k;
  if (f < e + c) goto B_j;
  label B_k:
  t = t + (m = m - (g = c & 3));
  j = i64x2_splat(w);
  loop L_l {
    k = f[0]:simd@4;
    f[0]:simd@4 = V128;
    let t3 = 
      SimdStoreLane(
        l,
        v128_bitselect(
          V128,
          SimdShuffleOp(
            q = 
              ((j i64x2_mul i64x2_extend_low_i32x4_u(k)) i64x2_add (n = V128)) i64x2_shr_u
              32,
            k = 
              ((j i64x2_mul i64x2_extend_low_i32x4_u(SimdShuffleOp(k, k))) i64x2_add
               n) i64x2_shr_u
              32),
          SimdShuffleOp(SimdShuffleOp(q, k) i32x4_gt_s V128, k)));
    l = l + 4;
    f = f + 16;
    if (m = m + -4) continue L_l;
    t3;
  }
  if (eqz(g)) goto B_a;
  label B_j:
  f = t + 1;
  if (eqz(c - t & 1)) goto B_m;
  (e + t)[0]:byte =
    select_if(
      -1,
      m = i32_wrap_i64((l = d + (t << 2))[0]:uint * w + 2147483648L >> 32L),
      m > 255);
  l[0]:int = 0;
  t = f;
  label B_m:
  if (c == f) goto B_a;
  l = e + t;
  m = c - t;
  f = d + (t << 2);
  loop L_n {
    l[0]:byte =
      select_if(-1,
                c = i32_wrap_i64(f[0]:uint * w + 2147483648L >> 32L),
                c > 255);
    f[0]:int = 0;
    (l + 1)[0]:byte =
      select_if(
        -1,
        t = i32_wrap_i64((c = f + 4)[0]:uint * w + 2147483648L >> 32L),
        t > 255);
    c[0]:int = 0;
    f = f + 8;
    l = l + 2;
    m = m + -2;
    if (m) continue L_n;
  }
  label B_a:
}

function WebPInitUpsamplersSSE2() {
  1060208[8]:int = 233;
  1060208[7]:int = 234;
  1060208[3]:int = 233;
  1060208[1]:int = 234;
  1060208[9]:int = 235;
  1060208[4]:int = 235;
  1060208[2]:int = 236;
  0[265052]:int = 237;
  1060208[6]:int = 238;
  1060208[10]:int = 239;
  1060208[5]:int = 239;
}

function UpsampleBgraLinePair_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte, d:byte }, h:{ a:byte, b:byte, c:byte, d:byte }, i:int) {
  var r:int;
  var s:int;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var j:int = stack_pointer - 528;
  stack_pointer = j;
  var k:int = 0;
  memset(j + 64, 0, 463);
  var l:int = e[0];
  var m:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd } = 
    c[0];
  var n:simd_ptr@1 = f[0];
  var o:int = d[0];
  var p:int = a[0];
  g.d = 255;
  var q:int = 1;
  g.c =
    select_if(
      (s = (p = ((n = o + (r = (n + o >> 1) + 1) >> 1) * 26149 >> 8) +
                (o = p * 19077 >> 8)) +
           -14234) >>
      6,
      select_if(0, 255, p < 14234),
      s < 16384);
  g.a =
    select_if(
      (p = (l = ((m = m + (s = (l + m >> 1) + 1) >> 1) * 33050 >> 8) + o) +
           -17685) >>
      6,
      select_if(0, 255, l < 17685),
      p < 16384);
  g.b =
    select_if(
      (o = (m = o - (m * 6419 >> 8) + (n * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, m < -8708),
      o < 16384);
  if (eqz(b)) goto B_a;
  o = e[0];
  m = f[0];
  l = b[0];
  h.d = 255;
  h.c =
    select_if(
      (p = 
         (l = ((n = r + m >> 1) * 26149 >> 8) + (m = l * 19077 >> 8)) + -14234) >>
      6,
      select_if(0, 255, l < 14234),
      p < 16384);
  h.a =
    select_if(
      (p = (l = ((o = s + o >> 1) * 33050 >> 8) + m) + -17685) >> 6,
      select_if(0, 255, l < 17685),
      p < 16384);
  h.b =
    select_if(
      (o = (m = m - (o * 6419 >> 8) + (n * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, m < -8708),
      o < 16384);
  label B_a:
  s = j + 96;
  m = j + 64;
  if (i < 34) goto B_b;
  q = h + 4;
  l = g + 4;
  var t:int = b + 1;
  r = a + 1;
  var u:int = m + 96;
  var v:int = m + 64;
  o = 0;
  k = 0;
  loop L_c {
    m.f =
      SimdShuffleOp(
        ca = 
          (w = (n = e + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (p = c + k)[0]:simd@1) i8x16_avgr_u (y = n[1])) i8x16_avgr_u
                  (ba = w i8x16_avgr_u (aa = p[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  (w = V128))) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        fa = y i8x16_avgr_u
             (ba = (fa i8x16_avgr_u ba) i8x16_sub
                   (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    m.e = SimdShuffleOp(ca, fa);
    m.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
    m.a = SimdShuffleOp(ba, z);
    m.h =
      SimdShuffleOp(
        ca = 
          (fa = (n = f + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (p = d + k)[0]:simd@1) i8x16_avgr_u (y = n[1])) i8x16_avgr_u
                  (ba = fa i8x16_avgr_u (aa = p[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  w)) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        ba = y i8x16_avgr_u
             (w = (fa i8x16_avgr_u ba) i8x16_sub
                  (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    m.g = SimdShuffleOp(ca, ba);
    m.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
    m.c = SimdShuffleOp(w, z);
    VP8YuvToBgra32_SSE2(r + o, m, s, l);
    if (eqz(b)) goto B_d;
    VP8YuvToBgra32_SSE2(t + o, v, u, q);
    label B_d:
    q = q + 128;
    l = l + 128;
    k = k + 16;
    n = o + 66;
    p = o + 32;
    o = p;
    if (n <= i) continue L_c;
  }
  q = p + 1;
  label B_b:
  if (i < 2) goto B_e;
  memcpy(j + 32, c + k, l = (i + 1 >> 1) - (q >> 1));
  o = memcpy(j, e + k, l);
  c = memset(o + 32 + l, (e = o + 32 + (p = l + -1))[0], n = 17 - l);
  r = memset(o + l, (p = o + p)[0]:ubyte, n);
  m.f =
    SimdShuffleOp(
      ca = 
        (w = o[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = o[2]:simd) i8x16_avgr_u (y = o[1]:simd@1)) i8x16_avgr_u
                (ba = w i8x16_avgr_u (aa = o[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                (w = V128))) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      fa = y i8x16_avgr_u
           (ba = (fa i8x16_avgr_u ba) i8x16_sub
                 (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  m.e = SimdShuffleOp(ca, fa);
  m.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
  m.a = SimdShuffleOp(ba, z);
  memcpy(o + 32, d + k, l);
  k = memcpy(o, f + k, l);
  memset(c, e[0], n);
  memset(r, p[0]:ubyte, n);
  m.h =
    SimdShuffleOp(
      ca = 
        (fa = k[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = k[2]:simd) i8x16_avgr_u (y = k[1]:simd@1)) i8x16_avgr_u
                (ba = fa i8x16_avgr_u (aa = k[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                w)) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      ba = y i8x16_avgr_u
           (w = (fa i8x16_avgr_u ba) i8x16_sub
                (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  m.g = SimdShuffleOp(ca, ba);
  m.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
  m.c = SimdShuffleOp(w, z);
  l = memcpy(m + 384, a + q, o = i - q);
  k = m + 128;
  if (b) goto B_f;
  VP8YuvToBgra32_SSE2(l, m, s, k);
  memcpy(g + (q << 2), k, o << 2);
  goto B_e;
  label B_f:
  n = memcpy(m + 416, b + q, o);
  VP8YuvToBgra32_SSE2(l, m, s, k);
  VP8YuvToBgra32_SSE2(n, m + 64, m + 96, m = m + 256);
  memcpy(g + (l = q << 2), k, o = o << 2);
  memcpy(h + l, m, o);
  label B_e:
  stack_pointer = j + 528;
}

function UpsampleRgbaLinePair_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte, d:byte }, h:{ a:byte, b:byte, c:byte, d:byte }, i:int) {
  var r:int;
  var s:int;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var j:int = stack_pointer - 528;
  stack_pointer = j;
  var k:int = 0;
  memset(j + 64, 0, 463);
  var l:int = f[0];
  var m:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd } = 
    d[0];
  var n:simd_ptr@1 = e[0];
  var o:int = c[0];
  var p:int = a[0];
  g.d = 255;
  var q:int = 1;
  g.c =
    select_if(
      (s = (p = ((n = o + (r = (n + o >> 1) + 1) >> 1) * 33050 >> 8) +
                (o = p * 19077 >> 8)) +
           -17685) >>
      6,
      select_if(0, 255, p < 17685),
      s < 16384);
  g.a =
    select_if(
      (p = (l = ((m = m + (s = (l + m >> 1) + 1) >> 1) * 26149 >> 8) + o) +
           -14234) >>
      6,
      select_if(0, 255, l < 14234),
      p < 16384);
  g.b =
    select_if(
      (o = (m = o - (n * 6419 >> 8) + (m * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, m < -8708),
      o < 16384);
  if (eqz(b)) goto B_a;
  o = f[0];
  m = e[0];
  l = b[0];
  h.d = 255;
  h.c =
    select_if(
      (p = 
         (l = ((n = r + m >> 1) * 33050 >> 8) + (m = l * 19077 >> 8)) + -17685) >>
      6,
      select_if(0, 255, l < 17685),
      p < 16384);
  h.a =
    select_if(
      (p = (l = ((o = s + o >> 1) * 26149 >> 8) + m) + -14234) >> 6,
      select_if(0, 255, l < 14234),
      p < 16384);
  h.b =
    select_if(
      (o = (m = m - (n * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, m < -8708),
      o < 16384);
  label B_a:
  s = j + 96;
  m = j + 64;
  if (i < 34) goto B_b;
  q = h + 4;
  l = g + 4;
  var t:int = b + 1;
  r = a + 1;
  var u:int = m + 96;
  var v:int = m + 64;
  o = 0;
  k = 0;
  loop L_c {
    m.f =
      SimdShuffleOp(
        ca = 
          (w = (n = e + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (p = c + k)[0]:simd@1) i8x16_avgr_u (y = n[1])) i8x16_avgr_u
                  (ba = w i8x16_avgr_u (aa = p[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  (w = V128))) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        fa = y i8x16_avgr_u
             (ba = (fa i8x16_avgr_u ba) i8x16_sub
                   (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    m.e = SimdShuffleOp(ca, fa);
    m.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
    m.a = SimdShuffleOp(ba, z);
    m.h =
      SimdShuffleOp(
        ca = 
          (fa = (n = f + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (p = d + k)[0]:simd@1) i8x16_avgr_u (y = n[1])) i8x16_avgr_u
                  (ba = fa i8x16_avgr_u (aa = p[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  w)) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        ba = y i8x16_avgr_u
             (w = (fa i8x16_avgr_u ba) i8x16_sub
                  (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    m.g = SimdShuffleOp(ca, ba);
    m.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
    m.c = SimdShuffleOp(w, z);
    VP8YuvToRgba32_SSE2(r + o, m, s, l);
    if (eqz(b)) goto B_d;
    VP8YuvToRgba32_SSE2(t + o, v, u, q);
    label B_d:
    q = q + 128;
    l = l + 128;
    k = k + 16;
    n = o + 66;
    p = o + 32;
    o = p;
    if (n <= i) continue L_c;
  }
  q = p + 1;
  label B_b:
  if (i < 2) goto B_e;
  memcpy(j + 32, c + k, l = (i + 1 >> 1) - (q >> 1));
  o = memcpy(j, e + k, l);
  c = memset(o + 32 + l, (e = o + 32 + (p = l + -1))[0], n = 17 - l);
  r = memset(o + l, (p = o + p)[0]:ubyte, n);
  m.f =
    SimdShuffleOp(
      ca = 
        (w = o[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = o[2]:simd) i8x16_avgr_u (y = o[1]:simd@1)) i8x16_avgr_u
                (ba = w i8x16_avgr_u (aa = o[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                (w = V128))) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      fa = y i8x16_avgr_u
           (ba = (fa i8x16_avgr_u ba) i8x16_sub
                 (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  m.e = SimdShuffleOp(ca, fa);
  m.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
  m.a = SimdShuffleOp(ba, z);
  memcpy(o + 32, d + k, l);
  k = memcpy(o, f + k, l);
  memset(c, e[0], n);
  memset(r, p[0]:ubyte, n);
  m.h =
    SimdShuffleOp(
      ca = 
        (fa = k[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = k[2]:simd) i8x16_avgr_u (y = k[1]:simd@1)) i8x16_avgr_u
                (ba = fa i8x16_avgr_u (aa = k[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                w)) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      ba = y i8x16_avgr_u
           (w = (fa i8x16_avgr_u ba) i8x16_sub
                (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  m.g = SimdShuffleOp(ca, ba);
  m.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
  m.c = SimdShuffleOp(w, z);
  l = memcpy(m + 384, a + q, o = i - q);
  k = m + 128;
  if (b) goto B_f;
  VP8YuvToRgba32_SSE2(l, m, s, k);
  memcpy(g + (q << 2), k, o << 2);
  goto B_e;
  label B_f:
  n = memcpy(m + 416, b + q, o);
  VP8YuvToRgba32_SSE2(l, m, s, k);
  VP8YuvToRgba32_SSE2(n, m + 64, m + 96, m = m + 256);
  memcpy(g + (l = q << 2), k, o = o << 2);
  memcpy(h + l, m, o);
  label B_e:
  stack_pointer = j + 528;
}

function UpsampleArgbLinePair_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte, d:byte }, h:{ a:byte, b:byte, c:byte, d:byte }, i:int) {
  var r:int;
  var s:int;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var j:int = stack_pointer - 528;
  stack_pointer = j;
  var k:int = 0;
  memset(j + 64, 0, 463);
  var l:int = f[0];
  var m:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd } = 
    d[0];
  var n:simd_ptr@1 = e[0];
  var o:int = c[0];
  var p:int = a[0];
  g.a = 255;
  var q:int = 1;
  g.d =
    select_if(
      (s = (p = ((n = o + (r = (n + o >> 1) + 1) >> 1) * 33050 >> 8) +
                (o = p * 19077 >> 8)) +
           -17685) >>
      6,
      select_if(0, 255, p < 17685),
      s < 16384);
  g.b =
    select_if(
      (p = (l = ((m = m + (s = (l + m >> 1) + 1) >> 1) * 26149 >> 8) + o) +
           -14234) >>
      6,
      select_if(0, 255, l < 14234),
      p < 16384);
  g.c =
    select_if(
      (o = (m = o - (n * 6419 >> 8) + (m * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, m < -8708),
      o < 16384);
  if (eqz(b)) goto B_a;
  o = f[0];
  m = e[0];
  l = b[0];
  h.a = 255;
  h.d =
    select_if(
      (p = 
         (l = ((n = r + m >> 1) * 33050 >> 8) + (m = l * 19077 >> 8)) + -17685) >>
      6,
      select_if(0, 255, l < 17685),
      p < 16384);
  h.b =
    select_if(
      (p = (l = ((o = s + o >> 1) * 26149 >> 8) + m) + -14234) >> 6,
      select_if(0, 255, l < 14234),
      p < 16384);
  h.c =
    select_if(
      (o = (m = m - (n * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, m < -8708),
      o < 16384);
  label B_a:
  s = j + 96;
  m = j + 64;
  if (i < 34) goto B_b;
  q = h + 4;
  l = g + 4;
  var t:int = b + 1;
  r = a + 1;
  var u:int = m + 96;
  var v:int = m + 64;
  o = 0;
  k = 0;
  loop L_c {
    m.f =
      SimdShuffleOp(
        ca = 
          (w = (n = e + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (p = c + k)[0]:simd@1) i8x16_avgr_u (y = n[1])) i8x16_avgr_u
                  (ba = w i8x16_avgr_u (aa = p[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  (w = V128))) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        fa = y i8x16_avgr_u
             (ba = (fa i8x16_avgr_u ba) i8x16_sub
                   (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    m.e = SimdShuffleOp(ca, fa);
    m.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
    m.a = SimdShuffleOp(ba, z);
    m.h =
      SimdShuffleOp(
        ca = 
          (fa = (n = f + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (p = d + k)[0]:simd@1) i8x16_avgr_u (y = n[1])) i8x16_avgr_u
                  (ba = fa i8x16_avgr_u (aa = p[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  w)) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        ba = y i8x16_avgr_u
             (w = (fa i8x16_avgr_u ba) i8x16_sub
                  (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    m.g = SimdShuffleOp(ca, ba);
    m.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
    m.c = SimdShuffleOp(w, z);
    VP8YuvToArgb32_SSE2(r + o, m, s, l);
    if (eqz(b)) goto B_d;
    VP8YuvToArgb32_SSE2(t + o, v, u, q);
    label B_d:
    q = q + 128;
    l = l + 128;
    k = k + 16;
    n = o + 66;
    p = o + 32;
    o = p;
    if (n <= i) continue L_c;
  }
  q = p + 1;
  label B_b:
  if (i < 2) goto B_e;
  memcpy(j + 32, c + k, l = (i + 1 >> 1) - (q >> 1));
  o = memcpy(j, e + k, l);
  c = memset(o + 32 + l, (e = o + 32 + (p = l + -1))[0], n = 17 - l);
  r = memset(o + l, (p = o + p)[0]:ubyte, n);
  m.f =
    SimdShuffleOp(
      ca = 
        (w = o[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = o[2]:simd) i8x16_avgr_u (y = o[1]:simd@1)) i8x16_avgr_u
                (ba = w i8x16_avgr_u (aa = o[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                (w = V128))) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      fa = y i8x16_avgr_u
           (ba = (fa i8x16_avgr_u ba) i8x16_sub
                 (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  m.e = SimdShuffleOp(ca, fa);
  m.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
  m.a = SimdShuffleOp(ba, z);
  memcpy(o + 32, d + k, l);
  k = memcpy(o, f + k, l);
  memset(c, e[0], n);
  memset(r, p[0]:ubyte, n);
  m.h =
    SimdShuffleOp(
      ca = 
        (fa = k[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = k[2]:simd) i8x16_avgr_u (y = k[1]:simd@1)) i8x16_avgr_u
                (ba = fa i8x16_avgr_u (aa = k[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                w)) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      ba = y i8x16_avgr_u
           (w = (fa i8x16_avgr_u ba) i8x16_sub
                (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  m.g = SimdShuffleOp(ca, ba);
  m.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
  m.c = SimdShuffleOp(w, z);
  l = memcpy(m + 384, a + q, o = i - q);
  k = m + 128;
  if (b) goto B_f;
  VP8YuvToArgb32_SSE2(l, m, s, k);
  memcpy(g + (q << 2), k, o << 2);
  goto B_e;
  label B_f:
  n = memcpy(m + 416, b + q, o);
  VP8YuvToArgb32_SSE2(l, m, s, k);
  VP8YuvToArgb32_SSE2(n, m + 64, m + 96, m = m + 256);
  memcpy(g + (l = q << 2), k, o = o << 2);
  memcpy(h + l, m, o);
  label B_e:
  stack_pointer = j + 528;
}

function UpsampleBgrLinePair_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte }, h:{ a:byte, b:byte, c:byte }, i:int) {
  var o:int;
  var p:int;
  var q:simd_ptr@1;
  var r:int;
  var s:int;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var j:int = stack_pointer - 528;
  stack_pointer = j;
  var k:int = 0;
  memset(j + 64, 0, 463);
  var l:int = 1;
  var m:int = e[0];
  var n:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd } = 
    c[0];
  g.c =
    select_if(
      (s = 
         (r = 
            ((q = (p = (f[0] + (o = d[0]) >> 1) + 1) + o >> 1) * 26149 >> 8) +
            (o = a[0] * 19077 >> 8)) +
         -14234) >>
      6,
      select_if(0, 255, r < 14234),
      s < 16384);
  g.a =
    select_if(
      (r = (m = ((n = n + (s = (m + n >> 1) + 1) >> 1) * 33050 >> 8) + o) +
           -17685) >>
      6,
      select_if(0, 255, m < 17685),
      r < 16384);
  g.b =
    select_if(
      (o = (n = o - (n * 6419 >> 8) + (q * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      o < 16384);
  if (eqz(b)) goto B_a;
  o = e[0];
  h.c =
    select_if(
      (r = 
         (q = ((m = p + f[0] >> 1) * 26149 >> 8) + (n = b[0] * 19077 >> 8)) +
         -14234) >>
      6,
      select_if(0, 255, q < 14234),
      r < 16384);
  h.a =
    select_if(
      (r = (q = ((o = s + o >> 1) * 33050 >> 8) + n) + -17685) >> 6,
      select_if(0, 255, q < 17685),
      r < 16384);
  h.b =
    select_if(
      (o = (n = n - (o * 6419 >> 8) + (m * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      o < 16384);
  label B_a:
  s = j + 96;
  n = j + 64;
  if (i < 34) goto B_b;
  var t:int = b + 1;
  m = g + 3;
  l = h + 3;
  p = a + 1;
  var u:int = n + 96;
  var v:int = n + 64;
  o = 0;
  k = 0;
  loop L_c {
    n.f =
      SimdShuffleOp(
        ca = 
          (w = (q = e + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = c + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = w i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  (w = V128))) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        fa = y i8x16_avgr_u
             (ba = (fa i8x16_avgr_u ba) i8x16_sub
                   (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.e = SimdShuffleOp(ca, fa);
    n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
    n.a = SimdShuffleOp(ba, z);
    n.h =
      SimdShuffleOp(
        ca = 
          (fa = (q = f + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = d + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = fa i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  w)) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        ba = y i8x16_avgr_u
             (w = (fa i8x16_avgr_u ba) i8x16_sub
                  (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.g = SimdShuffleOp(ca, ba);
    n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
    n.c = SimdShuffleOp(w, z);
    VP8YuvToBgr32_SSE2(p + o, n, s, m);
    if (eqz(b)) goto B_d;
    VP8YuvToBgr32_SSE2(t + o, v, u, l);
    label B_d:
    m = m + 96;
    l = l + 96;
    k = k + 16;
    q = o + 66;
    r = o + 32;
    o = r;
    if (q <= i) continue L_c;
  }
  l = r + 1;
  label B_b:
  if (i < 2) goto B_e;
  memcpy(j + 32, c + k, m = (i + 1 >> 1) - (l >> 1));
  o = memcpy(j, e + k, m);
  c = memset(o + 32 + m, (e = o + 32 + (r = m + -1))[0], q = 17 - m);
  p = memset(o + m, (r = o + r)[0]:ubyte, q);
  n.f =
    SimdShuffleOp(
      ca = 
        (w = o[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = o[2]:simd) i8x16_avgr_u (y = o[1]:simd@1)) i8x16_avgr_u
                (ba = w i8x16_avgr_u (aa = o[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                (w = V128))) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      fa = y i8x16_avgr_u
           (ba = (fa i8x16_avgr_u ba) i8x16_sub
                 (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.e = SimdShuffleOp(ca, fa);
  n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
  n.a = SimdShuffleOp(ba, z);
  memcpy(o + 32, d + k, m);
  k = memcpy(o, f + k, m);
  memset(c, e[0], q);
  memset(p, r[0]:ubyte, q);
  n.h =
    SimdShuffleOp(
      ca = 
        (fa = k[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = k[2]:simd) i8x16_avgr_u (y = k[1]:simd@1)) i8x16_avgr_u
                (ba = fa i8x16_avgr_u (aa = k[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                w)) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      ba = y i8x16_avgr_u
           (w = (fa i8x16_avgr_u ba) i8x16_sub
                (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.g = SimdShuffleOp(ca, ba);
  n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
  n.c = SimdShuffleOp(w, z);
  m = memcpy(n + 384, a + l, o = i - l);
  k = n + 128;
  if (b) goto B_f;
  VP8YuvToBgr32_SSE2(m, n, s, k);
  memcpy(g + l * 3, k, o * 3);
  goto B_e;
  label B_f:
  q = memcpy(n + 416, b + l, o);
  VP8YuvToBgr32_SSE2(m, n, s, k);
  VP8YuvToBgr32_SSE2(q, n + 64, n + 96, n = n + 256);
  memcpy(g + (m = l * 3), k, o = o * 3);
  memcpy(h + m, n, o);
  label B_e:
  stack_pointer = j + 528;
}

function UpsampleRgbLinePair_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte }, h:{ a:byte, b:byte, c:byte }, i:int) {
  var o:int;
  var p:int;
  var q:simd_ptr@1;
  var r:int;
  var s:int;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var j:int = stack_pointer - 528;
  stack_pointer = j;
  var k:int = 0;
  memset(j + 64, 0, 463);
  var l:int = 1;
  var m:int = f[0];
  var n:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd } = 
    d[0];
  g.c =
    select_if(
      (s = 
         (r = 
            ((q = (p = (e[0] + (o = c[0]) >> 1) + 1) + o >> 1) * 33050 >> 8) +
            (o = a[0] * 19077 >> 8)) +
         -17685) >>
      6,
      select_if(0, 255, r < 17685),
      s < 16384);
  g.a =
    select_if(
      (r = (m = ((n = n + (s = (m + n >> 1) + 1) >> 1) * 26149 >> 8) + o) +
           -14234) >>
      6,
      select_if(0, 255, m < 14234),
      r < 16384);
  g.b =
    select_if(
      (o = (n = o - (q * 6419 >> 8) + (n * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      o < 16384);
  if (eqz(b)) goto B_a;
  o = f[0];
  h.c =
    select_if(
      (r = 
         (q = ((m = p + e[0] >> 1) * 33050 >> 8) + (n = b[0] * 19077 >> 8)) +
         -17685) >>
      6,
      select_if(0, 255, q < 17685),
      r < 16384);
  h.a =
    select_if(
      (r = (q = ((o = s + o >> 1) * 26149 >> 8) + n) + -14234) >> 6,
      select_if(0, 255, q < 14234),
      r < 16384);
  h.b =
    select_if(
      (o = (n = n - (m * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      o < 16384);
  label B_a:
  s = j + 96;
  n = j + 64;
  if (i < 34) goto B_b;
  var t:int = b + 1;
  m = g + 3;
  l = h + 3;
  p = a + 1;
  var u:int = n + 96;
  var v:int = n + 64;
  o = 0;
  k = 0;
  loop L_c {
    n.f =
      SimdShuffleOp(
        ca = 
          (w = (q = e + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = c + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = w i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  (w = V128))) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        fa = y i8x16_avgr_u
             (ba = (fa i8x16_avgr_u ba) i8x16_sub
                   (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.e = SimdShuffleOp(ca, fa);
    n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
    n.a = SimdShuffleOp(ba, z);
    n.h =
      SimdShuffleOp(
        ca = 
          (fa = (q = f + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = d + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = fa i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  w)) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        ba = y i8x16_avgr_u
             (w = (fa i8x16_avgr_u ba) i8x16_sub
                  (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.g = SimdShuffleOp(ca, ba);
    n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
    n.c = SimdShuffleOp(w, z);
    VP8YuvToRgb32_SSE2(p + o, n, s, m);
    if (eqz(b)) goto B_d;
    VP8YuvToRgb32_SSE2(t + o, v, u, l);
    label B_d:
    m = m + 96;
    l = l + 96;
    k = k + 16;
    q = o + 66;
    r = o + 32;
    o = r;
    if (q <= i) continue L_c;
  }
  l = r + 1;
  label B_b:
  if (i < 2) goto B_e;
  memcpy(j + 32, c + k, m = (i + 1 >> 1) - (l >> 1));
  o = memcpy(j, e + k, m);
  c = memset(o + 32 + m, (e = o + 32 + (r = m + -1))[0], q = 17 - m);
  p = memset(o + m, (r = o + r)[0]:ubyte, q);
  n.f =
    SimdShuffleOp(
      ca = 
        (w = o[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = o[2]:simd) i8x16_avgr_u (y = o[1]:simd@1)) i8x16_avgr_u
                (ba = w i8x16_avgr_u (aa = o[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                (w = V128))) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      fa = y i8x16_avgr_u
           (ba = (fa i8x16_avgr_u ba) i8x16_sub
                 (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.e = SimdShuffleOp(ca, fa);
  n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
  n.a = SimdShuffleOp(ba, z);
  memcpy(o + 32, d + k, m);
  k = memcpy(o, f + k, m);
  memset(c, e[0], q);
  memset(p, r[0]:ubyte, q);
  n.h =
    SimdShuffleOp(
      ca = 
        (fa = k[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = k[2]:simd) i8x16_avgr_u (y = k[1]:simd@1)) i8x16_avgr_u
                (ba = fa i8x16_avgr_u (aa = k[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                w)) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      ba = y i8x16_avgr_u
           (w = (fa i8x16_avgr_u ba) i8x16_sub
                (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.g = SimdShuffleOp(ca, ba);
  n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
  n.c = SimdShuffleOp(w, z);
  m = memcpy(n + 384, a + l, o = i - l);
  k = n + 128;
  if (b) goto B_f;
  VP8YuvToRgb32_SSE2(m, n, s, k);
  memcpy(g + l * 3, k, o * 3);
  goto B_e;
  label B_f:
  q = memcpy(n + 416, b + l, o);
  VP8YuvToRgb32_SSE2(m, n, s, k);
  VP8YuvToRgb32_SSE2(q, n + 64, n + 96, n = n + 256);
  memcpy(g + (m = l * 3), k, o = o * 3);
  memcpy(h + m, n, o);
  label B_e:
  stack_pointer = j + 528;
}

function UpsampleRgb565LinePair_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte }, h:{ a:byte, b:byte }, i:int) {
  var m:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd }
  var n:int;
  var o:int;
  var p:int;
  var q:simd_ptr@1;
  var r:int;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var t:int;
  var j:int = stack_pointer - 528;
  stack_pointer = j;
  var k:int = 0;
  memset(j + 64, 0, 463);
  var l:int = 1;
  g.a =
    (select_if(
       (q = 
          (p = 
             ((o = (n = (f[0] + (m = d[0]) >> 1) + 1) + m >> 1) * 26149 >> 8) +
             (m = a[0] * 19077 >> 8)) +
          -14234) >>
       6,
       select_if(0, 248, p < 14234),
       q < 16384) &
     248) |
    (o = 
       select_if(
         (q = 
            (o = m -
                 ((p = (r = (e[0] + (p = c[0]) >> 1) + 1) + p >> 1) * 6419 >> 8) +
                 (o * 13320 >> 8)) +
            8708) >>
         6,
         select_if(0, 255, o < -8708),
         q < 16384)) >>
    5;
  g.b =
    (o << 3 & 224) |
    select_if((o = (m = (p * 33050 >> 8) + m) + -17685) >> 9,
              select_if(0, 31, m < 17685),
              o < 16384);
  if (eqz(b)) goto B_a;
  h.a =
    (select_if(
       (q = 
          (p = ((o = n + f[0] >> 1) * 26149 >> 8) + (m = b[0] * 19077 >> 8)) +
          -14234) >>
       6,
       select_if(0, 248, p < 14234),
       q < 16384) &
     248) |
    (o = 
       select_if(
         (q = 
            (o = m - ((p = r + e[0] >> 1) * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >>
         6,
         select_if(0, 255, o < -8708),
         q < 16384)) >>
    5;
  h.b =
    (o << 3 & 224) |
    select_if((o = (m = (p * 33050 >> 8) + m) + -17685) >> 9,
              select_if(0, 31, m < 17685),
              o < 16384);
  label B_a:
  r = j + 96;
  m = j + 64;
  if (i < 34) goto B_b;
  l = h + 2;
  p = g + 2;
  var s:int = b + 1;
  t = a + 1;
  var u:int = m + 96;
  var v:int = m + 64;
  o = 0;
  k = 0;
  loop L_c {
    m.f =
      SimdShuffleOp(
        ca = 
          (w = (q = e + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (n = c + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = w i8x16_avgr_u (aa = n[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  (w = V128))) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        fa = y i8x16_avgr_u
             (ba = (fa i8x16_avgr_u ba) i8x16_sub
                   (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    m.e = SimdShuffleOp(ca, fa);
    m.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
    m.a = SimdShuffleOp(ba, z);
    m.h =
      SimdShuffleOp(
        ca = 
          (fa = (q = f + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (n = d + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = fa i8x16_avgr_u (aa = n[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  w)) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        ba = y i8x16_avgr_u
             (w = (fa i8x16_avgr_u ba) i8x16_sub
                  (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    m.g = SimdShuffleOp(ca, ba);
    m.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
    m.c = SimdShuffleOp(w, z);
    VP8YuvToRgb56532_SSE2(t + o, m, r, p);
    if (eqz(b)) goto B_d;
    VP8YuvToRgb56532_SSE2(s + o, v, u, l);
    label B_d:
    l = l + 64;
    p = p + 64;
    k = k + 16;
    q = o + 66;
    n = o + 32;
    o = n;
    if (q <= i) continue L_c;
  }
  l = n + 1;
  label B_b:
  if (i < 2) goto B_e;
  memcpy(j + 32, c + k, p = (i + 1 >> 1) - (l >> 1));
  o = memcpy(j, e + k, p);
  c = memset(o + 32 + p, (e = o + 32 + (n = p + -1))[0], q = 17 - p);
  t = memset(o + p, (n = o + n)[0]:ubyte, q);
  m.f =
    SimdShuffleOp(
      ca = 
        (w = o[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = o[2]:simd) i8x16_avgr_u (y = o[1]:simd@1)) i8x16_avgr_u
                (ba = w i8x16_avgr_u (aa = o[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                (w = V128))) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      fa = y i8x16_avgr_u
           (ba = (fa i8x16_avgr_u ba) i8x16_sub
                 (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  m.e = SimdShuffleOp(ca, fa);
  m.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
  m.a = SimdShuffleOp(ba, z);
  memcpy(o + 32, d + k, p);
  k = memcpy(o, f + k, p);
  memset(c, e[0], q);
  memset(t, n[0]:ubyte, q);
  m.h =
    SimdShuffleOp(
      ca = 
        (fa = k[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = k[2]:simd) i8x16_avgr_u (y = k[1]:simd@1)) i8x16_avgr_u
                (ba = fa i8x16_avgr_u (aa = k[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                w)) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      ba = y i8x16_avgr_u
           (w = (fa i8x16_avgr_u ba) i8x16_sub
                (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  m.g = SimdShuffleOp(ca, ba);
  m.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
  m.c = SimdShuffleOp(w, z);
  p = memcpy(m + 384, a + l, o = i - l);
  k = m + 128;
  if (b) goto B_f;
  VP8YuvToRgb56532_SSE2(p, m, r, k);
  memcpy(g + (l << 1), k, o << 1);
  goto B_e;
  label B_f:
  q = memcpy(m + 416, b + l, o);
  VP8YuvToRgb56532_SSE2(p, m, r, k);
  VP8YuvToRgb56532_SSE2(q, m + 64, m + 96, m = m + 256);
  memcpy(g + (p = l << 1), k, o = o << 1);
  memcpy(h + p, m, o);
  label B_e:
  stack_pointer = j + 528;
}

function UpsampleRgba4444LinePair_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte }, h:{ a:byte, b:byte }, i:int) {
  var o:int;
  var p:int;
  var q:simd_ptr@1;
  var r:int;
  var s:int;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var j:int = stack_pointer - 528;
  stack_pointer = j;
  var k:int = 0;
  memset(j + 64, 0, 463);
  var l:int = 1;
  var m:int = f[0];
  var n:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd } = 
    d[0];
  g.b =
    select_if(
      (s = 
         (r = 
            ((q = (p = (e[0] + (o = c[0]) >> 1) + 1) + o >> 1) * 33050 >> 8) +
            (o = a[0] * 19077 >> 8)) +
         -17685) >>
      6,
      select_if(0, 240, r < 17685),
      s < 16384) |
    15;
  g.a =
    (select_if(
       (r = (m = ((n = n + (s = (m + n >> 1) + 1) >> 1) * 26149 >> 8) + o) +
            -14234) >>
       6,
       select_if(0, 240, m < 14234),
       r < 16384) &
     240) |
    select_if(
      (o = (n = o - (q * 6419 >> 8) + (n * 13320 >> 8)) + 8708) >> 10,
      select_if(0, 15, n < -8708),
      o < 16384);
  if (eqz(b)) goto B_a;
  o = f[0];
  h.b =
    select_if(
      (r = 
         (q = ((m = p + e[0] >> 1) * 33050 >> 8) + (n = b[0] * 19077 >> 8)) +
         -17685) >>
      6,
      select_if(0, 240, q < 17685),
      r < 16384) |
    15;
  h.a =
    (select_if(
       (r = (q = ((o = s + o >> 1) * 26149 >> 8) + n) + -14234) >> 6,
       select_if(0, 240, q < 14234),
       r < 16384) &
     240) |
    select_if(
      (o = (n = n - (m * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >> 10,
      select_if(0, 15, n < -8708),
      o < 16384);
  label B_a:
  s = j + 96;
  n = j + 64;
  if (i < 34) goto B_b;
  l = h + 2;
  m = g + 2;
  var t:int = b + 1;
  p = a + 1;
  var u:int = n + 96;
  var v:int = n + 64;
  o = 0;
  k = 0;
  loop L_c {
    n.f =
      SimdShuffleOp(
        ca = 
          (w = (q = e + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = c + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = w i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  (w = V128))) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        fa = y i8x16_avgr_u
             (ba = (fa i8x16_avgr_u ba) i8x16_sub
                   (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.e = SimdShuffleOp(ca, fa);
    n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
    n.a = SimdShuffleOp(ba, z);
    n.h =
      SimdShuffleOp(
        ca = 
          (fa = (q = f + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = d + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = fa i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  w)) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        ba = y i8x16_avgr_u
             (w = (fa i8x16_avgr_u ba) i8x16_sub
                  (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.g = SimdShuffleOp(ca, ba);
    n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
    n.c = SimdShuffleOp(w, z);
    VP8YuvToRgba444432_SSE2(p + o, n, s, m);
    if (eqz(b)) goto B_d;
    VP8YuvToRgba444432_SSE2(t + o, v, u, l);
    label B_d:
    l = l + 64;
    m = m + 64;
    k = k + 16;
    q = o + 66;
    r = o + 32;
    o = r;
    if (q <= i) continue L_c;
  }
  l = r + 1;
  label B_b:
  if (i < 2) goto B_e;
  memcpy(j + 32, c + k, m = (i + 1 >> 1) - (l >> 1));
  o = memcpy(j, e + k, m);
  c = memset(o + 32 + m, (e = o + 32 + (r = m + -1))[0], q = 17 - m);
  p = memset(o + m, (r = o + r)[0]:ubyte, q);
  n.f =
    SimdShuffleOp(
      ca = 
        (w = o[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = o[2]:simd) i8x16_avgr_u (y = o[1]:simd@1)) i8x16_avgr_u
                (ba = w i8x16_avgr_u (aa = o[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                (w = V128))) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      fa = y i8x16_avgr_u
           (ba = (fa i8x16_avgr_u ba) i8x16_sub
                 (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.e = SimdShuffleOp(ca, fa);
  n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
  n.a = SimdShuffleOp(ba, z);
  memcpy(o + 32, d + k, m);
  k = memcpy(o, f + k, m);
  memset(c, e[0], q);
  memset(p, r[0]:ubyte, q);
  n.h =
    SimdShuffleOp(
      ca = 
        (fa = k[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = k[2]:simd) i8x16_avgr_u (y = k[1]:simd@1)) i8x16_avgr_u
                (ba = fa i8x16_avgr_u (aa = k[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                w)) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      ba = y i8x16_avgr_u
           (w = (fa i8x16_avgr_u ba) i8x16_sub
                (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.g = SimdShuffleOp(ca, ba);
  n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
  n.c = SimdShuffleOp(w, z);
  m = memcpy(n + 384, a + l, o = i - l);
  k = n + 128;
  if (b) goto B_f;
  VP8YuvToRgba444432_SSE2(m, n, s, k);
  memcpy(g + (l << 1), k, o << 1);
  goto B_e;
  label B_f:
  q = memcpy(n + 416, b + l, o);
  VP8YuvToRgba444432_SSE2(m, n, s, k);
  VP8YuvToRgba444432_SSE2(q, n + 64, n + 96, n = n + 256);
  memcpy(g + (m = l << 1), k, o = o << 1);
  memcpy(h + m, n, o);
  label B_e:
  stack_pointer = j + 528;
}

function WebPInitYUV444ConvertersSSE2() {
  1060272[8]:int = 240;
  1060272[7]:int = 241;
  1060272[3]:int = 240;
  1060272[1]:int = 241;
  1060272[10]:int = 242;
  1060272[9]:int = 243;
  1060272[6]:int = 244;
  1060272[5]:int = 242;
  1060272[4]:int = 243;
  1060272[2]:int = 245;
  0[265068]:int = 246;
}

function Yuv444ToBgra_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var f:int = 0;
  var g:int = e & -32;
  if (g < 1) goto B_a;
  var h:int = d;
  loop L_b {
    VP8YuvToBgra32_SSE2(a + f, b + f, c + f, h);
    h = h + 128;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (e <= f) goto B_c;
  WebPYuv444ToBgra_C(a + f, b + f, c + f, d + (f << 2), e - f);
  label B_c:
}

function Yuv444ToRgba_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var f:int = 0;
  var g:int = e & -32;
  if (g < 1) goto B_a;
  var h:int = d;
  loop L_b {
    VP8YuvToRgba32_SSE2(a + f, b + f, c + f, h);
    h = h + 128;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (e <= f) goto B_c;
  WebPYuv444ToRgba_C(a + f, b + f, c + f, d + (f << 2), e - f);
  label B_c:
}

function Yuv444ToRgba4444_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var f:int = 0;
  var g:int = e & -32;
  if (g < 1) goto B_a;
  var h:int = d;
  loop L_b {
    VP8YuvToRgba444432_SSE2(a + f, b + f, c + f, h);
    h = h + 64;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (e <= f) goto B_c;
  WebPYuv444ToRgba4444_C(a + f, b + f, c + f, d + (f << 1), e - f);
  label B_c:
}

function Yuv444ToArgb_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var f:int = 0;
  var g:int = e & -32;
  if (g < 1) goto B_a;
  var h:int = d;
  loop L_b {
    VP8YuvToArgb32_SSE2(a + f, b + f, c + f, h);
    h = h + 128;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (e <= f) goto B_c;
  WebPYuv444ToArgb_C(a + f, b + f, c + f, d + (f << 2), e - f);
  label B_c:
}

function Yuv444ToRgb565_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var f:int = 0;
  var g:int = e & -32;
  if (g < 1) goto B_a;
  var h:int = d;
  loop L_b {
    VP8YuvToRgb56532_SSE2(a + f, b + f, c + f, h);
    h = h + 64;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (e <= f) goto B_c;
  WebPYuv444ToRgb565_C(a + f, b + f, c + f, d + (f << 1), e - f);
  label B_c:
}

function Yuv444ToBgr_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var f:int = 0;
  var g:int = e & -32;
  if (g < 1) goto B_a;
  var h:int = d;
  loop L_b {
    VP8YuvToBgr32_SSE2(a + f, b + f, c + f, h);
    h = h + 96;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (e <= f) goto B_c;
  WebPYuv444ToBgr_C(a + f, b + f, c + f, d + f * 3, e - f);
  label B_c:
}

function Yuv444ToRgb_SSE2(a:int, b:int, c:int, d:int, e:int) {
  var f:int = 0;
  var g:int = e & -32;
  if (g < 1) goto B_a;
  var h:int = d;
  loop L_b {
    VP8YuvToRgb32_SSE2(a + f, b + f, c + f, h);
    h = h + 96;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (e <= f) goto B_c;
  WebPYuv444ToRgb_C(a + f, b + f, c + f, d + f * 3, e - f);
  label B_c:
}

function VP8YuvToRgba32_SSE2(a:int, b:int, c:int, d:simd_ptr@1) {
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var e:int = 0;
  loop L_a {
    d[16] =
      SimdShuffleOp(
        g = 
          SimdShuffleOp(
            k = 
              ((((g = SimdShuffleOp(
                        i32x4_extend_low_i16x8_u(
                          g = SimdShuffleOp(f = V128, LoadZero(a + e))) i32x4_mul
                        (h = V128),
                        i32x4_extend_high_i16x8_u(g) i32x4_mul h)) i16x8_add
                 SimdShuffleOp(
                   (i = i32x4_extend_low_i16x8_u(h = SimdShuffleOp(f, LoadZero(c + e)))) i32x4_mul
                   (j = V128),
                   (h = i32x4_extend_high_i16x8_u(h)) i32x4_mul j)) i16x8_add
                V128) i16x8_shr_s
               6) i8x16_narrow_i16x8_u
              (((SimdShuffleOp(
                   (j = i32x4_extend_low_i16x8_u(f = SimdShuffleOp(f, LoadZero(b + e)))) i32x4_mul
                   (k = V128),
                   (f = i32x4_extend_high_i16x8_u(f)) i32x4_mul k) i16x8_add_sat_u
                 g) i16x8_sub_sat_u
                V128) i16x8_shr_u
               6),
            f = 
              (((g i16x8_sub
                 (SimdShuffleOp(j i32x4_mul (l = V128), f i32x4_mul l) i16x8_add
                  SimdShuffleOp(i i32x4_mul (f = V128), h i32x4_mul f))) i16x8_add
                V128) i16x8_shr_s
               6) i8x16_narrow_i16x8_u
              V128),
        f = SimdShuffleOp(k, f));
    d[0] = SimdShuffleOp(g, f);
    d = d + 32;
    var m:int = e < 24;
    e = e + 8;
    if (m) continue L_a;
  }
}

function VP8YuvToBgra32_SSE2(a:int, b:int, c:int, d:simd_ptr@1) {
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var e:int = 0;
  loop L_a {
    d[16] =
      SimdShuffleOp(
        g = 
          SimdShuffleOp(
            k = 
              (((SimdShuffleOp(
                   (h = i32x4_extend_low_i16x8_u(
                          g = SimdShuffleOp(f = V128, LoadZero(b + e)))) i32x4_mul
                   (i = V128),
                   (j = i32x4_extend_high_i16x8_u(g)) i32x4_mul i) i16x8_add_sat_u
                 (g = 
                    SimdShuffleOp(
                      i32x4_extend_low_i16x8_u(g = SimdShuffleOp(f, LoadZero(a + e))) i32x4_mul
                      (i = V128),
                      i32x4_extend_high_i16x8_u(g) i32x4_mul i))) i16x8_sub_sat_u
                V128) i16x8_shr_u
               6) i8x16_narrow_i16x8_u
              (((g i16x8_add
                 SimdShuffleOp(
                   (i = i32x4_extend_low_i16x8_u(f = SimdShuffleOp(f, LoadZero(c + e)))) i32x4_mul
                   (k = V128),
                   (f = i32x4_extend_high_i16x8_u(f)) i32x4_mul k)) i16x8_add
                V128) i16x8_shr_s
               6),
            f = 
              (((g i16x8_sub
                 (SimdShuffleOp(h i32x4_mul (l = V128), j i32x4_mul l) i16x8_add
                  SimdShuffleOp(i i32x4_mul (h = V128), f i32x4_mul h))) i16x8_add
                V128) i16x8_shr_s
               6) i8x16_narrow_i16x8_u
              V128),
        f = SimdShuffleOp(k, f));
    d[0] = SimdShuffleOp(g, f);
    d = d + 32;
    var m:int = e < 24;
    e = e + 8;
    if (m) continue L_a;
  }
}

function VP8YuvToArgb32_SSE2(a:int, b:int, c:int, d:simd_ptr@1) {
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var e:int = 0;
  loop L_a {
    d[16] =
      SimdShuffleOp(
        g = 
          SimdShuffleOp(
            k = 
              V128 i8x16_narrow_i16x8_u
              ((((g = SimdShuffleOp(
                        i32x4_extend_low_i16x8_u(
                          g = SimdShuffleOp(f = V128, LoadZero(a + e))) i32x4_mul
                        (h = V128),
                        i32x4_extend_high_i16x8_u(g) i32x4_mul h)) i16x8_sub
                 (SimdShuffleOp(
                    (i = i32x4_extend_low_i16x8_u(h = SimdShuffleOp(f, LoadZero(b + e)))) i32x4_mul
                    (j = V128),
                    (h = i32x4_extend_high_i16x8_u(h)) i32x4_mul j) i16x8_add
                  SimdShuffleOp(
                    (j = i32x4_extend_low_i16x8_u(f = SimdShuffleOp(f, LoadZero(c + e)))) i32x4_mul
                    (k = V128),
                    (f = i32x4_extend_high_i16x8_u(f)) i32x4_mul k))) i16x8_add
                V128) i16x8_shr_s
               6),
            f = 
              (((g i16x8_add SimdShuffleOp(j i32x4_mul (l = V128), f i32x4_mul l)) i16x8_add
                V128) i16x8_shr_s
               6) i8x16_narrow_i16x8_u
              (((SimdShuffleOp(i i32x4_mul (f = V128), h i32x4_mul f) i16x8_add_sat_u
                 g) i16x8_sub_sat_u
                V128) i16x8_shr_u
               6)),
        f = SimdShuffleOp(k, f));
    d[0] = SimdShuffleOp(g, f);
    d = d + 32;
    var m:int = e < 24;
    e = e + 8;
    if (m) continue L_a;
  }
}

function VP8YuvToRgba444432_SSE2(a:int, b:int, c:int, d:simd_ptr@1) {
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var e:int = 0;
  loop L_a {
    d[0] =
      ((SimdShuffleOp(
          h = 
            ((((g = SimdShuffleOp(
                      i32x4_extend_low_i16x8_u(
                        g = SimdShuffleOp(f = V128, LoadZero(a + e))) i32x4_mul
                      (h = V128),
                      i32x4_extend_high_i16x8_u(g) i32x4_mul h)) i16x8_add
               SimdShuffleOp(
                 (i = i32x4_extend_low_i16x8_u(h = SimdShuffleOp(f, LoadZero(c + e)))) i32x4_mul
                 (j = V128),
                 (h = i32x4_extend_high_i16x8_u(h)) i32x4_mul j)) i16x8_add
              V128) i16x8_shr_s
             6) i8x16_narrow_i16x8_u
            (((g i16x8_sub
               (SimdShuffleOp(
                  (j = i32x4_extend_low_i16x8_u(f = SimdShuffleOp(f, LoadZero(b + e)))) i32x4_mul
                  (k = V128),
                  (f = i32x4_extend_high_i16x8_u(f)) i32x4_mul k) i16x8_add
                SimdShuffleOp(i i32x4_mul (k = V128), h i32x4_mul k))) i16x8_add
              V128) i16x8_shr_s
             6),
          f = 
            (((SimdShuffleOp(j i32x4_mul (i = V128), f i32x4_mul i) i16x8_add_sat_u
               g) i16x8_sub_sat_u
              V128) i16x8_shr_u
             6) i8x16_narrow_i16x8_u
            V128) i16x8_shr_u
        4) v128_and
       V128) v128_or
      (SimdShuffleOp(h, f) v128_and V128);
    d = d + 16;
    var l:int = e < 24;
    e = e + 8;
    if (l) continue L_a;
  }
}

function VP8YuvToRgb56532_SSE2(a:int, b:int, c:int, d:simd_ptr@1) {
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var e:int = 0;
  loop L_a {
    d[0] =
      SimdShuffleOp(
        (((k = 
             (k = 
                (((g = SimdShuffleOp(
                         i32x4_extend_low_i16x8_u(
                           g = SimdShuffleOp(f = V128, LoadZero(a + e))) i32x4_mul
                         (h = V128),
                         i32x4_extend_high_i16x8_u(g) i32x4_mul h)) i16x8_sub
                  (SimdShuffleOp(
                     (i = i32x4_extend_low_i16x8_u(h = SimdShuffleOp(f, LoadZero(b + e)))) i32x4_mul
                     (j = V128),
                     (h = i32x4_extend_high_i16x8_u(h)) i32x4_mul j) i16x8_add
                   SimdShuffleOp(
                     (j = i32x4_extend_low_i16x8_u(f = SimdShuffleOp(f, LoadZero(c + e)))) i32x4_mul
                     (k = V128),
                     (f = i32x4_extend_high_i16x8_u(f)) i32x4_mul k))) i16x8_add
                 V128) i16x8_shr_s
                6) i8x16_narrow_i16x8_u
             k) i16x8_shr_u
          5) v128_and
         V128) v128_or
        (((f = 
             ((g i16x8_add SimdShuffleOp(j i32x4_mul (l = V128), f i32x4_mul l)) i16x8_add
              V128) i16x8_shr_s
             6) i8x16_narrow_i16x8_u
          f) v128_and
         V128),
        ((((f = 
              ((SimdShuffleOp(i i32x4_mul (f = V128), h i32x4_mul f) i16x8_add_sat_u
                g) i16x8_sub_sat_u
               V128) i16x8_shr_u
              6) i8x16_narrow_i16x8_u
           f) i16x8_shr_u
          3) v128_and
         V128) v128_or
        ((k i16x8_shl 3) v128_and V128));
    d = d + 16;
    var m:int = e < 24;
    e = e + 8;
    if (m) continue L_a;
  }
}

function VP8YuvToRgb32_SSE2(a:int, b:int, c:int, d:simd_ptr@1) {
  var e:simd;
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  d[80] =
    ((i = 
        ((o = 
            ((ia = 
                ((w = 
                    ((p = 
                        (((SimdShuffleOp(
                             (g = 
                                i32x4_extend_low_i16x8_u(f = SimdShuffleOp(e = V128, LoadZero(b)))) i32x4_mul
                             (h = V128),
                             (i = i32x4_extend_high_i16x8_u(f)) i32x4_mul h) i16x8_add_sat_u
                           (k = 
                              SimdShuffleOp(
                                i32x4_extend_low_i16x8_u(f = SimdShuffleOp(e, LoadZero(a))) i32x4_mul
                                (j = V128),
                                i32x4_extend_high_i16x8_u(f) i32x4_mul j))) i16x8_sub_sat_u
                          (l = V128)) i16x8_shr_u
                         6) i8x16_narrow_i16x8_u
                        (((SimdShuffleOp(
                             (m = i32x4_extend_low_i16x8_u(f = SimdShuffleOp(e, LoadZero(b)))) i32x4_mul
                             h,
                             (n = i32x4_extend_high_i16x8_u(f)) i32x4_mul h) i16x8_add_sat_u
                           (o = 
                              SimdShuffleOp(
                                i32x4_extend_low_i16x8_u(f = SimdShuffleOp(e, LoadZero(a))) i32x4_mul
                                j,
                                i32x4_extend_high_i16x8_u(f) i32x4_mul j))) i16x8_sub_sat_u
                          l) i16x8_shr_u
                         6)) v128_and
                     (f = V128)) i8x16_narrow_i16x8_u
                    ((l = 
                        (((SimdShuffleOp(
                             (r = i32x4_extend_low_i16x8_u(q = SimdShuffleOp(e, LoadZero(b)))) i32x4_mul
                             h,
                             (s = i32x4_extend_high_i16x8_u(q)) i32x4_mul h) i16x8_add_sat_u
                           (q = 
                              SimdShuffleOp(
                                i32x4_extend_low_i16x8_u(q = SimdShuffleOp(e, LoadZero(a))) i32x4_mul
                                j,
                                i32x4_extend_high_i16x8_u(q) i32x4_mul j))) i16x8_sub_sat_u
                          l) i16x8_shr_u
                         6) i8x16_narrow_i16x8_u
                        (((SimdShuffleOp(
                             (u = i32x4_extend_low_i16x8_u(t = SimdShuffleOp(e, LoadZero(b)))) i32x4_mul
                             h,
                             (v = i32x4_extend_high_i16x8_u(t)) i32x4_mul h) i16x8_add_sat_u
                           (t = 
                              SimdShuffleOp(
                                i32x4_extend_low_i16x8_u(h = SimdShuffleOp(e, LoadZero(a))) i32x4_mul
                                j,
                                i32x4_extend_high_i16x8_u(h) i32x4_mul j))) i16x8_sub_sat_u
                          l) i16x8_shr_u
                         6)) v128_and
                     f)) i16x8_shr_u
                 8) i8x16_narrow_i16x8_u
                ((ha = 
                    ((ba = 
                        (((k i16x8_add
                           SimdShuffleOp(
                             (x = i32x4_extend_low_i16x8_u(j = SimdShuffleOp(e, LoadZero(c)))) i32x4_mul
                             (h = V128),
                             (y = i32x4_extend_high_i16x8_u(j)) i32x4_mul h)) i16x8_add
                          (j = V128)) i16x8_shr_s
                         6) i8x16_narrow_i16x8_u
                        (((o i16x8_add
                           SimdShuffleOp(
                             (aa = i32x4_extend_low_i16x8_u(z = SimdShuffleOp(e, LoadZero(c)))) i32x4_mul
                             h,
                             (z = i32x4_extend_high_i16x8_u(z)) i32x4_mul h)) i16x8_add
                          j) i16x8_shr_s
                         6)) i16x8_shr_u
                     8) i8x16_narrow_i16x8_u
                    ((ga = 
                        (((q i16x8_add
                           SimdShuffleOp(
                             (da = i32x4_extend_low_i16x8_u(ca = SimdShuffleOp(e, LoadZero(c)))) i32x4_mul
                             h,
                             (ca = i32x4_extend_high_i16x8_u(ca)) i32x4_mul h)) i16x8_add
                          j) i16x8_shr_s
                         6) i8x16_narrow_i16x8_u
                        (((t i16x8_add
                           SimdShuffleOp(
                             (ea = i32x4_extend_low_i16x8_u(e = SimdShuffleOp(e, LoadZero(c)))) i32x4_mul
                             h,
                             (fa = i32x4_extend_high_i16x8_u(e)) i32x4_mul h)) i16x8_add
                          j) i16x8_shr_s
                         6)) i16x8_shr_u
                     8)) i16x8_shr_u
                 8)) v128_and
             f) i8x16_narrow_i16x8_u
            ((l = 
                ((h = 
                    ((k = 
                        (((k i16x8_sub
                           (SimdShuffleOp(g i32x4_mul (e = V128), i i32x4_mul e) i16x8_add
                            SimdShuffleOp(x i32x4_mul (h = V128), y i32x4_mul h))) i16x8_add
                          (j = V128)) i16x8_shr_s
                         6) i8x16_narrow_i16x8_u
                        (((o i16x8_sub
                           (SimdShuffleOp(m i32x4_mul e, n i32x4_mul e) i16x8_add
                            SimdShuffleOp(aa i32x4_mul h, z i32x4_mul h))) i16x8_add
                          j) i16x8_shr_s
                         6)) i16x8_shr_u
                     8) i8x16_narrow_i16x8_u
                    ((e = (((q i16x8_sub
                             (SimdShuffleOp(r i32x4_mul e, s i32x4_mul e) i16x8_add
                              SimdShuffleOp(da i32x4_mul h, ca i32x4_mul h))) i16x8_add
                            j) i16x8_shr_s
                           6) i8x16_narrow_i16x8_u
                          (((t i16x8_sub
                             (SimdShuffleOp(u i32x4_mul e, v i32x4_mul e) i16x8_add
                              SimdShuffleOp(ea i32x4_mul h, fa i32x4_mul h))) i16x8_add
                            j) i16x8_shr_s
                           6)) i16x8_shr_u
                     8)) i16x8_shr_u
                 8) i8x16_narrow_i16x8_u
                ((j = (p i16x8_shr_u 8) i8x16_narrow_i16x8_u (l i16x8_shr_u 8)) i16x8_shr_u
                 8)) v128_and
             f)) i16x8_shr_u
         8) i8x16_narrow_i16x8_u
        ((g = 
            ((k = 
                ((q = (ba v128_and f) i8x16_narrow_i16x8_u (ga v128_and f)) v128_and f) i8x16_narrow_i16x8_u
                ((e = (k v128_and f) i8x16_narrow_i16x8_u (e v128_and f)) v128_and f)) i16x8_shr_u
             8) i8x16_narrow_i16x8_u
            ((t = (w v128_and f) i8x16_narrow_i16x8_u (ha v128_and f)) i16x8_shr_u
             8)) i16x8_shr_u
         8)) i16x8_shr_u
     8) i8x16_narrow_i16x8_u
    ((q = 
        ((j = 
            ((h = (h v128_and f) i8x16_narrow_i16x8_u (j v128_and f)) i16x8_shr_u
             8) i8x16_narrow_i16x8_u
            ((e = (q i16x8_shr_u 8) i8x16_narrow_i16x8_u (e i16x8_shr_u 8)) i16x8_shr_u
             8)) i16x8_shr_u
         8) i8x16_narrow_i16x8_u
        ((l = (ia i16x8_shr_u 8) i8x16_narrow_i16x8_u (l i16x8_shr_u 8)) i16x8_shr_u
         8)) i16x8_shr_u
     8);
  d[64] =
    ((j = (j v128_and f) i8x16_narrow_i16x8_u (l v128_and f)) i16x8_shr_u
     8) i8x16_narrow_i16x8_u
    ((h = 
        ((l = (k v128_and f) i8x16_narrow_i16x8_u (t v128_and f)) i16x8_shr_u
         8) i8x16_narrow_i16x8_u
        ((e = (h v128_and f) i8x16_narrow_i16x8_u (e v128_and f)) i16x8_shr_u
         8)) i16x8_shr_u
     8);
  d[48] =
    ((e = (l v128_and f) i8x16_narrow_i16x8_u (e v128_and f)) i16x8_shr_u
     8) i8x16_narrow_i16x8_u
    ((l = (o v128_and f) i8x16_narrow_i16x8_u (g v128_and f)) i16x8_shr_u
     8);
  d[32] = (i v128_and f) i8x16_narrow_i16x8_u (q v128_and f);
  d[16] = (j v128_and f) i8x16_narrow_i16x8_u (h v128_and f);
  d[0] = (e v128_and f) i8x16_narrow_i16x8_u (l v128_and f);
}

function VP8YuvToBgr32_SSE2(a:int, b:int, c:int, d:simd_ptr@1) {
  var e:simd;
  var f:simd;
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  d[80] =
    ((k = 
        ((m = 
            ((ia = 
                ((w = 
                    ((p = 
                        ((((h = 
                              SimdShuffleOp(
                                i32x4_extend_low_i16x8_u(f = SimdShuffleOp(e = V128, LoadZero(a))) i32x4_mul
                                (g = V128),
                                i32x4_extend_high_i16x8_u(f) i32x4_mul g)) i16x8_add
                           SimdShuffleOp(
                             (i = i32x4_extend_low_i16x8_u(f = SimdShuffleOp(e, LoadZero(c)))) i32x4_mul
                             (j = V128),
                             (k = i32x4_extend_high_i16x8_u(f)) i32x4_mul j)) i16x8_add
                          (l = V128)) i16x8_shr_s
                         6) i8x16_narrow_i16x8_u
                        ((((m = 
                              SimdShuffleOp(
                                i32x4_extend_low_i16x8_u(f = SimdShuffleOp(e, LoadZero(a))) i32x4_mul
                                g,
                                i32x4_extend_high_i16x8_u(f) i32x4_mul g)) i16x8_add
                           SimdShuffleOp(
                             (n = i32x4_extend_low_i16x8_u(f = SimdShuffleOp(e, LoadZero(c)))) i32x4_mul
                             j,
                             (o = i32x4_extend_high_i16x8_u(f)) i32x4_mul j)) i16x8_add
                          l) i16x8_shr_s
                         6)) v128_and
                     (f = V128)) i8x16_narrow_i16x8_u
                    ((l = 
                        ((((q = 
                              SimdShuffleOp(
                                i32x4_extend_low_i16x8_u(q = SimdShuffleOp(e, LoadZero(a))) i32x4_mul
                                g,
                                i32x4_extend_high_i16x8_u(q) i32x4_mul g)) i16x8_add
                           SimdShuffleOp(
                             (s = i32x4_extend_low_i16x8_u(r = SimdShuffleOp(e, LoadZero(c)))) i32x4_mul
                             j,
                             (t = i32x4_extend_high_i16x8_u(r)) i32x4_mul j)) i16x8_add
                          l) i16x8_shr_s
                         6) i8x16_narrow_i16x8_u
                        ((((r = 
                              SimdShuffleOp(
                                i32x4_extend_low_i16x8_u(r = SimdShuffleOp(e, LoadZero(a))) i32x4_mul
                                g,
                                i32x4_extend_high_i16x8_u(r) i32x4_mul g)) i16x8_add
                           SimdShuffleOp(
                             (u = i32x4_extend_low_i16x8_u(g = SimdShuffleOp(e, LoadZero(c)))) i32x4_mul
                             j,
                             (v = i32x4_extend_high_i16x8_u(g)) i32x4_mul j)) i16x8_add
                          l) i16x8_shr_s
                         6)) v128_and
                     f)) i16x8_shr_u
                 8) i8x16_narrow_i16x8_u
                ((ha = 
                    ((ba = 
                        (((SimdShuffleOp(
                             (x = i32x4_extend_low_i16x8_u(j = SimdShuffleOp(e, LoadZero(b)))) i32x4_mul
                             (g = V128),
                             (y = i32x4_extend_high_i16x8_u(j)) i32x4_mul g) i16x8_add_sat_u
                           h) i16x8_sub_sat_u
                          (j = V128)) i16x8_shr_u
                         6) i8x16_narrow_i16x8_u
                        (((SimdShuffleOp(
                             (aa = i32x4_extend_low_i16x8_u(z = SimdShuffleOp(e, LoadZero(b)))) i32x4_mul
                             g,
                             (z = i32x4_extend_high_i16x8_u(z)) i32x4_mul g) i16x8_add_sat_u
                           m) i16x8_sub_sat_u
                          j) i16x8_shr_u
                         6)) i16x8_shr_u
                     8) i8x16_narrow_i16x8_u
                    ((ga = 
                        (((SimdShuffleOp(
                             (da = i32x4_extend_low_i16x8_u(ca = SimdShuffleOp(e, LoadZero(b)))) i32x4_mul
                             g,
                             (ca = i32x4_extend_high_i16x8_u(ca)) i32x4_mul g) i16x8_add_sat_u
                           q) i16x8_sub_sat_u
                          j) i16x8_shr_u
                         6) i8x16_narrow_i16x8_u
                        (((SimdShuffleOp(
                             (ea = i32x4_extend_low_i16x8_u(e = SimdShuffleOp(e, LoadZero(b)))) i32x4_mul
                             g,
                             (fa = i32x4_extend_high_i16x8_u(e)) i32x4_mul g) i16x8_add_sat_u
                           r) i16x8_sub_sat_u
                          j) i16x8_shr_u
                         6)) i16x8_shr_u
                     8)) i16x8_shr_u
                 8)) v128_and
             f) i8x16_narrow_i16x8_u
            ((l = 
                ((g = 
                    ((h = 
                        (((h i16x8_sub
                           (SimdShuffleOp(x i32x4_mul (e = V128), y i32x4_mul e) i16x8_add
                            SimdShuffleOp(i i32x4_mul (g = V128), k i32x4_mul g))) i16x8_add
                          (j = V128)) i16x8_shr_s
                         6) i8x16_narrow_i16x8_u
                        (((m i16x8_sub
                           (SimdShuffleOp(aa i32x4_mul e, z i32x4_mul e) i16x8_add
                            SimdShuffleOp(n i32x4_mul g, o i32x4_mul g))) i16x8_add
                          j) i16x8_shr_s
                         6)) i16x8_shr_u
                     8) i8x16_narrow_i16x8_u
                    ((e = (((q i16x8_sub
                             (SimdShuffleOp(da i32x4_mul e, ca i32x4_mul e) i16x8_add
                              SimdShuffleOp(s i32x4_mul g, t i32x4_mul g))) i16x8_add
                            j) i16x8_shr_s
                           6) i8x16_narrow_i16x8_u
                          (((r i16x8_sub
                             (SimdShuffleOp(ea i32x4_mul e, fa i32x4_mul e) i16x8_add
                              SimdShuffleOp(u i32x4_mul g, v i32x4_mul g))) i16x8_add
                            j) i16x8_shr_s
                           6)) i16x8_shr_u
                     8)) i16x8_shr_u
                 8) i8x16_narrow_i16x8_u
                ((j = (p i16x8_shr_u 8) i8x16_narrow_i16x8_u (l i16x8_shr_u 8)) i16x8_shr_u
                 8)) v128_and
             f)) i16x8_shr_u
         8) i8x16_narrow_i16x8_u
        ((i = 
            ((h = 
                ((q = (ba v128_and f) i8x16_narrow_i16x8_u (ga v128_and f)) v128_and f) i8x16_narrow_i16x8_u
                ((e = (h v128_and f) i8x16_narrow_i16x8_u (e v128_and f)) v128_and f)) i16x8_shr_u
             8) i8x16_narrow_i16x8_u
            ((r = (w v128_and f) i8x16_narrow_i16x8_u (ha v128_and f)) i16x8_shr_u
             8)) i16x8_shr_u
         8)) i16x8_shr_u
     8) i8x16_narrow_i16x8_u
    ((q = 
        ((j = 
            ((g = (g v128_and f) i8x16_narrow_i16x8_u (j v128_and f)) i16x8_shr_u
             8) i8x16_narrow_i16x8_u
            ((e = (q i16x8_shr_u 8) i8x16_narrow_i16x8_u (e i16x8_shr_u 8)) i16x8_shr_u
             8)) i16x8_shr_u
         8) i8x16_narrow_i16x8_u
        ((l = (ia i16x8_shr_u 8) i8x16_narrow_i16x8_u (l i16x8_shr_u 8)) i16x8_shr_u
         8)) i16x8_shr_u
     8);
  d[64] =
    ((j = (j v128_and f) i8x16_narrow_i16x8_u (l v128_and f)) i16x8_shr_u
     8) i8x16_narrow_i16x8_u
    ((g = 
        ((l = (h v128_and f) i8x16_narrow_i16x8_u (r v128_and f)) i16x8_shr_u
         8) i8x16_narrow_i16x8_u
        ((e = (g v128_and f) i8x16_narrow_i16x8_u (e v128_and f)) i16x8_shr_u
         8)) i16x8_shr_u
     8);
  d[48] =
    ((e = (l v128_and f) i8x16_narrow_i16x8_u (e v128_and f)) i16x8_shr_u
     8) i8x16_narrow_i16x8_u
    ((l = (m v128_and f) i8x16_narrow_i16x8_u (i v128_and f)) i16x8_shr_u
     8);
  d[32] = (k v128_and f) i8x16_narrow_i16x8_u (q v128_and f);
  d[16] = (j v128_and f) i8x16_narrow_i16x8_u (g v128_and f);
  d[0] = (e v128_and f) i8x16_narrow_i16x8_u (l v128_and f);
}

function WebPInitSamplersSSE2() {
  1060336[4]:int = 247;
  1060336[3]:int = 248;
  1060336[2]:int = 249;
  1060336[1]:int = 250;
  0[265084]:int = 251;
}

function YuvToArgbRow_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:int, e:int) {
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var p:int;
  var o:int;
  var q:int;
  var r:int;
  var g:int;
  var f:int = 0;
  if (e < 8) goto B_a;
  f = e & -8;
  g = 0;
  loop L_b {
    d[16]:simd@1 =
      SimdShuffleOp(
        i = 
          SimdShuffleOp(
            m = 
              V128 i8x16_narrow_i16x8_u
              ((((i = SimdShuffleOp(
                        i32x4_extend_low_i16x8_u(
                          i = SimdShuffleOp(h = V128, LoadZero(a + g))) i32x4_mul
                        (j = V128),
                        i32x4_extend_high_i16x8_u(i) i32x4_mul j)) i16x8_sub
                 (SimdShuffleOp(
                    (k = i32x4_extend_low_i16x8_u(
                           j = SimdShuffleOp(j = SimdShuffleOp(h, LoadZero(b)), j))) i32x4_mul
                    (l = V128),
                    (j = i32x4_extend_high_i16x8_u(j)) i32x4_mul l) i16x8_add
                  SimdShuffleOp(
                    (l = i32x4_extend_low_i16x8_u(
                           h = SimdShuffleOp(h = SimdShuffleOp(h, LoadZero(c)), h))) i32x4_mul
                    (m = V128),
                    (h = i32x4_extend_high_i16x8_u(h)) i32x4_mul m))) i16x8_add
                V128) i16x8_shr_s
               6),
            h = 
              (((i i16x8_add SimdShuffleOp(l i32x4_mul (n = V128), h i32x4_mul n)) i16x8_add
                V128) i16x8_shr_s
               6) i8x16_narrow_i16x8_u
              (((SimdShuffleOp(k i32x4_mul (h = V128), j i32x4_mul h) i16x8_add_sat_u
                 i) i16x8_sub_sat_u
                V128) i16x8_shr_u
               6)),
        h = SimdShuffleOp(m, h));
    d[0]:simd@1 = SimdShuffleOp(i, h);
    d = d + 32;
    c = c + 4;
    b = b + 4;
    o = g + 16;
    p = g + 8;
    g = p;
    if (o <= e) continue L_b;
  }
  a = a + p;
  label B_a:
  if (f >= e) goto B_c;
  loop L_d {
    g = c[0];
    o = b[0];
    p = a[0];
    d[0]:byte = 255;
    d[3]:byte =
      select_if(
        (r = (q = (o * 33050 >> 8) + (p = p * 19077 >> 8)) + -17685) >> 6,
        select_if(0, 255, q < 17685),
        r < 16384);
    (d + 1)[0]:byte =
      select_if((r = (q = (g * 26149 >> 8) + p) + -14234) >> 6,
                select_if(0, 255, q < 14234),
                r < 16384);
    d[2]:byte =
      select_if(
        (o = (g = p - (o * 6419 >> 8) + (g * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, g < -8708),
        o < 16384);
    d = d + 4;
    a = a + 1;
    c = c + (g = f & 1);
    b = b + g;
    if (e != (f = f + 1)) continue L_d;
  }
  label B_c:
}

function YuvToBgraRow_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:int, e:int) {
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var p:int;
  var o:int;
  var q:int;
  var r:int;
  var g:int;
  var f:int = 0;
  if (e < 8) goto B_a;
  f = e & -8;
  g = 0;
  loop L_b {
    d[16]:simd@1 =
      SimdShuffleOp(
        i = 
          SimdShuffleOp(
            m = 
              (((SimdShuffleOp(
                   (j = i32x4_extend_low_i16x8_u(
                          i = SimdShuffleOp(i = SimdShuffleOp(h = V128, LoadZero(b)), i))) i32x4_mul
                   (k = V128),
                   (l = i32x4_extend_high_i16x8_u(i)) i32x4_mul k) i16x8_add_sat_u
                 (i = 
                    SimdShuffleOp(
                      i32x4_extend_low_i16x8_u(i = SimdShuffleOp(h, LoadZero(a + g))) i32x4_mul
                      (k = V128),
                      i32x4_extend_high_i16x8_u(i) i32x4_mul k))) i16x8_sub_sat_u
                V128) i16x8_shr_u
               6) i8x16_narrow_i16x8_u
              (((i i16x8_add
                 SimdShuffleOp(
                   (k = i32x4_extend_low_i16x8_u(
                          h = SimdShuffleOp(h = SimdShuffleOp(h, LoadZero(c)), h))) i32x4_mul
                   (m = V128),
                   (h = i32x4_extend_high_i16x8_u(h)) i32x4_mul m)) i16x8_add
                V128) i16x8_shr_s
               6),
            h = 
              (((i i16x8_sub
                 (SimdShuffleOp(j i32x4_mul (n = V128), l i32x4_mul n) i16x8_add
                  SimdShuffleOp(k i32x4_mul (j = V128), h i32x4_mul j))) i16x8_add
                V128) i16x8_shr_s
               6) i8x16_narrow_i16x8_u
              V128),
        h = SimdShuffleOp(m, h));
    d[0]:simd@1 = SimdShuffleOp(i, h);
    d = d + 32;
    c = c + 4;
    b = b + 4;
    o = g + 16;
    p = g + 8;
    g = p;
    if (o <= e) continue L_b;
  }
  a = a + p;
  label B_a:
  if (f >= e) goto B_c;
  loop L_d {
    g = b[0];
    o = c[0];
    p = a[0];
    d[3]:byte = 255;
    d[2]:byte =
      select_if(
        (r = (q = (o * 26149 >> 8) + (p = p * 19077 >> 8)) + -14234) >> 6,
        select_if(0, 255, q < 14234),
        r < 16384);
    d[0]:byte =
      select_if((r = (q = (g * 33050 >> 8) + p) + -17685) >> 6,
                select_if(0, 255, q < 17685),
                r < 16384);
    d[1]:byte =
      select_if(
        (o = (g = p - (g * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, g < -8708),
        o < 16384);
    d = d + 4;
    a = a + 1;
    c = c + (g = f & 1);
    b = b + g;
    if (e != (f = f + 1)) continue L_d;
  }
  label B_c:
}

function YuvToBgrRow_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:int, e:int) {
  var h:simd;
  var i:int;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:simd;
  var na:int;
  var oa:int;
  var pa:int;
  var g:int;
  var f:int = 0;
  if (e < 32) goto B_a;
  f = e & -32;
  g = 0;
  loop L_b {
    d[80]:simd@1 =
      ((o = 
          ((q = 
              ((ma = 
                  ((aa = 
                      ((t = 
                          ((((l = SimdShuffleOp(
                                    i32x4_extend_low_i16x8_u(
                                      j = SimdShuffleOp(h = V128, LoadZero(i = a + g))) i32x4_mul
                                    (k = V128),
                                    i32x4_extend_high_i16x8_u(j) i32x4_mul k)) i16x8_add
                             SimdShuffleOp(
                               (m = i32x4_extend_low_i16x8_u(
                                      j = SimdShuffleOp(j = SimdShuffleOp(h, LoadZero(c)), j))) i32x4_mul
                               (n = V128),
                               (o = i32x4_extend_high_i16x8_u(j)) i32x4_mul n)) i16x8_add
                            (p = V128)) i16x8_shr_s
                           6) i8x16_narrow_i16x8_u
                          ((((q = 
                                SimdShuffleOp(
                                  i32x4_extend_low_i16x8_u(j = SimdShuffleOp(h, LoadZero(i + 8))) i32x4_mul
                                  k,
                                  i32x4_extend_high_i16x8_u(j) i32x4_mul k)) i16x8_add
                             SimdShuffleOp(
                               (r = i32x4_extend_low_i16x8_u(
                                      j = SimdShuffleOp(j = SimdShuffleOp(h, LoadZero(c + 4)), j))) i32x4_mul
                               n,
                               (s = i32x4_extend_high_i16x8_u(j)) i32x4_mul n)) i16x8_add
                            p) i16x8_shr_s
                           6)) v128_and
                       (j = V128)) i8x16_narrow_i16x8_u
                      ((p = 
                          ((((u = 
                                SimdShuffleOp(
                                  i32x4_extend_low_i16x8_u(u = SimdShuffleOp(h, LoadZero(i + 16))) i32x4_mul
                                  k,
                                  i32x4_extend_high_i16x8_u(u) i32x4_mul k)) i16x8_add
                             SimdShuffleOp(
                               (w = i32x4_extend_low_i16x8_u(
                                      v = SimdShuffleOp(v = SimdShuffleOp(h, LoadZero(c + 8)), v))) i32x4_mul
                               n,
                               (x = i32x4_extend_high_i16x8_u(v)) i32x4_mul n)) i16x8_add
                            p) i16x8_shr_s
                           6) i8x16_narrow_i16x8_u
                          ((((v = 
                                SimdShuffleOp(
                                  i32x4_extend_low_i16x8_u(v = SimdShuffleOp(h, LoadZero(i + 24))) i32x4_mul
                                  k,
                                  i32x4_extend_high_i16x8_u(v) i32x4_mul k)) i16x8_add
                             SimdShuffleOp(
                               (y = i32x4_extend_low_i16x8_u(
                                      k = SimdShuffleOp(k = SimdShuffleOp(h, LoadZero(c + 12)), k))) i32x4_mul
                               n,
                               (z = i32x4_extend_high_i16x8_u(k)) i32x4_mul n)) i16x8_add
                            p) i16x8_shr_s
                           6)) v128_and
                       j)) i16x8_shr_u
                   8) i8x16_narrow_i16x8_u
                  ((la = 
                      ((fa = 
                          (((SimdShuffleOp(
                               (ba = i32x4_extend_low_i16x8_u(
                                       n = SimdShuffleOp(k = SimdShuffleOp(h, LoadZero(b)), k))) i32x4_mul
                               (k = V128),
                               (ca = i32x4_extend_high_i16x8_u(n)) i32x4_mul k) i16x8_add_sat_u
                             l) i16x8_sub_sat_u
                            (n = V128)) i16x8_shr_u
                           6) i8x16_narrow_i16x8_u
                          (((SimdShuffleOp(
                               (ea = 
                                  i32x4_extend_low_i16x8_u(
                                    da = SimdShuffleOp(da = SimdShuffleOp(h, LoadZero(b + 4)), da))) i32x4_mul
                               k,
                               (da = i32x4_extend_high_i16x8_u(da)) i32x4_mul k) i16x8_add_sat_u
                             q) i16x8_sub_sat_u
                            n) i16x8_shr_u
                           6)) i16x8_shr_u
                       8) i8x16_narrow_i16x8_u
                      ((ka = 
                          (((SimdShuffleOp(
                               (ha = 
                                  i32x4_extend_low_i16x8_u(
                                    ga = SimdShuffleOp(ga = SimdShuffleOp(h, LoadZero(b + 8)), ga))) i32x4_mul
                               k,
                               (ga = i32x4_extend_high_i16x8_u(ga)) i32x4_mul k) i16x8_add_sat_u
                             u) i16x8_sub_sat_u
                            n) i16x8_shr_u
                           6) i8x16_narrow_i16x8_u
                          (((SimdShuffleOp(
                               (ia = i32x4_extend_low_i16x8_u(
                                       h = SimdShuffleOp(h = SimdShuffleOp(h, LoadZero(b + 12)), h))) i32x4_mul
                               k,
                               (ja = i32x4_extend_high_i16x8_u(h)) i32x4_mul k) i16x8_add_sat_u
                             v) i16x8_sub_sat_u
                            n) i16x8_shr_u
                           6)) i16x8_shr_u
                       8)) i16x8_shr_u
                   8)) v128_and
               j) i8x16_narrow_i16x8_u
              ((p = 
                  ((k = 
                      ((l = 
                          (((l i16x8_sub
                             (SimdShuffleOp(ba i32x4_mul (h = V128), ca i32x4_mul h) i16x8_add
                              SimdShuffleOp(m i32x4_mul (k = V128), o i32x4_mul k))) i16x8_add
                            (n = V128)) i16x8_shr_s
                           6) i8x16_narrow_i16x8_u
                          (((q i16x8_sub
                             (SimdShuffleOp(ea i32x4_mul h, da i32x4_mul h) i16x8_add
                              SimdShuffleOp(r i32x4_mul k, s i32x4_mul k))) i16x8_add
                            n) i16x8_shr_s
                           6)) i16x8_shr_u
                       8) i8x16_narrow_i16x8_u
                      ((h = (((u i16x8_sub
                               (SimdShuffleOp(ha i32x4_mul h, ga i32x4_mul h) i16x8_add
                                SimdShuffleOp(w i32x4_mul k, x i32x4_mul k))) i16x8_add
                              n) i16x8_shr_s
                             6) i8x16_narrow_i16x8_u
                            (((v i16x8_sub
                               (SimdShuffleOp(ia i32x4_mul h, ja i32x4_mul h) i16x8_add
                                SimdShuffleOp(y i32x4_mul k, z i32x4_mul k))) i16x8_add
                              n) i16x8_shr_s
                             6)) i16x8_shr_u
                       8)) i16x8_shr_u
                   8) i8x16_narrow_i16x8_u
                  ((n = (t i16x8_shr_u 8) i8x16_narrow_i16x8_u (p i16x8_shr_u 8)) i16x8_shr_u
                   8)) v128_and
               j)) i16x8_shr_u
           8) i8x16_narrow_i16x8_u
          ((m = 
              ((l = 
                  ((u = (fa v128_and j) i8x16_narrow_i16x8_u (ka v128_and j)) v128_and j) i8x16_narrow_i16x8_u
                  ((h = (l v128_and j) i8x16_narrow_i16x8_u (h v128_and j)) v128_and j)) i16x8_shr_u
               8) i8x16_narrow_i16x8_u
              ((v = (aa v128_and j) i8x16_narrow_i16x8_u (la v128_and j)) i16x8_shr_u
               8)) i16x8_shr_u
           8)) i16x8_shr_u
       8) i8x16_narrow_i16x8_u
      ((u = 
          ((n = 
              ((k = (k v128_and j) i8x16_narrow_i16x8_u (n v128_and j)) i16x8_shr_u
               8) i8x16_narrow_i16x8_u
              ((h = (u i16x8_shr_u 8) i8x16_narrow_i16x8_u (h i16x8_shr_u 8)) i16x8_shr_u
               8)) i16x8_shr_u
           8) i8x16_narrow_i16x8_u
          ((p = (ma i16x8_shr_u 8) i8x16_narrow_i16x8_u (p i16x8_shr_u 8)) i16x8_shr_u
           8)) i16x8_shr_u
       8);
    d[64]:simd@1 =
      ((n = (n v128_and j) i8x16_narrow_i16x8_u (p v128_and j)) i16x8_shr_u
       8) i8x16_narrow_i16x8_u
      ((k = 
          ((p = (l v128_and j) i8x16_narrow_i16x8_u (v v128_and j)) i16x8_shr_u
           8) i8x16_narrow_i16x8_u
          ((h = (k v128_and j) i8x16_narrow_i16x8_u (h v128_and j)) i16x8_shr_u
           8)) i16x8_shr_u
       8);
    d[48]:simd@1 =
      ((h = (p v128_and j) i8x16_narrow_i16x8_u (h v128_and j)) i16x8_shr_u
       8) i8x16_narrow_i16x8_u
      ((p = (q v128_and j) i8x16_narrow_i16x8_u (m v128_and j)) i16x8_shr_u
       8);
    d[32]:simd@1 = (o v128_and j) i8x16_narrow_i16x8_u (u v128_and j);
    d[16]:simd@1 = (n v128_and j) i8x16_narrow_i16x8_u (k v128_and j);
    d[0]:simd@1 = (h v128_and j) i8x16_narrow_i16x8_u (p v128_and j);
    d = d + 96;
    c = c + 16;
    b = b + 16;
    i = g + 64;
    na = g + 32;
    g = na;
    if (i <= e) continue L_b;
  }
  a = a + na;
  label B_a:
  if (f >= e) goto B_c;
  loop L_d {
    g = b[0];
    d[2]:byte =
      select_if(
        (pa = 
           (oa = ((na = c[0]) * 26149 >> 8) + (i = a[0] * 19077 >> 8)) + -14234) >>
        6,
        select_if(0, 255, oa < 14234),
        pa < 16384);
    d[0]:byte =
      select_if((pa = (oa = (g * 33050 >> 8) + i) + -17685) >> 6,
                select_if(0, 255, oa < 17685),
                pa < 16384);
    d[1]:byte =
      select_if(
        (i = (g = i - (g * 6419 >> 8) + (na * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, g < -8708),
        i < 16384);
    d = d + 3;
    a = a + 1;
    c = c + (g = f & 1);
    b = b + g;
    if (e != (f = f + 1)) continue L_d;
  }
  label B_c:
}

function YuvToRgbaRow_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:int, e:int) {
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var p:int;
  var o:int;
  var q:int;
  var r:int;
  var g:int;
  var f:int = 0;
  if (e < 8) goto B_a;
  f = e & -8;
  g = 0;
  loop L_b {
    d[16]:simd@1 =
      SimdShuffleOp(
        i = 
          SimdShuffleOp(
            m = 
              ((((i = SimdShuffleOp(
                        i32x4_extend_low_i16x8_u(
                          i = SimdShuffleOp(h = V128, LoadZero(a + g))) i32x4_mul
                        (j = V128),
                        i32x4_extend_high_i16x8_u(i) i32x4_mul j)) i16x8_add
                 SimdShuffleOp(
                   (k = i32x4_extend_low_i16x8_u(
                          j = SimdShuffleOp(j = SimdShuffleOp(h, LoadZero(c)), j))) i32x4_mul
                   (l = V128),
                   (j = i32x4_extend_high_i16x8_u(j)) i32x4_mul l)) i16x8_add
                V128) i16x8_shr_s
               6) i8x16_narrow_i16x8_u
              (((SimdShuffleOp(
                   (l = i32x4_extend_low_i16x8_u(
                          h = SimdShuffleOp(h = SimdShuffleOp(h, LoadZero(b)), h))) i32x4_mul
                   (m = V128),
                   (h = i32x4_extend_high_i16x8_u(h)) i32x4_mul m) i16x8_add_sat_u
                 i) i16x8_sub_sat_u
                V128) i16x8_shr_u
               6),
            h = 
              (((i i16x8_sub
                 (SimdShuffleOp(l i32x4_mul (n = V128), h i32x4_mul n) i16x8_add
                  SimdShuffleOp(k i32x4_mul (h = V128), j i32x4_mul h))) i16x8_add
                V128) i16x8_shr_s
               6) i8x16_narrow_i16x8_u
              V128),
        h = SimdShuffleOp(m, h));
    d[0]:simd@1 = SimdShuffleOp(i, h);
    d = d + 32;
    c = c + 4;
    b = b + 4;
    o = g + 16;
    p = g + 8;
    g = p;
    if (o <= e) continue L_b;
  }
  a = a + p;
  label B_a:
  if (f >= e) goto B_c;
  loop L_d {
    g = c[0];
    o = b[0];
    p = a[0];
    d[3]:byte = 255;
    d[2]:byte =
      select_if(
        (r = (q = (o * 33050 >> 8) + (p = p * 19077 >> 8)) + -17685) >> 6,
        select_if(0, 255, q < 17685),
        r < 16384);
    d[0]:byte =
      select_if((r = (q = (g * 26149 >> 8) + p) + -14234) >> 6,
                select_if(0, 255, q < 14234),
                r < 16384);
    d[1]:byte =
      select_if(
        (o = (g = p - (o * 6419 >> 8) + (g * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, g < -8708),
        o < 16384);
    d = d + 4;
    a = a + 1;
    c = c + (g = f & 1);
    b = b + g;
    if (e != (f = f + 1)) continue L_d;
  }
  label B_c:
}

function YuvToRgbRow_SSE2(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:int, e:int) {
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:int;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:simd;
  var ka:simd;
  var la:simd;
  var ma:simd;
  var na:int;
  var oa:int;
  var pa:int;
  var g:int;
  var f:int = 0;
  if (e < 32) goto B_a;
  f = e & -32;
  g = 0;
  loop L_b {
    d[80]:simd@1 =
      ((l = 
          ((s = 
              ((ma = 
                  ((aa = 
                      ((t = 
                          (((SimdShuffleOp(
                               (j = i32x4_extend_low_i16x8_u(
                                      i = SimdShuffleOp(i = SimdShuffleOp(h = V128, LoadZero(b)), i))) i32x4_mul
                               (k = V128),
                               (l = i32x4_extend_high_i16x8_u(i)) i32x4_mul k) i16x8_add_sat_u
                             (o = 
                                SimdShuffleOp(
                                  i32x4_extend_low_i16x8_u(i = SimdShuffleOp(h, LoadZero(m = a + g))) i32x4_mul
                                  (n = V128),
                                  i32x4_extend_high_i16x8_u(i) i32x4_mul n))) i16x8_sub_sat_u
                            (p = V128)) i16x8_shr_u
                           6) i8x16_narrow_i16x8_u
                          (((SimdShuffleOp(
                               (q = i32x4_extend_low_i16x8_u(
                                      i = SimdShuffleOp(i = SimdShuffleOp(h, LoadZero(b + 4)), i))) i32x4_mul
                               k,
                               (r = i32x4_extend_high_i16x8_u(i)) i32x4_mul k) i16x8_add_sat_u
                             (s = 
                                SimdShuffleOp(
                                  i32x4_extend_low_i16x8_u(i = SimdShuffleOp(h, LoadZero(m + 8))) i32x4_mul
                                  n,
                                  i32x4_extend_high_i16x8_u(i) i32x4_mul n))) i16x8_sub_sat_u
                            p) i16x8_shr_u
                           6)) v128_and
                       (i = V128)) i8x16_narrow_i16x8_u
                      ((p = 
                          (((SimdShuffleOp(
                               (v = i32x4_extend_low_i16x8_u(
                                      u = SimdShuffleOp(u = SimdShuffleOp(h, LoadZero(b + 8)), u))) i32x4_mul
                               k,
                               (w = i32x4_extend_high_i16x8_u(u)) i32x4_mul k) i16x8_add_sat_u
                             (u = 
                                SimdShuffleOp(
                                  i32x4_extend_low_i16x8_u(u = SimdShuffleOp(h, LoadZero(m + 16))) i32x4_mul
                                  n,
                                  i32x4_extend_high_i16x8_u(u) i32x4_mul n))) i16x8_sub_sat_u
                            p) i16x8_shr_u
                           6) i8x16_narrow_i16x8_u
                          (((SimdShuffleOp(
                               (y = i32x4_extend_low_i16x8_u(
                                      x = SimdShuffleOp(x = SimdShuffleOp(h, LoadZero(b + 12)), x))) i32x4_mul
                               k,
                               (z = i32x4_extend_high_i16x8_u(x)) i32x4_mul k) i16x8_add_sat_u
                             (x = 
                                SimdShuffleOp(
                                  i32x4_extend_low_i16x8_u(k = SimdShuffleOp(h, LoadZero(m + 24))) i32x4_mul
                                  n,
                                  i32x4_extend_high_i16x8_u(k) i32x4_mul n))) i16x8_sub_sat_u
                            p) i16x8_shr_u
                           6)) v128_and
                       i)) i16x8_shr_u
                   8) i8x16_narrow_i16x8_u
                  ((la = 
                      ((fa = 
                          (((o i16x8_add
                             SimdShuffleOp(
                               (ba = i32x4_extend_low_i16x8_u(
                                       n = SimdShuffleOp(k = SimdShuffleOp(h, LoadZero(c)), k))) i32x4_mul
                               (k = V128),
                               (ca = i32x4_extend_high_i16x8_u(n)) i32x4_mul k)) i16x8_add
                            (n = V128)) i16x8_shr_s
                           6) i8x16_narrow_i16x8_u
                          (((s i16x8_add
                             SimdShuffleOp(
                               (ea = 
                                  i32x4_extend_low_i16x8_u(
                                    da = SimdShuffleOp(da = SimdShuffleOp(h, LoadZero(c + 4)), da))) i32x4_mul
                               k,
                               (da = i32x4_extend_high_i16x8_u(da)) i32x4_mul k)) i16x8_add
                            n) i16x8_shr_s
                           6)) i16x8_shr_u
                       8) i8x16_narrow_i16x8_u
                      ((ka = 
                          (((u i16x8_add
                             SimdShuffleOp(
                               (ha = 
                                  i32x4_extend_low_i16x8_u(
                                    ga = SimdShuffleOp(ga = SimdShuffleOp(h, LoadZero(c + 8)), ga))) i32x4_mul
                               k,
                               (ga = i32x4_extend_high_i16x8_u(ga)) i32x4_mul k)) i16x8_add
                            n) i16x8_shr_s
                           6) i8x16_narrow_i16x8_u
                          (((x i16x8_add
                             SimdShuffleOp(
                               (ia = i32x4_extend_low_i16x8_u(
                                       h = SimdShuffleOp(h = SimdShuffleOp(h, LoadZero(c + 12)), h))) i32x4_mul
                               k,
                               (ja = i32x4_extend_high_i16x8_u(h)) i32x4_mul k)) i16x8_add
                            n) i16x8_shr_s
                           6)) i16x8_shr_u
                       8)) i16x8_shr_u
                   8)) v128_and
               i) i8x16_narrow_i16x8_u
              ((p = 
                  ((k = 
                      ((o = 
                          (((o i16x8_sub
                             (SimdShuffleOp(j i32x4_mul (h = V128), l i32x4_mul h) i16x8_add
                              SimdShuffleOp(ba i32x4_mul (k = V128), ca i32x4_mul k))) i16x8_add
                            (n = V128)) i16x8_shr_s
                           6) i8x16_narrow_i16x8_u
                          (((s i16x8_sub
                             (SimdShuffleOp(q i32x4_mul h, r i32x4_mul h) i16x8_add
                              SimdShuffleOp(ea i32x4_mul k, da i32x4_mul k))) i16x8_add
                            n) i16x8_shr_s
                           6)) i16x8_shr_u
                       8) i8x16_narrow_i16x8_u
                      ((h = (((u i16x8_sub
                               (SimdShuffleOp(v i32x4_mul h, w i32x4_mul h) i16x8_add
                                SimdShuffleOp(ha i32x4_mul k, ga i32x4_mul k))) i16x8_add
                              n) i16x8_shr_s
                             6) i8x16_narrow_i16x8_u
                            (((x i16x8_sub
                               (SimdShuffleOp(y i32x4_mul h, z i32x4_mul h) i16x8_add
                                SimdShuffleOp(ia i32x4_mul k, ja i32x4_mul k))) i16x8_add
                              n) i16x8_shr_s
                             6)) i16x8_shr_u
                       8)) i16x8_shr_u
                   8) i8x16_narrow_i16x8_u
                  ((n = (t i16x8_shr_u 8) i8x16_narrow_i16x8_u (p i16x8_shr_u 8)) i16x8_shr_u
                   8)) v128_and
               i)) i16x8_shr_u
           8) i8x16_narrow_i16x8_u
          ((j = 
              ((o = 
                  ((u = (fa v128_and i) i8x16_narrow_i16x8_u (ka v128_and i)) v128_and i) i8x16_narrow_i16x8_u
                  ((h = (o v128_and i) i8x16_narrow_i16x8_u (h v128_and i)) v128_and i)) i16x8_shr_u
               8) i8x16_narrow_i16x8_u
              ((x = (aa v128_and i) i8x16_narrow_i16x8_u (la v128_and i)) i16x8_shr_u
               8)) i16x8_shr_u
           8)) i16x8_shr_u
       8) i8x16_narrow_i16x8_u
      ((u = 
          ((n = 
              ((k = (k v128_and i) i8x16_narrow_i16x8_u (n v128_and i)) i16x8_shr_u
               8) i8x16_narrow_i16x8_u
              ((h = (u i16x8_shr_u 8) i8x16_narrow_i16x8_u (h i16x8_shr_u 8)) i16x8_shr_u
               8)) i16x8_shr_u
           8) i8x16_narrow_i16x8_u
          ((p = (ma i16x8_shr_u 8) i8x16_narrow_i16x8_u (p i16x8_shr_u 8)) i16x8_shr_u
           8)) i16x8_shr_u
       8);
    d[64]:simd@1 =
      ((n = (n v128_and i) i8x16_narrow_i16x8_u (p v128_and i)) i16x8_shr_u
       8) i8x16_narrow_i16x8_u
      ((k = 
          ((p = (o v128_and i) i8x16_narrow_i16x8_u (x v128_and i)) i16x8_shr_u
           8) i8x16_narrow_i16x8_u
          ((h = (k v128_and i) i8x16_narrow_i16x8_u (h v128_and i)) i16x8_shr_u
           8)) i16x8_shr_u
       8);
    d[48]:simd@1 =
      ((h = (p v128_and i) i8x16_narrow_i16x8_u (h v128_and i)) i16x8_shr_u
       8) i8x16_narrow_i16x8_u
      ((p = (s v128_and i) i8x16_narrow_i16x8_u (j v128_and i)) i16x8_shr_u
       8);
    d[32]:simd@1 = (l v128_and i) i8x16_narrow_i16x8_u (u v128_and i);
    d[16]:simd@1 = (n v128_and i) i8x16_narrow_i16x8_u (k v128_and i);
    d[0]:simd@1 = (h v128_and i) i8x16_narrow_i16x8_u (p v128_and i);
    d = d + 96;
    c = c + 16;
    b = b + 16;
    m = g + 64;
    na = g + 32;
    g = na;
    if (m <= e) continue L_b;
  }
  a = a + na;
  label B_a:
  if (f >= e) goto B_c;
  loop L_d {
    g = c[0];
    d[2]:byte =
      select_if(
        (pa = 
           (oa = ((na = b[0]) * 33050 >> 8) + (m = a[0] * 19077 >> 8)) + -17685) >>
        6,
        select_if(0, 255, oa < 17685),
        pa < 16384);
    d[0]:byte =
      select_if((pa = (oa = (g * 26149 >> 8) + m) + -14234) >> 6,
                select_if(0, 255, oa < 14234),
                pa < 16384);
    d[1]:byte =
      select_if(
        (m = (g = m - (na * 6419 >> 8) + (g * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, g < -8708),
        m < 16384);
    d = d + 3;
    a = a + 1;
    c = c + (g = f & 1);
    b = b + g;
    if (e != (f = f + 1)) continue L_d;
  }
  label B_c:
}

function WebPInitConvertARGBToYUVSSE2() {
  0[265101]:int = 252;
  0[265100]:int = 253;
  0[265097]:int = 254;
  0[265098]:int = 255;
  0[265099]:int = 256;
}

function ConvertARGBToUV_SSE2(a:int, b:simd_ptr@1, c:simd_ptr@1, d:int, e:int) {
  var j:simd;
  var m:simd;
  var n:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var f:int = 0;
  var g:int = d & -32;
  if (g < 1) goto B_a;
  var h:simd_ptr@1 = a;
  loop L_b {
    var i:simd = h[0];
    var k:simd = SimdShuffleOp(i, j = (h + 16)[0]:simd@1);
    var l:simd = SimdShuffleOp(k, i = SimdShuffleOp(i, j));
    var o:simd = 
      SimdShuffleOp(
        SimdShuffleOp(l, k = SimdShuffleOp(k, i)),
        SimdShuffleOp(
          n = 
            SimdShuffleOp(
              m = SimdShuffleOp(i = (h + 32)[0]:simd@1, j = (h + 48)[0]:simd@1),
              i = SimdShuffleOp(i, j)),
          m = SimdShuffleOp(m, i)));
    o = 
      (SimdShuffleOp(o, i = V128) i32x4_dot_i16x8_s (j = V128)) i16x8_narrow_i32x4_s
      (SimdShuffleOp(o, i) i32x4_dot_i16x8_s j);
    var p:simd = 
      SimdShuffleOp(
        o,
        l = 
          (SimdShuffleOp(
             l = SimdShuffleOp(k = SimdShuffleOp(l, k), n = SimdShuffleOp(n, m)),
             i) i32x4_dot_i16x8_s
           j) i16x8_narrow_i32x4_s
          (SimdShuffleOp(l, i) i32x4_dot_i16x8_s j));
    l = 
      (((((p i32x4_dot_i16x8_s (m = V128)) i32x4_add
          ((r = 
              SimdShuffleOp(
                l,
                q = 
                  (SimdShuffleOp(k = SimdShuffleOp(k, n), i) i32x4_dot_i16x8_s j) i16x8_narrow_i32x4_s
                  (SimdShuffleOp(k, i) i32x4_dot_i16x8_s j))) i32x4_dot_i16x8_s
           (n = V128))) i32x4_add
         (k = V128)) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       (((((o = SimdShuffleOp(o, l)) i32x4_dot_i16x8_s m) i32x4_add
          ((q = SimdShuffleOp(l, q)) i32x4_dot_i16x8_s n)) i32x4_add
         k) i32x4_shr_s
        18)) i8x16_narrow_i16x8_u
      ((((((u = 
              SimdShuffleOp(
                v = 
                  (SimdShuffleOp(
                     v = 
                       SimdShuffleOp(
                         SimdShuffleOp(
                           s = 
                             SimdShuffleOp(
                               t = SimdShuffleOp(l = (h + 64)[0]:simd@1, s = (h + 80)[0]:simd@1),
                               l = SimdShuffleOp(l, s)),
                           l = SimdShuffleOp(t, l)),
                         SimdShuffleOp(
                           u = 
                             SimdShuffleOp(
                               v = SimdShuffleOp(t = (h + 96)[0]:simd@1, u = (h + 112)[0]:simd@1),
                               t = SimdShuffleOp(t, u)),
                           t = SimdShuffleOp(v, t))),
                     i) i32x4_dot_i16x8_s
                   j) i16x8_narrow_i32x4_s
                  (SimdShuffleOp(v, i) i32x4_dot_i16x8_s j),
                l = 
                  (SimdShuffleOp(
                     l = SimdShuffleOp(s = SimdShuffleOp(s, l), t = SimdShuffleOp(u, t)),
                     i) i32x4_dot_i16x8_s
                   j) i16x8_narrow_i32x4_s
                  (SimdShuffleOp(l, i) i32x4_dot_i16x8_s j))) i32x4_dot_i16x8_s
           m) i32x4_add
          ((s = 
              SimdShuffleOp(
                l,
                i = 
                  (SimdShuffleOp(s = SimdShuffleOp(s, t), i) i32x4_dot_i16x8_s j) i16x8_narrow_i32x4_s
                  (SimdShuffleOp(s, i) i32x4_dot_i16x8_s j))) i32x4_dot_i16x8_s
           n)) i32x4_add
         k) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       (((((t = SimdShuffleOp(v, l)) i32x4_dot_i16x8_s m) i32x4_add
          ((m = SimdShuffleOp(l, i)) i32x4_dot_i16x8_s n)) i32x4_add
         k) i32x4_shr_s
        18));
    i = 
      (((((p i32x4_dot_i16x8_s (i = V128)) i32x4_add
          (r i32x4_dot_i16x8_s (j = V128))) i32x4_add
         k) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       ((((o i32x4_dot_i16x8_s i) i32x4_add (q i32x4_dot_i16x8_s j)) i32x4_add
         k) i32x4_shr_s
        18)) i8x16_narrow_i16x8_u
      (((((u i32x4_dot_i16x8_s i) i32x4_add (s i32x4_dot_i16x8_s j)) i32x4_add
         k) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       ((((t i32x4_dot_i16x8_s i) i32x4_add (m i32x4_dot_i16x8_s j)) i32x4_add
         k) i32x4_shr_s
        18));
    if (e) goto B_c;
    l = l i8x16_avgr_u c[0];
    i = i i8x16_avgr_u b[0];
    label B_c:
    b[0] = i;
    c[0] = l;
    h = h + 128;
    c = c + 16;
    b = b + 16;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (d <= f) goto B_d;
  WebPConvertARGBToUV_C(a + (f << 2), b, c, d - f, e);
  label B_d:
}

function ConvertARGBToY_SSE2(a:int, b:int, c:int) {
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var e:int;
  var f:int;
  var r:int;
  var d:int_ptr = 0;
  e = c & -16;
  if (e < 1) goto B_a;
  f = a;
  loop L_b {
    (b + d)[0]:simd@1 =
      (((((SimdShuffleOp(
             m = 
               SimdShuffleOp(
                 l = 
                   SimdShuffleOp(
                     SimdShuffleOp(
                       h = SimdShuffleOp(
                             i = SimdShuffleOp(g = f[0]:simd@1, h = (f + 16)[0]:simd@1),
                             g = SimdShuffleOp(g, h)),
                       i = SimdShuffleOp(i, g)),
                     SimdShuffleOp(
                       j = 
                         SimdShuffleOp(
                           k = SimdShuffleOp(g = (f + 32)[0]:simd@1, j = (f + 48)[0]:simd@1),
                           g = SimdShuffleOp(g, j)),
                       k = SimdShuffleOp(k, g))),
                 g = V128),
             h = 
               SimdShuffleOp(
                 o = SimdShuffleOp(n = SimdShuffleOp(h, i), j = SimdShuffleOp(j, k)),
                 g)) i32x4_dot_i16x8_s
           (i = V128)) i32x4_add
          (SimdShuffleOp(h, p = SimdShuffleOp(n = SimdShuffleOp(n, j), g)) i32x4_dot_i16x8_s
           (j = V128))) i32x4_add
         (k = V128)) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(m, h) i32x4_dot_i16x8_s i) i32x4_add
          (SimdShuffleOp(h, p) i32x4_dot_i16x8_s j)) i32x4_add
         k) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(l = SimdShuffleOp(l, g), h = SimdShuffleOp(o, g)) i32x4_dot_i16x8_s
           i) i32x4_add
          (SimdShuffleOp(h, g = SimdShuffleOp(n, g)) i32x4_dot_i16x8_s j)) i32x4_add
         k) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(l, h) i32x4_dot_i16x8_s i) i32x4_add
          (SimdShuffleOp(h, g) i32x4_dot_i16x8_s j)) i32x4_add
         k) i32x4_shr_s
        16));
    f = f + 64;
    d = d + 16;
    if (d < e) continue L_b;
  }
  label B_a:
  if (c <= d) goto B_c;
  var q:int = c - d;
  if (q < 8) goto B_d;
  f = a + (d << 2);
  e = b + d;
  if (e >= a + (c << 2)) goto B_e;
  if (f < b + c) goto B_d;
  label B_e:
  d = d + (r = q & -4);
  var s:int = r;
  loop L_f {
    let t0 = 
      SimdStoreLane(
        e,
        SimdShuffleOp(
          ((((((g = f[0]:simd@4) v128_and (h = V128)) i32x4_mul V128) i32x4_add
             (((g i32x4_shr_u 16) v128_and h) i32x4_mul V128)) i32x4_add
            (((g i32x4_shr_u 8) v128_and h) i32x4_mul V128)) i32x4_add
           V128) i32x4_shr_u
          16,
          g));
    e = e + 4;
    f = f + 16;
    if (s = s + -4) continue L_f;
    t0;
  }
  if (q == r) goto B_c;
  label B_d:
  f = b + d;
  e = c - d;
  d = a + (d << 2);
  loop L_g {
    f[0]:byte =
      ((b = d[0]) & 255) * 6420 + (b >> 16 & 255) * 16839 +
      (b >> 8 & 255) * 33059 +
      1081344 >>
      16;
    d = d + 4;
    f = f + 1;
    e = e + -1;
    if (e) continue L_g;
  }
  label B_c:
}

function ConvertRGB24ToY_SSE2(a:int, b:int, c:int) {
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var e:simd_ptr@1;
  var w:int;
  var x:int;
  var f:int;
  var d:int = 0;
  e = c & -32;
  if (e < 1) goto B_a;
  loop L_b {
    f = b + d;
    (f + 16)[0]:simd@1 =
      (((((SimdShuffleOp(
             s = 
               SimdShuffleOp(
                 r = 
                   SimdShuffleOp(
                     n = 
                       SimdShuffleOp(
                         q = 
                           SimdShuffleOp(
                             m = 
                               SimdShuffleOp(i = SimdShuffleOp(g = a[0]:simd@1, h = a[48]:simd@1),
                                             l = SimdShuffleOp(j = a[16]:simd@1, k = a[64]:simd@1)),
                             p = 
                               SimdShuffleOp(g = SimdShuffleOp(g, h),
                                             o = SimdShuffleOp(h = a[32]:simd@1, n = a[80]:simd@1))),
                         l = 
                           SimdShuffleOp(
                             i = SimdShuffleOp(i, l),
                             k = SimdShuffleOp(j = SimdShuffleOp(j, k), h = SimdShuffleOp(h, n)))),
                     p = 
                       SimdShuffleOp(
                         m = SimdShuffleOp(m, p),
                         j = SimdShuffleOp(o = SimdShuffleOp(g, o), h = SimdShuffleOp(j, h)))),
                 g = V128),
             k = 
               SimdShuffleOp(
                 t = 
                   SimdShuffleOp(
                     l = SimdShuffleOp(q, l),
                     q = SimdShuffleOp(i = SimdShuffleOp(i, k), o = SimdShuffleOp(o, h))),
                 g)) i32x4_dot_i16x8_s
           (h = V128)) i32x4_add
          (SimdShuffleOp(
             k,
             v = 
               SimdShuffleOp(
                 u = SimdShuffleOp(m = SimdShuffleOp(m, j), o = SimdShuffleOp(i, o)),
                 g)) i32x4_dot_i16x8_s
           (i = V128))) i32x4_add
         (j = V128)) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(s, k) i32x4_dot_i16x8_s h) i32x4_add
          (SimdShuffleOp(k, v) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(r = SimdShuffleOp(r, g), k = SimdShuffleOp(t, g)) i32x4_dot_i16x8_s
           h) i32x4_add
          (SimdShuffleOp(k, s = SimdShuffleOp(u, g)) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(r, k) i32x4_dot_i16x8_s h) i32x4_add
          (SimdShuffleOp(k, s) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16));
    f[0]:simd@1 =
      (((((SimdShuffleOp(p = SimdShuffleOp(n = SimdShuffleOp(n, p), g),
                         k = SimdShuffleOp(l = SimdShuffleOp(l, q), g)) i32x4_dot_i16x8_s
           h) i32x4_add
          (SimdShuffleOp(k, o = SimdShuffleOp(m = SimdShuffleOp(m, o), g)) i32x4_dot_i16x8_s
           i)) i32x4_add
         j) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(p, k) i32x4_dot_i16x8_s h) i32x4_add
          (SimdShuffleOp(k, o) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(n = SimdShuffleOp(n, g), k = SimdShuffleOp(l, g)) i32x4_dot_i16x8_s
           h) i32x4_add
          (SimdShuffleOp(k, g = SimdShuffleOp(m, g)) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(n, k) i32x4_dot_i16x8_s h) i32x4_add
          (SimdShuffleOp(k, g) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16));
    a = a + 96;
    d = d + 32;
    if (d < e) continue L_b;
  }
  label B_a:
  if (c <= d) goto B_c;
  w = c - d;
  if (w >= 16) goto B_e;
  f = a;
  goto B_d;
  label B_e:
  e = b + d;
  if (e >= a + d * -3 + c * 3) goto B_f;
  if (a >= b + c) goto B_f;
  f = a;
  goto B_d;
  label B_f:
  d = d + (x = w & -16);
  f = a + x * 3;
  var y:int = x;
  loop L_g {
    e[0] =
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(a + 9,
                              SimdLoadLane(a + 6, SimdLoadLane(a + 3, LoadSplat(a)))))) i32x4_mul
             (g = V128)) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 10,
                   SimdLoadLane(a + 7, SimdLoadLane(a + 4, LoadSplat(a + 1)))))) i32x4_mul
             (h = V128))) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 11,
                  SimdLoadLane(a + 8, SimdLoadLane(a + 5, LoadSplat(a + 2)))))) i32x4_mul
            (i = V128))) i32x4_add
          (j = V128)) i32x4_shr_u
         16) v128_and
        (k = V128)) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 21,
                   SimdLoadLane(a + 18, SimdLoadLane(a + 15, LoadSplat(a + 12)))))) i32x4_mul
             g) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 22,
                   SimdLoadLane(a + 19, SimdLoadLane(a + 16, LoadSplat(a + 13)))))) i32x4_mul
             h)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 23,
                  SimdLoadLane(a + 20, SimdLoadLane(a + 17, LoadSplat(a + 14)))))) i32x4_mul
            i)) i32x4_add
          j) i32x4_shr_u
         16) v128_and
        k)) i8x16_narrow_i16x8_u
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 33,
                   SimdLoadLane(a + 30, SimdLoadLane(a + 27, LoadSplat(a + 24)))))) i32x4_mul
             g) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 34,
                   SimdLoadLane(a + 31, SimdLoadLane(a + 28, LoadSplat(a + 25)))))) i32x4_mul
             h)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 35,
                  SimdLoadLane(a + 32, SimdLoadLane(a + 29, LoadSplat(a + 26)))))) i32x4_mul
            i)) i32x4_add
          j) i32x4_shr_u
         16) v128_and
        k) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 45,
                   SimdLoadLane(a + 42, SimdLoadLane(a + 39, LoadSplat(a + 36)))))) i32x4_mul
             g) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 46,
                   SimdLoadLane(a + 43, SimdLoadLane(a + 40, LoadSplat(a + 37)))))) i32x4_mul
             h)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 47,
                  SimdLoadLane(a + 44, SimdLoadLane(a + 41, LoadSplat(a + 38)))))) i32x4_mul
            i)) i32x4_add
          j) i32x4_shr_u
         16) v128_and
        k));
    e = e + 16;
    a = a + 48;
    y = y + -16;
    if (y) continue L_g;
  }
  if (w == x) goto B_c;
  label B_d:
  a = d ^ -1;
  if (eqz(c - d & 1)) goto B_h;
  (b + d)[0]:byte =
    f[0]:ubyte * 16839 + f[1]:ubyte * 33059 + f[2]:ubyte * 6420 + 1081344 >>
    16;
  f = f + 3;
  d = d + 1;
  label B_h:
  if (a == 0 - c) goto B_c;
  a = b + d;
  d = c - d;
  loop L_i {
    a[0]:byte =
      f[0]:ubyte * 16839 + f[1]:ubyte * 33059 + f[2]:ubyte * 6420 + 1081344 >>
      16;
    (a + 1)[0]:byte =
      f[3]:ubyte * 16839 + f[4]:ubyte * 33059 + f[5]:ubyte * 6420 + 1081344 >>
      16;
    a = a + 2;
    f = f + 6;
    d = d + -2;
    if (d) continue L_i;
  }
  label B_c:
}

function ConvertBGR24ToY_SSE2(a:int, b:int, c:int) {
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var e:simd_ptr@1;
  var w:int;
  var x:int;
  var f:int;
  var d:int = 0;
  e = c & -32;
  if (e < 1) goto B_a;
  loop L_b {
    f = b + d;
    (f + 16)[0]:simd@1 =
      (((((SimdShuffleOp(
             k = 
               SimdShuffleOp(
                 s = 
                   SimdShuffleOp(
                     n = 
                       SimdShuffleOp(
                         q = 
                           SimdShuffleOp(
                             m = 
                               SimdShuffleOp(i = SimdShuffleOp(g = a[0]:simd@1, h = a[48]:simd@1),
                                             l = SimdShuffleOp(j = a[16]:simd@1, k = a[64]:simd@1)),
                             p = 
                               SimdShuffleOp(g = SimdShuffleOp(g, h),
                                             o = SimdShuffleOp(h = a[32]:simd@1, n = a[80]:simd@1))),
                         l = 
                           SimdShuffleOp(
                             i = SimdShuffleOp(i, l),
                             k = SimdShuffleOp(j = SimdShuffleOp(j, k), h = SimdShuffleOp(h, n)))),
                     r = 
                       SimdShuffleOp(
                         i = SimdShuffleOp(i, k),
                         j = SimdShuffleOp(o = SimdShuffleOp(g, o), h = SimdShuffleOp(j, h)))),
                 g = V128),
             t = 
               SimdShuffleOp(
                 q = 
                   SimdShuffleOp(
                     l = SimdShuffleOp(q, l),
                     p = SimdShuffleOp(m = SimdShuffleOp(m, p), o = SimdShuffleOp(o, h))),
                 g)) i32x4_dot_i16x8_s
           (h = V128)) i32x4_add
          (SimdShuffleOp(
             v = 
               SimdShuffleOp(
                 u = SimdShuffleOp(m = SimdShuffleOp(m, o), o = SimdShuffleOp(i, j)),
                 g),
             k) i32x4_dot_i16x8_s
           (i = V128))) i32x4_add
         (j = V128)) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(k, t) i32x4_dot_i16x8_s h) i32x4_add
          (SimdShuffleOp(v, k) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(k = SimdShuffleOp(s, g), q = SimdShuffleOp(q, g)) i32x4_dot_i16x8_s
           h) i32x4_add
          (SimdShuffleOp(s = SimdShuffleOp(u, g), k) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(k, q) i32x4_dot_i16x8_s h) i32x4_add
          (SimdShuffleOp(s, k) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16));
    f[0]:simd@1 =
      (((((SimdShuffleOp(k = SimdShuffleOp(n = SimdShuffleOp(n, r), g),
                         p = SimdShuffleOp(l = SimdShuffleOp(l, p), g)) i32x4_dot_i16x8_s
           h) i32x4_add
          (SimdShuffleOp(o = SimdShuffleOp(m = SimdShuffleOp(m, o), g), k) i32x4_dot_i16x8_s
           i)) i32x4_add
         j) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(k, p) i32x4_dot_i16x8_s h) i32x4_add
          (SimdShuffleOp(o, k) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(k = SimdShuffleOp(n, g), l = SimdShuffleOp(l, g)) i32x4_dot_i16x8_s
           h) i32x4_add
          (SimdShuffleOp(g = SimdShuffleOp(m, g), k) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(k, l) i32x4_dot_i16x8_s h) i32x4_add
          (SimdShuffleOp(g, k) i32x4_dot_i16x8_s i)) i32x4_add
         j) i32x4_shr_s
        16));
    a = a + 96;
    d = d + 32;
    if (d < e) continue L_b;
  }
  label B_a:
  if (c <= d) goto B_c;
  w = c - d;
  if (w >= 16) goto B_e;
  f = a;
  goto B_d;
  label B_e:
  e = b + d;
  if (e >= a + d * -3 + c * 3) goto B_f;
  if (a >= b + c) goto B_f;
  f = a;
  goto B_d;
  label B_f:
  d = d + (x = w & -16);
  f = a + x * 3;
  var y:int = x;
  loop L_g {
    e[0] =
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 11,
                   SimdLoadLane(a + 8, SimdLoadLane(a + 5, LoadSplat(a + 2)))))) i32x4_mul
             (g = V128)) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 10,
                   SimdLoadLane(a + 7, SimdLoadLane(a + 4, LoadSplat(a + 1)))))) i32x4_mul
             (h = V128))) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(a + 9,
                             SimdLoadLane(a + 6, SimdLoadLane(a + 3, LoadSplat(a)))))) i32x4_mul
            (i = V128))) i32x4_add
          (j = V128)) i32x4_shr_u
         16) v128_and
        (k = V128)) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 23,
                   SimdLoadLane(a + 20, SimdLoadLane(a + 17, LoadSplat(a + 14)))))) i32x4_mul
             g) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 22,
                   SimdLoadLane(a + 19, SimdLoadLane(a + 16, LoadSplat(a + 13)))))) i32x4_mul
             h)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 21,
                  SimdLoadLane(a + 18, SimdLoadLane(a + 15, LoadSplat(a + 12)))))) i32x4_mul
            i)) i32x4_add
          j) i32x4_shr_u
         16) v128_and
        k)) i8x16_narrow_i16x8_u
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 35,
                   SimdLoadLane(a + 32, SimdLoadLane(a + 29, LoadSplat(a + 26)))))) i32x4_mul
             g) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 34,
                   SimdLoadLane(a + 31, SimdLoadLane(a + 28, LoadSplat(a + 25)))))) i32x4_mul
             h)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 33,
                  SimdLoadLane(a + 30, SimdLoadLane(a + 27, LoadSplat(a + 24)))))) i32x4_mul
            i)) i32x4_add
          j) i32x4_shr_u
         16) v128_and
        k) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 47,
                   SimdLoadLane(a + 44, SimdLoadLane(a + 41, LoadSplat(a + 38)))))) i32x4_mul
             g) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 46,
                   SimdLoadLane(a + 43, SimdLoadLane(a + 40, LoadSplat(a + 37)))))) i32x4_mul
             h)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 45,
                  SimdLoadLane(a + 42, SimdLoadLane(a + 39, LoadSplat(a + 36)))))) i32x4_mul
            i)) i32x4_add
          j) i32x4_shr_u
         16) v128_and
        k));
    e = e + 16;
    a = a + 48;
    y = y + -16;
    if (y) continue L_g;
  }
  if (w == x) goto B_c;
  label B_d:
  a = d ^ -1;
  if (eqz(c - d & 1)) goto B_h;
  (b + d)[0]:byte =
    f[2]:ubyte * 16839 + f[1]:ubyte * 33059 + f[0]:ubyte * 6420 + 1081344 >>
    16;
  f = f + 3;
  d = d + 1;
  label B_h:
  if (a == 0 - c) goto B_c;
  a = b + d;
  d = c - d;
  loop L_i {
    a[0]:byte =
      f[2]:ubyte * 16839 + f[1]:ubyte * 33059 + f[0]:ubyte * 6420 + 1081344 >>
      16;
    (a + 1)[0]:byte =
      f[5]:ubyte * 16839 + f[4]:ubyte * 33059 + f[3]:ubyte * 6420 + 1081344 >>
      16;
    a = a + 2;
    f = f + 6;
    d = d + -2;
    if (d) continue L_i;
  }
  label B_c:
}

function ConvertRGBA32ToUV_SSE2(a:simd_ptr@1, b:simd_ptr@1, c:simd_ptr@1, d:int) {
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var e:int;
  e = d & -16;
  if (e < 1) goto B_a;
  var f:int = a + (e << 3);
  loop L_b {
    b[0] =
      ((((((n = 
              SimdShuffleOp(
                m = 
                  SimdShuffleOp(
                    h = 
                      SimdShuffleOp(i = SimdShuffleOp(g = a[0], h = (a + 16)[0]:simd@1),
                                    g = SimdShuffleOp(g, h)),
                    j = 
                      SimdShuffleOp(
                        l = SimdShuffleOp(j = (a + 32)[0]:simd@1, k = (a + 48)[0]:simd@1),
                        k = SimdShuffleOp(j, k))),
                h = SimdShuffleOp(h, j))) i32x4_dot_i16x8_s
           (j = V128)) i32x4_add
          ((l = SimdShuffleOp(
                  h,
                  k = SimdShuffleOp(SimdShuffleOp(i, g), SimdShuffleOp(l, k)))) i32x4_dot_i16x8_s
           (i = V128))) i32x4_add
         (g = V128)) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       (((((m = SimdShuffleOp(m, h)) i32x4_dot_i16x8_s j) i32x4_add
          ((k = SimdShuffleOp(h, k)) i32x4_dot_i16x8_s i)) i32x4_add
         g) i32x4_shr_s
        18)) i8x16_narrow_i16x8_u
      ((((((r = 
              SimdShuffleOp(
                t = 
                  SimdShuffleOp(
                    h = 
                      SimdShuffleOp(
                        p = SimdShuffleOp(h = (a + 64)[0]:simd@1, o = (a + 80)[0]:simd@1),
                        o = SimdShuffleOp(h, o)),
                    r = 
                      SimdShuffleOp(
                        s = SimdShuffleOp(q = (a + 96)[0]:simd@1, r = (a + 112)[0]:simd@1),
                        q = SimdShuffleOp(q, r))),
                h = SimdShuffleOp(h, r))) i32x4_dot_i16x8_s
           j) i32x4_add
          ((p = SimdShuffleOp(
                  h,
                  o = SimdShuffleOp(SimdShuffleOp(p, o), SimdShuffleOp(s, q)))) i32x4_dot_i16x8_s
           i)) i32x4_add
         g) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       (((((q = SimdShuffleOp(t, h)) i32x4_dot_i16x8_s j) i32x4_add
          ((o = SimdShuffleOp(h, o)) i32x4_dot_i16x8_s i)) i32x4_add
         g) i32x4_shr_s
        18));
    c[0] =
      (((((n i32x4_dot_i16x8_s (h = V128)) i32x4_add
          (l i32x4_dot_i16x8_s (j = V128))) i32x4_add
         g) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       ((((m i32x4_dot_i16x8_s h) i32x4_add (k i32x4_dot_i16x8_s j)) i32x4_add
         g) i32x4_shr_s
        18)) i8x16_narrow_i16x8_u
      (((((r i32x4_dot_i16x8_s h) i32x4_add (p i32x4_dot_i16x8_s j)) i32x4_add
         g) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       ((((q i32x4_dot_i16x8_s h) i32x4_add (o i32x4_dot_i16x8_s j)) i32x4_add
         g) i32x4_shr_s
        18));
    c = c + 16;
    b = b + 16;
    a = a + 128;
    if (a < f) continue L_b;
  }
  label B_a:
  if (e >= d) goto B_c;
  WebPConvertRGBA32ToUV_C(a, b, c, d & 15);
  label B_c:
}

function WebPInitAlphaProcessingSSE41() {
  0[264924]:int = 257
}

function ExtractAlpha_SSE41(a:int, b:int, c:int, d:int, e:int, f:int):int {
  var l:int;
  var n:simd;
  var h:simd;
  var g:int;
  var r:int;
  var m:int;
  var o:int;
  if (d >= 1) goto B_b;
  g = 255;
  h = V128;
  goto B_a;
  label B_b:
  h = V128;
  var i:int = 0;
  g = 255;
  var j:int = c + -1 & -16;
  var k:int = j < 1;
  loop L_c {
    if (eqz(k)) goto B_e;
    l = 0;
    goto B_d;
    label B_e:
    l = 0;
    m = a;
    loop L_f {
      (e + l)[0]:simd@1 =
        (n = ((((m + 16)[0]:simd@1 i8x16_swizzle V128) v128_or
               (m[0]:simd@1 i8x16_swizzle V128)) v128_or
              ((m + 32)[0]:simd@1 i8x16_swizzle V128)) v128_or
             ((m + 48)[0]:simd@1 i8x16_swizzle V128));
      h = h v128_and n;
      m = m + 64;
      l = l + 16;
      if (l < j) continue L_f;
    }
    label B_d:
    if (c <= l) goto B_g;
    o = c - l;
    if (o < 4) goto B_h;
    m = e + l;
    var p:simd = SimdLaneOp(V128, g);
    var q:simd = i32x4_splat(l) i32x4_add V128;
    l = l + (r = o & -4);
    g = r;
    loop L_i {
      let t0 = 
        SimdStoreLane(
          m,
          n = 
            SimdLoadLane(
              a + SimdLaneOp(n = q i32x4_shl 2),
              SimdLoadLane(
                a + SimdLaneOp(n),
                SimdLoadLane(a + SimdLaneOp(n), LoadSplat(a + SimdLaneOp(n))))));
      p = p v128_and i32x4_extend_low_i16x8_u(i16x8_extend_low_i8x16_u(n));
      m = m + 4;
      q = q i32x4_add V128;
      if (g = g + -4) continue L_i;
      t0;
    }
    n = p v128_and SimdShuffleOp(p, h);
    g = SimdLaneOp(n v128_and SimdShuffleOp(n, h));
    if (o == r) goto B_g;
    label B_h:
    m = a + (l << 2);
    loop L_j {
      (e + l)[0]:byte = (o = m[0]:ubyte);
      m = m + 4;
      g = g & o;
      if (c != (l = l + 1)) continue L_j;
    }
    label B_g:
    e = e + f;
    a = a + b;
    i = i + 1;
    if (i != d) continue L_c;
  }
  label B_a:
  return (i8x16_bitmask(h i8x16_eq V128) & (g | 65280)) == 65535;
}

function VP8DspInitSSE41() {
  1059728[3]:int = 258
}

function HE16_SSE41(a:simd_ptr@1) {
  var b:simd;
  a[32] = LoadZero(a) i8x16_swizzle (b = V128);
  a[64] = LoadZero(a) i8x16_swizzle b;
  a[96] = LoadZero(a) i8x16_swizzle b;
  a[128] = LoadZero(a) i8x16_swizzle b;
  a[160] = LoadZero(a) i8x16_swizzle b;
  a[192] = LoadZero(a) i8x16_swizzle b;
  a[224] = LoadZero(a) i8x16_swizzle b;
  a[256] = LoadZero(a) i8x16_swizzle b;
  a[0] = LoadZero(a + -4) i8x16_swizzle b;
  a[288] = LoadZero(a) i8x16_swizzle b;
  a[320] = LoadZero(a) i8x16_swizzle b;
  a[352] = LoadZero(a) i8x16_swizzle b;
  a[384] = LoadZero(a) i8x16_swizzle b;
  a[416] = LoadZero(a) i8x16_swizzle b;
  a[448] = LoadZero(a) i8x16_swizzle b;
  a[480] = LoadZero(a) i8x16_swizzle b;
}

function VP8LDspInitSSE41() {
  0[264990]:int = 259;
  0[265044]:int = 260;
  0[264992]:int = 261;
}

function ConvertBGRAToRGB_SSE41(a:simd_ptr@1, b:int, c:simd_ptr@1) {
  var f:simd;
  var j:simd;
  var d:int;
  if (b >= 16) goto B_b;
  d = b;
  goto B_a;
  label B_b:
  var e:simd = V128;
  var g:simd = SimdShuffleOp(e, e) v128_and (f = V128);
  var h:simd = SimdShuffleOp(e, e) v128_and f;
  var i:simd = SimdShuffleOp(e, e) v128_and f;
  loop L_c {
    e = (a + 16)[0]:simd@1;
    f = a[0];
    (c + 32)[0]:simd@1 =
      SimdShuffleOp(j = (a + 32)[0]:simd@1 i8x16_swizzle h,
                    (a + 48)[0]:simd@1 i8x16_swizzle g);
    (c + 16)[0]:simd@1 = SimdShuffleOp(e = e i8x16_swizzle i, j);
    c[0] = SimdShuffleOp(f i8x16_swizzle V128, e);
    c = c + 48;
    a = a + 64;
    var k:int = b > 31;
    d = b + -16;
    b = d;
    if (k) continue L_c;
  }
  label B_a:
  if (d < 1) goto B_d;
  VP8LConvertBGRAToRGB_C(a, d, c);
  label B_d:
}

function TransformColorInverse_SSE41(a:{ a:ubyte, b:ubyte, c:ubyte }, b:int, c:int, d:int) {
  var n:simd;
  var k:int;
  var e:int = 0;
  if (c < 4) goto B_a;
  var f:simd = i32x4_splat(i32_extend16_s(a.a << 8) << 11 |
                           (i32_extend16_s(a.b << 8) >> 5 & 65528));
  var g:simd = i32x4_extend_high_i16x8_s(f);
  var h:simd = i32x4_extend_low_i16x8_s(f);
  f = i32x4_splat(i32_extend16_s(a.c << 8) >> 5);
  var i:simd = i32x4_extend_high_i16x8_s(f);
  var j:simd = i32x4_extend_low_i16x8_s(f);
  k = 0;
  var l:simd_ptr@1 = d;
  var m:simd_ptr@1 = b;
  loop L_b {
    l[0] =
      v128_bitselect(
        f = m[0],
        SimdShuffleOp(
          i32x4_extend_low_i16x8_s(
            n = 
              (f = f i8x16_add
                   SimdShuffleOp(
                     i32x4_extend_low_i16x8_s(n = f i8x16_swizzle V128) i32x4_mul h,
                     i32x4_extend_high_i16x8_s(n) i32x4_mul g)) i8x16_swizzle
              V128) i32x4_mul
          j,
          i32x4_extend_high_i16x8_s(n) i32x4_mul i) i8x16_add
        f,
        V128);
    l = l + 16;
    m = m + 16;
    var o:int = k + 8;
    e = k + 4;
    k = e;
    if (o <= c) continue L_b;
  }
  label B_a:
  if (c == e) goto B_c;
  VP8LTransformColorInverse_C(a, b + (k = e << 2), c - e, d + k);
  label B_c:
}

function ConvertBGRAToBGR_SSE41(a:simd_ptr@1, b:int, c:simd_ptr@1) {
  var f:simd;
  var j:simd;
  var d:int;
  if (b >= 16) goto B_b;
  d = b;
  goto B_a;
  label B_b:
  var e:simd = V128;
  var g:simd = SimdShuffleOp(e, e) v128_and (f = V128);
  var h:simd = SimdShuffleOp(e, e) v128_and f;
  var i:simd = SimdShuffleOp(e, e) v128_and f;
  loop L_c {
    e = (a + 16)[0]:simd@1;
    f = a[0];
    (c + 32)[0]:simd@1 =
      SimdShuffleOp(j = (a + 32)[0]:simd@1 i8x16_swizzle h,
                    (a + 48)[0]:simd@1 i8x16_swizzle g);
    (c + 16)[0]:simd@1 = SimdShuffleOp(e = e i8x16_swizzle i, j);
    c[0] = SimdShuffleOp(f i8x16_swizzle V128, e);
    c = c + 48;
    a = a + 64;
    var k:int = b > 31;
    d = b + -16;
    b = d;
    if (k) continue L_c;
  }
  label B_a:
  if (d < 1) goto B_d;
  VP8LConvertBGRAToBGR_C(a, d, c);
  label B_d:
}

function WebPInitUpsamplersSSE41() {
  1060208[2]:int = 262;
  0[265052]:int = 263;
}

function UpsampleBgrLinePair_SSE41(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte }, h:{ a:byte, b:byte, c:byte }, i:int) {
  var o:int;
  var p:int;
  var q:simd_ptr@1;
  var r:int;
  var s:int;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var j:int = stack_pointer - 528;
  stack_pointer = j;
  var k:int = 0;
  memset(j + 64, 0, 463);
  var l:int = 1;
  var m:int = e[0];
  var n:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd } = 
    c[0];
  g.c =
    select_if(
      (s = 
         (r = 
            ((q = (p = (f[0] + (o = d[0]) >> 1) + 1) + o >> 1) * 26149 >> 8) +
            (o = a[0] * 19077 >> 8)) +
         -14234) >>
      6,
      select_if(0, 255, r < 14234),
      s < 16384);
  g.a =
    select_if(
      (r = (m = ((n = n + (s = (m + n >> 1) + 1) >> 1) * 33050 >> 8) + o) +
           -17685) >>
      6,
      select_if(0, 255, m < 17685),
      r < 16384);
  g.b =
    select_if(
      (o = (n = o - (n * 6419 >> 8) + (q * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      o < 16384);
  if (eqz(b)) goto B_a;
  o = e[0];
  h.c =
    select_if(
      (r = 
         (q = ((m = p + f[0] >> 1) * 26149 >> 8) + (n = b[0] * 19077 >> 8)) +
         -14234) >>
      6,
      select_if(0, 255, q < 14234),
      r < 16384);
  h.a =
    select_if(
      (r = (q = ((o = s + o >> 1) * 33050 >> 8) + n) + -17685) >> 6,
      select_if(0, 255, q < 17685),
      r < 16384);
  h.b =
    select_if(
      (o = (n = n - (o * 6419 >> 8) + (m * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      o < 16384);
  label B_a:
  s = j + 96;
  n = j + 64;
  if (i < 34) goto B_b;
  var t:int = b + 1;
  m = g + 3;
  l = h + 3;
  p = a + 1;
  var u:int = n + 96;
  var v:int = n + 64;
  o = 0;
  k = 0;
  loop L_c {
    n.f =
      SimdShuffleOp(
        ca = 
          (w = (q = e + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = c + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = w i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  (w = V128))) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        fa = y i8x16_avgr_u
             (ba = (fa i8x16_avgr_u ba) i8x16_sub
                   (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.e = SimdShuffleOp(ca, fa);
    n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
    n.a = SimdShuffleOp(ba, z);
    n.h =
      SimdShuffleOp(
        ca = 
          (fa = (q = f + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = d + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = fa i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  w)) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        ba = y i8x16_avgr_u
             (w = (fa i8x16_avgr_u ba) i8x16_sub
                  (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.g = SimdShuffleOp(ca, ba);
    n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
    n.c = SimdShuffleOp(w, z);
    VP8YuvToBgr32_SSE41(p + o, n, s, m);
    if (eqz(b)) goto B_d;
    VP8YuvToBgr32_SSE41(t + o, v, u, l);
    label B_d:
    m = m + 96;
    l = l + 96;
    k = k + 16;
    q = o + 66;
    r = o + 32;
    o = r;
    if (q <= i) continue L_c;
  }
  l = r + 1;
  label B_b:
  if (i < 2) goto B_e;
  memcpy(j + 32, c + k, m = (i + 1 >> 1) - (l >> 1));
  o = memcpy(j, e + k, m);
  c = memset(o + 32 + m, (e = o + 32 + (r = m + -1))[0], q = 17 - m);
  p = memset(o + m, (r = o + r)[0]:ubyte, q);
  n.f =
    SimdShuffleOp(
      ca = 
        (w = o[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = o[2]:simd) i8x16_avgr_u (y = o[1]:simd@1)) i8x16_avgr_u
                (ba = w i8x16_avgr_u (aa = o[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                (w = V128))) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      fa = y i8x16_avgr_u
           (ba = (fa i8x16_avgr_u ba) i8x16_sub
                 (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.e = SimdShuffleOp(ca, fa);
  n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
  n.a = SimdShuffleOp(ba, z);
  memcpy(o + 32, d + k, m);
  k = memcpy(o, f + k, m);
  memset(c, e[0], q);
  memset(p, r[0]:ubyte, q);
  n.h =
    SimdShuffleOp(
      ca = 
        (fa = k[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = k[2]:simd) i8x16_avgr_u (y = k[1]:simd@1)) i8x16_avgr_u
                (ba = fa i8x16_avgr_u (aa = k[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                w)) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      ba = y i8x16_avgr_u
           (w = (fa i8x16_avgr_u ba) i8x16_sub
                (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.g = SimdShuffleOp(ca, ba);
  n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
  n.c = SimdShuffleOp(w, z);
  m = memcpy(n + 384, a + l, o = i - l);
  k = n + 128;
  if (b) goto B_f;
  VP8YuvToBgr32_SSE41(m, n, s, k);
  memcpy(g + l * 3, k, o * 3);
  goto B_e;
  label B_f:
  q = memcpy(n + 416, b + l, o);
  VP8YuvToBgr32_SSE41(m, n, s, k);
  VP8YuvToBgr32_SSE41(q, n + 64, n + 96, n = n + 256);
  memcpy(g + (m = l * 3), k, o = o * 3);
  memcpy(h + m, n, o);
  label B_e:
  stack_pointer = j + 528;
}

function UpsampleRgbLinePair_SSE41(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:ubyte_ptr, e:ubyte_ptr, f:ubyte_ptr, g:{ a:byte, b:byte, c:byte }, h:{ a:byte, b:byte, c:byte }, i:int) {
  var o:int;
  var p:int;
  var q:simd_ptr@1;
  var r:int;
  var s:int;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var j:int = stack_pointer - 528;
  stack_pointer = j;
  var k:int = 0;
  memset(j + 64, 0, 463);
  var l:int = 1;
  var m:int = f[0];
  var n:{ a:simd, b:simd, c:simd, d:simd, e:simd, f:simd, g:simd, h:simd } = 
    d[0];
  g.c =
    select_if(
      (s = 
         (r = 
            ((q = (p = (e[0] + (o = c[0]) >> 1) + 1) + o >> 1) * 33050 >> 8) +
            (o = a[0] * 19077 >> 8)) +
         -17685) >>
      6,
      select_if(0, 255, r < 17685),
      s < 16384);
  g.a =
    select_if(
      (r = (m = ((n = n + (s = (m + n >> 1) + 1) >> 1) * 26149 >> 8) + o) +
           -14234) >>
      6,
      select_if(0, 255, m < 14234),
      r < 16384);
  g.b =
    select_if(
      (o = (n = o - (q * 6419 >> 8) + (n * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      o < 16384);
  if (eqz(b)) goto B_a;
  o = f[0];
  h.c =
    select_if(
      (r = 
         (q = ((m = p + e[0] >> 1) * 33050 >> 8) + (n = b[0] * 19077 >> 8)) +
         -17685) >>
      6,
      select_if(0, 255, q < 17685),
      r < 16384);
  h.a =
    select_if(
      (r = (q = ((o = s + o >> 1) * 26149 >> 8) + n) + -14234) >> 6,
      select_if(0, 255, q < 14234),
      r < 16384);
  h.b =
    select_if(
      (o = (n = n - (m * 6419 >> 8) + (o * 13320 >> 8)) + 8708) >> 6,
      select_if(0, 255, n < -8708),
      o < 16384);
  label B_a:
  s = j + 96;
  n = j + 64;
  if (i < 34) goto B_b;
  var t:int = b + 1;
  m = g + 3;
  l = h + 3;
  p = a + 1;
  var u:int = n + 96;
  var v:int = n + 64;
  o = 0;
  k = 0;
  loop L_c {
    n.f =
      SimdShuffleOp(
        ca = 
          (w = (q = e + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = c + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = w i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  (w = V128))) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        fa = y i8x16_avgr_u
             (ba = (fa i8x16_avgr_u ba) i8x16_sub
                   (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.e = SimdShuffleOp(ca, fa);
    n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
    n.a = SimdShuffleOp(ba, z);
    n.h =
      SimdShuffleOp(
        ca = 
          (fa = (q = f + k)[0]) i8x16_avgr_u
          (z = 
             ((fa = 
                 ((z = (x = (r = d + k)[0]:simd@1) i8x16_avgr_u (y = q[1])) i8x16_avgr_u
                  (ba = fa i8x16_avgr_u (aa = r[1]:simd@1))) i8x16_sub
                 ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                   (ea = z v128_xor ba)) v128_and
                  w)) i8x16_avgr_u
              z) i8x16_sub
             (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
        ba = y i8x16_avgr_u
             (w = (fa i8x16_avgr_u ba) i8x16_sub
                  (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
    n.g = SimdShuffleOp(ca, ba);
    n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
    n.c = SimdShuffleOp(w, z);
    VP8YuvToRgb32_SSE41(p + o, n, s, m);
    if (eqz(b)) goto B_d;
    VP8YuvToRgb32_SSE41(t + o, v, u, l);
    label B_d:
    m = m + 96;
    l = l + 96;
    k = k + 16;
    q = o + 66;
    r = o + 32;
    o = r;
    if (q <= i) continue L_c;
  }
  l = r + 1;
  label B_b:
  if (i < 2) goto B_e;
  memcpy(j + 32, c + k, m = (i + 1 >> 1) - (l >> 1));
  o = memcpy(j, e + k, m);
  c = memset(o + 32 + m, (e = o + 32 + (r = m + -1))[0], q = 17 - m);
  p = memset(o + m, (r = o + r)[0]:ubyte, q);
  n.f =
    SimdShuffleOp(
      ca = 
        (w = o[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = o[2]:simd) i8x16_avgr_u (y = o[1]:simd@1)) i8x16_avgr_u
                (ba = w i8x16_avgr_u (aa = o[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = w v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                (w = V128))) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      fa = y i8x16_avgr_u
           (ba = (fa i8x16_avgr_u ba) i8x16_sub
                 (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.e = SimdShuffleOp(ca, fa);
  n.b = SimdShuffleOp(ba = x i8x16_avgr_u ba, z = aa i8x16_avgr_u z);
  n.a = SimdShuffleOp(ba, z);
  memcpy(o + 32, d + k, m);
  k = memcpy(o, f + k, m);
  memset(c, e[0], q);
  memset(p, r[0]:ubyte, q);
  n.h =
    SimdShuffleOp(
      ca = 
        (fa = k[0]:simd) i8x16_avgr_u
        (z = 
           ((fa = 
               ((z = (x = k[2]:simd) i8x16_avgr_u (y = k[1]:simd@1)) i8x16_avgr_u
                (ba = fa i8x16_avgr_u (aa = k[33]:simd@1))) i8x16_sub
               ((((ca = y v128_xor x) v128_or (da = fa v128_xor aa)) v128_or
                 (ea = z v128_xor ba)) v128_and
                w)) i8x16_avgr_u
            z) i8x16_sub
           (((fa v128_xor z) v128_or (ea v128_and ca)) v128_and w)),
      ba = y i8x16_avgr_u
           (w = (fa i8x16_avgr_u ba) i8x16_sub
                (((fa v128_xor ba) v128_or (ea v128_and da)) v128_and w)));
  n.g = SimdShuffleOp(ca, ba);
  n.d = SimdShuffleOp(w = x i8x16_avgr_u w, z = aa i8x16_avgr_u z);
  n.c = SimdShuffleOp(w, z);
  m = memcpy(n + 384, a + l, o = i - l);
  k = n + 128;
  if (b) goto B_f;
  VP8YuvToRgb32_SSE41(m, n, s, k);
  memcpy(g + l * 3, k, o * 3);
  goto B_e;
  label B_f:
  q = memcpy(n + 416, b + l, o);
  VP8YuvToRgb32_SSE41(m, n, s, k);
  VP8YuvToRgb32_SSE41(q, n + 64, n + 96, n = n + 256);
  memcpy(g + (m = l * 3), k, o = o * 3);
  memcpy(h + m, n, o);
  label B_e:
  stack_pointer = j + 528;
}

function WebPInitYUV444ConvertersSSE41() {
  1060272[2]:int = 264;
  0[265068]:int = 265;
}

function Yuv444ToBgr_SSE41(a:int, b:int, c:int, d:int, e:int) {
  var f:int = 0;
  var g:int = e & -32;
  if (g < 1) goto B_a;
  var h:int = d;
  loop L_b {
    VP8YuvToBgr32_SSE41(a + f, b + f, c + f, h);
    h = h + 96;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (e <= f) goto B_c;
  WebPYuv444ToBgr_C(a + f, b + f, c + f, d + f * 3, e - f);
  label B_c:
}

function Yuv444ToRgb_SSE41(a:int, b:int, c:int, d:int, e:int) {
  var f:int = 0;
  var g:int = e & -32;
  if (g < 1) goto B_a;
  var h:int = d;
  loop L_b {
    VP8YuvToRgb32_SSE41(a + f, b + f, c + f, h);
    h = h + 96;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (e <= f) goto B_c;
  WebPYuv444ToRgb_C(a + f, b + f, c + f, d + f * 3, e - f);
  label B_c:
}

function VP8YuvToRgb32_SSE41(a:int, b:int, c:int, d:simd_ptr@1) {
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var e:simd = LoadZero(b);
  var f:simd = LoadZero(b);
  var g:simd = LoadZero(a);
  var h:simd = LoadZero(c);
  var i:simd = LoadZero(a);
  var j:simd = LoadZero(c);
  d[80] =
    (((aa = 
         ((((n = 
               SimdShuffleOp(
                 i32x4_extend_low_i16x8_u(l = SimdShuffleOp(k = V128, LoadZero(a))) i32x4_mul
                 (m = V128),
                 i32x4_extend_high_i16x8_u(l) i32x4_mul m)) i16x8_sub
            (SimdShuffleOp(
               (p = i32x4_extend_low_i16x8_u(o = SimdShuffleOp(k, LoadZero(b)))) i32x4_mul
               (l = V128),
               (q = i32x4_extend_high_i16x8_u(o)) i32x4_mul l) i16x8_add
             SimdShuffleOp(
               (s = i32x4_extend_low_i16x8_u(r = SimdShuffleOp(k, LoadZero(c)))) i32x4_mul
               (o = V128),
               (t = i32x4_extend_high_i16x8_u(r)) i32x4_mul o))) i16x8_add
           (u = V128)) i16x8_shr_s
          6) i8x16_narrow_i16x8_u
         ((((v = 
               SimdShuffleOp(
                 i32x4_extend_low_i16x8_u(r = SimdShuffleOp(k, LoadZero(a))) i32x4_mul
                 m,
                 i32x4_extend_high_i16x8_u(r) i32x4_mul m)) i16x8_sub
            (SimdShuffleOp(
               (w = i32x4_extend_low_i16x8_u(r = SimdShuffleOp(k, LoadZero(b)))) i32x4_mul
               l,
               (x = i32x4_extend_high_i16x8_u(r)) i32x4_mul l) i16x8_add
             SimdShuffleOp(
               (y = i32x4_extend_low_i16x8_u(r = SimdShuffleOp(k, LoadZero(c)))) i32x4_mul
               o,
               (z = i32x4_extend_high_i16x8_u(r)) i32x4_mul o))) i16x8_add
           u) i16x8_shr_s
          6)) i8x16_swizzle
      (ba = V128)) v128_or
     ((y = 
         (((n i16x8_add SimdShuffleOp(s i32x4_mul (r = V128), t i32x4_mul r)) i16x8_add
           (t = V128)) i16x8_shr_s
          6) i8x16_narrow_i16x8_u
         (((v i16x8_add SimdShuffleOp(y i32x4_mul r, z i32x4_mul r)) i16x8_add t) i16x8_shr_s
          6)) i8x16_swizzle
      (z = V128))) v128_or
    ((v = 
        (((SimdShuffleOp(p i32x4_mul (s = V128), q i32x4_mul s) i16x8_add_sat_u
           n) i16x8_sub_sat_u
          (n = V128)) i16x8_shr_u
         6) i8x16_narrow_i16x8_u
        (((SimdShuffleOp(w i32x4_mul s, x i32x4_mul s) i16x8_add_sat_u v) i16x8_sub_sat_u
          n) i16x8_shr_u
         6)) i8x16_swizzle
     (p = V128));
  d[64] =
    ((aa i8x16_swizzle (q = V128)) v128_or (y i8x16_swizzle (w = V128))) v128_or
    (v i8x16_swizzle (x = V128));
  d[48] =
    ((aa i8x16_swizzle (ca = V128)) v128_or (y i8x16_swizzle (aa = V128))) v128_or
    (v i8x16_swizzle (y = V128));
  d[32] =
    (((k = 
         ((((v = SimdShuffleOp(
                   i32x4_extend_low_i16x8_u(v = SimdShuffleOp(k, g)) i32x4_mul m,
                   i32x4_extend_high_i16x8_u(v) i32x4_mul m)) i16x8_sub
            (SimdShuffleOp(
               (g = i32x4_extend_low_i16x8_u(e = SimdShuffleOp(k, e))) i32x4_mul l,
               (e = i32x4_extend_high_i16x8_u(e)) i32x4_mul l) i16x8_add
             SimdShuffleOp(
               (da = i32x4_extend_low_i16x8_u(h = SimdShuffleOp(k, h))) i32x4_mul o,
               (h = i32x4_extend_high_i16x8_u(h)) i32x4_mul o))) i16x8_add
           u) i16x8_shr_s
          6) i8x16_narrow_i16x8_u
         ((((m = SimdShuffleOp(
                   i32x4_extend_low_i16x8_u(i = SimdShuffleOp(k, i)) i32x4_mul m,
                   i32x4_extend_high_i16x8_u(i) i32x4_mul m)) i16x8_sub
            (SimdShuffleOp(
               (i = i32x4_extend_low_i16x8_u(f = SimdShuffleOp(k, f))) i32x4_mul l,
               (f = i32x4_extend_high_i16x8_u(f)) i32x4_mul l) i16x8_add
             SimdShuffleOp(
               (l = i32x4_extend_low_i16x8_u(k = SimdShuffleOp(k, j))) i32x4_mul o,
               (j = i32x4_extend_high_i16x8_u(k)) i32x4_mul o))) i16x8_add
           u) i16x8_shr_s
          6)) i8x16_swizzle
      ba) v128_or
     ((l = 
         (((v i16x8_add SimdShuffleOp(da i32x4_mul r, h i32x4_mul r)) i16x8_add
           t) i16x8_shr_s
          6) i8x16_narrow_i16x8_u
         (((m i16x8_add SimdShuffleOp(l i32x4_mul r, j i32x4_mul r)) i16x8_add t) i16x8_shr_s
          6)) i8x16_swizzle
      z)) v128_or
    ((m = 
        (((SimdShuffleOp(g i32x4_mul s, e i32x4_mul s) i16x8_add_sat_u v) i16x8_sub_sat_u
          n) i16x8_shr_u
         6) i8x16_narrow_i16x8_u
        (((SimdShuffleOp(i i32x4_mul s, f i32x4_mul s) i16x8_add_sat_u m) i16x8_sub_sat_u
          n) i16x8_shr_u
         6)) i8x16_swizzle
     p);
  d[16] =
    ((k i8x16_swizzle q) v128_or (l i8x16_swizzle w)) v128_or
    (m i8x16_swizzle x);
  d[0] =
    ((k i8x16_swizzle ca) v128_or (l i8x16_swizzle aa)) v128_or
    (m i8x16_swizzle y);
}

function VP8YuvToBgr32_SSE41(a:int, b:int, c:int, d:simd_ptr@1) {
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var e:simd = LoadZero(c);
  var f:simd = LoadZero(c);
  var g:simd = LoadZero(b);
  var h:simd = LoadZero(a);
  var i:simd = LoadZero(b);
  var j:simd = LoadZero(a);
  d[80] =
    (((aa = 
         ((((n = 
               SimdShuffleOp(
                 i32x4_extend_low_i16x8_u(l = SimdShuffleOp(k = V128, LoadZero(a))) i32x4_mul
                 (m = V128),
                 i32x4_extend_high_i16x8_u(l) i32x4_mul m)) i16x8_sub
            (SimdShuffleOp(
               (p = i32x4_extend_low_i16x8_u(o = SimdShuffleOp(k, LoadZero(b)))) i32x4_mul
               (l = V128),
               (q = i32x4_extend_high_i16x8_u(o)) i32x4_mul l) i16x8_add
             SimdShuffleOp(
               (s = i32x4_extend_low_i16x8_u(r = SimdShuffleOp(k, LoadZero(c)))) i32x4_mul
               (o = V128),
               (t = i32x4_extend_high_i16x8_u(r)) i32x4_mul o))) i16x8_add
           (u = V128)) i16x8_shr_s
          6) i8x16_narrow_i16x8_u
         ((((v = 
               SimdShuffleOp(
                 i32x4_extend_low_i16x8_u(r = SimdShuffleOp(k, LoadZero(a))) i32x4_mul
                 m,
                 i32x4_extend_high_i16x8_u(r) i32x4_mul m)) i16x8_sub
            (SimdShuffleOp(
               (w = i32x4_extend_low_i16x8_u(r = SimdShuffleOp(k, LoadZero(b)))) i32x4_mul
               l,
               (x = i32x4_extend_high_i16x8_u(r)) i32x4_mul l) i16x8_add
             SimdShuffleOp(
               (y = i32x4_extend_low_i16x8_u(r = SimdShuffleOp(k, LoadZero(c)))) i32x4_mul
               o,
               (z = i32x4_extend_high_i16x8_u(r)) i32x4_mul o))) i16x8_add
           u) i16x8_shr_s
          6)) i8x16_swizzle
      (ba = V128)) v128_or
     ((w = 
         (((SimdShuffleOp(p i32x4_mul (r = V128), q i32x4_mul r) i16x8_add_sat_u
            n) i16x8_sub_sat_u
           (q = V128)) i16x8_shr_u
          6) i8x16_narrow_i16x8_u
         (((SimdShuffleOp(w i32x4_mul r, x i32x4_mul r) i16x8_add_sat_u v) i16x8_sub_sat_u
           q) i16x8_shr_u
          6)) i8x16_swizzle
      (x = V128))) v128_or
    ((v = 
        (((n i16x8_add SimdShuffleOp(s i32x4_mul (p = V128), t i32x4_mul p)) i16x8_add
          (n = V128)) i16x8_shr_s
         6) i8x16_narrow_i16x8_u
        (((v i16x8_add SimdShuffleOp(y i32x4_mul p, z i32x4_mul p)) i16x8_add n) i16x8_shr_s
         6)) i8x16_swizzle
     (s = V128));
  d[64] =
    ((aa i8x16_swizzle (t = V128)) v128_or (w i8x16_swizzle (y = V128))) v128_or
    (v i8x16_swizzle (z = V128));
  d[48] =
    ((aa i8x16_swizzle (ca = V128)) v128_or (w i8x16_swizzle (aa = V128))) v128_or
    (v i8x16_swizzle (w = V128));
  d[32] =
    (((k = 
         ((((v = SimdShuffleOp(
                   i32x4_extend_low_i16x8_u(v = SimdShuffleOp(k, h)) i32x4_mul m,
                   i32x4_extend_high_i16x8_u(v) i32x4_mul m)) i16x8_sub
            (SimdShuffleOp(
               (h = i32x4_extend_low_i16x8_u(g = SimdShuffleOp(k, g))) i32x4_mul l,
               (g = i32x4_extend_high_i16x8_u(g)) i32x4_mul l) i16x8_add
             SimdShuffleOp(
               (da = i32x4_extend_low_i16x8_u(e = SimdShuffleOp(k, e))) i32x4_mul o,
               (e = i32x4_extend_high_i16x8_u(e)) i32x4_mul o))) i16x8_add
           u) i16x8_shr_s
          6) i8x16_narrow_i16x8_u
         ((((m = SimdShuffleOp(
                   i32x4_extend_low_i16x8_u(j = SimdShuffleOp(k, j)) i32x4_mul m,
                   i32x4_extend_high_i16x8_u(j) i32x4_mul m)) i16x8_sub
            (SimdShuffleOp(
               (j = i32x4_extend_low_i16x8_u(i = SimdShuffleOp(k, i))) i32x4_mul l,
               (i = i32x4_extend_high_i16x8_u(i)) i32x4_mul l) i16x8_add
             SimdShuffleOp(
               (f = i32x4_extend_low_i16x8_u(k = SimdShuffleOp(k, f))) i32x4_mul o,
               (ea = i32x4_extend_high_i16x8_u(k)) i32x4_mul o))) i16x8_add
           u) i16x8_shr_s
          6)) i8x16_swizzle
      ba) v128_or
     ((l = 
         (((SimdShuffleOp(h i32x4_mul r, g i32x4_mul r) i16x8_add_sat_u v) i16x8_sub_sat_u
           q) i16x8_shr_u
          6) i8x16_narrow_i16x8_u
         (((SimdShuffleOp(j i32x4_mul r, i i32x4_mul r) i16x8_add_sat_u m) i16x8_sub_sat_u
           q) i16x8_shr_u
          6)) i8x16_swizzle
      x)) v128_or
    ((m = 
        (((v i16x8_add SimdShuffleOp(da i32x4_mul p, e i32x4_mul p)) i16x8_add
          n) i16x8_shr_s
         6) i8x16_narrow_i16x8_u
        (((m i16x8_add SimdShuffleOp(f i32x4_mul p, ea i32x4_mul p)) i16x8_add
          n) i16x8_shr_s
         6)) i8x16_swizzle
     s);
  d[16] =
    ((k i8x16_swizzle t) v128_or (l i8x16_swizzle y)) v128_or
    (m i8x16_swizzle z);
  d[0] =
    ((k i8x16_swizzle ca) v128_or (l i8x16_swizzle aa)) v128_or
    (m i8x16_swizzle w);
}

function WebPInitSamplersSSE41() {
  1060336[2]:int = 266;
  0[265084]:int = 267;
}

function YuvToBgrRow_SSE41(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:int, e:int) {
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:simd;
  var ja:int;
  var ka:int;
  var la:int;
  var g:int;
  var j:int;
  var f:int = 0;
  if (e < 32) goto B_a;
  f = e & -32;
  g = 0;
  loop L_b {
    var h:simd = LoadZero(c + 4);
    var i:simd = LoadZero(b + 4);
    j = a + g;
    var k:simd = LoadZero(j + 8);
    var l:simd = LoadZero(j);
    var m:simd = LoadZero(c);
    var n:simd = LoadZero(b);
    d[80]:simd@1 =
      (((ea = 
           ((((r = SimdShuffleOp(
                     i32x4_extend_low_i16x8_u(
                       p = SimdShuffleOp(o = V128, LoadZero(j + 16))) i32x4_mul
                     (q = V128),
                     i32x4_extend_high_i16x8_u(p) i32x4_mul q)) i16x8_sub
              (SimdShuffleOp(
                 (t = i32x4_extend_low_i16x8_u(
                        s = SimdShuffleOp(p = SimdShuffleOp(o, LoadZero(b + 8)), p))) i32x4_mul
                 (p = V128),
                 (u = i32x4_extend_high_i16x8_u(s)) i32x4_mul p) i16x8_add
               SimdShuffleOp(
                 (w = i32x4_extend_low_i16x8_u(
                        v = SimdShuffleOp(s = SimdShuffleOp(o, LoadZero(c + 8)), s))) i32x4_mul
                 (s = V128),
                 (x = i32x4_extend_high_i16x8_u(v)) i32x4_mul s))) i16x8_add
             (y = V128)) i16x8_shr_s
            6) i8x16_narrow_i16x8_u
           ((((z = 
                 SimdShuffleOp(
                   i32x4_extend_low_i16x8_u(v = SimdShuffleOp(o, LoadZero(j + 24))) i32x4_mul
                   q,
                   i32x4_extend_high_i16x8_u(v) i32x4_mul q)) i16x8_sub
              (SimdShuffleOp(
                 (aa = i32x4_extend_low_i16x8_u(
                         v = SimdShuffleOp(v = SimdShuffleOp(o, LoadZero(b + 12)), v))) i32x4_mul
                 p,
                 (ba = i32x4_extend_high_i16x8_u(v)) i32x4_mul p) i16x8_add
               SimdShuffleOp(
                 (ca = i32x4_extend_low_i16x8_u(
                         v = SimdShuffleOp(v = SimdShuffleOp(o, LoadZero(c + 12)), v))) i32x4_mul
                 s,
                 (da = i32x4_extend_high_i16x8_u(v)) i32x4_mul s))) i16x8_add
             y) i16x8_shr_s
            6)) i8x16_swizzle
        (fa = V128)) v128_or
       ((aa = 
           (((SimdShuffleOp(t i32x4_mul (v = V128), u i32x4_mul v) i16x8_add_sat_u
              r) i16x8_sub_sat_u
             (u = V128)) i16x8_shr_u
            6) i8x16_narrow_i16x8_u
           (((SimdShuffleOp(aa i32x4_mul v, ba i32x4_mul v) i16x8_add_sat_u z) i16x8_sub_sat_u
             u) i16x8_shr_u
            6)) i8x16_swizzle
        (ba = V128))) v128_or
      ((z = 
          (((r i16x8_add SimdShuffleOp(w i32x4_mul (t = V128), x i32x4_mul t)) i16x8_add
            (r = V128)) i16x8_shr_s
           6) i8x16_narrow_i16x8_u
          (((z i16x8_add SimdShuffleOp(ca i32x4_mul t, da i32x4_mul t)) i16x8_add
            r) i16x8_shr_s
           6)) i8x16_swizzle
       (w = V128));
    d[64]:simd@1 =
      ((ea i8x16_swizzle (x = V128)) v128_or (aa i8x16_swizzle (ca = V128))) v128_or
      (z i8x16_swizzle (da = V128));
    d[48]:simd@1 =
      ((ea i8x16_swizzle (ga = V128)) v128_or (aa i8x16_swizzle (ea = V128))) v128_or
      (z i8x16_swizzle (aa = V128));
    d[32]:simd@1 =
      (((o = 
           ((((z = SimdShuffleOp(
                     i32x4_extend_low_i16x8_u(z = SimdShuffleOp(o, l)) i32x4_mul q,
                     i32x4_extend_high_i16x8_u(z) i32x4_mul q)) i16x8_sub
              (SimdShuffleOp(
                 (n = i32x4_extend_low_i16x8_u(
                        l = SimdShuffleOp(l = SimdShuffleOp(o, n), l))) i32x4_mul
                 p,
                 (l = i32x4_extend_high_i16x8_u(l)) i32x4_mul p) i16x8_add
               SimdShuffleOp(
                 (ha = i32x4_extend_low_i16x8_u(
                         m = SimdShuffleOp(m = SimdShuffleOp(o, m), m))) i32x4_mul
                 s,
                 (m = i32x4_extend_high_i16x8_u(m)) i32x4_mul s))) i16x8_add
             y) i16x8_shr_s
            6) i8x16_narrow_i16x8_u
           ((((q = SimdShuffleOp(
                     i32x4_extend_low_i16x8_u(k = SimdShuffleOp(o, k)) i32x4_mul q,
                     i32x4_extend_high_i16x8_u(k) i32x4_mul q)) i16x8_sub
              (SimdShuffleOp(
                 (k = i32x4_extend_low_i16x8_u(
                        i = SimdShuffleOp(i = SimdShuffleOp(o, i), i))) i32x4_mul
                 p,
                 (i = i32x4_extend_high_i16x8_u(i)) i32x4_mul p) i16x8_add
               SimdShuffleOp(
                 (h = i32x4_extend_low_i16x8_u(
                        o = SimdShuffleOp(o = SimdShuffleOp(o, h), o))) i32x4_mul
                 s,
                 (ia = i32x4_extend_high_i16x8_u(o)) i32x4_mul s))) i16x8_add
             y) i16x8_shr_s
            6)) i8x16_swizzle
        fa) v128_or
       ((p = 
           (((SimdShuffleOp(n i32x4_mul v, l i32x4_mul v) i16x8_add_sat_u z) i16x8_sub_sat_u
             u) i16x8_shr_u
            6) i8x16_narrow_i16x8_u
           (((SimdShuffleOp(k i32x4_mul v, i i32x4_mul v) i16x8_add_sat_u q) i16x8_sub_sat_u
             u) i16x8_shr_u
            6)) i8x16_swizzle
        ba)) v128_or
      ((q = 
          (((z i16x8_add SimdShuffleOp(ha i32x4_mul t, m i32x4_mul t)) i16x8_add
            r) i16x8_shr_s
           6) i8x16_narrow_i16x8_u
          (((q i16x8_add SimdShuffleOp(h i32x4_mul t, ia i32x4_mul t)) i16x8_add
            r) i16x8_shr_s
           6)) i8x16_swizzle
       w);
    d[16]:simd@1 =
      ((o i8x16_swizzle x) v128_or (p i8x16_swizzle ca)) v128_or
      (q i8x16_swizzle da);
    d[0]:simd@1 =
      ((o i8x16_swizzle ga) v128_or (p i8x16_swizzle ea)) v128_or
      (q i8x16_swizzle aa);
    d = d + 96;
    c = c + 16;
    b = b + 16;
    j = g + 64;
    ja = g + 32;
    g = ja;
    if (j <= e) continue L_b;
  }
  a = a + ja;
  label B_a:
  if (f >= e) goto B_c;
  loop L_d {
    g = b[0];
    d[2]:byte =
      select_if(
        (la = 
           (ka = ((ja = c[0]) * 26149 >> 8) + (j = a[0] * 19077 >> 8)) + -14234) >>
        6,
        select_if(0, 255, ka < 14234),
        la < 16384);
    d[0]:byte =
      select_if((la = (ka = (g * 33050 >> 8) + j) + -17685) >> 6,
                select_if(0, 255, ka < 17685),
                la < 16384);
    d[1]:byte =
      select_if(
        (j = (g = j - (g * 6419 >> 8) + (ja * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, g < -8708),
        j < 16384);
    d = d + 3;
    a = a + 1;
    c = c + (g = f & 1);
    b = b + g;
    if (e != (f = f + 1)) continue L_d;
  }
  label B_c:
}

function YuvToRgbRow_SSE41(a:ubyte_ptr, b:ubyte_ptr, c:ubyte_ptr, d:int, e:int) {
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var ca:simd;
  var da:simd;
  var ea:simd;
  var fa:simd;
  var ga:simd;
  var ha:simd;
  var ia:int;
  var ja:int;
  var ka:int;
  var g:int;
  var i:int;
  var f:int = 0;
  if (e < 32) goto B_a;
  f = e & -32;
  g = 0;
  loop L_b {
    var h:simd = LoadZero(b + 4);
    i = a + g;
    var j:simd = LoadZero(i + 8);
    var k:simd = LoadZero(c + 4);
    var l:simd = LoadZero(i);
    var m:simd = LoadZero(b);
    var n:simd = LoadZero(c);
    d[80]:simd@1 =
      (((ea = 
           ((((r = SimdShuffleOp(
                     i32x4_extend_low_i16x8_u(
                       p = SimdShuffleOp(o = V128, LoadZero(i + 16))) i32x4_mul
                     (q = V128),
                     i32x4_extend_high_i16x8_u(p) i32x4_mul q)) i16x8_sub
              (SimdShuffleOp(
                 (t = i32x4_extend_low_i16x8_u(
                        s = SimdShuffleOp(p = SimdShuffleOp(o, LoadZero(b + 8)), p))) i32x4_mul
                 (p = V128),
                 (u = i32x4_extend_high_i16x8_u(s)) i32x4_mul p) i16x8_add
               SimdShuffleOp(
                 (w = i32x4_extend_low_i16x8_u(
                        v = SimdShuffleOp(s = SimdShuffleOp(o, LoadZero(c + 8)), s))) i32x4_mul
                 (s = V128),
                 (x = i32x4_extend_high_i16x8_u(v)) i32x4_mul s))) i16x8_add
             (y = V128)) i16x8_shr_s
            6) i8x16_narrow_i16x8_u
           ((((z = 
                 SimdShuffleOp(
                   i32x4_extend_low_i16x8_u(v = SimdShuffleOp(o, LoadZero(i + 24))) i32x4_mul
                   q,
                   i32x4_extend_high_i16x8_u(v) i32x4_mul q)) i16x8_sub
              (SimdShuffleOp(
                 (aa = i32x4_extend_low_i16x8_u(
                         v = SimdShuffleOp(v = SimdShuffleOp(o, LoadZero(b + 12)), v))) i32x4_mul
                 p,
                 (ba = i32x4_extend_high_i16x8_u(v)) i32x4_mul p) i16x8_add
               SimdShuffleOp(
                 (ca = i32x4_extend_low_i16x8_u(
                         v = SimdShuffleOp(v = SimdShuffleOp(o, LoadZero(c + 12)), v))) i32x4_mul
                 s,
                 (da = i32x4_extend_high_i16x8_u(v)) i32x4_mul s))) i16x8_add
             y) i16x8_shr_s
            6)) i8x16_swizzle
        (fa = V128)) v128_or
       ((ca = 
           (((r i16x8_add SimdShuffleOp(w i32x4_mul (v = V128), x i32x4_mul v)) i16x8_add
             (x = V128)) i16x8_shr_s
            6) i8x16_narrow_i16x8_u
           (((z i16x8_add SimdShuffleOp(ca i32x4_mul v, da i32x4_mul v)) i16x8_add
             x) i16x8_shr_s
            6)) i8x16_swizzle
        (da = V128))) v128_or
      ((z = 
          (((SimdShuffleOp(t i32x4_mul (w = V128), u i32x4_mul w) i16x8_add_sat_u
             r) i16x8_sub_sat_u
            (r = V128)) i16x8_shr_u
           6) i8x16_narrow_i16x8_u
          (((SimdShuffleOp(aa i32x4_mul w, ba i32x4_mul w) i16x8_add_sat_u z) i16x8_sub_sat_u
            r) i16x8_shr_u
           6)) i8x16_swizzle
       (t = V128));
    d[64]:simd@1 =
      ((ea i8x16_swizzle (u = V128)) v128_or (ca i8x16_swizzle (aa = V128))) v128_or
      (z i8x16_swizzle (ba = V128));
    d[48]:simd@1 =
      ((ea i8x16_swizzle (ga = V128)) v128_or (ca i8x16_swizzle (ea = V128))) v128_or
      (z i8x16_swizzle (ca = V128));
    d[32]:simd@1 =
      (((o = 
           ((((z = SimdShuffleOp(
                     i32x4_extend_low_i16x8_u(z = SimdShuffleOp(o, l)) i32x4_mul q,
                     i32x4_extend_high_i16x8_u(z) i32x4_mul q)) i16x8_sub
              (SimdShuffleOp(
                 (m = i32x4_extend_low_i16x8_u(
                        l = SimdShuffleOp(l = SimdShuffleOp(o, m), l))) i32x4_mul
                 p,
                 (l = i32x4_extend_high_i16x8_u(l)) i32x4_mul p) i16x8_add
               SimdShuffleOp(
                 (ha = i32x4_extend_low_i16x8_u(
                         n = SimdShuffleOp(n = SimdShuffleOp(o, n), n))) i32x4_mul
                 s,
                 (n = i32x4_extend_high_i16x8_u(n)) i32x4_mul s))) i16x8_add
             y) i16x8_shr_s
            6) i8x16_narrow_i16x8_u
           ((((q = SimdShuffleOp(
                     i32x4_extend_low_i16x8_u(j = SimdShuffleOp(o, j)) i32x4_mul q,
                     i32x4_extend_high_i16x8_u(j) i32x4_mul q)) i16x8_sub
              (SimdShuffleOp(
                 (j = i32x4_extend_low_i16x8_u(
                        h = SimdShuffleOp(h = SimdShuffleOp(o, h), h))) i32x4_mul
                 p,
                 (h = i32x4_extend_high_i16x8_u(h)) i32x4_mul p) i16x8_add
               SimdShuffleOp(
                 (p = i32x4_extend_low_i16x8_u(
                        o = SimdShuffleOp(o = SimdShuffleOp(o, k), o))) i32x4_mul
                 s,
                 (k = i32x4_extend_high_i16x8_u(o)) i32x4_mul s))) i16x8_add
             y) i16x8_shr_s
            6)) i8x16_swizzle
        fa) v128_or
       ((p = 
           (((z i16x8_add SimdShuffleOp(ha i32x4_mul v, n i32x4_mul v)) i16x8_add
             x) i16x8_shr_s
            6) i8x16_narrow_i16x8_u
           (((q i16x8_add SimdShuffleOp(p i32x4_mul v, k i32x4_mul v)) i16x8_add x) i16x8_shr_s
            6)) i8x16_swizzle
        da)) v128_or
      ((q = 
          (((SimdShuffleOp(m i32x4_mul w, l i32x4_mul w) i16x8_add_sat_u z) i16x8_sub_sat_u
            r) i16x8_shr_u
           6) i8x16_narrow_i16x8_u
          (((SimdShuffleOp(j i32x4_mul w, h i32x4_mul w) i16x8_add_sat_u q) i16x8_sub_sat_u
            r) i16x8_shr_u
           6)) i8x16_swizzle
       t);
    d[16]:simd@1 =
      ((o i8x16_swizzle u) v128_or (p i8x16_swizzle aa)) v128_or
      (q i8x16_swizzle ba);
    d[0]:simd@1 =
      ((o i8x16_swizzle ga) v128_or (p i8x16_swizzle ea)) v128_or
      (q i8x16_swizzle ca);
    d = d + 96;
    c = c + 16;
    b = b + 16;
    i = g + 64;
    ia = g + 32;
    g = ia;
    if (i <= e) continue L_b;
  }
  a = a + ia;
  label B_a:
  if (f >= e) goto B_c;
  loop L_d {
    g = c[0];
    d[2]:byte =
      select_if(
        (ka = 
           (ja = ((ia = b[0]) * 33050 >> 8) + (i = a[0] * 19077 >> 8)) + -17685) >>
        6,
        select_if(0, 255, ja < 17685),
        ka < 16384);
    d[0]:byte =
      select_if((ka = (ja = (g * 26149 >> 8) + i) + -14234) >> 6,
                select_if(0, 255, ja < 14234),
                ka < 16384);
    d[1]:byte =
      select_if(
        (i = (g = i - (ia * 6419 >> 8) + (g * 13320 >> 8)) + 8708) >> 6,
        select_if(0, 255, g < -8708),
        i < 16384);
    d = d + 3;
    a = a + 1;
    c = c + (g = f & 1);
    b = b + g;
    if (e != (f = f + 1)) continue L_d;
  }
  label B_c:
}

function WebPInitConvertARGBToYUVSSE41() {
  0[265101]:int = 268;
  0[265100]:int = 269;
  0[265097]:int = 270;
  0[265098]:int = 271;
  0[265099]:int = 272;
}

function ConvertARGBToUV_SSE41(a:int, b:simd_ptr@1, c:simd_ptr@1, d:int, e:int) {
  var i:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var o:simd;
  var p:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var f:int = 0;
  var g:int = d & -32;
  if (g < 1) goto B_a;
  var h:simd_ptr@1 = a;
  loop L_b {
    var j:simd = h[0] i8x16_swizzle (i = V128);
    var n:simd = 
      SimdShuffleOp(
        SimdShuffleOp(j, k = (h + 16)[0]:simd@1 i8x16_swizzle i),
        SimdShuffleOp(l = (h + 32)[0]:simd@1 i8x16_swizzle i,
                      m = (h + 48)[0]:simd@1 i8x16_swizzle i));
    n = 
      (SimdShuffleOp(n, o = V128) i32x4_dot_i16x8_s (p = V128)) i16x8_narrow_i32x4_s
      (SimdShuffleOp(n, o) i32x4_dot_i16x8_s p);
    var q:simd = 
      SimdShuffleOp(
        n,
        k = 
          (SimdShuffleOp(
             k = SimdShuffleOp(j = SimdShuffleOp(j, k), m = SimdShuffleOp(l, m)),
             o) i32x4_dot_i16x8_s
           p) i16x8_narrow_i32x4_s
          (SimdShuffleOp(k, o) i32x4_dot_i16x8_s p));
    i = 
      (((((q i32x4_dot_i16x8_s (l = V128)) i32x4_add
          ((s = 
              SimdShuffleOp(
                k,
                r = 
                  (SimdShuffleOp(j = SimdShuffleOp(j, m), o) i32x4_dot_i16x8_s p) i16x8_narrow_i32x4_s
                  (SimdShuffleOp(j, o) i32x4_dot_i16x8_s p))) i32x4_dot_i16x8_s
           (m = V128))) i32x4_add
         (j = V128)) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       (((((n = SimdShuffleOp(n, k)) i32x4_dot_i16x8_s l) i32x4_add
          ((k = SimdShuffleOp(k, r)) i32x4_dot_i16x8_s m)) i32x4_add
         j) i32x4_shr_s
        18)) i8x16_narrow_i16x8_u
      ((((((u = 
              SimdShuffleOp(
                v = 
                  (SimdShuffleOp(
                     v = 
                       SimdShuffleOp(SimdShuffleOp(r = (h + 64)[0]:simd@1 i8x16_swizzle i,
                                                   t = (h + 80)[0]:simd@1 i8x16_swizzle i),
                                     SimdShuffleOp(u = (h + 96)[0]:simd@1 i8x16_swizzle i,
                                                   i = (h + 112)[0]:simd@1 i8x16_swizzle i)),
                     o) i32x4_dot_i16x8_s
                   p) i16x8_narrow_i32x4_s
                  (SimdShuffleOp(v, o) i32x4_dot_i16x8_s p),
                i = 
                  (SimdShuffleOp(
                     i = SimdShuffleOp(r = SimdShuffleOp(r, t), t = SimdShuffleOp(u, i)),
                     o) i32x4_dot_i16x8_s
                   p) i16x8_narrow_i32x4_s
                  (SimdShuffleOp(i, o) i32x4_dot_i16x8_s p))) i32x4_dot_i16x8_s
           l) i32x4_add
          ((r = 
              SimdShuffleOp(
                i,
                o = 
                  (SimdShuffleOp(r = SimdShuffleOp(r, t), o) i32x4_dot_i16x8_s p) i16x8_narrow_i32x4_s
                  (SimdShuffleOp(r, o) i32x4_dot_i16x8_s p))) i32x4_dot_i16x8_s
           m)) i32x4_add
         j) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       (((((t = SimdShuffleOp(v, i)) i32x4_dot_i16x8_s l) i32x4_add
          ((l = SimdShuffleOp(i, o)) i32x4_dot_i16x8_s m)) i32x4_add
         j) i32x4_shr_s
        18));
    o = 
      (((((q i32x4_dot_i16x8_s (o = V128)) i32x4_add
          (s i32x4_dot_i16x8_s (p = V128))) i32x4_add
         j) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       ((((n i32x4_dot_i16x8_s o) i32x4_add (k i32x4_dot_i16x8_s p)) i32x4_add
         j) i32x4_shr_s
        18)) i8x16_narrow_i16x8_u
      (((((u i32x4_dot_i16x8_s o) i32x4_add (r i32x4_dot_i16x8_s p)) i32x4_add
         j) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       ((((t i32x4_dot_i16x8_s o) i32x4_add (l i32x4_dot_i16x8_s p)) i32x4_add
         j) i32x4_shr_s
        18));
    if (e) goto B_c;
    i = i i8x16_avgr_u c[0];
    o = o i8x16_avgr_u b[0];
    label B_c:
    b[0] = o;
    c[0] = i;
    h = h + 128;
    c = c + 16;
    b = b + 16;
    f = f + 32;
    if (f < g) continue L_b;
  }
  label B_a:
  if (d <= f) goto B_d;
  WebPConvertARGBToUV_C(a + (f << 2), b, c, d - f, e);
  label B_d:
}

function ConvertARGBToY_SSE41(a:int, b:int, c:int) {
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var e:int;
  var f:int;
  var r:int;
  var d:int_ptr = 0;
  e = c & -16;
  if (e < 1) goto B_a;
  f = a;
  loop L_b {
    (b + d)[0]:simd@1 =
      (((((SimdShuffleOp(
             m = 
               SimdShuffleOp(
                 l = 
                   SimdShuffleOp(SimdShuffleOp(h = f[0]:simd@1 i8x16_swizzle (g = V128),
                                               i = (f + 16)[0]:simd@1 i8x16_swizzle g),
                                 SimdShuffleOp(j = (f + 32)[0]:simd@1 i8x16_swizzle g,
                                               k = (f + 48)[0]:simd@1 i8x16_swizzle g)),
                 g = V128),
             h = 
               SimdShuffleOp(
                 o = SimdShuffleOp(n = SimdShuffleOp(h, i), j = SimdShuffleOp(j, k)),
                 g)) i32x4_dot_i16x8_s
           (i = V128)) i32x4_add
          (SimdShuffleOp(h, p = SimdShuffleOp(n = SimdShuffleOp(n, j), g)) i32x4_dot_i16x8_s
           (j = V128))) i32x4_add
         (k = V128)) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(m, h) i32x4_dot_i16x8_s i) i32x4_add
          (SimdShuffleOp(h, p) i32x4_dot_i16x8_s j)) i32x4_add
         k) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(l = SimdShuffleOp(l, g), h = SimdShuffleOp(o, g)) i32x4_dot_i16x8_s
           i) i32x4_add
          (SimdShuffleOp(h, g = SimdShuffleOp(n, g)) i32x4_dot_i16x8_s j)) i32x4_add
         k) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(l, h) i32x4_dot_i16x8_s i) i32x4_add
          (SimdShuffleOp(h, g) i32x4_dot_i16x8_s j)) i32x4_add
         k) i32x4_shr_s
        16));
    f = f + 64;
    d = d + 16;
    if (d < e) continue L_b;
  }
  label B_a:
  if (c <= d) goto B_c;
  var q:int = c - d;
  if (q < 8) goto B_d;
  f = a + (d << 2);
  e = b + d;
  if (e >= a + (c << 2)) goto B_e;
  if (f < b + c) goto B_d;
  label B_e:
  d = d + (r = q & -4);
  var s:int = r;
  loop L_f {
    let t0 = 
      SimdStoreLane(
        e,
        SimdShuffleOp(
          ((((((g = f[0]:simd@4) v128_and (h = V128)) i32x4_mul V128) i32x4_add
             (((g i32x4_shr_u 16) v128_and h) i32x4_mul V128)) i32x4_add
            (((g i32x4_shr_u 8) v128_and h) i32x4_mul V128)) i32x4_add
           V128) i32x4_shr_u
          16,
          g));
    e = e + 4;
    f = f + 16;
    if (s = s + -4) continue L_f;
    t0;
  }
  if (q == r) goto B_c;
  label B_d:
  f = b + d;
  e = c - d;
  d = a + (d << 2);
  loop L_g {
    f[0]:byte =
      ((b = d[0]) & 255) * 6420 + (b >> 16 & 255) * 16839 +
      (b >> 8 & 255) * 33059 +
      1081344 >>
      16;
    d = d + 4;
    f = f + 1;
    e = e + -1;
    if (e) continue L_g;
  }
  label B_c:
}

function ConvertRGB24ToY_SSE41(a:int, b:int, c:int) {
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var e:simd_ptr@1;
  var ca:int;
  var da:int;
  var f:simd;
  var i:int;
  var d:int = 0;
  e = c & -32;
  if (e < 1) goto B_a;
  loop L_b {
    f = a[32]:simd@1;
    var g:simd = a[16]:simd@1;
    var h:simd = a[0]:simd@1;
    i = b + d;
    (i + 16)[0]:simd@1 =
      (((((SimdShuffleOp(
             r = SimdShuffleOp(
                   p = (((j = a[64]:simd@1) i8x16_swizzle (k = V128)) v128_or
                        ((l = a[48]:simd@1) i8x16_swizzle (m = V128))) v128_or
                       ((n = a[80]:simd@1) i8x16_swizzle (o = V128)),
                   q = V128),
             w = 
               SimdShuffleOp(
                 v = 
                   ((j i8x16_swizzle (s = V128)) v128_or (l i8x16_swizzle (t = V128))) v128_or
                   (n i8x16_swizzle (u = V128)),
                 q)) i32x4_dot_i16x8_s
           (x = V128)) i32x4_add
          (SimdShuffleOp(
             w,
             ba = 
               SimdShuffleOp(
                 n = 
                   ((j i8x16_swizzle (y = V128)) v128_or (l i8x16_swizzle (z = V128))) v128_or
                   (n i8x16_swizzle (aa = V128)),
                 q)) i32x4_dot_i16x8_s
           (j = V128))) i32x4_add
         (l = V128)) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(r, w) i32x4_dot_i16x8_s x) i32x4_add
          (SimdShuffleOp(w, ba) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(p = SimdShuffleOp(p, q), w = SimdShuffleOp(v, q)) i32x4_dot_i16x8_s
           x) i32x4_add
          (SimdShuffleOp(w, n = SimdShuffleOp(n, q)) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(p, w) i32x4_dot_i16x8_s x) i32x4_add
          (SimdShuffleOp(w, n) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16));
    i[0]:simd@1 =
      (((((SimdShuffleOp(
             k = SimdShuffleOp(
                   n = ((g i8x16_swizzle k) v128_or (h i8x16_swizzle m)) v128_or
                       (f i8x16_swizzle o),
                   q),
             w = SimdShuffleOp(
                   m = ((g i8x16_swizzle s) v128_or (h i8x16_swizzle t)) v128_or
                       (f i8x16_swizzle u),
                   q)) i32x4_dot_i16x8_s
           x) i32x4_add
          (SimdShuffleOp(
             w,
             f = SimdShuffleOp(
                   g = ((g i8x16_swizzle y) v128_or (h i8x16_swizzle z)) v128_or
                       (f i8x16_swizzle aa),
                   q)) i32x4_dot_i16x8_s
           j)) i32x4_add
         l) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(k, w) i32x4_dot_i16x8_s x) i32x4_add
          (SimdShuffleOp(w, f) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(h = SimdShuffleOp(n, q), f = SimdShuffleOp(m, q)) i32x4_dot_i16x8_s
           x) i32x4_add
          (SimdShuffleOp(f, q = SimdShuffleOp(g, q)) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(h, f) i32x4_dot_i16x8_s x) i32x4_add
          (SimdShuffleOp(f, q) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16));
    a = a + 96;
    d = d + 32;
    if (d < e) continue L_b;
  }
  label B_a:
  if (c <= d) goto B_c;
  ca = c - d;
  if (ca >= 16) goto B_e;
  i = a;
  goto B_d;
  label B_e:
  e = b + d;
  if (e >= a + d * -3 + c * 3) goto B_f;
  if (a >= b + c) goto B_f;
  i = a;
  goto B_d;
  label B_f:
  d = d + (da = ca & -16);
  i = a + da * 3;
  var ea:int = da;
  loop L_g {
    e[0] =
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(a + 9,
                              SimdLoadLane(a + 6, SimdLoadLane(a + 3, LoadSplat(a)))))) i32x4_mul
             (q = V128)) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 10,
                   SimdLoadLane(a + 7, SimdLoadLane(a + 4, LoadSplat(a + 1)))))) i32x4_mul
             (x = V128))) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 11,
                  SimdLoadLane(a + 8, SimdLoadLane(a + 5, LoadSplat(a + 2)))))) i32x4_mul
            (j = V128))) i32x4_add
          (l = V128)) i32x4_shr_u
         16) v128_and
        (f = V128)) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 21,
                   SimdLoadLane(a + 18, SimdLoadLane(a + 15, LoadSplat(a + 12)))))) i32x4_mul
             q) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 22,
                   SimdLoadLane(a + 19, SimdLoadLane(a + 16, LoadSplat(a + 13)))))) i32x4_mul
             x)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 23,
                  SimdLoadLane(a + 20, SimdLoadLane(a + 17, LoadSplat(a + 14)))))) i32x4_mul
            j)) i32x4_add
          l) i32x4_shr_u
         16) v128_and
        f)) i8x16_narrow_i16x8_u
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 33,
                   SimdLoadLane(a + 30, SimdLoadLane(a + 27, LoadSplat(a + 24)))))) i32x4_mul
             q) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 34,
                   SimdLoadLane(a + 31, SimdLoadLane(a + 28, LoadSplat(a + 25)))))) i32x4_mul
             x)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 35,
                  SimdLoadLane(a + 32, SimdLoadLane(a + 29, LoadSplat(a + 26)))))) i32x4_mul
            j)) i32x4_add
          l) i32x4_shr_u
         16) v128_and
        f) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 45,
                   SimdLoadLane(a + 42, SimdLoadLane(a + 39, LoadSplat(a + 36)))))) i32x4_mul
             q) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 46,
                   SimdLoadLane(a + 43, SimdLoadLane(a + 40, LoadSplat(a + 37)))))) i32x4_mul
             x)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 47,
                  SimdLoadLane(a + 44, SimdLoadLane(a + 41, LoadSplat(a + 38)))))) i32x4_mul
            j)) i32x4_add
          l) i32x4_shr_u
         16) v128_and
        f));
    e = e + 16;
    a = a + 48;
    ea = ea + -16;
    if (ea) continue L_g;
  }
  if (ca == da) goto B_c;
  label B_d:
  a = d ^ -1;
  if (eqz(c - d & 1)) goto B_h;
  (b + d)[0]:byte =
    i[0]:ubyte * 16839 + i[1]:ubyte * 33059 + i[2]:ubyte * 6420 + 1081344 >>
    16;
  i = i + 3;
  d = d + 1;
  label B_h:
  if (a == 0 - c) goto B_c;
  a = b + d;
  d = c - d;
  loop L_i {
    a[0]:byte =
      i[0]:ubyte * 16839 + i[1]:ubyte * 33059 + i[2]:ubyte * 6420 + 1081344 >>
      16;
    (a + 1)[0]:byte =
      i[3]:ubyte * 16839 + i[4]:ubyte * 33059 + i[5]:ubyte * 6420 + 1081344 >>
      16;
    a = a + 2;
    i = i + 6;
    d = d + -2;
    if (d) continue L_i;
  }
  label B_c:
}

function ConvertBGR24ToY_SSE41(a:int, b:int, c:int) {
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var u:simd;
  var v:simd;
  var w:simd;
  var x:simd;
  var y:simd;
  var z:simd;
  var aa:simd;
  var ba:simd;
  var e:simd_ptr@1;
  var ca:int;
  var da:int;
  var f:simd;
  var i:int;
  var d:int = 0;
  e = c & -32;
  if (e < 1) goto B_a;
  loop L_b {
    f = a[32]:simd@1;
    var g:simd = a[16]:simd@1;
    var h:simd = a[0]:simd@1;
    i = b + d;
    (i + 16)[0]:simd@1 =
      (((((SimdShuffleOp(
             r = SimdShuffleOp(
                   p = (((j = a[64]:simd@1) i8x16_swizzle (k = V128)) v128_or
                        ((l = a[48]:simd@1) i8x16_swizzle (m = V128))) v128_or
                       ((n = a[80]:simd@1) i8x16_swizzle (o = V128)),
                   q = V128),
             w = 
               SimdShuffleOp(
                 v = 
                   ((j i8x16_swizzle (s = V128)) v128_or (l i8x16_swizzle (t = V128))) v128_or
                   (n i8x16_swizzle (u = V128)),
                 q)) i32x4_dot_i16x8_s
           (x = V128)) i32x4_add
          (SimdShuffleOp(
             ba = 
               SimdShuffleOp(
                 n = 
                   ((j i8x16_swizzle (y = V128)) v128_or (l i8x16_swizzle (z = V128))) v128_or
                   (n i8x16_swizzle (aa = V128)),
                 q),
             r) i32x4_dot_i16x8_s
           (j = V128))) i32x4_add
         (l = V128)) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(r, w) i32x4_dot_i16x8_s x) i32x4_add
          (SimdShuffleOp(ba, r) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(r = SimdShuffleOp(p, q), p = SimdShuffleOp(v, q)) i32x4_dot_i16x8_s
           x) i32x4_add
          (SimdShuffleOp(n = SimdShuffleOp(n, q), r) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(r, p) i32x4_dot_i16x8_s x) i32x4_add
          (SimdShuffleOp(n, r) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16));
    i[0]:simd@1 =
      (((((SimdShuffleOp(
             r = SimdShuffleOp(
                   n = ((g i8x16_swizzle k) v128_or (h i8x16_swizzle m)) v128_or
                       (f i8x16_swizzle o),
                   q),
             m = SimdShuffleOp(
                   k = ((g i8x16_swizzle s) v128_or (h i8x16_swizzle t)) v128_or
                       (f i8x16_swizzle u),
                   q)) i32x4_dot_i16x8_s
           x) i32x4_add
          (SimdShuffleOp(
             f = SimdShuffleOp(
                   g = ((g i8x16_swizzle y) v128_or (h i8x16_swizzle z)) v128_or
                       (f i8x16_swizzle aa),
                   q),
             r) i32x4_dot_i16x8_s
           j)) i32x4_add
         l) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(r, m) i32x4_dot_i16x8_s x) i32x4_add
          (SimdShuffleOp(f, r) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16)) i8x16_narrow_i16x8_u
      (((((SimdShuffleOp(f = SimdShuffleOp(n, q), h = SimdShuffleOp(k, q)) i32x4_dot_i16x8_s
           x) i32x4_add
          (SimdShuffleOp(q = SimdShuffleOp(g, q), f) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16) i16x8_narrow_i32x4_s
       ((((SimdShuffleOp(f, h) i32x4_dot_i16x8_s x) i32x4_add
          (SimdShuffleOp(q, f) i32x4_dot_i16x8_s j)) i32x4_add
         l) i32x4_shr_s
        16));
    a = a + 96;
    d = d + 32;
    if (d < e) continue L_b;
  }
  label B_a:
  if (c <= d) goto B_c;
  ca = c - d;
  if (ca >= 16) goto B_e;
  i = a;
  goto B_d;
  label B_e:
  e = b + d;
  if (e >= a + d * -3 + c * 3) goto B_f;
  if (a >= b + c) goto B_f;
  i = a;
  goto B_d;
  label B_f:
  d = d + (da = ca & -16);
  i = a + da * 3;
  var ea:int = da;
  loop L_g {
    e[0] =
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 11,
                   SimdLoadLane(a + 8, SimdLoadLane(a + 5, LoadSplat(a + 2)))))) i32x4_mul
             (q = V128)) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 10,
                   SimdLoadLane(a + 7, SimdLoadLane(a + 4, LoadSplat(a + 1)))))) i32x4_mul
             (x = V128))) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(a + 9,
                             SimdLoadLane(a + 6, SimdLoadLane(a + 3, LoadSplat(a)))))) i32x4_mul
            (j = V128))) i32x4_add
          (l = V128)) i32x4_shr_u
         16) v128_and
        (f = V128)) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 23,
                   SimdLoadLane(a + 20, SimdLoadLane(a + 17, LoadSplat(a + 14)))))) i32x4_mul
             q) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 22,
                   SimdLoadLane(a + 19, SimdLoadLane(a + 16, LoadSplat(a + 13)))))) i32x4_mul
             x)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 21,
                  SimdLoadLane(a + 18, SimdLoadLane(a + 15, LoadSplat(a + 12)))))) i32x4_mul
            j)) i32x4_add
          l) i32x4_shr_u
         16) v128_and
        f)) i8x16_narrow_i16x8_u
      (((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 35,
                   SimdLoadLane(a + 32, SimdLoadLane(a + 29, LoadSplat(a + 26)))))) i32x4_mul
             q) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 34,
                   SimdLoadLane(a + 31, SimdLoadLane(a + 28, LoadSplat(a + 25)))))) i32x4_mul
             x)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 33,
                  SimdLoadLane(a + 30, SimdLoadLane(a + 27, LoadSplat(a + 24)))))) i32x4_mul
            j)) i32x4_add
          l) i32x4_shr_u
         16) v128_and
        f) i16x8_narrow_i32x4_u
       ((((((i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 47,
                   SimdLoadLane(a + 44, SimdLoadLane(a + 41, LoadSplat(a + 38)))))) i32x4_mul
             q) i32x4_add
            (i32x4_extend_low_i16x8_u(
               i16x8_extend_low_i8x16_u(
                 SimdLoadLane(
                   a + 46,
                   SimdLoadLane(a + 43, SimdLoadLane(a + 40, LoadSplat(a + 37)))))) i32x4_mul
             x)) i32x4_add
           (i32x4_extend_low_i16x8_u(
              i16x8_extend_low_i8x16_u(
                SimdLoadLane(
                  a + 45,
                  SimdLoadLane(a + 42, SimdLoadLane(a + 39, LoadSplat(a + 36)))))) i32x4_mul
            j)) i32x4_add
          l) i32x4_shr_u
         16) v128_and
        f));
    e = e + 16;
    a = a + 48;
    ea = ea + -16;
    if (ea) continue L_g;
  }
  if (ca == da) goto B_c;
  label B_d:
  a = d ^ -1;
  if (eqz(c - d & 1)) goto B_h;
  (b + d)[0]:byte =
    i[2]:ubyte * 16839 + i[1]:ubyte * 33059 + i[0]:ubyte * 6420 + 1081344 >>
    16;
  i = i + 3;
  d = d + 1;
  label B_h:
  if (a == 0 - c) goto B_c;
  a = b + d;
  d = c - d;
  loop L_i {
    a[0]:byte =
      i[2]:ubyte * 16839 + i[1]:ubyte * 33059 + i[0]:ubyte * 6420 + 1081344 >>
      16;
    (a + 1)[0]:byte =
      i[5]:ubyte * 16839 + i[4]:ubyte * 33059 + i[3]:ubyte * 6420 + 1081344 >>
      16;
    a = a + 2;
    i = i + 6;
    d = d + -2;
    if (d) continue L_i;
  }
  label B_c:
}

function ConvertRGBA32ToUV_SSE41(a:simd_ptr@1, b:simd_ptr@1, c:simd_ptr@1, d:int) {
  var g:simd;
  var h:simd;
  var i:simd;
  var j:simd;
  var k:simd;
  var l:simd;
  var m:simd;
  var n:simd;
  var o:simd;
  var p:simd;
  var q:simd;
  var r:simd;
  var s:simd;
  var t:simd;
  var e:int;
  e = d & -16;
  if (e < 1) goto B_a;
  var f:int = a + (e << 3);
  loop L_b {
    b[0] =
      ((((((p = 
              SimdShuffleOp(
                o = 
                  SimdShuffleOp(
                    k = SimdShuffleOp(h = a[0] i8x16_swizzle (g = V128),
                                      j = (a + 16)[0]:simd@1 i8x16_swizzle (i = V128)),
                    n = SimdShuffleOp(l = (a + 32)[0]:simd@1 i8x16_swizzle g,
                                      m = (a + 48)[0]:simd@1 i8x16_swizzle i)),
                k = SimdShuffleOp(k, n))) i32x4_dot_i16x8_s
           (n = V128)) i32x4_add
          ((m = SimdShuffleOp(k, l = SimdShuffleOp(j v128_or h, m v128_or l))) i32x4_dot_i16x8_s
           (j = V128))) i32x4_add
         (h = V128)) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       (((((o = SimdShuffleOp(o, k)) i32x4_dot_i16x8_s n) i32x4_add
          ((k = SimdShuffleOp(k, l)) i32x4_dot_i16x8_s j)) i32x4_add
         h) i32x4_shr_s
        18)) i8x16_narrow_i16x8_u
      ((((((r = 
              SimdShuffleOp(
                t = SimdShuffleOp(
                      r = SimdShuffleOp(l = (a + 64)[0]:simd@1 i8x16_swizzle g,
                                        q = (a + 80)[0]:simd@1 i8x16_swizzle i),
                      g = SimdShuffleOp(s = (a + 96)[0]:simd@1 i8x16_swizzle g,
                                        i = (a + 112)[0]:simd@1 i8x16_swizzle i)),
                g = SimdShuffleOp(r, g))) i32x4_dot_i16x8_s
           n) i32x4_add
          ((l = SimdShuffleOp(g, i = SimdShuffleOp(q v128_or l, i v128_or s))) i32x4_dot_i16x8_s
           j)) i32x4_add
         h) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       (((((q = SimdShuffleOp(t, g)) i32x4_dot_i16x8_s n) i32x4_add
          ((n = SimdShuffleOp(g, i)) i32x4_dot_i16x8_s j)) i32x4_add
         h) i32x4_shr_s
        18));
    c[0] =
      (((((p i32x4_dot_i16x8_s (g = V128)) i32x4_add
          (m i32x4_dot_i16x8_s (i = V128))) i32x4_add
         h) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       ((((o i32x4_dot_i16x8_s g) i32x4_add (k i32x4_dot_i16x8_s i)) i32x4_add
         h) i32x4_shr_s
        18)) i8x16_narrow_i16x8_u
      (((((r i32x4_dot_i16x8_s g) i32x4_add (l i32x4_dot_i16x8_s i)) i32x4_add
         h) i32x4_shr_s
        18) i16x8_narrow_i32x4_s
       ((((q i32x4_dot_i16x8_s g) i32x4_add (n i32x4_dot_i16x8_s i)) i32x4_add
         h) i32x4_shr_s
        18));
    c = c + 16;
    b = b + 16;
    a = a + 128;
    if (a < f) continue L_b;
  }
  label B_a:
  if (e >= d) goto B_c;
  WebPConvertRGBA32ToUV_C(a, b, c, d & 15);
  label B_c:
}

function VP8BitReaderSetBuffer(a:int_ptr, b:int, c:int) {
  var d:int;
  a[4] = b;
  a[5] = (d = b + c);
  a[6] = select_if(d + -7, b, c > 7);
}

function VP8InitBitReader(a:int, b:int, c:int) {
  var d:int;
  var e:long;
  a[7]:int = 0;
  a[0]:long = 0L;
  a[1]:long = -34359738114L;
  a[4]:int = b;
  a[5]:int = (d = b + c);
  a[6]:int = (d = select_if(d + -7, b, c > 7));
  if (d <= b) goto B_a;
  a[3]:int = 48;
  a[4]:int = b + 7;
  a[0]:long =
    ((((e = b[0]:long@1) << 56L | (e & 65280L) << 40L) |
      ((e & 16711680L) << 24L | (e & 4278190080L) << 8L)) |
     (((e >> 8L & 4278190080L) | (e >> 24L & 16711680L)) |
      (e >> 40L & 65280L))) >>
    8L;
  return ;
  label B_a:
  a[3]:int = 0;
  if (c < 1) goto B_b;
  a[4]:int = b + 1;
  a[0]:long = b[0]:ubyte;
  return ;
  label B_b:
  a[7]:int = 1;
}

function VP8RemapBitReader(a:int_ptr, b:int) {
  var c:int = a[4];
  if (eqz(c)) goto B_a;
  a[4] = c + b;
  a[5] = a[5] + b;
  a[6] = a[6] + b;
  label B_a:
}

function VP8LoadFinalBytes(a:int) {
  var b:ubyte_ptr = a[4]:int;
  if (b >= a[5]:int) goto B_a;
  a[4]:int = b + 1;
  a[3]:int = a[3]:int + 8;
  a[0]:long = a[0]:long << 8L | b[0];
  return ;
  label B_a:
  if (a[7]:int) goto B_b;
  a[7]:int = 1;
  a[0]:long = a[0]:long << 8L;
  a[3]:int = a[3]:int + 8;
  return ;
  label B_b:
  a[3]:int = 0;
}

function VP8GetValue(a:{ a:long, b:int, c:int, d:int, e:int, f:int, g:int }, b:int):int {
  var g:int;
  var h:long;
  var i:int;
  if (b >= 1) goto B_a;
  return 0;
  label B_a:
  var c:int = b + 1;
  var d:long = a.a;
  b = a.c;
  var e:int = a.b;
  var f:int = 0;
  loop L_b {
    if (b > -1) goto B_c;
    g = a.d;
    if (g >= a.f) goto B_d;
    a.d = g + 7;
    a.a =
      (d = d << 56L |
           ((((d = g[0]:long@1) << 56L | (d & 65280L) << 40L) |
             ((d & 16711680L) << 24L | (d & 4278190080L) << 8L)) |
            (((d >> 8L & 4278190080L) | (d >> 24L & 16711680L)) |
             (d >> 40L & 65280L))) >>
           8L);
    b = b + 56;
    goto B_c;
    label B_d:
    if (g >= a.e) goto B_f;
    a.d = g + 1;
    d = d << 8L | g[0]:ubyte;
    goto B_e;
    label B_f:
    if (eqz(a.g)) goto B_g;
    b = 0;
    goto B_c;
    label B_g:
    a.g = 1;
    d = d << 8L;
    label B_e:
    a.a = d;
    b = b + 8;
    label B_c:
    g = e >> 1 & 16777215;
    if (g >= (i = i32_wrap_i64(d >> (h = i64_extend_i32_u(b))))) goto B_i;
    a.a = (d = d - (i64_extend_i32_u(g + 1) << h));
    e = e - g;
    goto B_h;
    label B_i:
    e = g + 1;
    label B_h:
    f = (g < i) << c + -2 | f;
    b = b - (g = clz(e) ^ 24);
    e = (e << g) + -1;
    c = c + -1;
    if (c > 1) continue L_b;
  }
  a.c = b;
  a.b = e;
  return f;
}

function VP8GetSignedValue(a:int, b:int):int {
  return select_if(0 - (b = VP8GetValue(a, b)), b, VP8GetValue(a, 1))
}

function VP8LInitBitReader(a:int, b:{ a:ubyte, b:ubyte, c:ubyte, d:ubyte, e:ubyte, f:ubyte, g:ubyte, h:ubyte }, c:int) {
  var d:long = 0L;
  a[5]:long@4 = 0L;
  a[0]:long = 0L;
  a[3]:int = c;
  c = select_if(c, 8, c < 8);
  if (eqz(c)) goto B_a;
  d = b.a;
  if (c == 1) goto B_a;
  d = b.b << 8L | d;
  if (c == 2) goto B_a;
  d = b.c << 16L | d;
  if (c == 3) goto B_a;
  d = b.d << 24L | d;
  if (c == 4) goto B_a;
  d = b.e << 32L | d;
  if (c == 5) goto B_a;
  d = b.f << 40L | d;
  if (c == 6) goto B_a;
  d = b.g << 48L | d;
  if (c == 7) goto B_a;
  d = b.h << 56L | d;
  label B_a:
  a[4]:int = c;
  a[0]:long = d;
  a[2]:int = b;
}

function VP8LBitReaderSetBuffer(a:int_ptr, b:int, c:int) {
  a[3] = c;
  a[2] = b;
  b = 1;
  var d:int = a[4];
  if (d > c) goto B_a;
  if (a[6]) goto B_a;
  b = 0;
  if (d != c) goto B_a;
  b = a[5] > 64;
  label B_a:
  a[6] = b;
}

function VP8LDoFillBitWindow(a:int) {
  var c:int;
  var b:int;
  var f:long;
  b = a[5]:int;
  if (b >= 8) goto B_b;
  c = b;
  goto B_a;
  label B_b:
  var d:int = a[4]:int;
  var e:int = select_if(d, c = a[3]:int, d > c);
  loop L_c {
    if (e != d) goto B_d;
    c = b;
    goto B_a;
    label B_d:
    a[0]:long = (f = a[0]:long >> 8L);
    var g:long = (a[2]:int + d)[0]:ubyte;
    a[5]:int = (c = b + -8);
    a[4]:int = (d = d + 1);
    a[0]:long = g << 56L | f;
    var h:int = b > 15;
    b = c;
    if (h) continue L_c;
  }
  label B_a:
  if (a[6]:int) goto B_f;
  if (c < 65) goto B_e;
  if (a[4]:int != a[3]:int) goto B_e;
  label B_f:
  a[5]:long@4 = 4294967296L;
  label B_e:
}

function VP8LReadBits(a:int, b:int):int {
  var d:int;
  var e:int;
  var f:long;
  var h:int;
  var k:int;
  var c:int = 0;
  if (b > 24) goto B_b;
  if (a[6]:int) goto B_b;
  a[5]:int = (e = (d = a[5]:int) + b);
  c = ((b << 2) + 1056944)[0]:int &
      i32_wrap_i64((f = a[0]:long) >> i64_extend_i32_u(d & 63));
  if (e < 8) goto B_a;
  var g:int = a[4]:int;
  var i:int = g - select_if(g, h = a[3]:int, g > h);
  b = 0;
  loop L_d {
    if (eqz(i + b)) goto B_c;
    a[0]:long = (f = f >> 8L);
    d = g + b;
    var j:long = (d + a[2]:int)[0]:ubyte;
    a[5]:int = (k = e + -8);
    a[4]:int = d + 1;
    a[0]:long = (f = j << 56L | f);
    b = b + 1;
    d = e > 15;
    e = k;
    if (d) continue L_d;
    goto B_a;
  }
  label B_c:
  if (e < 65) goto B_a;
  if (h < g) goto B_a;
  label B_b:
  a[5]:long@4 = 4294967296L;
  label B_a:
  return c;
}

function VP8LColorCacheInit(a:{ a:int, b:int, c:int }, b:int):int {
  var c:int;
  a.a = (c = WebPSafeCalloc(i64_extend_i32_s(1 << b), 4));
  if (c) goto B_a;
  return 0;
  label B_a:
  a.c = b;
  a.b = 32 - b;
  return 1;
}

function VP8LColorCacheClear(a:int_ptr) {
  if (eqz(a)) goto B_a;
  WebPSafeFree(a[0]);
  a[0] = 0;
  label B_a:
}

function VP8LColorCacheCopy(a:int_ptr, b:int_ptr) {
  memcpy(b[0], a[0], 4 << b[2])
}

function VP8LHtreeGroupsNew(a:int):int {
  return WebPSafeMalloc(i64_extend_i32_s(a), 548)
}

function VP8LHtreeGroupsFree(a:int) {
  if (eqz(a)) goto B_a;
  WebPSafeFree(a);
  label B_a:
}

function VP8LBuildHuffmanTable(a:int_ptr, b:int, c:int, d:int):int {
  var i:int;
  var h:int;
  var g:int_ptr;
  var e:int = stack_pointer - 1024;
  stack_pointer = e;
  var f:int = BuildHuffmanTable(0, b, c, d, 0);
  if (eqz(a)) goto B_b;
  if (eqz(f)) goto B_b;
  g = a[4];
  h = g[1];
  if (h + (f << 2) < g[0] + ((i = g[3]) << 2)) goto B_c;
  g = 0;
  var j:{ a:int, b:int, c:int, d:int } = WebPSafeMalloc(1L, 16);
  if (eqz(j)) goto B_a;
  j.d = (h = select_if(f, i, f > i));
  j.a = (h = WebPSafeMalloc(i64_extend_i32_s(h), 4));
  if (h) goto B_d;
  WebPSafeFree(j);
  goto B_a;
  label B_d:
  j.c = 0;
  j.b = h;
  (a[4])[2]:int = j;
  a[4] = j;
  label B_c:
  if (d > 512) goto B_e;
  BuildHuffmanTable(h, b, c, d, e);
  goto B_b;
  label B_e:
  g = WebPSafeMalloc(i64_extend_i32_u(d), 2);
  if (g) goto B_f;
  g = 0;
  goto B_a;
  label B_f:
  BuildHuffmanTable((a[4])[1]:int, b, c, d, g);
  WebPSafeFree(g);
  label B_b:
  g = f;
  label B_a:
  stack_pointer = e + 1024;
  return g;
}

function BuildHuffmanTable(a:int, b:int, c:int_ptr, d:int, e:ushort_ptr):int {
  var g:simd;
  var j:int;
  var k:int_ptr;
  var s:int;
  var t:int_ptr;
  var n:int;
  var ba:int;
  var r:int;
  var u:int;
  var x:int;
  var w:int;
  var q:int;
  var y:int;
  var v:int_ptr;
  var f:int = stack_pointer - 128;
  (f + 112)[0]:simd = (g = V128);
  (f + 96)[0]:simd = g;
  (f + 80)[0]:simd = g;
  f[4]:simd = g;
  var h:{ a:byte, b:short } = 0;
  var i:int = 0;
  if (d < 1) goto B_b;
  i = c;
  j = d;
  loop L_c {
    k = i[0]:int;
    if (k > 15) goto B_a;
    k = f + 64 + (k << 2);
    k[0] = k[0] + 1;
    i = i + 4;
    j = j + -1;
    if (j) continue L_c;
  }
  i = f[16]:int;
  label B_b:
  if (i == d) goto B_a;
  h = 0;
  f[1]:int = 0;
  i = f[17]:int;
  if (i > 2) goto B_a;
  f[2]:int = i;
  j = f[18]:int;
  if (j > 4) goto B_a;
  f[3]:int = (i = i + j);
  j = f[19]:int;
  if (j > 8) goto B_a;
  f[4]:int = (i = i + j);
  j = f[20]:int;
  if (j > 16) goto B_a;
  f[5]:int = (i = i + j);
  j = f[21]:int;
  if (j > 32) goto B_a;
  f[6]:int = (i = i + j);
  j = f[22]:int;
  if (j > 64) goto B_a;
  f[7]:int = (i = i + j);
  j = f[23]:int;
  if (j > 128) goto B_a;
  f[8]:int = (i = i + j);
  j = f[24]:int;
  if (j > 256) goto B_a;
  f[9]:int = (i = i + j);
  j = f[25]:int;
  if (j > 512) goto B_a;
  f[10]:int = (i = i + j);
  j = f[26]:int;
  if (j > 1024) goto B_a;
  f[11]:int = (i = i + j);
  j = f[27]:int;
  if (j > 2048) goto B_a;
  f[12]:int = (i = i + j);
  j = f[28]:int;
  if (j > 4096) goto B_a;
  f[13]:int = (i = i + j);
  j = f[29]:int;
  if (j > 8192) goto B_a;
  f[14]:int = (i = i + j);
  j = f[30]:int;
  if (j > 16384) goto B_a;
  f[15]:int = i + j;
  i = 0;
  if (d <= 0) goto B_d;
  loop L_e {
    j = c[0];
    if (j < 1) goto B_f;
    k = f + (j << 2);
    j = k[0];
    if (eqz(e)) goto B_g;
    if (j < d) goto B_h;
    return 0;
    label B_h:
    k[0] = j + 1;
    e[j]:short = i;
    goto B_f;
    label B_g:
    k[0] = j + 1;
    label B_f:
    c = c + 4;
    if (d != (i = i + 1)) continue L_e;
  }
  label B_d:
  var l:int = 1 << b;
  var m:int = 1;
  n = f[15]:int;
  if (n != 1) goto B_i;
  if (e) goto B_j;
  return l;
  label B_j:
  k = e[0] << 16;
  f = l;
  i = select_if(l, 1, l > 1);
  if (i < 4) goto B_k;
  f = l - (d = i & 2147483644);
  i = (l << 2) + a + -16;
  g = i32x4_splat(k);
  j = d;
  loop L_l {
    i[0]:simd@2 = g;
    i = i + -16;
    j = j + -4;
    if (j) continue L_l;
  }
  if (eqz(d)) goto B_k;
  return l;
  label B_k:
  j = f + 1;
  i = (f << 2) + a + -4;
  loop L_m {
    i[0]:int@2 = k;
    i = i + -4;
    j = j + -1;
    if (j > 1) continue L_m;
  }
  return l;
  label B_i:
  var o:int = 1;
  j = 0;
  var p:int = 0;
  if (b < 1) goto B_o;
  q = a + (l << 2);
  h = 0;
  m = 1;
  o = 1;
  j = 0;
  c = 2;
  p = 0;
  i = 1;
  loop L_p {
    r = m << 1;
    m = r - (i = (t = f + 64 + ((s = i) << 2))[0]);
    if (m < 0) goto B_a;
    if (eqz(a)) goto B_q;
    if (i < 1) goto B_q;
    u = p + i;
    v = s & 255;
    w = q - (i = c << 2);
    x = 0 - i;
    y = 1 << s + -1;
    loop L_r {
      i = w + (j << 2);
      d = e[p]:ushort << 16 | v;
      k = l;
      loop L_s {
        i[0]:int@2 = d;
        i = i + x;
        k = k - c;
        if (k > 0) continue L_s;
      }
      k = y;
      loop L_t {
        i = k;
        k = i >> 1;
        if (i & j) continue L_t;
      }
      j = (i + -1 & j) + i;
      p = p + 1;
      if (p != u) continue L_r;
    }
    t[0] = 0;
    p = u;
    label B_q:
    o = r + o;
    c = c << 1;
    i = s + 1;
    if (s != b) continue L_p;
  }
  if (b <= 14) goto B_o;
  s = l;
  goto B_n;
  label B_o:
  r = l + -1;
  var z:int = (b << 2) + f + 64 + 4;
  x = -1;
  c = 2;
  w = a;
  n = b;
  s = l;
  loop L_u {
    h = 0;
    var aa:int = m << 1;
    m = aa - (i = (v = f + 64 + ((ba = n + 1) << 2))[0]);
    if (m < 0) goto B_a;
    if (i < 1) goto B_v;
    y = 1 << n;
    d = 0 - (c << 2);
    var ca:int = ba - b;
    q = ca & 255;
    t = 1 << ca;
    loop L_w {
      u = j & r;
      if (u == x) goto B_aa;
      i = t;
      k = ca;
      if (n > 13) goto B_ba;
      i = z;
      k = t;
      h = ba;
      loop L_da {
        k = k - i[0]:int;
        if (k >= 1) goto B_ea;
        x = h;
        goto B_ca;
        label B_ea:
        i = i + 4;
        k = k << 1;
        x = 15;
        h = h + 1;
        if (h != 15) continue L_da;
      }
      label B_ca:
      i = 1 << (k = x - b);
      label B_ba:
      s = i + s;
      if (a) goto B_z;
      l = i;
      x = u;
      goto B_x;
      label B_aa:
      if (a) goto B_y;
      goto B_x;
      label B_z:
      h = a + (u << 2);
      h.a = k + b;
      h.b = ((w = w + (l << 2)) - a >> 2) - u;
      l = i;
      x = u;
      label B_y:
      i = w + d + (l << 2) + ((j >> b) << 2);
      h = e[p]:ushort << 16 | q;
      k = l;
      loop L_fa {
        i[0]:int@2 = h;
        i = i + d;
        k = k - c;
        if (k > 0) continue L_fa;
      }
      p = p + 1;
      label B_x:
      k = y;
      loop L_ga {
        i = k;
        k = i >> 1;
        if (i & j) continue L_ga;
      }
      v[0] = (k = v[0]) + -1;
      j = (i + -1 & j) + i;
      if (k > 1) continue L_w;
    }
    label B_v:
    o = aa + o;
    z = z + 4;
    c = c << 1;
    n = ba;
    if (ba != 15) continue L_u;
  }
  n = f[15]:int;
  label B_n:
  h = select_if(s, 0, o == (n << 1) + -1 & 1);
  label B_a:
  return h;
}

function VP8LHuffmanTablesAllocate(a:int, b:{ a:int, b:int, c:int, d:int, e:int }):int {
  var d:int;
  var c:int = 0;
  b.c = 0;
  b.e = b;
  b.a = (d = WebPSafeMalloc(i64_extend_i32_s(a), 4));
  if (eqz(d)) goto B_a;
  b.d = a;
  b.b = d;
  c = 1;
  label B_a:
  return c;
}

function VP8LHuffmanTablesDeallocate(a:int_ptr) {
  if (eqz(a)) goto B_a;
  var b:int_ptr = a[2];
  WebPSafeFree(a[0]);
  a[2] = 0;
  a[0] = 0;
  if (eqz(b)) goto B_a;
  loop L_b {
    a = b[2];
    WebPSafeFree(b[0]);
    WebPSafeFree(b);
    b = a;
    if (a) continue L_b;
  }
  label B_a:
}

function WebPDequantizeLevels(a:int, b:int, c:int, d:int, e:int):int {
  var j:int;
  var l:int;
  var m:int;
  var n:int;
  var r:int;
  var da:int;
  var ca:int;
  var fa:int;
  var ga:int;
  var ia:int;
  var ja:int;
  var ka:int;
  var na:int;
  var oa:int;
  var jb:simd;
  var f:int = stack_pointer - 256;
  stack_pointer = f;
  var g:int = e / 25;
  var h:int = 0;
  if (e > 100) goto B_a;
  if (eqz(a)) goto B_a;
  if (b < 1) goto B_a;
  if (c < 1) goto B_a;
  h = 1;
  var i:int = c + -1;
  var k:int = 
    select_if(i >> 1,
              e = select_if((j = b + -1) >> 1, g, (g << 1 | 1) > b),
              (e << 1 | 1) > c);
  if (k < 1) goto B_a;
  h = 0;
  var o:int = 
    WebPSafeMalloc(1L, (l = b << 1) + (n = l * ((m = k << 1) + 2)) + 4094);
  if (eqz(o)) goto B_a;
  var p:int = 0 - k;
  var q:int = 0;
  var s:int = o + ((r = (e = m | 1) * b) << 1);
  var t:int = s - l;
  memset(t, 0, l);
  var u:int = memset(f, 0, 256);
  var v:int = o + n;
  var w:ushort_ptr = e * e;
  var x:int = 255;
  var y:int = 0;
  var z:int = 255;
  var aa:int = 0;
  var ba:int = a;
  loop L_b {
    h = y;
    g = z;
    ca = 0;
    loop L_c {
      (u + (e = (ba + ca)[0]:ubyte))[0]:byte = 1;
      y = select_if(e, y, da = h < e);
      q = select_if(e, q, da);
      z = select_if(e, z, da = g > e);
      x = select_if(e, x, da);
      h = select_if(h, e, h > e);
      g = select_if(g, e, g < e);
      if (b != (ca = ca + 1)) continue L_c;
    }
    ba = ba + d;
    aa = aa + 1;
    if (aa != c) continue L_b;
  }
  h = y - z;
  aa = v + l;
  g = -1;
  y = 0;
  e = 0;
  loop L_d {
    z = u + e;
    if (z[0]:ubyte) goto B_f;
    ca = g;
    goto B_e;
    label B_f:
    y = y + 1;
    if (g < 0) goto B_g;
    g = e - g;
    h = select_if(g, h, g < h);
    label B_g:
    ca = e;
    label B_e:
    if ((z + 1)[0]:ubyte) goto B_i;
    g = ca;
    goto B_h;
    label B_i:
    g = e + 1;
    y = y + 1;
    if (ca < 0) goto B_h;
    ca = e - ca + 1;
    h = select_if(ca, h, ca < h);
    label B_h:
    e = e + 2;
    if (e != 256) continue L_d;
  }
  da = h * 12 >> 2;
  z = da * ((ba = h << 2) + -1);
  u = ba - da;
  var ea:short_ptr = aa + 2046;
  e = b * ((k << 2) + 6) + o;
  h = e + 2048;
  g = e + 2044;
  e = 1;
  loop L_j {
    ca = e;
    if (e <= da) goto B_k;
    ca = 0;
    if (e >= ba) goto B_k;
    ca = z / u;
    label B_k:
    h[0]:short = (ca = ca >> 2);
    g[0]:short = 0 - ca;
    h = h + 2;
    g = g + -2;
    z = z - da;
    e = e + 1;
    if (e != 1024) continue L_j;
  }
  ea[0] = 0;
  u = 262144 / w;
  if (y < 3) goto B_l;
  if (p >= c) goto B_l;
  g = v + ((e = select_if(fa = b - k, ga = k + 1, fa > ga)) << 1);
  var ha:int = 
    ((g < o + ((h = k << 2) + 4) * b &
      (w = s + (j << 1)) < (ca = o + ((m + 3) * b << 1))) |
     (g < n - m + o + -2 & (r + e << 1) - m + o + -2 < ca)) |
    (g < o + (z = (y = (h + 6) * b) + -2) - (da = k + e << 1) &
     o + z - (k + b << 1) < ca);
  var la:int = 
    (v < o + (g = r << 1) + h &
     (ja = (ca = (ia = g + m) + o) + -2) < (ka = n + m + o + 2)) |
    (v < ca + 2 & s < ka);
  da = o + (z = y + -4) - da;
  var ma:int = da - ((ba = (e ^ -1) + b) << 1) > da | ba < 0;
  var pa:int = ga + (oa = (na = (m ^ -1) + b) & -8);
  var qa:int = b - e;
  var ra:int = qa & -8;
  var sa:int = o + (r + k << 1);
  var ta:int = sa - (k << 1) > sa | k < 0;
  var ua:int = k - b;
  var va:int = k & 1;
  l = b & -2;
  var wa:int = b & 1;
  var xa:int = k + -1;
  r = h | 2;
  var ya:int = ga & -8;
  var za:int = k ^ -1;
  var ab:int = za + b;
  var bb:int = g - m + o + -2;
  var cb:int = o + z;
  var db:int = y + o + -18;
  var eb:int = ca + -14;
  var fb:simd = i32x4_splat(u);
  var gb:int = 
    na < 8 | ((e = v + m + 2) - (g = g + o) + h + -2 < 16 | e - g < 16);
  aa = o;
  m = a;
  loop L_m {
    ca = 0;
    h = 0;
    if (eqz(j)) goto B_n;
    e = 0;
    ca = 0;
    h = 0;
    loop L_o {
      y = s + e;
      y[0]:short =
        (ba = 
           (z = t + e)[0]:ushort + (da = (ca & 65535) + (ca = m + h)[0]:ubyte)) -
        (g = aa + e)[0]:ushort;
      g[0]:short = ba;
      (y + 2)[0]:short =
        (y = (z + 2)[0]:ushort + (ca = (da & 65535) + (ca + 1)[0]:ubyte)) -
        (g = g + 2)[0]:ushort;
      g[0]:short = y;
      e = e + 4;
      if (l != (h = h + 2)) continue L_o;
    }
    label B_n:
    if (eqz(wa)) goto B_p;
    (s + (e = h << 1))[0]:short =
      (h = (t + e)[0]:ushort + ca + (m + h)[0]:ubyte) -
      (e = aa + e)[0]:ushort;
    e[0]:short = h;
    label B_p:
    var hb:int = aa + (b << 1);
    var ib:int = hb == s;
    t = select_if(select_if(d, 0, p < i), 0, p > -1);
    if (p < k) goto B_q;
    e = 0;
    if ((ga < 16 | ta) | la) goto B_s;
    ca = ya;
    e = v;
    h = eb;
    g = ja;
    loop L_t {
      e[0]:simd@2 =
        ((fb i32x4_mul
          i32x4_extend_low_i16x8_u(
            jb = SimdShuffleOp(h[0]:simd@2, fb) i16x8_add g[0]:simd@2)) i32x4_shr_u
         16) i16x8_narrow_i32x4_u
        ((fb i32x4_mul i32x4_extend_low_i16x8_u(SimdShuffleOp(jb, fb))) i32x4_shr_u
         16);
      e = e + 16;
      h = h + -16;
      g = g + 16;
      ca = ca + -8;
      if (ca) continue L_t;
    }
    e = ya;
    if (ga == ya) goto B_r;
    label B_s:
    h = e;
    if (va) goto B_u;
    v[e]:short = u * (s[k - e]:ushort + s[xa + e]:ushort & 65535) >> 16;
    h = e | 1;
    label B_u:
    if (k == e) goto B_r;
    g = ga - h;
    z = n + (h = h << 1);
    e = ja - h;
    da = ia + h;
    h = o;
    loop L_v {
      ca = h + z;
      ca[0]:short =
        u * ((e + 2)[0]:ushort + ((y = h + da) + -2)[0]:ushort & 65535) >> 16;
      (ca + 2)[0]:short = u * (e[0]:ushort + y[0]:ushort & 65535) >> 16;
      e = e + -4;
      h = h + 4;
      g = g + -2;
      if (g) continue L_v;
    }
    label B_r:
    g = ga;
    if (ga >= fa) goto B_w;
    e = ga;
    if (gb) goto B_x;
    h = ka;
    g = oa;
    e = s;
    loop L_y {
      h[0]:simd@2 =
        ((fb i32x4_mul
          i32x4_extend_low_i16x8_u(
            jb = (e + r)[0]:simd@2 i16x8_sub e[0]:simd@2)) i32x4_shr_u
         16) i16x8_narrow_i32x4_u
        ((fb i32x4_mul i32x4_extend_low_i16x8_u(SimdShuffleOp(jb, fb))) i32x4_shr_u
         16);
      h = h + 16;
      e = e + 16;
      g = g + -8;
      if (g) continue L_y;
    }
    e = pa;
    g = fa;
    if (na == oa) goto B_w;
    label B_x:
    ca = e;
    if (eqz(b - (h = k + e) & 1)) goto B_z;
    v[e]:short = u * (s[h]:ushort - s[e + za]:ushort & 65535) >> 16;
    ca = e + 1;
    label B_z:
    g = fa;
    if (ab == e) goto B_w;
    h = ua + ca;
    z = v + (e = ca << 1);
    da = bb + e;
    ba = sa + e;
    e = 0;
    loop L_aa {
      g = z + e;
      g[0]:short =
        u * ((ca = ba + e)[0]:ushort - (y = da + e)[0]:ushort & 65535) >> 16;
      (g + 2)[0]:short =
        u * ((ca + 2)[0]:ushort - (y + 2)[0]:ushort & 65535) >> 16;
      e = e + 4;
      h = h + 2;
      if (h) continue L_aa;
    }
    g = fa;
    label B_w:
    if (g >= b) goto B_ba;
    if (eqz((qa < 16 | ma) | ha)) goto B_da;
    y = g;
    goto B_ca;
    label B_da:
    y = g + ra;
    e = v + (h = g << 1);
    h = bb + h;
    g = db - (k + g << 1);
    var kb:simd = SimdShuffleOp(LoadSplat(w) i16x8_shl 1, fb);
    ca = ra;
    loop L_ea {
      e[0]:simd@2 =
        ((fb i32x4_mul
          i32x4_extend_low_i16x8_u(
            jb = 
              kb i16x8_sub (SimdShuffleOp(g[0]:simd@2, fb) i16x8_add h[0]:simd@2))) i32x4_shr_u
         16) i16x8_narrow_i32x4_u
        ((fb i32x4_mul i32x4_extend_low_i16x8_u(SimdShuffleOp(jb, fb))) i32x4_shr_u
         16);
      e = e + 16;
      h = h + 16;
      g = g + -16;
      ca = ca + -8;
      if (ca) continue L_ea;
    }
    if (qa == ra) goto B_ba;
    label B_ca:
    ca = b - y;
    e = bb + (h = y << 1);
    h = v + h;
    g = cb - (k + y << 1);
    loop L_fa {
      h[0]:short =
        u * ((w[0] << 1) - g[0]:ushort + e[0]:ushort & 65535) >> 16;
      e = e + 2;
      h = h + 2;
      g = g + -2;
      ca = ca + -1;
      if (ca) continue L_fa;
    }
    label B_ba:
    e = a;
    ca = b;
    g = v;
    loop L_ga {
      if (q <= (h = e[0]:ubyte)) goto B_ha;
      if (x >= h) goto B_ha;
      e[0]:byte =
        select_if(
          h = select_if(h = ea[g[0]:ushort - (h << 2)]:short + h, 0, h > 0),
          255,
          h < 255);
      label B_ha:
      e = e + 1;
      g = g + 2;
      ca = ca + -1;
      if (ca) continue L_ga;
    }
    a = a + d;
    label B_q:
    m = m + t;
    t = aa;
    aa = select_if(o, hb, ib);
    p = p + 1;
    if (p != c) continue L_m;
  }
  label B_l:
  WebPSafeFree(o);
  h = 1;
  label B_a:
  stack_pointer = f + 256;
  return h;
}

function VP8InitRandom(a:int, b:float) {
  var e:int;
  memcpy(a + 8, 1057056, 220);
  a[0]:long@4 = 133143986176L;
  var c:int = b > 1.0f;
  var d:float = b * 256.0f;
  if (eqz(d < 4294967296.0f & d >= 0.0f)) goto B_b;
  e = i32_trunc_f32_u(d);
  goto B_a;
  label B_b:
  e = 0;
  label B_a:
  a[57]:int = select_if(0, select_if(256, e, c), b < 0.0f);
}

function WebPRescalerInit(a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int):int {
  var j:int = 0;
  var k:long = i64_extend_i32_s(e);
  var l:long = k * i64_extend_i32_s(h) << 3L;
  if (l > 4294967295L) goto B_a;
  a[18]:int = g;
  a[17]:int = d;
  a[15]:long@4 = 0L;
  a[14]:int = f;
  a[13]:int = e;
  a[12]:int = c;
  a[11]:int = b;
  a[2]:int = h;
  a[1]:int = (j = c < f);
  a[0]:int = (g = b < e);
  a[10]:int = select_if(b + -1, e, g);
  a[9]:int = (d = select_if(e + -1, b, g));
  if (g) goto B_b;
  a[3]:int = 4294967296L / k;
  label B_b:
  a[8]:int = (b = f - j);
  a[7]:int = (c = c - j);
  if (j) goto B_d;
  a[6]:int = c;
  a[5]:int =
    select_if(k = (i64_extend_i32_u(f) << 32L) /
                  i64_extend_i32_s(c) * i64_extend_i32_s(d),
              4294967296L,
              k < 4294967296L);
  goto B_c;
  label B_d:
  a[6]:int = b;
  b = d;
  label B_c:
  a[19]:int = i;
  a[4]:int = 4294967296L / i64_extend_i32_s(b);
  a[20]:int = i + (h * e << 2);
  memset(i, 0, i32_wrap_i64(l));
  WebPRescalerDspInit();
  j = 1;
  label B_a:
  return j;
}

function WebPRescalerGetScaledDimensions(a:int, b:int, c:int_ptr, d:int_ptr):int {
  var g:long;
  var e:int = d[0];
  var f:int = c[0];
  if (b < 1) goto B_a;
  if (f) goto B_a;
  g = i64_extend_i32_u(b);
  f = i32_wrap_i64(
        (g + i64_extend_i32_s(e) * i64_extend_i32_s(a) + -1L) / g);
  label B_a:
  if (a < 1) goto B_b;
  if (e) goto B_b;
  g = i64_extend_i32_u(a);
  e = i32_wrap_i64(
        (g + i64_extend_i32_s(f) * i64_extend_i32_s(b) + -1L) / g);
  label B_b:
  b = 0;
  if (f + -1073741824 < -1073741823) goto B_c;
  if (e < 1) goto B_c;
  if (e > 1073741823) goto B_c;
  c[0] = f;
  d[0] = e;
  b = 1;
  label B_c:
  return b;
}

function WebPRescaleNeededLines(a:int_ptr, b:int):int {
  a = (a[6] + (a = a[8]) + -1) / a;
  return select_if(a, b, a < b);
}

function WebPRescalerImport(a:int, b:int, c:int, d:int):int {
  var e:int = 0;
  if (b < 1) goto B_a;
  loop L_b {
    if (a[16]:int >= a[14]:int) goto B_c;
    if (a[6]:int < 1) goto B_a;
    label B_c:
    if (eqz(a[1]:int)) goto B_d;
    a[19]:long@4 = a[19]:long@4 << 32L;
    label B_d:
    WebPRescalerImportRow(a, c);
    if (a[1]:int) goto B_e;
    if (a[13]:int * a[2]:int < 1) goto B_e;
    var f:int_ptr = a[19]:int;
    var g:int_ptr = a[20]:int;
    var h:int = 0;
    loop L_f {
      f[0] = f[0] + g[0];
      g = g + 4;
      f = f + 4;
      h = h + 1;
      if (h < a[13]:int * a[2]:int) continue L_f;
    }
    label B_e:
    a[15]:int = a[15]:int + 1;
    a[6]:int = a[6]:int - a[8]:int;
    c = c + d;
    e = e + 1;
    if (e != b) continue L_b;
  }
  e = b;
  label B_a:
  return e;
}

function WebPRescalerExport(a:int_ptr):int {
  var b:int = 0;
  if (a[16] >= a[14]) goto B_a;
  b = 0;
  loop L_b {
    if (a[6] > 0) goto B_a;
    b = b + 1;
    WebPRescalerExportRow(a);
    if (a[16] < a[14]) continue L_b;
  }
  label B_a:
  return b;
}

function WebPGetWorkerInterface():int {
  return 1059516
}

function Init(a:simd_ptr@4) {
  a[0] = V128;
  (a + 16)[0]:long@4 = 0L;
}

function Reset(a:int_ptr):int {
  a[5] = 0;
  if (a[1]) goto B_a;
  a[1] = 1;
  label B_a:
  return 1;
}

function Sync(a:int_ptr):int {
  return eqz(a[5])
}

function Launch(a:int_ptr) {
  var b:int = a[2];
  if (eqz(b)) goto B_a;
  b = call_indirect(a[3], a[4], b);
  a[5] = a[5] | eqz(b);
  label B_a:
}

function Execute(a:int_ptr) {
  var b:int = a[2];
  if (eqz(b)) goto B_a;
  b = call_indirect(a[3], a[4], b);
  a[5] = a[5] | eqz(b);
  label B_a:
}

function End(a:int_ptr) {
  a[1] = 0
}

function WebPSafeMalloc(a:long, b:int):int {
  var d:int;
  if (eqz(a)) goto B_b;
  var c:long = 2147418112L / a;
  d = 0;
  var e:long = i64_extend_i32_u(b);
  if (e * a > 4294967295L) goto B_a;
  if (c < e) goto B_a;
  label B_b:
  d = malloc(i32_wrap_i64(a) * b);
  label B_a:
  return d;
}

function WebPSafeCalloc(a:long, b:int):int {
  var d:int;
  if (eqz(a)) goto B_b;
  var c:long = 2147418112L / a;
  d = 0;
  var e:long = i64_extend_i32_u(b);
  if (e * a > 4294967295L) goto B_a;
  if (c < e) goto B_a;
  label B_b:
  d = calloc(i32_wrap_i64(a), b);
  label B_a:
  return d;
}

function WebPSafeFree(a:int) {
  free(a)
}

function WebPCopyPlane(a:int, b:int, c:int, d:int, e:int, f:int) {
  var g:int;
  var h:int;
  if (f < 1) goto B_a;
  g = f & 3;
  if (g) goto B_c;
  h = f;
  goto B_b;
  label B_c:
  h = f & -4;
  loop L_d {
    c = memcpy(c, a, e) + d;
    a = a + b;
    g = g + -1;
    if (g) continue L_d;
  }
  label B_b:
  if (f < 4) goto B_a;
  g = h + -1;
  loop L_e {
    c = 
      memcpy(
        memcpy(memcpy(memcpy(c, a, e) + d, a = a + b, e) + d, a = a + b, e) +
        d,
        a = a + b,
        e) +
      d;
    a = a + b;
    g = g + -4;
    if (g < -2) continue L_e;
  }
  label B_a:
}

export function malloc(a:int):int {
  return dlmalloc(a)
}

function dlmalloc(a:int):int {
  var d:int;
  var f:{ a:int, b:int, c:int, d:int, e:int }
  var h:int;
  var e:int;
  var i:int;
  var g:int_ptr;
  var j:int;
  var c:int_ptr;
  var l:int_ptr;
  var k:int;
  var b:int = stack_pointer - 16;
  stack_pointer = b;
  c = 0[265108]:int;
  if (c) goto B_q;
  d = 0[265220]:int;
  if (d) goto B_r;
  0[265223]:long@4 = -1L;
  0[265221]:long@4 = 281474976776192L;
  0[265220]:int = (d = (b + 8 & -16) ^ 1431655768);
  0[265225]:int = 0;
  0[265213]:int = 0;
  label B_r:
  if (1114112 < 1060944) goto B_p;
  c = 0;
  if (1114112 - 1060944 < 89) goto B_q;
  e = 0;
  0[265214]:int = 1060944;
  0[265106]:int = 1060944;
  0[265111]:int = d;
  0[265110]:int = -1;
  0[265215]:int = 1114112 - 1060944;
  loop L_s {
    (e + 1060468)[0]:int = (d = e + 1060456);
    d[0]:int = (f = e + 1060448);
    (e + 1060460)[0]:int = f;
    (e + 1060476)[0]:int = (f = e + 1060464);
    f.a = d;
    (e + 1060484)[0]:int = (d = e + 1060472);
    d[0]:int = f;
    (e + 1060480)[0]:int = d;
    e = e + 32;
    if (e != 256) continue L_s;
  }
  c = 1060944 + (e = -8 - 1060944 & 15);
  (c + 4)[0]:int = (e = (d = 1114112 - 1060944 + -56) - e) | 1;
  0[265109]:int = 0[265224]:int;
  0[265105]:int = e;
  0[265108]:int = c;
  (d + 1060944 + 4)[0]:int = 56;
  label B_q:
  if (a > 236) goto B_u;
  g = 0[265102]:int;
  e = g >> (d = (h = select_if(16, a + 19 & -16, a < 11)) >> 3);
  if (eqz(e & 3)) goto B_v;
  f = ((e & 1) | d) ^ 1;
  d = f << 3;
  e = d + 1060448;
  if (e != (h = (d = (d + 1060456)[0]:int)[2]:int)) goto B_x;
  0[265102]:int = g & -2 << f;
  goto B_w;
  label B_x:
  e[2]:int = h;
  h[3]:int = e;
  label B_w:
  e = d + 8;
  d[1]:int = (f = f << 3) | 3;
  d = d + f;
  d[1]:int = d[1]:int | 1;
  goto B_a;
  label B_v:
  if (h <= (i = 0[265104]:int)) goto B_t;
  if (eqz(e)) goto B_y;
  d = ctz(e << d & ((e = 2 << d) | 0 - e));
  e = d << 3;
  f = e + 1060448;
  if (f != (a = (e = (e + 1060456)[0]:int)[2]:int)) goto B_aa;
  0[265102]:int = (g = g & -2 << d);
  goto B_z;
  label B_aa:
  f.c = a;
  a[3]:int = f;
  label B_z:
  e[1]:int = h | 3;
  (e + (d = d << 3))[0]:int = (f = d - h);
  a = e + h;
  a[1]:int = f | 1;
  if (eqz(i)) goto B_ba;
  h = (i & -8) + 1060448;
  d = 0[265107]:int;
  if (g & (j = 1 << (i >> 3))) goto B_da;
  0[265102]:int = g | j;
  j = h;
  goto B_ca;
  label B_da:
  j = h[2]:int;
  label B_ca:
  j[3]:int = d;
  h[2]:int = d;
  d[3]:int = h;
  d[2]:int = j;
  label B_ba:
  e = e + 8;
  0[265107]:int = a;
  0[265104]:int = f;
  goto B_a;
  label B_y:
  k = 0[265103]:int;
  if (eqz(k)) goto B_t;
  a = ((ctz(k) << 2) + 1060712)[0]:int;
  d = (a[1]:int & -8) - h;
  f = a;
  loop L_fa {
    e = f.e;
    if (e) goto B_ga;
    e = (f + 20)[0]:int;
    if (eqz(e)) goto B_ea;
    label B_ga:
    f = (e[1]:int & -8) - h;
    d = select_if(f, d, f = f < d);
    a = select_if(e, a, f);
    f = e;
    continue L_fa;
  }
  label B_ea:
  l = a[6]:int;
  j = a[3]:int;
  if (j == a) goto B_ha;
  e = a[2]:int;
  e < 0[265106]:int;
  j[2]:int = e;
  e[3]:int = j;
  goto B_b;
  label B_ha:
  f = a + 20;
  e = f.a;
  if (e) goto B_ia;
  e = a[4]:int;
  if (eqz(e)) goto B_o;
  f = a + 16;
  label B_ia:
  loop L_ja {
    c = f;
    j = e;
    f = j + 20;
    e = f.a;
    if (e) continue L_ja;
    f = j + 16;
    e = j[4]:int;
    if (e) continue L_ja;
  }
  c[0] = 0;
  goto B_b;
  label B_u:
  h = -1;
  if (a > -65) goto B_t;
  e = a + 19;
  h = e & -16;
  l = 0[265103]:int;
  if (eqz(l)) goto B_t;
  i = 0;
  if (h < 256) goto B_ka;
  i = 31;
  if (h > 16777215) goto B_ka;
  i = (h >> 38 - (e = clz(e >> 8)) & 1) - (e << 1) + 62;
  label B_ka:
  d = 0 - h;
  f = ((i << 2) + 1060712)[0]:int;
  if (f) goto B_oa;
  e = 0;
  j = 0;
  goto B_na;
  label B_oa:
  e = 0;
  a = h << select_if(0, 25 - (i >> 1), i == 31);
  j = 0;
  loop L_pa {
    g = (f.b & -8) - h;
    if (g >= d) goto B_qa;
    d = g;
    j = f;
    if (g) goto B_qa;
    d = 0;
    j = f;
    e = f;
    goto B_ma;
    label B_qa:
    e = select_if(select_if(e,
                            g = (f + 20)[0]:int,
                            g == (f = (f + (a >> 29 & 4) + 16)[0]:int)),
                  e,
                  g);
    a = a << 1;
    if (f) continue L_pa;
  }
  label B_na:
  if (e | j) goto B_ra;
  j = 0;
  e = 2 << i;
  e = (e | 0 - e) & l;
  if (eqz(e)) goto B_t;
  e = ((ctz(e) << 2) + 1060712)[0]:int;
  label B_ra:
  if (eqz(e)) goto B_la;
  label B_ma:
  loop L_sa {
    g = (e[1]:int & -8) - h;
    a = g < d;
    f = e[4]:int;
    if (f) goto B_ta;
    f = (e + 20)[0]:int;
    label B_ta:
    d = select_if(g, d, a);
    j = select_if(e, j, a);
    e = f;
    if (f) continue L_sa;
  }
  label B_la:
  if (eqz(j)) goto B_t;
  if (d >= 0[265104]:int - h) goto B_t;
  c = j[6]:int;
  a = j[3]:int;
  if (a == j) goto B_ua;
  e = j[2]:int;
  e < 0[265106]:int;
  a[2]:int = e;
  e[3]:int = a;
  goto B_c;
  label B_ua:
  f = j + 20;
  e = f.a;
  if (e) goto B_va;
  e = j[4]:int;
  if (eqz(e)) goto B_n;
  f = j + 16;
  label B_va:
  loop L_wa {
    g = f;
    a = e;
    f = a + 20;
    e = f.a;
    if (e) continue L_wa;
    f = a + 16;
    e = a[4]:int;
    if (e) continue L_wa;
  }
  g[0] = 0;
  goto B_c;
  label B_t:
  e = 0[265104]:int;
  if (e < h) goto B_xa;
  d = 0[265107]:int;
  f = e - h;
  if (f < 16) goto B_za;
  a = d + h;
  a[1]:int = f | 1;
  (d + e)[0]:int = f;
  d[1]:int = h | 3;
  goto B_ya;
  label B_za:
  d[1]:int = e | 3;
  e = d + e;
  e[1]:int = e[1]:int | 1;
  a = 0;
  f = 0;
  label B_ya:
  0[265104]:int = f;
  0[265107]:int = a;
  e = d + 8;
  goto B_a;
  label B_xa:
  f = 0[265105]:int;
  if (f <= h) goto B_ab;
  e = c + h;
  e[1]:int = (d = f - h) | 1;
  0[265108]:int = e;
  0[265105]:int = d;
  c[1] = h | 3;
  e = c + 8;
  goto B_a;
  label B_ab:
  if (eqz(0[265220]:int)) goto B_cb;
  d = 0[265222]:int;
  goto B_bb;
  label B_cb:
  0[265223]:long@4 = -1L;
  0[265221]:long@4 = 281474976776192L;
  0[265220]:int = (b + 12 & -16) ^ 1431655768;
  0[265225]:int = 0;
  0[265213]:int = 0;
  d = 65536;
  label B_bb:
  e = 0;
  a = d + (i = h + 71);
  j = a & (g = 0 - d);
  if (j > h) goto B_db;
  0[265226]:int = 48;
  goto B_a;
  label B_db:
  e = 0[265212]:int;
  if (eqz(e)) goto B_eb;
  d = 0[265210]:int;
  l = d + j;
  if (l <= d) goto B_fb;
  if (l <= e) goto B_eb;
  label B_fb:
  e = 0;
  0[265226]:int = 48;
  goto B_a;
  label B_eb:
  if (0[1060852]:ubyte & 4) goto B_k;
  if (eqz(c)) goto B_ib;
  e = 1060856;
  loop L_jb {
    d = e[0]:int;
    if (d > c) goto B_kb;
    if (d + e[1]:int > c) goto B_hb;
    label B_kb:
    e = e[2]:int;
    if (e) continue L_jb;
  }
  label B_ib:
  a = sbrk(0);
  if (a == -1) goto B_l;
  g = j;
  e = 0[265221]:int;
  d = e + -1;
  if (eqz(d & a)) goto B_lb;
  g = j - a + (d + a & 0 - e);
  label B_lb:
  if (g <= h) goto B_l;
  if (g > 2147483646) goto B_l;
  e = 0[265212]:int;
  if (eqz(e)) goto B_mb;
  d = 0[265210]:int;
  f = d + g;
  if (f <= d) goto B_l;
  if (f > e) goto B_l;
  label B_mb:
  e = sbrk(g);
  if (e != a) goto B_gb;
  goto B_j;
  label B_hb:
  g = a - f & g;
  if (g > 2147483646) goto B_l;
  a = sbrk(g);
  if (a == e[0]:int + e[1]:int) goto B_m;
  e = a;
  label B_gb:
  if (g >= h + 72) goto B_nb;
  if (e == -1) goto B_nb;
  d = i - g + (d = 0[265222]:int) & 0 - d;
  if (d <= 2147483646) goto B_ob;
  a = e;
  goto B_j;
  label B_ob:
  if (sbrk(d) == -1) goto B_pb;
  g = d + g;
  a = e;
  goto B_j;
  label B_pb:
  sbrk(0 - g);
  goto B_l;
  label B_nb:
  a = e;
  if (e != -1) goto B_j;
  goto B_l;
  label B_p:
  unreachable;
  unreachable;
  label B_o:
  j = 0;
  goto B_b;
  label B_n:
  a = 0;
  goto B_c;
  label B_m:
  if (a != -1) goto B_j;
  label B_l:
  0[265213]:int = 0[265213]:int | 4;
  label B_k:
  if (j > 2147483646) goto B_i;
  a = sbrk(j);
  e = sbrk(0);
  if (a == -1) goto B_i;
  if (e == -1) goto B_i;
  if (a >= e) goto B_i;
  g = e - a;
  if (g <= h + 56) goto B_i;
  label B_j:
  0[265210]:int = (e = 0[265210]:int + g);
  if (e <= 0[265211]:int) goto B_qb;
  0[265211]:int = e;
  label B_qb:
  d = 0[265108]:int;
  if (eqz(d)) goto B_ub;
  e = 1060856;
  loop L_vb {
    if (a == (f = e[0]:int) + (j = e[1]:int)) goto B_tb;
    e = e[2]:int;
    if (e) continue L_vb;
    goto B_sb;
  }
  label B_ub:
  e = 0[265106]:int;
  if (eqz(e)) goto B_xb;
  if (a >= e) goto B_wb;
  label B_xb:
  0[265106]:int = a;
  label B_wb:
  e = 0;
  0[265215]:int = g;
  0[265214]:int = a;
  0[265110]:int = -1;
  0[265111]:int = 0[265220]:int;
  0[265217]:int = 0;
  loop L_yb {
    (e + 1060468)[0]:int = (d = e + 1060456);
    d[0]:int = (f = e + 1060448);
    (e + 1060460)[0]:int = f;
    (e + 1060476)[0]:int = (f = e + 1060464);
    f.a = d;
    (e + 1060484)[0]:int = (d = e + 1060472);
    d[0]:int = f;
    (e + 1060480)[0]:int = d;
    e = e + 32;
    if (e != 256) continue L_yb;
  }
  d = a + (e = -8 - a & 15);
  d[1]:int = (e = (f = g + -56) - e) | 1;
  0[265109]:int = 0[265224]:int;
  0[265105]:int = e;
  0[265108]:int = d;
  (a + f)[1]:int = 56;
  goto B_rb;
  label B_tb:
  if (d >= a) goto B_sb;
  if (d < f) goto B_sb;
  if (e[3]:int & 8) goto B_sb;
  a = d + (f = -8 - d & 15);
  a[1]:int = (f = (c = 0[265105]:int + g) - f) | 1;
  e[1]:int = j + g;
  0[265109]:int = 0[265224]:int;
  0[265105]:int = f;
  0[265108]:int = a;
  (d + c)[1]:int = 56;
  goto B_rb;
  label B_sb:
  if (a >= (j = 0[265106]:int)) goto B_zb;
  0[265106]:int = a;
  j = a;
  label B_zb:
  f = a + g;
  e = 1060856;
  loop L_ec {
    if (e[0]:int == f) goto B_dc;
    e = e[2]:int;
    if (e) continue L_ec;
    goto B_cc;
  }
  label B_dc:
  if (eqz(e[12]:ubyte & 8)) goto B_bc;
  label B_cc:
  e = 1060856;
  loop L_fc {
    f = e[0]:int;
    if (f > d) goto B_gc;
    f = f + e[1]:int;
    if (f > d) goto B_ac;
    label B_gc:
    e = e[2]:int;
    continue L_fc;
  }
  label B_bc:
  e[0]:int = a;
  e[1]:int = e[1]:int + g;
  c = a + (-8 - a & 15);
  c[1] = h | 3;
  g = f + (-8 - f & 15);
  e = g - (h = c + h);
  if (g != d) goto B_hc;
  0[265108]:int = h;
  0[265105]:int = (e = 0[265105]:int + e);
  h[1]:int = e | 1;
  goto B_d;
  label B_hc:
  if (g != 0[265107]:int) goto B_ic;
  0[265107]:int = h;
  0[265104]:int = (e = 0[265104]:int + e);
  h[1]:int = e | 1;
  (h + e)[0]:int = e;
  goto B_d;
  label B_ic:
  d = g[1];
  if ((d & 3) != 1) goto B_e;
  i = d & -8;
  if (d > 255) goto B_jc;
  f = g[2];
  f == (a = ((j = d >> 3) << 3) + 1060448);
  d = g[3];
  if (d != f) goto B_kc;
  0[265102]:int = 0[265102]:int & -2 << j;
  goto B_f;
  label B_kc:
  d == a;
  d[2]:int = f;
  f.d = d;
  goto B_f;
  label B_jc:
  l = g[6];
  a = g[3];
  if (a == g) goto B_lc;
  d = g[2];
  d < j;
  a[2]:int = d;
  d[3]:int = a;
  goto B_g;
  label B_lc:
  f = g + 20;
  d = f.a;
  if (d) goto B_mc;
  d = g[4];
  if (eqz(d)) goto B_h;
  f = g + 16;
  label B_mc:
  loop L_nc {
    j = f;
    a = d;
    f = a + 20;
    d = f.a;
    if (d) continue L_nc;
    f = a + 16;
    d = a[4]:int;
    if (d) continue L_nc;
  }
  j[0]:int = 0;
  goto B_g;
  label B_ac:
  c = a + (e = -8 - a & 15);
  c[1] = (e = (j = g + -56) - e) | 1;
  (a + j)[1]:int = 56;
  j = select_if(d, j = f + (55 - f & 15) + -63, j < d + 16);
  j[1]:int = 35;
  0[265109]:int = 0[265224]:int;
  0[265105]:int = e;
  0[265108]:int = c;
  (j + 16)[0]:long@4 = 0[265216]:long@4;
  j[2]:long@4 = 0[265214]:long@4;
  0[265216]:int = j + 8;
  0[265215]:int = g;
  0[265214]:int = a;
  0[265217]:int = 0;
  e = j + 36;
  loop L_oc {
    e[0]:int = 7;
    e = e + 4;
    if (e < f) continue L_oc;
  }
  if (j == d) goto B_rb;
  j[1]:int = j[1]:int & -2;
  j[0]:int = (a = j - d);
  d[1]:int = a | 1;
  if (a > 255) goto B_pc;
  e = (a & -8) + 1060448;
  f = 0[265102]:int;
  if (f & (a = 1 << (a >> 3))) goto B_rc;
  0[265102]:int = f | a;
  f = e;
  goto B_qc;
  label B_rc:
  f = e[2]:int;
  label B_qc:
  f.d = d;
  e[2]:int = d;
  d[3]:int = e;
  d[2]:int = f;
  goto B_rb;
  label B_pc:
  e = 31;
  if (a > 16777215) goto B_sc;
  e = (a >> 38 - (e = clz(a >> 8)) & 1) - (e << 1) + 62;
  label B_sc:
  d[7]:int = e;
  d[4]:long@4 = 0L;
  f = (e << 2) + 1060712;
  j = 0[265103]:int;
  if (j & (g = 1 << e)) goto B_tc;
  f.a = d;
  0[265103]:int = j | g;
  d[6]:int = f;
  d[2]:int = d;
  d[3]:int = d;
  goto B_rb;
  label B_tc:
  e = a << select_if(0, 25 - (e >> 1), e == 31);
  j = f.a;
  loop L_vc {
    f = j;
    if ((f.b & -8) == a) goto B_uc;
    j = e >> 29;
    e = e << 1;
    g = f + (j & 4) + 16;
    j = g[0];
    if (j) continue L_vc;
  }
  g[0] = d;
  d[6]:int = f;
  d[3]:int = d;
  d[2]:int = d;
  goto B_rb;
  label B_uc:
  e = f.c;
  e[3]:int = d;
  f.c = d;
  d[6]:int = 0;
  d[3]:int = f;
  d[2]:int = e;
  label B_rb:
  e = 0[265105]:int;
  if (e <= h) goto B_i;
  d = 0[265108]:int;
  f = d + h;
  f.b = (e = e - h) | 1;
  0[265105]:int = e;
  0[265108]:int = f;
  d[1]:int = h | 3;
  e = d + 8;
  goto B_a;
  label B_i:
  e = 0;
  0[265226]:int = 48;
  goto B_a;
  label B_h:
  a = 0;
  label B_g:
  if (eqz(l)) goto B_f;
  if (g != (d = ((f = g[7]) << 2) + 1060712)[0]:int) goto B_xc;
  d[0]:int = a;
  if (a) goto B_wc;
  0[265103]:int = 0[265103]:int & -2 << f;
  goto B_f;
  label B_xc:
  (l + select_if(16, 20, l[4] == g))[0]:int = a;
  if (eqz(a)) goto B_f;
  label B_wc:
  a[6]:int = l;
  d = g[4];
  if (eqz(d)) goto B_yc;
  a[4]:int = d;
  d[6]:int = a;
  label B_yc:
  d = (g + 20)[0]:int;
  if (eqz(d)) goto B_f;
  (a + 20)[0]:int = d;
  d[6]:int = a;
  label B_f:
  e = i + e;
  g = g + i;
  d = g[1];
  label B_e:
  g[1] = d & -2;
  (h + e)[0]:int = e;
  h[1]:int = e | 1;
  if (e > 255) goto B_zc;
  d = (e & -8) + 1060448;
  f = 0[265102]:int;
  if (f & (e = 1 << (e >> 3))) goto B_bd;
  0[265102]:int = f | e;
  e = d;
  goto B_ad;
  label B_bd:
  e = d[2]:int;
  label B_ad:
  e[3]:int = h;
  d[2]:int = h;
  h[3]:int = d;
  h[2]:int = e;
  goto B_d;
  label B_zc:
  d = 31;
  if (e > 16777215) goto B_cd;
  d = (e >> 38 - (d = clz(e >> 8)) & 1) - (d << 1) + 62;
  label B_cd:
  h[7]:int = d;
  h[4]:long@4 = 0L;
  f = (d << 2) + 1060712;
  a = 0[265103]:int;
  if (a & (j = 1 << d)) goto B_dd;
  f.a = h;
  0[265103]:int = a | j;
  h[6]:int = f;
  h[2]:int = h;
  h[3]:int = h;
  goto B_d;
  label B_dd:
  d = e << select_if(0, 25 - (d >> 1), d == 31);
  a = f.a;
  loop L_fd {
    f = a;
    if ((f.b & -8) == e) goto B_ed;
    a = d >> 29;
    d = d << 1;
    j = f + (a & 4) + 16;
    a = j[0]:int;
    if (a) continue L_fd;
  }
  j[0]:int = h;
  h[6]:int = f;
  h[3]:int = h;
  h[2]:int = h;
  goto B_d;
  label B_ed:
  e = f.c;
  e[3]:int = h;
  f.c = h;
  h[6]:int = 0;
  h[3]:int = f;
  h[2]:int = e;
  label B_d:
  e = c + 8;
  goto B_a;
  label B_c:
  if (eqz(c)) goto B_gd;
  if (j != (e = ((f = j[7]:int) << 2) + 1060712)[0]:int) goto B_id;
  e[0]:int = a;
  if (a) goto B_hd;
  0[265103]:int = (l = l & -2 << f);
  goto B_gd;
  label B_id:
  (c + select_if(16, 20, c[4] == j))[0]:int = a;
  if (eqz(a)) goto B_gd;
  label B_hd:
  a[6]:int = c;
  e = j[4]:int;
  if (eqz(e)) goto B_jd;
  a[4]:int = e;
  e[6]:int = a;
  label B_jd:
  e = (j + 20)[0]:int;
  if (eqz(e)) goto B_gd;
  (a + 20)[0]:int = e;
  e[6]:int = a;
  label B_gd:
  if (d > 15) goto B_ld;
  j[1]:int = (e = d + h) | 3;
  e = j + e;
  e[1]:int = e[1]:int | 1;
  goto B_kd;
  label B_ld:
  a = j + h;
  a[1]:int = d | 1;
  j[1]:int = h | 3;
  (a + d)[0]:int = d;
  if (d > 255) goto B_md;
  e = (d & -8) + 1060448;
  f = 0[265102]:int;
  if (f & (d = 1 << (d >> 3))) goto B_od;
  0[265102]:int = f | d;
  d = e;
  goto B_nd;
  label B_od:
  d = e[2]:int;
  label B_nd:
  d[3]:int = a;
  e[2]:int = a;
  a[3]:int = e;
  a[2]:int = d;
  goto B_kd;
  label B_md:
  e = 31;
  if (d > 16777215) goto B_pd;
  e = (d >> 38 - (e = clz(d >> 8)) & 1) - (e << 1) + 62;
  label B_pd:
  a[7]:int = e;
  a[4]:long@4 = 0L;
  f = (e << 2) + 1060712;
  if (l & (h = 1 << e)) goto B_qd;
  f.a = a;
  0[265103]:int = l | h;
  a[6]:int = f;
  a[2]:int = a;
  a[3]:int = a;
  goto B_kd;
  label B_qd:
  e = d << select_if(0, 25 - (e >> 1), e == 31);
  h = f.a;
  loop L_sd {
    f = h;
    if ((f.b & -8) == d) goto B_rd;
    h = e >> 29;
    e = e << 1;
    g = f + (h & 4) + 16;
    h = g[0];
    if (h) continue L_sd;
  }
  g[0] = a;
  a[6]:int = f;
  a[3]:int = a;
  a[2]:int = a;
  goto B_kd;
  label B_rd:
  e = f.c;
  e[3]:int = a;
  f.c = a;
  a[6]:int = 0;
  a[3]:int = f;
  a[2]:int = e;
  label B_kd:
  e = j + 8;
  goto B_a;
  label B_b:
  if (eqz(l)) goto B_td;
  if (a != (e = ((f = a[7]:int) << 2) + 1060712)[0]:int) goto B_vd;
  e[0]:int = j;
  if (j) goto B_ud;
  0[265103]:int = k & -2 << f;
  goto B_td;
  label B_vd:
  (l + select_if(16, 20, l[4] == a))[0]:int = j;
  if (eqz(j)) goto B_td;
  label B_ud:
  j[6]:int = l;
  e = a[4]:int;
  if (eqz(e)) goto B_wd;
  j[4]:int = e;
  e[6]:int = j;
  label B_wd:
  e = (a + 20)[0]:int;
  if (eqz(e)) goto B_td;
  (j + 20)[0]:int = e;
  e[6]:int = j;
  label B_td:
  if (d > 15) goto B_yd;
  a[1]:int = (e = d + h) | 3;
  e = a + e;
  e[1]:int = e[1]:int | 1;
  goto B_xd;
  label B_yd:
  f = a + h;
  f.b = d | 1;
  a[1]:int = h | 3;
  (f + d)[0]:int = d;
  if (eqz(i)) goto B_zd;
  h = (i & -8) + 1060448;
  e = 0[265107]:int;
  j = 1 << (i >> 3);
  if (j & g) goto B_be;
  0[265102]:int = j | g;
  j = h;
  goto B_ae;
  label B_be:
  j = h[2]:int;
  label B_ae:
  j[3]:int = e;
  h[2]:int = e;
  e[3]:int = h;
  e[2]:int = j;
  label B_zd:
  0[265107]:int = f;
  0[265104]:int = d;
  label B_xd:
  e = a + 8;
  label B_a:
  stack_pointer = b + 16;
  return e;
}

function free(a:int) {
  dlfree(a)
}

function dlfree(a:int_ptr) {
  var c:int_ptr;
  var e:{ a:int, b:int, c:int, d:int }
  var f:int_ptr;
  var g:int_ptr;
  var h:int_ptr;
  if (eqz(a)) goto B_a;
  var b:int = a + -8;
  var d:int_ptr = b + (a = (c = (a + -4)[0]:int) & -8);
  if (c & 1) goto B_b;
  if (eqz(c & 3)) goto B_a;
  b = b - (c = b[0]:int);
  if (b < (e = 0[265106]:int)) goto B_a;
  a = c + a;
  if (b == 0[265107]:int) goto B_e;
  if (c > 255) goto B_f;
  e = b[2]:int;
  e == (g = ((f = c >> 3) << 3) + 1060448);
  c = b[3]:int;
  if (c != e) goto B_g;
  0[265102]:int = 0[265102]:int & -2 << f;
  goto B_b;
  label B_g:
  c == g;
  c[2] = e;
  e.d = c;
  goto B_b;
  label B_f:
  h = b[6]:int;
  g = b[3]:int;
  if (g == b) goto B_h;
  c = b[2]:int;
  c < e;
  g[2] = c;
  c[3] = g;
  goto B_c;
  label B_h:
  e = b + 20;
  c = e.a;
  if (c) goto B_i;
  c = b[4]:int;
  if (eqz(c)) goto B_d;
  e = b + 16;
  label B_i:
  loop L_j {
    f = e;
    g = c;
    e = g + 20;
    c = e.a;
    if (c) continue L_j;
    e = g + 16;
    c = g[4];
    if (c) continue L_j;
  }
  f[0] = 0;
  goto B_c;
  label B_e:
  c = d[1];
  if ((c & 3) != 3) goto B_b;
  d[1] = c & -2;
  0[265104]:int = a;
  d[0] = a;
  b[1]:int = a | 1;
  return ;
  label B_d:
  g = 0;
  label B_c:
  if (eqz(h)) goto B_b;
  if (b != (c = ((e = b[7]:int) << 2) + 1060712)[0]) goto B_l;
  c[0] = g;
  if (g) goto B_k;
  0[265103]:int = 0[265103]:int & -2 << e;
  goto B_b;
  label B_l:
  (h + select_if(16, 20, h[4] == b))[0]:int = g;
  if (eqz(g)) goto B_b;
  label B_k:
  g[6] = h;
  c = b[4]:int;
  if (eqz(c)) goto B_m;
  g[4] = c;
  c[6] = g;
  label B_m:
  c = (b + 20)[0]:int;
  if (eqz(c)) goto B_b;
  (g + 20)[0]:int = c;
  c[6] = g;
  label B_b:
  if (b >= d) goto B_a;
  c = d[1];
  if (eqz(c & 1)) goto B_a;
  if (c & 2) goto B_r;
  if (d != 0[265108]:int) goto B_s;
  0[265108]:int = b;
  0[265105]:int = (a = 0[265105]:int + a);
  b[1]:int = a | 1;
  if (b != 0[265107]:int) goto B_a;
  0[265104]:int = 0;
  0[265107]:int = 0;
  return ;
  label B_s:
  if (d != 0[265107]:int) goto B_t;
  0[265107]:int = b;
  0[265104]:int = (a = 0[265104]:int + a);
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  return ;
  label B_t:
  a = (c & -8) + a;
  if (c > 255) goto B_u;
  e = d[2];
  e == (g = ((f = c >> 3) << 3) + 1060448);
  c = d[3];
  if (c != e) goto B_v;
  0[265102]:int = 0[265102]:int & -2 << f;
  goto B_o;
  label B_v:
  c == g;
  c[2] = e;
  e.d = c;
  goto B_o;
  label B_u:
  h = d[6];
  g = d[3];
  if (g == d) goto B_w;
  c = d[2];
  c < 0[265106]:int;
  g[2] = c;
  c[3] = g;
  goto B_p;
  label B_w:
  e = d + 20;
  c = e.a;
  if (c) goto B_x;
  c = d[4];
  if (eqz(c)) goto B_q;
  e = d + 16;
  label B_x:
  loop L_y {
    f = e;
    g = c;
    e = g + 20;
    c = e.a;
    if (c) continue L_y;
    e = g + 16;
    c = g[4];
    if (c) continue L_y;
  }
  f[0] = 0;
  goto B_p;
  label B_r:
  d[1] = c & -2;
  (b + a)[0]:int = a;
  b[1]:int = a | 1;
  goto B_n;
  label B_q:
  g = 0;
  label B_p:
  if (eqz(h)) goto B_o;
  if (d != (c = ((e = d[7]) << 2) + 1060712)[0]) goto B_aa;
  c[0] = g;
  if (g) goto B_z;
  0[265103]:int = 0[265103]:int & -2 << e;
  goto B_o;
  label B_aa:
  (h + select_if(16, 20, h[4] == d))[0]:int = g;
  if (eqz(g)) goto B_o;
  label B_z:
  g[6] = h;
  c = d[4];
  if (eqz(c)) goto B_ba;
  g[4] = c;
  c[6] = g;
  label B_ba:
  c = (d + 20)[0]:int;
  if (eqz(c)) goto B_o;
  (g + 20)[0]:int = c;
  c[6] = g;
  label B_o:
  (b + a)[0]:int = a;
  b[1]:int = a | 1;
  if (b != 0[265107]:int) goto B_n;
  0[265104]:int = a;
  return ;
  label B_n:
  if (a > 255) goto B_ca;
  c = (a & -8) + 1060448;
  e = 0[265102]:int;
  if (e & (a = 1 << (a >> 3))) goto B_ea;
  0[265102]:int = e | a;
  a = c;
  goto B_da;
  label B_ea:
  a = c[2];
  label B_da:
  a[3] = b;
  c[2] = b;
  b[3]:int = c;
  b[2]:int = a;
  return ;
  label B_ca:
  c = 31;
  if (a > 16777215) goto B_fa;
  c = (a >> 38 - (c = clz(a >> 8)) & 1) - (c << 1) + 62;
  label B_fa:
  b[7]:int = c;
  b[4]:long@4 = 0L;
  e = (c << 2) + 1060712;
  g = 0[265103]:int;
  if (g & (d = 1 << c)) goto B_ha;
  e.a = b;
  0[265103]:int = g | d;
  b[6]:int = e;
  b[2]:int = b;
  b[3]:int = b;
  goto B_ga;
  label B_ha:
  c = a << select_if(0, 25 - (c >> 1), c == 31);
  g = e.a;
  loop L_ja {
    e = g;
    if ((e.b & -8) == a) goto B_ia;
    g = c >> 29;
    c = c << 1;
    d = e + (g & 4) + 16;
    g = d[0];
    if (g) continue L_ja;
  }
  d[0] = b;
  b[6]:int = e;
  b[3]:int = b;
  b[2]:int = b;
  goto B_ga;
  label B_ia:
  a = e.c;
  a[3] = b;
  e.c = b;
  b[6]:int = 0;
  b[3]:int = e;
  b[2]:int = a;
  label B_ga:
  0[265110]:int = select_if(b = 0[265110]:int + -1, -1, b);
  label B_a:
}

function calloc(a:int, b:int):int {
  var c:int;
  if (a) goto B_b;
  c = 0;
  goto B_a;
  label B_b:
  var d:long = i64_extend_i32_u(a) * i64_extend_i32_u(b);
  c = i32_wrap_i64(d);
  if ((b | a) < 65536) goto B_a;
  c = select_if(-1, c, i32_wrap_i64(d >> 32L) != 0);
  label B_a:
  a = dlmalloc(c);
  if (eqz(a)) goto B_c;
  if (eqz((a + -4)[0]:ubyte & 3)) goto B_c;
  memset(a, 0, c);
  label B_c:
  return a;
}

function abort() {
  unreachable;
  unreachable;
}

function sbrk(a:int):int {
  if (a) goto B_a;
  return memory_size() << 16;
  label B_a:
  if (a & 65535) goto B_b;
  if (a <= -1) goto B_b;
  a = memory_grow(a >> 16);
  if (a != -1) goto B_c;
  0[265226]:int = 48;
  return -1;
  label B_c:
  return a << 16;
  label B_b:
  abort();
  return unreachable;
}

function snprintf(a:int, b:int, c:int, d:int):int {
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  e[3] = d;
  d = vsnprintf(a, b, c, d);
  stack_pointer = e + 16;
  return d;
}

function towrite(a:int):int {
  var b:int;
  a[15]:int = (b = a[15]:int) + -1 | b;
  b = a[0]:int;
  if (eqz(b & 8)) goto B_a;
  a[0]:int = b | 32;
  return -1;
  label B_a:
  a[1]:long@4 = 0L;
  a[6]:int = (b = a[10]:int);
  a[5]:int = b;
  a[4]:int = b + a[11]:int;
  return 0;
}

function fwritex(a:int, b:int, c:int_ptr):int {
  var d:int;
  var f:int;
  var e:int;
  var h:ubyte_ptr;
  d = c[4];
  if (d) goto B_b;
  e = 0;
  if (towrite(c)) goto B_a;
  d = c[4];
  label B_b:
  if (d - (f = c[5]) >= b) goto B_c;
  return call_indirect(c, a, b, c[8]);
  label B_c:
  var g:int = 0;
  if (c[16] < 0) goto B_d;
  g = 0;
  e = a;
  d = 0;
  loop L_e {
    if (b == d) goto B_d;
    d = d + 1;
    e = e + -1;
    h = e + b;
    if (h[0] != 10) continue L_e;
  }
  e = call_indirect(c, a, g = b - d + 1, c[8]);
  if (e < g) goto B_a;
  b = d + -1;
  a = h + 1;
  f = c[5];
  label B_d:
  memcpy(f, a, b);
  c[5] = c[5] + b;
  e = g + b;
  label B_a:
  return e;
}

function fwrite(a:int, b:int, c:int, d:int_ptr):int {
  var f:int;
  var h:int;
  var g:int;
  var j:ubyte_ptr;
  var e:int = c * b;
  f = d[4];
  if (f) goto B_b;
  g = 0;
  if (towrite(d)) goto B_a;
  f = d[4];
  label B_b:
  if (f - (h = d[5]) >= e) goto B_c;
  g = call_indirect(d, a, e, d[8]);
  goto B_a;
  label B_c:
  var i:int = 0;
  if (d[16] >= 0) goto B_e;
  f = e;
  goto B_d;
  label B_e:
  g = a + e;
  i = 0;
  f = 0;
  loop L_f {
    if (e + f) goto B_g;
    f = e;
    goto B_d;
    label B_g:
    f = f + -1;
    j = f + g;
    if (j[0] != 10) continue L_f;
  }
  g = call_indirect(d, a, i = e + f + 1, d[8]);
  if (g < i) goto B_a;
  f = f ^ -1;
  a = j + 1;
  h = d[5];
  label B_d:
  memcpy(h, a, f);
  d[5] = d[5] + f;
  g = i + f;
  label B_a:
  if (g != e) goto B_h;
  return select_if(c, 0, b);
  label B_h:
  return g / b;
}

function dummy(a:int, b:int):int {
  return a
}

function lctrans(a:int, b:int):int {
  return dummy(a, b)
}

function strerror(a:int):int {
  var b:int_ptr;
  b = 0[265233]:int;
  if (b) goto B_a;
  b = 1060908;
  0[265233]:int = 1060908;
  label B_a:
  return 
    lctrans(
      ((select_if(0, a, a > 76) << 1) + 1058832)[0]:ushort + 1057276,
      b[5]);
}

function wcrtomb(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:int):int {
  var d:int = 1;
  if (eqz(a)) goto B_a;
  if (b > 127) goto B_b;
  a.a = b;
  return 1;
  label B_b:
  if (0[265227]:int) goto B_d;
  if ((b & -128) == 57216) goto B_e;
  0[265226]:int = 25;
  goto B_c;
  label B_e:
  a.a = b;
  return 1;
  label B_d:
  if (b > 2047) goto B_f;
  a.b = (b & 63) | 128;
  a.a = b >> 6 | 192;
  return 2;
  label B_f:
  if (b < 55296) goto B_h;
  if ((b & -8192) != 57344) goto B_g;
  label B_h:
  a.c = (b & 63) | 128;
  a.a = b >> 12 | 224;
  a.b = (b >> 6 & 63) | 128;
  return 3;
  label B_g:
  if (b + -65536 > 1048575) goto B_i;
  a.d = (b & 63) | 128;
  a.a = b >> 18 | 240;
  a.c = (b >> 6 & 63) | 128;
  a.b = (b >> 12 & 63) | 128;
  return 4;
  label B_i:
  0[265226]:int = 25;
  label B_c:
  d = -1;
  label B_a:
  return d;
}

function wctomb(a:int, b:int):int {
  if (a) goto B_a;
  return 0;
  label B_a:
  return wcrtomb(a, b, 0);
}

function frexp(a:double, b:int_ptr):double {
  var c:long = i64_reinterpret_f64(a);
  var d:int = i32_wrap_i64(c >> 52L) & 2047;
  if (d == 2047) goto B_a;
  if (d) goto B_b;
  if (a != 0.0) goto B_c;
  b[0] = 0;
  return a;
  label B_c:
  a = frexp(a * 18446744073709551616.0, b);
  b[0] = b[0] + -64;
  return a;
  label B_b:
  b[0] = d + -1022;
  a = f64_reinterpret_i64(
        (c & -9218868437227405313L) | 4602678819172646912L);
  label B_a:
  return a;
}

function wasi_fd_close(a:int):int {
  return imported_wasi_snapshot_preview1_fd_close(a) & 65535
}

function wasi_fd_seek(a:int, b:long, c:int, d:int):int {
  return imported_wasi_snapshot_preview1_fd_seek(a, b, c, d) & 65535
}

function wasi_fd_write(a:int, b:int, c:int, d:int):int {
  return imported_wasi_snapshot_preview1_fd_write(a, b, c, d) & 65535
}

function wasilibc_populate_preopens() {
}

function close(a:int):int {
  wasilibc_populate_preopens();
  a = wasi_fd_close(a);
  if (a) goto B_a;
  return 0;
  label B_a:
  0[265226]:int = a;
  return -1;
}

function stdio_close(a:int_ptr):int {
  return close(a[14])
}

function writev(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  var e:int = -1;
  if (c > -1) goto B_b;
  0[265226]:int = 28;
  goto B_a;
  label B_b:
  c = wasi_fd_write(a, b, c, d + 12);
  if (eqz(c)) goto B_c;
  0[265226]:int = c;
  e = -1;
  goto B_a;
  label B_c:
  e = d[3];
  label B_a:
  stack_pointer = d + 16;
  return e;
}

function stdio_write(a:int, b:int, c:int):int {
  var e:{ a:int, b:int }
  var g:int;
  var h:int;
  var i:int;
  var d:{ a:int, b:int, c:int, d:int } = stack_pointer - 16;
  stack_pointer = d;
  d.d = c;
  d.c = b;
  d.a = (b = a[6]:int);
  d.b = (e = a[5]:int - b);
  var f:int = 2;
  b = writev(a[14]:int, d, 2);
  if (b == (g = e + c)) goto B_b;
  e = d;
  loop L_c {
    if (b > -1) goto B_d;
    b = 0;
    a[6]:int = 0;
    a[2]:long = 0L;
    a[0]:int = a[0]:int | 32;
    if (f == 2) goto B_a;
    b = c - e.b;
    goto B_a;
    label B_d:
    var j:int_ptr = e + ((i = b > (h = e.b)) << 3);
    j[0] = j[0] + (h = b - select_if(h, 0, i));
    e = e + select_if(12, 4, i);
    e.a = e.a - h;
    e = j;
    g = g - b;
    if (g != (b = writev(a[14]:int, j, f = f - i))) continue L_c;
  }
  label B_b:
  a[6]:int = (b = a[10]:int);
  a[5]:int = b;
  a[4]:int = b + a[11]:int;
  b = c;
  label B_a:
  stack_pointer = d + 16;
  return b;
}

function lseek(a:int, b:long, c:int):long {
  var d:long_ptr = stack_pointer - 16;
  stack_pointer = d;
  c = wasi_fd_seek(a, b, c & 255, d + 8);
  if (eqz(c)) goto B_b;
  0[265226]:int = select_if(70, c, c == 76);
  b = -1L;
  goto B_a;
  label B_b:
  b = d[1];
  label B_a:
  stack_pointer = d + 16;
  return b;
}

function stdio_seek(a:int_ptr, b:long, c:int):long {
  return lseek(a[14], b, c)
}

function fputs(a:int, b:int):int {
  var c:int = strlen(a);
  return select_if(-1, 0, c != fwrite(a, 1, c, b));
}

function vfprintf(a:int, b:int, c:int):int {
  var f:int;
  var d:int = stack_pointer - 208;
  stack_pointer = d;
  d[51]:int = c;
  (d + 160 + 32)[0]:long = 0L;
  (d + 184)[0]:long = 0L;
  (d + 176)[0]:long = 0L;
  d[21]:long = 0L;
  d[20]:long = 0L;
  d[50]:int = c;
  if (printf_core(0, b, d + 200, d + 80, d + 160) >= 0) goto B_b;
  a = -1;
  goto B_a;
  label B_b:
  var e:int = a[0]:int;
  if (a[15]:int > 0) goto B_c;
  a[0]:int = e & -33;
  label B_c:
  if (a[11]:int) goto B_g;
  a[11]:int = 80;
  a[6]:int = 0;
  a[2]:long = 0L;
  f = a[10]:int;
  a[10]:int = d;
  goto B_f;
  label B_g:
  f = 0;
  if (a[4]:int) goto B_e;
  label B_f:
  c = -1;
  if (towrite(a)) goto B_d;
  label B_e:
  c = printf_core(a, b, d + 200, d + 80, d + 160);
  label B_d:
  b = e & 32;
  if (eqz(f)) goto B_h;
  call_indirect(a, 0, 0, a[8]:int);
  a[11]:int = 0;
  a[10]:int = f;
  a[6]:int = 0;
  f = a[5]:int;
  a[2]:long = 0L;
  c = select_if(c, -1, f);
  label B_h:
  a[0]:int = (f = a[0]:int) | b;
  a = select_if(-1, c, f & 32);
  label B_a:
  stack_pointer = d + 208;
  return a;
}

function printf_core(a:int, b:int, c:int_ptr, d:int, e:int_ptr):int {
  var u:int;
  var v:int;
  var x:int_ptr;
  var z:int;
  var ba:int;
  var w:int;
  var y:int;
  var ca:int_ptr;
  var fa:long;
  var da:int;
  var ga:long;
  var aa:byte_ptr;
  var ia:int;
  var ka:ubyte_ptr;
  var la:int;
  var ma:int;
  var na:byte_ptr;
  var ea:ubyte_ptr;
  var oa:int;
  var ja:int;
  var qa:double;
  var ha:double;
  var f:int = stack_pointer - 880;
  stack_pointer = f;
  var g:int = f + 68 + 12;
  var h:int = 0 - f + 112;
  var i:int = f + -3988;
  var j:int = f + 55;
  var k:int = f + 68 + 11;
  var l:int = f + 80 + -1;
  var m:int = f + 80 | 8;
  var n:int = f + 80 | 9;
  var o:int = f + 68 + 10;
  var p:int = f + 56;
  var q:int = 0;
  var r:int = 0;
  var s:int = 0;
  loop L_d {
    var t:int = b;
    if (s > (r ^ 2147483647)) goto B_c;
    r = s + r;
    s = t[0]:ubyte;
    if (eqz(s)) goto B_m;
    b = t;
    loop L_n {
      s = s & 255;
      if (eqz(s)) goto B_q;
      if (s != 37) goto B_o;
      u = b;
      s = b;
      loop L_r {
        if (s[1]:ubyte == 37) goto B_s;
        b = s;
        goto B_p;
        label B_s:
        u = u + 1;
        v = s[2]:ubyte;
        b = s + 2;
        s = b;
        if (v == 37) continue L_r;
        goto B_p;
      }
      label B_q:
      u = b;
      label B_p:
      s = u - t;
      if (s > (u = r ^ 2147483647)) goto B_c;
      if (eqz(a)) goto B_t;
      if (a[0]:ubyte & 32) goto B_t;
      fwritex(t, s, a);
      label B_t:
      if (s) continue L_d;
      s = b + 1;
      w = -1;
      x = b[1]:byte;
      v = x + -48;
      if (v > 9) goto B_u;
      if (b[2]:ubyte != 36) goto B_u;
      s = b + 3;
      x = b[3]:byte;
      q = 1;
      w = v;
      label B_u:
      y = 0;
      b = x + -32;
      if (b > 31) goto B_v;
      b = 1 << b;
      if (eqz(b & 75913)) goto B_v;
      v = s + 1;
      y = 0;
      loop L_w {
        y = b | y;
        s = v;
        x = s[0]:byte;
        b = x + -32;
        if (b >= 32) goto B_v;
        v = s + 1;
        b = 1 << b;
        if (b & 75913) continue L_w;
      }
      label B_v:
      if (x != 42) goto B_x;
      b = s[1]:byte + -48;
      if (b > 9) goto B_z;
      if (s[2]:ubyte != 36) goto B_z;
      e[b]:int = 10;
      v = s + 3;
      z = ((s[1]:byte << 3) + d + -384)[0]:int;
      q = 1;
      goto B_y;
      label B_z:
      if (q) goto B_k;
      v = s + 1;
      if (a) goto B_aa;
      q = 0;
      z = 0;
      goto B_l;
      label B_aa:
      c[0] = (b = c[0]) + 4;
      z = b[0]:int;
      q = 0;
      label B_y:
      if (z > -1) goto B_l;
      z = 0 - z;
      y = y | 8192;
      goto B_l;
      label B_x:
      z = 0;
      b = x + -48;
      if (b <= 9) goto B_ba;
      v = s;
      goto B_l;
      label B_ba:
      z = 0;
      loop L_ca {
        if (z > 214748364) goto B_da;
        z = select_if(-1, (v = z * 10) + b, b > (v ^ 2147483647));
        b = s[1]:byte;
        v = s + 1;
        s = v;
        b = b + -48;
        if (b < 10) continue L_ca;
        if (z < 0) goto B_c;
        goto B_l;
        label B_da:
        b = s[1]:byte;
        z = -1;
        s = s + 1;
        b = b + -48;
        if (b < 10) continue L_ca;
        goto B_c;
      }
      label B_o:
      s = b[1]:ubyte;
      b = b + 1;
      continue L_n;
    }
    label B_m:
    if (a) goto B_a;
    if (q) goto B_ea;
    r = 0;
    goto B_a;
    label B_ea:
    b = e[1];
    if (b) goto B_ha;
    b = 1;
    goto B_ga;
    label B_ha:
    pop_arg(d + 8, b, c);
    b = e[2];
    if (b) goto B_ia;
    b = 2;
    goto B_ga;
    label B_ia:
    pop_arg(d + 16, b, c);
    b = e[3];
    if (b) goto B_ja;
    b = 3;
    goto B_ga;
    label B_ja:
    pop_arg(d + 24, b, c);
    b = e[4];
    if (b) goto B_ka;
    b = 4;
    goto B_ga;
    label B_ka:
    pop_arg(d + 32, b, c);
    b = e[5];
    if (b) goto B_la;
    b = 5;
    goto B_ga;
    label B_la:
    pop_arg(d + 40, b, c);
    b = e[6];
    if (b) goto B_ma;
    b = 6;
    goto B_ga;
    label B_ma:
    pop_arg(d + 48, b, c);
    b = e[7];
    if (b) goto B_na;
    b = 7;
    goto B_ga;
    label B_na:
    pop_arg(d + 56, b, c);
    b = e[8];
    if (b) goto B_oa;
    b = 8;
    goto B_ga;
    label B_oa:
    pop_arg(d + 64, b, c);
    b = e[9];
    if (b) goto B_fa;
    b = 9;
    label B_ga:
    b = b << 2;
    loop L_pa {
      if ((e + b)[0]:int) goto B_k;
      b = b + 4;
      if (b != 40) continue L_pa;
    }
    r = 1;
    goto B_a;
    label B_fa:
    pop_arg(d + 72, b, c);
    r = 1;
    goto B_a;
    label B_l:
    s = 0;
    x = -1;
    if (v[0]:ubyte == 46) goto B_ra;
    b = v;
    aa = 0;
    goto B_qa;
    label B_ra:
    x = v[1]:byte;
    if (x != 42) goto B_sa;
    b = v[2]:byte + -48;
    if (b > 9) goto B_ua;
    if (v[3]:ubyte != 36) goto B_ua;
    e[b]:int = 10;
    b = v + 4;
    x = ((v[2]:byte << 3) + d + -384)[0]:int;
    goto B_ta;
    label B_ua:
    if (q) goto B_k;
    b = v + 2;
    if (a) goto B_va;
    x = 0;
    goto B_ta;
    label B_va:
    c[0] = (v = c[0]) + 4;
    x = v[0]:int;
    label B_ta:
    aa = (x ^ -1) >> 31;
    goto B_qa;
    label B_sa:
    b = v + 1;
    ba = x + -48;
    if (ba <= 9) goto B_wa;
    aa = 1;
    x = 0;
    goto B_qa;
    label B_wa:
    ca = 0;
    v = b;
    loop L_xa {
      x = -1;
      if (ca > 214748364) goto B_ya;
      x = select_if(-1, (b = ca * 10) + ba, ba > (b ^ 2147483647));
      label B_ya:
      aa = 1;
      ba = v[1]:byte;
      ca = x;
      b = v + 1;
      v = b;
      ba = ba + -48;
      if (ba < 10) continue L_xa;
    }
    label B_qa:
    loop L_za {
      v = s;
      s = b[0]:byte;
      if (s + -123 < -58) goto B_k;
      b = b + 1;
      s = (s + v * 58 + 1058927)[0]:ubyte;
      if (s + -1 < 8) continue L_za;
    }
    if (s == 27) goto B_cb;
    if (eqz(s)) goto B_k;
    if (w < 0) goto B_db;
    e[w]:int = s;
    f[7]:long = d[w]:long;
    goto B_bb;
    label B_db:
    if (a) goto B_eb;
    r = 0;
    goto B_a;
    label B_eb:
    pop_arg(f + 56, s, c);
    goto B_ab;
    label B_cb:
    if (w > -1) goto B_k;
    label B_bb:
    s = 0;
    if (eqz(a)) continue L_d;
    label B_ab:
    ca = y & -65537;
    w = select_if(ca, y, y & 8192);
    s = (b + -1)[0]:byte;
    da = select_if(select_if(s & -33, s, (s & 15) == 3), s, v);
    br_table[B_fb, B_j, B_ib, B_j, B_fb, B_fb, B_fb, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_jb, B_j, B_j, B_j, B_j, B_sb, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_fb, B_j, B_nb, B_qb, B_fb, B_fb, B_fb, B_j, B_qb, B_j, B_j, B_j, B_mb, B_ub, B_rb, B_tb, B_j, B_j, B_lb, B_j, B_vb, B_j, B_j, B_sb, ..B_j](
      da + -65);
    label B_vb:
    ba = 0;
    ea = 1048576;
    fa = f[7]:long;
    goto B_pb;
    label B_ub:
    s = 0;
    br_table[B_cc, B_bc, B_ac, B_zb, B_yb, L_d, B_xb, B_wb, ..L_d](
      v & 255)
    label B_cc:
    (f[14]:int)[0]:int = r;
    continue L_d;
    label B_bc:
    (f[14]:int)[0]:int = r;
    continue L_d;
    label B_ac:
    (f[14]:int)[0]:long = i64_extend_i32_s(r);
    continue L_d;
    label B_zb:
    (f[14]:int)[0]:short = r;
    continue L_d;
    label B_yb:
    (f[14]:int)[0]:byte = r;
    continue L_d;
    label B_xb:
    (f[14]:int)[0]:int = r;
    continue L_d;
    label B_wb:
    (f[14]:int)[0]:long = i64_extend_i32_s(r);
    continue L_d;
    label B_tb:
    x = select_if(x, 8, x > 8);
    w = w | 8;
    da = 120;
    label B_sb:
    ba = 0;
    ea = 1048576;
    fa = f[7]:long;
    if (eqz(eqz(fa))) goto B_dc;
    t = p;
    goto B_ob;
    label B_dc:
    v = da & 32;
    t = p;
    loop L_ec {
      t = t + -1;
      t[0]:byte = ((i32_wrap_i64(fa) & 15) + 1059456)[0]:ubyte | v;
      s = fa > 15L;
      fa = fa >> 4L;
      if (s) continue L_ec;
    }
    if (eqz(w & 8)) goto B_ob;
    ea = (da >> 4) + 1048576;
    ba = 2;
    goto B_ob;
    label B_rb:
    t = p;
    fa = f[7]:long;
    if (eqz(fa)) goto B_fc;
    t = p;
    loop L_gc {
      t = t + -1;
      t[0]:byte = (i32_wrap_i64(fa) & 7) | 48;
      s = fa > 7L;
      fa = fa >> 3L;
      if (s) continue L_gc;
    }
    label B_fc:
    ba = 0;
    ea = 1048576;
    if (eqz(w & 8)) goto B_ob;
    x = select_if(x, (s = p - t) + 1, x > s);
    goto B_ob;
    label B_qb:
    fa = f[7]:long;
    if (fa > -1L) goto B_hc;
    f[7]:long = (fa = 0L - fa);
    ba = 1;
    ea = 1048576;
    goto B_pb;
    label B_hc:
    if (eqz(w & 2048)) goto B_ic;
    ba = 1;
    ea = 1048577;
    goto B_pb;
    label B_ic:
    ea = select_if(1048578, 1048576, ba = w & 1);
    label B_pb:
    if (fa >= 4294967296L) goto B_kc;
    ga = fa;
    t = p;
    goto B_jc;
    label B_kc:
    t = p;
    loop L_lc {
      t = t + -1;
      t[0]:byte = i32_wrap_i64(fa - (ga = fa / 10L) * 10L) | 48;
      s = fa > 42949672959L;
      fa = ga;
      if (s) continue L_lc;
    }
    label B_jc:
    s = i32_wrap_i64(ga);
    if (eqz(s)) goto B_ob;
    loop L_mc {
      t = t + -1;
      t[0]:byte = s - (v = s / 10) * 10 | 48;
      y = s > 9;
      s = v;
      if (y) continue L_mc;
    }
    label B_ob:
    if (eqz(aa)) goto B_nc;
    if (x < 0) goto B_c;
    label B_nc:
    ca = select_if(w & -65537, w, aa);
    fa = f[7]:long;
    if (fa != 0L) goto B_oc;
    y = 0;
    if (x) goto B_oc;
    t = p;
    s = p;
    goto B_i;
    label B_oc:
    y = select_if(x, s = p - t + eqz(fa), x > s);
    s = p;
    goto B_i;
    label B_nb:
    f[55]:byte = f[7]:long;
    ba = 0;
    ea = 1048576;
    y = 1;
    t = j;
    s = p;
    goto B_i;
    label B_mb:
    t = strerror(1060904[0]:int);
    goto B_kb;
    label B_lb:
    s = f[14]:int;
    t = select_if(s, 1049019, s);
    label B_kb:
    s = t + (y = strnlen(t, select_if(x, 2147483647, x < 2147483647)));
    ba = 0;
    ea = 1048576;
    if (x > -1) goto B_i;
    if (eqz(s[0]:ubyte)) goto B_i;
    goto B_c;
    label B_jb:
    t = f[14]:int;
    if (x) goto B_hb;
    s = 0;
    goto B_gb;
    label B_ib:
    f[3]:int = 0;
    f[2]:int = f[7]:long;
    f[14]:int = f + 8;
    t = f + 8;
    x = -1;
    label B_hb:
    s = 0;
    u = t;
    loop L_qc {
      v = u[0]:int;
      if (eqz(v)) goto B_pc;
      v = wctomb(f + 4, v);
      y = v < 0;
      if (y) goto B_rc;
      if (v > x - s) goto B_rc;
      u = u + 4;
      s = v + s;
      if (s < x) continue L_qc;
      goto B_pc;
      label B_rc:
    }
    if (y) goto B_b;
    label B_pc:
    if (s < 0) goto B_c;
    label B_gb:
    y = w & 73728;
    if (y) goto B_sc;
    if (z <= s) goto B_sc;
    memset(f + 112, 32, select_if(u = z - s, 256, v = u < 256));
    if (v) goto B_tc;
    loop L_uc {
      if (a[0]:ubyte & 32) goto B_vc;
      fwritex(f + 112, 256, a);
      label B_vc:
      u = u + -256;
      if (u > 255) continue L_uc;
    }
    label B_tc:
    if (a[0]:ubyte & 32) goto B_sc;
    fwritex(f + 112, u, a);
    label B_sc:
    if (eqz(s)) goto B_wc;
    u = 0;
    loop L_xc {
      v = t[0]:int;
      if (eqz(v)) goto B_wc;
      v = wctomb(f + 4, v);
      u = v + u;
      if (u > s) goto B_wc;
      if (a[0]:ubyte & 32) goto B_yc;
      fwritex(f + 4, v, a);
      label B_yc:
      t = t + 4;
      if (u < s) continue L_xc;
    }
    label B_wc:
    if (y != 8192) goto B_zc;
    if (z <= s) goto B_zc;
    memset(f + 112, 32, select_if(u = z - s, 256, v = u < 256));
    if (v) goto B_ad;
    loop L_bd {
      if (a[0]:ubyte & 32) goto B_cd;
      fwritex(f + 112, 256, a);
      label B_cd:
      u = u + -256;
      if (u > 255) continue L_bd;
    }
    label B_ad:
    if (a[0]:ubyte & 32) goto B_zc;
    fwritex(f + 112, u, a);
    label B_zc:
    s = select_if(z, s, z > s);
    continue L_d;
    label B_fb:
    if (eqz(aa)) goto B_dd;
    if (x < 0) goto B_c;
    label B_dd:
    ha = f[7]:double;
    f[27]:int = 0;
    if (i64_reinterpret_f64(ha) > -1L) goto B_fd;
    ha = -(ha);
    ia = 1;
    ja = 0;
    ka = 1048586;
    goto B_ed;
    label B_fd:
    if (eqz(w & 2048)) goto B_gd;
    ia = 1;
    ja = 0;
    ka = 1048589;
    goto B_ed;
    label B_gd:
    ka = select_if(1048592, 1048587, ia = w & 1);
    ja = eqz(ia);
    label B_ed:
    if ((i64_reinterpret_f64(ha) & 9223372036854775807L) <
        9218868437227405312L) goto B_hd;
    u = ia + 3;
    if (w & 8192) goto B_id;
    if (z <= u) goto B_id;
    memset(f + 624, 32, select_if(s = z - u, 256, v = s < 256));
    if (v) goto B_jd;
    loop L_kd {
      if (a[0]:ubyte & 32) goto B_ld;
      fwritex(f + 624, 256, a);
      label B_ld:
      s = s + -256;
      if (s > 255) continue L_kd;
    }
    label B_jd:
    if (a[0]:ubyte & 32) goto B_id;
    fwritex(f + 624, s, a);
    label B_id:
    s = a[0]:int;
    if (s & 32) goto B_md;
    fwritex(ka, ia, a);
    s = a[0]:int;
    label B_md:
    if (s & 32) goto B_nd;
    fwritex(select_if(select_if(1048712, 1048779, s = da & 32),
                      select_if(1048737, 1048786, s),
                      ha != ha),
            3,
            a);
    label B_nd:
    if ((w & 73728) != 8192) goto B_od;
    if (z <= u) goto B_od;
    memset(f + 624, 32, select_if(s = z - u, 256, v = s < 256));
    if (v) goto B_pd;
    loop L_qd {
      if (a[0]:ubyte & 32) goto B_rd;
      fwritex(f + 624, 256, a);
      label B_rd:
      s = s + -256;
      if (s > 255) continue L_qd;
    }
    label B_pd:
    if (a[0]:ubyte & 32) goto B_od;
    fwritex(f + 624, s, a);
    label B_od:
    s = select_if(u, z, u > z);
    continue L_d;
    label B_hd:
    ha = frexp(ha, f + 108);
    ha = ha + ha;
    if (ha == 0.0) goto B_ud;
    f[27]:int = (s = f[27]:int) + -1;
    la = da | 32;
    if (la != 97) goto B_td;
    goto B_f;
    label B_ud:
    la = da | 32;
    if (la == 97) goto B_f;
    aa = select_if(6, x, x < 0);
    t = f[27]:int;
    goto B_sd;
    label B_td:
    f[27]:int = (t = s + -29);
    aa = select_if(6, x, x < 0);
    ha = ha * 268435456.0;
    label B_sd:
    ea = f + 112 + (na = select_if(0, 72, ma = t < 0) << 2);
    u = ea;
    loop L_vd {
      if (eqz(ha < 4294967296.0 & ha >= 0.0)) goto B_xd;
      s = i32_trunc_f64_u(ha);
      goto B_wd;
      label B_xd:
      s = 0;
      label B_wd:
      u[0]:int = s;
      u = u + 4;
      ha = (ha - f64_convert_i32_u(s)) * 1000000000.0;
      if (ha != 0.0) continue L_vd;
    }
    if (t >= 1) goto B_zd;
    s = u;
    v = ea;
    goto B_yd;
    label B_zd:
    v = ea;
    loop L_ae {
      t = select_if(t, 29, t < 29);
      s = u + -4;
      if (s < v) goto B_be;
      ga = i64_extend_i32_u(t);
      fa = 0L;
      loop L_ce {
        s[0]:int =
          (fa = (s[0]:uint << ga) + (fa & 4294967295L)) -
          (fa = fa / 1000000000L) * 1000000000L;
        s = s + -4;
        if (s >= v) continue L_ce;
      }
      s = i32_wrap_i64(fa);
      if (eqz(s)) goto B_be;
      v = v + -4;
      v[0]:int = s;
      label B_be:
      loop L_ee {
        s = u;
        if (s <= v) goto B_de;
        u = s + -4;
        if (eqz(u[0]:int)) continue L_ee;
      }
      label B_de:
      f[27]:int = (t = f[27]:int - t);
      u = s;
      if (t > 0) continue L_ae;
    }
    label B_yd:
    if (t > -1) goto B_fe;
    oa = (aa + 25) / 9 + 1;
    loop L_ge {
      u = 0 - t;
      x = select_if(u, 9, u < 9);
      if (v < s) goto B_ie;
      u = v[0]:int;
      goto B_he;
      label B_ie:
      ca = 1000000000 >> x;
      ba = -1 << x ^ -1;
      t = 0;
      u = v;
      loop L_je {
        u[0]:int = ((y = u[0]:int) >> x) + t;
        t = (y & ba) * ca;
        u = u + 4;
        if (u < s) continue L_je;
      }
      u = v[0]:int;
      if (eqz(t)) goto B_he;
      s[0]:int = t;
      s = s + 4;
      label B_he:
      f[27]:int = (t = f[27]:int + x);
      u = select_if(ea, v = v + (eqz(u) << 2), la == 102);
      s = select_if(u + (oa << 2), s, s - u >> 2 > oa);
      if (t < 0) continue L_ge;
    }
    label B_fe:
    y = 0;
    if (v >= s) goto B_ke;
    y = (ea - v >> 2) * 9;
    t = v[0]:int;
    if (t < 10) goto B_ke;
    u = 10;
    loop L_le {
      y = y + 1;
      if (t >= (u = u * 10)) continue L_le;
    }
    label B_ke:
    u = aa - select_if(0, y, la == 102) - (aa != 0 & (ba = la == 103));
    if (u >= (s - ea >> 2) * 9 + -9) goto B_me;
    t = u + 9216;
    x = t / 9;
    var pa:int = x << 2;
    ca = pa + f + 112 + (ma = select_if(1, 73, ma) << 2) + -4096;
    u = 10;
    x = t - x * 9;
    if (x > 7) goto B_ne;
    oa = 8 - x;
    t = oa & 7;
    u = 10;
    if (x + -1 < 7) goto B_oe;
    x = oa & -8;
    u = 10;
    loop L_pe {
      u = u * 100000000;
      x = x + -8;
      if (x) continue L_pe;
    }
    label B_oe:
    if (eqz(t)) goto B_ne;
    loop L_qe {
      u = u * 10;
      t = t + -1;
      if (t) continue L_qe;
    }
    label B_ne:
    oa = ca + 4;
    t = ca[0];
    x = t - (la = t / u) * u;
    if (x) goto B_se;
    if (oa == s) goto B_re;
    label B_se:
    if (la & 1) goto B_ue;
    ha = 9007199254740992.0;
    if (u != 1000000000) goto B_te;
    if (ca <= v) goto B_te;
    if (eqz((ca + -4)[0]:ubyte & 1)) goto B_te;
    label B_ue:
    ha = 9007199254740994.0;
    label B_te:
    qa = 
      select_if(
        0.5,
        select_if(select_if(1.0, 1.5, oa == s), 1.5, x == (oa = u >> 1)),
        x < oa);
    if (ja) goto B_ve;
    if (ka[0] != 45) goto B_ve;
    qa = -(qa);
    ha = -(ha);
    label B_ve:
    ca[0] = (t = t - x);
    if (ha + qa == ha) goto B_re;
    ca[0] = (u = t + u);
    if (u < 1000000000) goto B_we;
    u = i + ma + pa;
    loop L_xe {
      (u + 4)[0]:int = 0;
      if (u >= v) goto B_ye;
      v = v + -4;
      v[0]:int = 0;
      label B_ye:
      u[0]:int = (t = u[0]:int + 1);
      u = u + -4;
      if (t > 999999999) continue L_xe;
    }
    ca = u + 4;
    label B_we:
    y = (ea - v >> 2) * 9;
    t = v[0]:int;
    if (t < 10) goto B_re;
    u = 10;
    loop L_ze {
      y = y + 1;
      if (t >= (u = u * 10)) continue L_ze;
    }
    label B_re:
    u = ca + 4;
    s = select_if(u, s, s > u);
    label B_me:
    u = h + s - na;
    loop L_bf {
      t = u;
      ca = s;
      x = ca <= v;
      if (x) goto B_af;
      u = t + -4;
      s = ca + -4;
      if (eqz(s[0]:int)) continue L_bf;
    }
    label B_af:
    if (ba) goto B_df;
    oa = w & 8;
    goto B_cf;
    label B_df:
    aa = 
      select_if(y ^ -1, -1, u = (s = select_if(aa, 1, aa)) > y & y > -5) +
      s;
    da = select_if(-1, -2, u) + da;
    oa = w & 8;
    if (oa) goto B_cf;
    s = -9;
    if (x) goto B_ef;
    x = (ca + -4)[0]:int;
    if (eqz(x)) goto B_ef;
    s = 0;
    if (x % 10) goto B_ef;
    u = 10;
    s = 0;
    loop L_ff {
      s = s + -1;
      if (eqz(x % (u = u * 10))) continue L_ff;
    }
    label B_ef:
    u = (t >> 2) * 9;
    if ((da & -33) != 70) goto B_gf;
    oa = 0;
    aa = select_if(aa, s = select_if(s = u + s + -9, 0, s > 0), aa < s);
    goto B_cf;
    label B_gf:
    oa = 0;
    aa = 
      select_if(aa, s = select_if(s = y + u + s + -9, 0, s > 0), aa < s);
    label B_cf:
    if (aa > select_if(2147483645, 2147483646, ja = aa | oa)) goto B_c;
    la = aa + (ja != 0) + 1;
    ma = (da & -33) != 70;
    if (ma) goto B_if;
    if (y > (la ^ 2147483647)) goto B_c;
    s = select_if(y, 0, y > 0);
    goto B_hf;
    label B_if:
    if (y) goto B_kf;
    t = g;
    u = g;
    goto B_jf;
    label B_kf:
    s = (y ^ (s = y >> 31)) - s;
    t = g;
    u = g;
    loop L_lf {
      u = u + -1;
      u[0]:byte = s - (x = s / 10) * 10 | 48;
      t = t + -1;
      ba = s > 9;
      s = x;
      if (ba) continue L_lf;
    }
    label B_jf:
    if (g - t > 1) goto B_mf;
    u = u + o - t;
    memset(u, 48, t - f + 68 + -10);
    label B_mf:
    na = u + -2;
    na[0] = da;
    (u + -1)[0]:byte = select_if(45, 43, y < 0);
    s = g - na;
    if (s > (la ^ 2147483647)) goto B_c;
    label B_hf:
    s = s + la;
    if (s > (ia ^ 2147483647)) goto B_c;
    ba = s + ia;
    w = w & 73728;
    if (w) goto B_nf;
    if (z <= ba) goto B_nf;
    memset(f + 624, 32, select_if(s = z - ba, 256, u = s < 256));
    if (u) goto B_of;
    loop L_pf {
      if (a[0]:ubyte & 32) goto B_qf;
      fwritex(f + 624, 256, a);
      label B_qf:
      s = s + -256;
      if (s > 255) continue L_pf;
    }
    label B_of:
    if (a[0]:ubyte & 32) goto B_nf;
    fwritex(f + 624, s, a);
    label B_nf:
    if (a[0]:ubyte & 32) goto B_rf;
    fwritex(ka, ia, a);
    label B_rf:
    if (w != 65536) goto B_sf;
    if (z <= ba) goto B_sf;
    memset(f + 624, 48, select_if(s = z - ba, 256, u = s < 256));
    if (u) goto B_tf;
    loop L_uf {
      if (a[0]:ubyte & 32) goto B_vf;
      fwritex(f + 624, 256, a);
      label B_vf:
      s = s + -256;
      if (s > 255) continue L_uf;
    }
    label B_tf:
    if (a[0]:ubyte & 32) goto B_sf;
    fwritex(f + 624, s, a);
    label B_sf:
    if (ma) goto B_h;
    y = select_if(ea, v, v > ea);
    x = y;
    loop L_wf {
      s = x[0];
      if (eqz(s)) goto B_ag;
      u = 8;
      loop L_bg {
        (f + 80 + u)[0]:byte = s - (v = s / 10) * 10 | 48;
        u = u + -1;
        t = s > 9;
        s = v;
        if (t) continue L_bg;
      }
      v = u + 1;
      s = v + f + 80;
      if (x == y) goto B_cg;
      if (u + 2 < 2) goto B_xf;
      goto B_yf;
      label B_cg:
      if (u != 8) goto B_xf;
      goto B_zf;
      label B_ag:
      v = 9;
      if (x != y) goto B_yf;
      label B_zf:
      f[88]:byte = 48;
      s = m;
      goto B_xf;
      label B_yf:
      s = select_if(f + 80, s = l + v, f + 80 < s);
      memset(s, 48, v + f + 80 - s);
      label B_xf:
      if (a[0]:ubyte & 32) goto B_dg;
      fwritex(s, n - s, a);
      label B_dg:
      x = x + 4;
      if (x <= ea) continue L_wf;
    }
    if (eqz(ja)) goto B_eg;
    if (a[0]:ubyte & 32) goto B_eg;
    fwritex(1049017, 1, a);
    label B_eg:
    if (aa >= 1) goto B_gg;
    s = aa;
    goto B_fg;
    label B_gg:
    if (x < ca) goto B_hg;
    s = aa;
    goto B_fg;
    label B_hg:
    loop L_ig {
      s = x[0];
      if (s) goto B_lg;
      u = n;
      v = n;
      goto B_kg;
      label B_lg:
      v = n;
      u = n;
      loop L_mg {
        u = u + -1;
        u[0]:byte = s - (t = s / 10) * 10 | 48;
        v = v + -1;
        y = s > 9;
        s = t;
        if (y) continue L_mg;
      }
      if (u <= f + 80) goto B_jg;
      label B_kg:
      u = u + f + 80 - v;
      memset(u, 48, v - f + 80);
      label B_jg:
      if (a[0]:ubyte & 32) goto B_ng;
      fwritex(u, select_if(aa, 9, aa < 9), a);
      label B_ng:
      s = aa + -9;
      x = x + 4;
      if (x >= ca) goto B_fg;
      u = aa > 9;
      aa = s;
      if (u) continue L_ig;
    }
    label B_fg:
    pad(a, 48, s + 9, 9, 0);
    goto B_g;
    label B_k:
    1060904[0]:int = 28;
    goto B_b;
    label B_j:
    ba = 0;
    ea = 1048576;
    s = p;
    ca = w;
    y = x;
    label B_i:
    aa = select_if(y, x = s - t, y > x);
    if (aa > (ba ^ 2147483647)) goto B_c;
    s = select_if(z, v = ba + aa, z > v);
    if (s > u) goto B_c;
    ca = ca & 73728;
    if (ca) goto B_og;
    if (v >= z) goto B_og;
    memset(f + 112, 32, select_if(u = s - v, 256, w = u < 256));
    if (w) goto B_pg;
    loop L_qg {
      if (a[0]:ubyte & 32) goto B_rg;
      fwritex(f + 112, 256, a);
      label B_rg:
      u = u + -256;
      if (u > 255) continue L_qg;
    }
    label B_pg:
    if (a[0]:ubyte & 32) goto B_og;
    fwritex(f + 112, u, a);
    label B_og:
    if (a[0]:ubyte & 32) goto B_sg;
    fwritex(ea, ba, a);
    label B_sg:
    if (ca != 65536) goto B_tg;
    if (v >= z) goto B_tg;
    memset(f + 112, 48, select_if(u = s - v, 256, ba = u < 256));
    if (ba) goto B_ug;
    loop L_vg {
      if (a[0]:ubyte & 32) goto B_wg;
      fwritex(f + 112, 256, a);
      label B_wg:
      u = u + -256;
      if (u > 255) continue L_vg;
    }
    label B_ug:
    if (a[0]:ubyte & 32) goto B_tg;
    fwritex(f + 112, u, a);
    label B_tg:
    if (x >= y) goto B_xg;
    memset(f + 112, 48, select_if(u = aa - x, 256, y = u < 256));
    if (y) goto B_yg;
    loop L_zg {
      if (a[0]:ubyte & 32) goto B_ah;
      fwritex(f + 112, 256, a);
      label B_ah:
      u = u + -256;
      if (u > 255) continue L_zg;
    }
    label B_yg:
    if (a[0]:ubyte & 32) goto B_xg;
    fwritex(f + 112, u, a);
    label B_xg:
    if (a[0]:ubyte & 32) goto B_bh;
    fwritex(t, x, a);
    label B_bh:
    if (ca != 8192) continue L_d;
    if (v >= z) continue L_d;
    memset(f + 112, 32, select_if(u = s - v, 256, v = u < 256));
    if (v) goto B_ch;
    loop L_dh {
      if (a[0]:ubyte & 32) goto B_eh;
      fwritex(f + 112, 256, a);
      label B_eh:
      u = u + -256;
      if (u > 255) continue L_dh;
    }
    label B_ch:
    if (a[0]:ubyte & 32) continue L_d;
    fwritex(f + 112, u, a);
    continue L_d;
    label B_h:
    if (aa < 0) goto B_fh;
    ca = select_if(ca, v + 4, ca > v);
    x = v;
    loop L_gh {
      s = x[0];
      if (eqz(s)) goto B_ih;
      u = 0;
      loop L_jh {
        (f + 80 + u + 8)[0]:byte = s - (t = s / 10) * 10 | 48;
        u = u + -1;
        y = s > 9;
        s = t;
        if (y) continue L_jh;
      }
      if (eqz(u)) goto B_ih;
      s = f + 80 + u + 9;
      goto B_hh;
      label B_ih:
      f[88]:byte = 48;
      s = m;
      label B_hh:
      if (x == v) goto B_lh;
      if (s <= f + 80) goto B_kh;
      memset(f + 80, 48, s - f + 80);
      s = f + 80;
      goto B_kh;
      label B_lh:
      if (a[0]:ubyte & 32) goto B_mh;
      fwritex(s, 1, a);
      label B_mh:
      s = s + 1;
      if (oa) goto B_nh;
      if (aa < 1) goto B_kh;
      label B_nh:
      if (a[0]:ubyte & 32) goto B_kh;
      fwritex(1049017, 1, a);
      label B_kh:
      u = n - s;
      if (a[0]:ubyte & 32) goto B_oh;
      fwritex(s, select_if(u, aa, u < aa), a);
      label B_oh:
      aa = aa - u;
      x = x + 4;
      if (x >= ca) goto B_fh;
      if (aa > -1) continue L_gh;
    }
    label B_fh:
    pad(a, 48, aa + 18, 18, 0);
    if (a[0]:ubyte & 32) goto B_g;
    fwritex(na, g - na, a);
    label B_g:
    if (w != 8192) goto B_e;
    if (z <= ba) goto B_e;
    memset(f + 624, 32, select_if(s = z - ba, 256, u = s < 256));
    if (u) goto B_ph;
    loop L_qh {
      if (a[0]:ubyte & 32) goto B_rh;
      fwritex(f + 624, 256, a);
      label B_rh:
      s = s + -256;
      if (s > 255) continue L_qh;
    }
    label B_ph:
    if (a[0]:ubyte & 32) goto B_e;
    fwritex(f + 624, s, a);
    goto B_e;
    label B_f:
    ea = ka + ((da << 26) >> 31 & 9);
    if (x > 11) goto B_sh;
    s = 12 - x;
    u = s & 7;
    if (u) goto B_uh;
    qa = 16.0;
    goto B_th;
    label B_uh:
    s = x + -12;
    qa = 16.0;
    loop L_vh {
      s = s + 1;
      qa = qa * 16.0;
      u = u + -1;
      if (u) continue L_vh;
    }
    s = 0 - s;
    label B_th:
    if (x + -5 < 7) goto B_wh;
    loop L_xh {
      qa = qa * 16.0 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0;
      s = s + -8;
      if (s) continue L_xh;
    }
    label B_wh:
    if (ea[0] != 45) goto B_yh;
    ha = -(qa + -(ha) - qa);
    goto B_sh;
    label B_yh:
    ha = ha + qa - qa;
    label B_sh:
    y = f[27]:int;
    if (eqz(y)) goto B_ai;
    s = (y ^ (s = y >> 31)) - s;
    u = 0;
    loop L_bi {
      (f + 68 + u + 11)[0]:byte = s - (v = s / 10) * 10 | 48;
      u = u + -1;
      t = s > 9;
      s = v;
      if (t) continue L_bi;
    }
    if (eqz(u)) goto B_ai;
    s = f + 68 + u + 12;
    goto B_zh;
    label B_ai:
    f[79]:byte = 48;
    s = k;
    label B_zh:
    ca = ia | 2;
    v = da & 32;
    aa = s + -2;
    aa[0] = da + 15;
    (s + -1)[0]:byte = select_if(45, 43, y < 0);
    t = w & 8;
    u = f + 80;
    loop L_ci {
      s = u;
      if (eqz(abs(ha) < 2147483648.0)) goto B_ei;
      u = i32_trunc_f64_s(ha);
      goto B_di;
      label B_ei:
      u = -2147483648;
      label B_di:
      s[0]:byte = (u + 1059456)[0]:ubyte | v;
      ha = (ha - f64_convert_i32_s(u)) * 16.0;
      u = s + 1;
      if (u - f + 80 != 1) goto B_fi;
      if (t) goto B_gi;
      if (x > 0) goto B_gi;
      if (ha == 0.0) goto B_fi;
      label B_gi:
      s[1]:byte = 46;
      u = s + 2;
      label B_fi:
      if (ha != 0.0) continue L_ci;
    }
    if (2147483645 - (s = (y = g - aa) + ca) < x) goto B_c;
    t = select_if(select_if(x + 2, u = u - f + 80, u + -2 < x), u, x);
    ba = t + s;
    v = w & 73728;
    if (v) goto B_hi;
    if (z <= ba) goto B_hi;
    memset(f + 624, 32, select_if(s = z - ba, 256, x = s < 256));
    if (x) goto B_ii;
    loop L_ji {
      if (a[0]:ubyte & 32) goto B_ki;
      fwritex(f + 624, 256, a);
      label B_ki:
      s = s + -256;
      if (s > 255) continue L_ji;
    }
    label B_ii:
    if (a[0]:ubyte & 32) goto B_hi;
    fwritex(f + 624, s, a);
    label B_hi:
    if (a[0]:ubyte & 32) goto B_li;
    fwritex(ea, ca, a);
    label B_li:
    if (v != 65536) goto B_mi;
    if (z <= ba) goto B_mi;
    memset(f + 624, 48, select_if(s = z - ba, 256, x = s < 256));
    if (x) goto B_ni;
    loop L_oi {
      if (a[0]:ubyte & 32) goto B_pi;
      fwritex(f + 624, 256, a);
      label B_pi:
      s = s + -256;
      if (s > 255) continue L_oi;
    }
    label B_ni:
    if (a[0]:ubyte & 32) goto B_mi;
    fwritex(f + 624, s, a);
    label B_mi:
    if (a[0]:ubyte & 32) goto B_qi;
    fwritex(f + 80, u, a);
    label B_qi:
    s = t - u;
    if (s < 1) goto B_ri;
    memset(f + 624, 48, select_if(s, 256, u = s < 256));
    if (u) goto B_si;
    loop L_ti {
      if (a[0]:ubyte & 32) goto B_ui;
      fwritex(f + 624, 256, a);
      label B_ui:
      s = s + -256;
      if (s > 255) continue L_ti;
    }
    label B_si:
    if (a[0]:ubyte & 32) goto B_ri;
    fwritex(f + 624, s, a);
    label B_ri:
    if (a[0]:ubyte & 32) goto B_vi;
    fwritex(aa, y, a);
    label B_vi:
    if (v != 8192) goto B_e;
    if (z <= ba) goto B_e;
    memset(f + 624, 32, select_if(s = z - ba, 256, u = s < 256));
    if (u) goto B_wi;
    loop L_xi {
      if (a[0]:ubyte & 32) goto B_yi;
      fwritex(f + 624, 256, a);
      label B_yi:
      s = s + -256;
      if (s > 255) continue L_xi;
    }
    label B_wi:
    if (a[0]:ubyte & 32) goto B_e;
    fwritex(f + 624, s, a);
    label B_e:
    s = select_if(ba, z, ba > z);
    if (s >= 0) continue L_d;
  }
  label B_c:
  1060904[0]:int = 61;
  label B_b:
  r = -1;
  label B_a:
  stack_pointer = f + 880;
  return r;
}

function pop_arg(a:int, b:int, c:int_ptr) {
  br_table[B_b, B_s, B_r, B_o, B_q, B_p, B_n, B_m, B_l, B_k, B_j, B_i, B_h, B_g, B_f, B_e, B_d, B_c, ..B_a](
    b + -9)
  label B_s:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_r:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_q:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_p:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_o:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_n:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:short;
  return ;
  label B_m:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:ushort;
  return ;
  label B_l:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:byte;
  return ;
  label B_k:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:ubyte;
  return ;
  label B_j:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_i:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_h:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_g:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_f:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_e:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_d:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:double = b[0]:double;
  return ;
  label B_c:
  long_double_not_supported();
  unreachable;
  label B_b:
  c[0] = (b = c[0]) + 4;
  a[0]:int = b[0]:int;
  label B_a:
}

function pad(a:ubyte_ptr, b:int, c:int, d:int, e:int) {
  var f:int = stack_pointer - 256;
  stack_pointer = f;
  if (c <= d) goto B_a;
  if (e & 73728) goto B_a;
  c = memset(f, b, select_if(d = c - d, 256, e = d < 256));
  if (e) goto B_b;
  loop L_c {
    if (a[0] & 32) goto B_d;
    fwritex(c, 256, a);
    label B_d:
    d = d + -256;
    if (d > 255) continue L_c;
  }
  label B_b:
  if (a[0] & 32) goto B_a;
  fwritex(c, d, a);
  label B_a:
  stack_pointer = f + 256;
}

function long_double_not_supported() {
  fputs(1049145, 1059544);
  abort();
  unreachable;
}

function vsnprintf(a:int, b:int, c:int, d:int):int {
  var f:byte_ptr;
  var g:int;
  var e:int_ptr = stack_pointer - 128;
  stack_pointer = e;
  e[29] = (f = select_if(a, e + 126, b));
  a = -1;
  e[30] = select_if(0, g = b + -1, g > b);
  e = memset(e, 0, 112);
  e[16] = -1;
  e[8] = 282;
  e[17] = e + 116;
  e[10] = e + 127;
  if (b > -1) goto B_b;
  0[265226]:int = 61;
  goto B_a;
  label B_b:
  f[0] = 0;
  a = vfprintf(e, c, d);
  label B_a:
  stack_pointer = e + 128;
  return a;
}

function sn_write(a:int_ptr, b:int, c:int):int {
  var g:int;
  var h:int;
  var f:int;
  var d:{ a:int, b:int } = a[17];
  var e:byte_ptr = d.a;
  f = d.b;
  h = select_if(f, h = a[5] - (g = a[6]), f < h);
  if (eqz(h)) goto B_a;
  memcpy(e, g, h);
  d.a = (e = d.a + h);
  d.b = (f = d.b - h);
  label B_a:
  f = select_if(f, c, f < c);
  if (eqz(f)) goto B_b;
  memcpy(e, b, f);
  d.a = (e = d.a + f);
  d.b = d.b - f;
  label B_b:
  e[0] = 0;
  a[6] = (d = a[10]);
  a[5] = d;
  return c;
}

function memcmp(a:ubyte_ptr, b:ubyte_ptr, c:int):int {
  var f:int;
  var e:int;
  var d:int = 0;
  if (eqz(c)) goto B_a;
  loop L_c {
    e = a[0];
    if (e != (f = b[0])) goto B_b;
    b = b + 1;
    a = a + 1;
    c = c + -1;
    if (c) continue L_c;
    goto B_a;
  }
  label B_b:
  d = e - f;
  label B_a:
  return d;
}

function memcpy(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:int):int {
  var e:int;
  var d:int;
  var f:int;
  var g:int;
  if (c > 32) goto B_c;
  if (eqz(b & 3)) goto B_b;
  if (eqz(c)) goto B_b;
  a.a = b[0]:ubyte;
  d = c + -1;
  e = a + 1;
  f = b + 1;
  if (eqz(f & 3)) goto B_a;
  if (eqz(d)) goto B_a;
  a.b = b[1]:ubyte;
  d = c + -2;
  e = a + 2;
  f = b + 2;
  if (eqz(f & 3)) goto B_a;
  if (eqz(d)) goto B_a;
  a.c = b[2]:ubyte;
  d = c + -3;
  e = a + 3;
  f = b + 3;
  if (eqz(f & 3)) goto B_a;
  if (eqz(d)) goto B_a;
  a.d = b[3]:ubyte;
  d = c + -4;
  e = a + 4;
  f = b + 4;
  goto B_a;
  label B_c:
  memory_copy(a, b, c);
  return a;
  label B_b:
  d = c;
  e = a;
  f = b;
  label B_a:
  c = e & 3;
  if (c) goto B_e;
  if (d >= 16) goto B_g;
  c = d;
  goto B_f;
  label B_g:
  c = d + -16;
  if (c & 16) goto B_h;
  e[0]:long@4 = f[0]:long@4;
  e[2]:long@4 = f[2]:long@4;
  e = e + 16;
  f = f + 16;
  d = c;
  label B_h:
  if (c < 16) goto B_f;
  c = d;
  loop L_i {
    e[0]:long@4 = f[0]:long@4;
    e[2]:long@4 = f[2]:long@4;
    e[4]:long@4 = f[4]:long@4;
    e[6]:long@4 = f[6]:long@4;
    e = e + 32;
    f = f + 32;
    c = c + -32;
    if (c > 15) continue L_i;
  }
  label B_f:
  if (c < 8) goto B_j;
  e[0]:long@4 = f[0]:long@4;
  f = f + 8;
  e = e + 8;
  label B_j:
  if (eqz(c & 4)) goto B_k;
  e[0]:int = f[0]:int;
  f = f + 4;
  e = e + 4;
  label B_k:
  if (eqz(c & 2)) goto B_l;
  e[0]:short@1 = f[0]:ushort@1;
  e = e + 2;
  f = f + 2;
  label B_l:
  if (eqz(c & 1)) goto B_d;
  e[0]:byte = f[0]:ubyte;
  return a;
  label B_e:
  if (d < 32) goto B_q;
  br_table[B_p, B_s, B_r, ..B_d](c + -1)
  label B_s:
  e[0]:short@1 = f[0]:int;
  e[2@4]:int = (f + 2)[0]:int@2;
  e[6@4]:long@4 = (f + 6)[0]:long@2;
  c = e + 18;
  b = f + 18;
  g = 14;
  f = (f + 14)[0]:int@2;
  d = 14;
  goto B_o;
  label B_r:
  e[0]:byte = f[0]:int;
  e[1@4]:int = (f + 1)[0]:int@1;
  e[5@4]:long@4 = (f + 5)[0]:long@1;
  c = e + 17;
  b = f + 17;
  g = 13;
  f = (f + 13)[0]:int@1;
  d = 15;
  goto B_o;
  label B_q:
  if (d >= 16) goto B_u;
  c = e;
  b = f;
  goto B_t;
  label B_u:
  e[0]:byte = f[0]:ubyte;
  e[1]:int@1 = f[1]:int@1;
  e[5]:long@1 = f[5]:long@1;
  e[13]:short@1 = f[13]:ushort@1;
  e[15]:byte = f[15]:ubyte;
  c = e + 16;
  b = f + 16;
  label B_t:
  if (d & 8) goto B_n;
  goto B_m;
  label B_p:
  e[0]:byte = (c = f[0]:int);
  e[2]:byte = c >> 16;
  e[1]:byte = c >> 8;
  e[3@4]:int = (f + 3)[0]:int@1;
  e[7@4]:long@4 = (f + 7)[0]:long@1;
  c = e + 19;
  b = f + 19;
  g = 15;
  f = (f + 15)[0]:int@1;
  d = 13;
  label B_o:
  (e + g)[0]:int = f;
  label B_n:
  c[0]:long@1 = b[0]:long@1;
  c = c + 8;
  b = b + 8;
  label B_m:
  if (eqz(d & 4)) goto B_v;
  c[0]:int@1 = b[0]:int@1;
  c = c + 4;
  b = b + 4;
  label B_v:
  if (eqz(d & 2)) goto B_w;
  c[0]:short@1 = b[0]:ushort@1;
  c = c + 2;
  b = b + 2;
  label B_w:
  if (eqz(d & 1)) goto B_d;
  c[0]:byte = b[0]:ubyte;
  label B_d:
  return a;
}

function memmove(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:ubyte_ptr):int {
  var d:int;
  var f:int;
  var g:int;
  if (c >= 33) goto B_c;
  if (a == b) goto B_a;
  if (b - (d = a + c) > 0 - (c << 1)) goto B_b;
  label B_c:
  memory_copy(a, b, c);
  goto B_a;
  label B_b:
  var e:int = (b ^ a) & 3;
  if (a >= b) goto B_f;
  if (eqz(e)) goto B_g;
  f = c;
  d = a;
  goto B_d;
  label B_g:
  if (a & 3) goto B_h;
  f = c;
  d = a;
  goto B_e;
  label B_h:
  if (eqz(c)) goto B_a;
  a.a = b[0]:ubyte;
  f = c + -1;
  d = a + 1;
  if (d & 3) goto B_i;
  b = b + 1;
  goto B_e;
  label B_i:
  if (eqz(f)) goto B_a;
  a.b = b[1]:ubyte;
  f = c + -2;
  d = a + 2;
  if (d & 3) goto B_j;
  b = b + 2;
  goto B_e;
  label B_j:
  if (eqz(f)) goto B_a;
  a.c = b[2]:ubyte;
  f = c + -3;
  d = a + 3;
  if (d & 3) goto B_k;
  b = b + 3;
  goto B_e;
  label B_k:
  if (eqz(f)) goto B_a;
  a.d = b[3]:ubyte;
  d = a + 4;
  b = b + 4;
  f = c + -4;
  goto B_e;
  label B_f:
  if (e) goto B_l;
  if (eqz(d & 3)) goto B_m;
  if (eqz(c)) goto B_a;
  e = a + (d = c + -1);
  e[0]:byte = (b + d)[0]:ubyte;
  if (e & 3) goto B_n;
  c = d;
  goto B_m;
  label B_n:
  if (eqz(d)) goto B_a;
  e = a + (d = c + -2);
  e[0]:byte = (b + d)[0]:ubyte;
  if (e & 3) goto B_o;
  c = d;
  goto B_m;
  label B_o:
  if (eqz(d)) goto B_a;
  e = a + (d = c + -3);
  e[0]:byte = (b + d)[0]:ubyte;
  if (e & 3) goto B_p;
  c = d;
  goto B_m;
  label B_p:
  if (eqz(d)) goto B_a;
  (a + (c = c + -4))[0]:byte = (b + c)[0]:ubyte;
  label B_m:
  if (c < 4) goto B_l;
  g = c + -4;
  d = (g >> 2) + 1 & 3;
  if (eqz(d)) goto B_q;
  e = b + -4;
  f = a + -4;
  loop L_r {
    (f + c)[0]:int = (e + c)[0]:int;
    c = c + -4;
    d = d + -1;
    if (d) continue L_r;
  }
  label B_q:
  if (g < 12) goto B_l;
  f = b + -16;
  g = a + -16;
  loop L_s {
    d = g + c;
    (d + 12)[0]:int = ((e = f + c) + 12)[0]:int;
    (d + 8)[0]:int = (e + 8)[0]:int;
    (d + 4)[0]:int = (e + 4)[0]:int;
    d[0]:int = e[0]:int;
    c = c + -16;
    if (c > 3) continue L_s;
  }
  label B_l:
  if (eqz(c)) goto B_a;
  d = c;
  e = c & 3;
  if (eqz(e)) goto B_t;
  f = b + -1;
  g = a + -1;
  d = c;
  loop L_u {
    (g + d)[0]:byte = (f + d)[0]:ubyte;
    d = d + -1;
    e = e + -1;
    if (e) continue L_u;
  }
  label B_t:
  if (c < 4) goto B_a;
  e = b + -4;
  f = a + -4;
  loop L_v {
    b = f + d;
    (b + 3)[0]:byte = ((c = e + d) + 3)[0]:ubyte;
    (b + 2)[0]:byte = (c + 2)[0]:ubyte;
    (b + 1)[0]:byte = (c + 1)[0]:ubyte;
    b[0]:byte = c[0];
    d = d + -4;
    if (d) continue L_v;
    goto B_a;
  }
  label B_e:
  if (f < 4) goto B_d;
  e = f + -4;
  c = (e >> 2) + 1 & 7;
  if (eqz(c)) goto B_w;
  f = f - (c << 2);
  loop L_x {
    d[0]:int = b[0]:int;
    b = b + 4;
    d = d + 4;
    c = c + -1;
    if (c) continue L_x;
  }
  label B_w:
  if (e < 28) goto B_d;
  loop L_y {
    d[0]:int = b[0]:int;
    d[1]:int = b[1]:int;
    d[2]:int = b[2]:int;
    d[3]:int = b[3]:int;
    d[4]:int = b[4]:int;
    d[5]:int = b[5]:int;
    d[6]:int = b[6]:int;
    d[7]:int = b[7]:int;
    b = b + 32;
    d = d + 32;
    f = f + -32;
    if (f > 3) continue L_y;
  }
  label B_d:
  if (eqz(f)) goto B_a;
  c = f & 7;
  if (c) goto B_aa;
  e = f;
  goto B_z;
  label B_aa:
  e = f & -8;
  loop L_ba {
    d[0]:byte = b[0]:ubyte;
    d = d + 1;
    b = b + 1;
    c = c + -1;
    if (c) continue L_ba;
  }
  label B_z:
  if (f < 8) goto B_a;
  loop L_ca {
    d[0]:byte = b[0]:ubyte;
    d[1]:byte = b[1]:ubyte;
    d[2]:byte = b[2]:ubyte;
    d[3]:byte = b[3]:ubyte;
    d[4]:byte = b[4]:ubyte;
    d[5]:byte = b[5]:ubyte;
    d[6]:byte = b[6]:ubyte;
    d[7]:byte = b[7]:ubyte;
    d = d + 8;
    b = b + 8;
    e = e + -8;
    if (e) continue L_ca;
  }
  label B_a:
  return a;
}

function memset(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:{ a:long, b:long, c:long, d:long }):int {
  var e:int;
  if (c < 33) goto B_a;
  memory_fill(a, b, c);
  return a;
  label B_a:
  if (eqz(c)) goto B_b;
  a.a = b;
  var d:int = c + a;
  (d + -1)[0]:byte = b;
  if (c < 3) goto B_b;
  a.c = b;
  a.b = b;
  (d + -3)[0]:byte = b;
  (d + -2)[0]:byte = b;
  if (c < 7) goto B_b;
  a.d = b;
  (d + -4)[0]:byte = b;
  if (c < 9) goto B_b;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int } = 
    a + (e = 0 - a & 3);
  f.a = (d = (b & 255) * 16843009);
  c = f + (b = c - e & -4);
  (c + -4)[0]:int = d;
  if (b < 9) goto B_b;
  f.c = d;
  f.b = d;
  (c + -8)[0]:int = d;
  (c + -12)[0]:int = d;
  if (b < 25) goto B_b;
  f.g = d;
  f.f = d;
  f.e = d;
  f.d = d;
  (c + -16)[0]:int = d;
  (c + -20)[0]:int = d;
  (c + -24)[0]:int = d;
  (c + -28)[0]:int = d;
  b = b - (c = (f & 4) | 24);
  if (b < 32) goto B_b;
  var g:long = i64_extend_i32_u(d) * 4294967297L;
  c = f + c;
  loop L_c {
    c.d = g;
    c.c = g;
    c.b = g;
    c.a = g;
    c = c + 32;
    b = b + -32;
    if (b > 31) continue L_c;
  }
  label B_b:
  return a;
}

function strlen(a:ubyte_ptr):int {
  var d:int;
  var b:ubyte_ptr = a;
  if (eqz(a & 3)) goto B_b;
  if (a[0]) goto B_c;
  return a - a;
  label B_c:
  b = a + 1;
  if (eqz(b & 3)) goto B_b;
  if (eqz(b[0])) goto B_a;
  b = a + 2;
  if (eqz(b & 3)) goto B_b;
  if (eqz(b[0])) goto B_a;
  b = a + 3;
  if (eqz(b & 3)) goto B_b;
  if (eqz(b[0])) goto B_a;
  b = a + 4;
  if (b & 3) goto B_a;
  label B_b:
  var c:int = b + -4;
  b = b + -5;
  loop L_d {
    b = b + 4;
    c = c + 4;
    d = c[0]:int;
    if (eqz(((d ^ -1) & d + -16843009) & -2139062144)) continue L_d;
  }
  loop L_e {
    b = b + 1;
    d = c[0]:ubyte;
    c = c + 1;
    if (d) continue L_e;
  }
  label B_a:
  return b - a;
}

function memchr(a:ubyte_ptr, b:int, c:int):int {
  var f:int;
  var e:int;
  var d:int = c != 0;
  if (eqz(a & 3)) goto B_d;
  if (eqz(c)) goto B_d;
  if (a[0] != (b & 255)) goto B_e;
  e = a;
  f = c;
  goto B_b;
  label B_e:
  f = c + -1;
  d = f != 0;
  e = a + 1;
  if (eqz(e & 3)) goto B_c;
  if (eqz(f)) goto B_c;
  if (e[0]:ubyte == (b & 255)) goto B_b;
  f = c + -2;
  d = f != 0;
  e = a + 2;
  if (eqz(e & 3)) goto B_c;
  if (eqz(f)) goto B_c;
  if (e[0]:ubyte == (b & 255)) goto B_b;
  f = c + -3;
  d = f != 0;
  e = a + 3;
  if (eqz(e & 3)) goto B_c;
  if (eqz(f)) goto B_c;
  if (e[0]:ubyte == (b & 255)) goto B_b;
  e = a + 4;
  f = c + -4;
  d = f != 0;
  goto B_c;
  label B_d:
  f = c;
  e = a;
  label B_c:
  if (eqz(d)) goto B_a;
  if (e[0]:ubyte == (b & 255)) goto B_f;
  if (f < 4) goto B_f;
  a = (b & 255) * 16843009;
  loop L_g {
    c = e[0]:int ^ a;
    if (((c ^ -1) & c + -16843009) & -2139062144) goto B_b;
    e = e + 4;
    f = f + -4;
    if (f > 3) continue L_g;
  }
  label B_f:
  if (eqz(f)) goto B_a;
  label B_b:
  c = b & 255;
  loop L_h {
    if (e[0]:ubyte != c) goto B_i;
    return e;
    label B_i:
    e = e + 1;
    f = f + -1;
    if (f) continue L_h;
  }
  label B_a:
  return 0;
}

function strnlen(a:int, b:int):int {
  var c:int = memchr(a, 0, b);
  return select_if(c - a, b, c);
}

